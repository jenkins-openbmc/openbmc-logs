<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170517 20:04:39.429">
<suite id="s1" name="Tests" source="/tmp/fspcibld/13665/obmc-robot/tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170517 20:04:39.999" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170517 20:04:39.998" endtime="20170517 20:04:39.999"></status>
</kw>
<msg timestamp="20170517 20:04:39.999" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170517 20:04:39.998" endtime="20170517 20:04:39.999"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:40.000" endtime="20170517 20:04:40.000"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:39.999" endtime="20170517 20:04:40.000"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170517 20:04:40.001" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170517 20:04:40.001" endtime="20170517 20:04:40.001"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170517 20:04:40.002" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170517 20:04:40.002" endtime="20170517 20:04:40.002"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170517 20:04:40.002" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170517 20:04:40.002" endtime="20170517 20:04:40.002"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170517 20:04:40.003" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170517 20:04:40.003" endtime="20170517 20:04:40.003"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:40.001" endtime="20170517 20:04:40.003"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:40.000" endtime="20170517 20:04:40.003"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170517 20:04:40.004" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170517 20:04:40.004" endtime="20170517 20:04:40.004"></status>
</kw>
<msg timestamp="20170517 20:04:40.004" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170517 20:04:40.004" endtime="20170517 20:04:40.004"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:40.006" endtime="20170517 20:04:40.006"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:40.006" endtime="20170517 20:04:40.007"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:40.005" endtime="20170517 20:04:40.007"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:40.005" endtime="20170517 20:04:40.007"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170517 20:04:40.007" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170517 20:04:42.425" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170517 20:04:40.007" endtime="20170517 20:04:42.425"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:39.997" endtime="20170517 20:04:42.425"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:04:42.427" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170517 20:04:42.494" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:04:42.494" level="INFO">${output} = VERSION_ID="v1.99.5-39-g7507177"</msg>
<msg timestamp="20170517 20:04:42.495" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:04:42.427" endtime="20170517 20:04:42.495"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:04:42.495" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:04:42.495" endtime="20170517 20:04:42.495"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170517 20:04:42.496" level="INFO">VERSION_ID="v1.99.5-39-g7507177"</msg>
<status status="PASS" starttime="20170517 20:04:42.495" endtime="20170517 20:04:42.496"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:42.426" endtime="20170517 20:04:42.496"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:42.426" endtime="20170517 20:04:42.496"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:04:42.497" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170517 20:04:42.632" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:04:42.633" level="INFO">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg timestamp="20170517 20:04:42.633" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:04:42.497" endtime="20170517 20:04:42.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:04:42.633" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:04:42.633" endtime="20170517 20:04:42.633"></status>
</kw>
<msg timestamp="20170517 20:04:42.634" level="INFO">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status status="PASS" starttime="20170517 20:04:42.497" endtime="20170517 20:04:42.634"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg timestamp="20170517 20:04:42.634" level="INFO">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status status="PASS" starttime="20170517 20:04:42.634" endtime="20170517 20:04:42.635"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:42.496" endtime="20170517 20:04:42.635"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:42.496" endtime="20170517 20:04:42.635"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170517 20:04:42.638" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170517 20:04:42.638" endtime="20170517 20:04:42.638"></status>
</kw>
<msg timestamp="20170517 20:04:42.638" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170517 20:04:42.637" endtime="20170517 20:04:42.638"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:42.639" endtime="20170517 20:04:42.639"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:42.638" endtime="20170517 20:04:42.639"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170517 20:04:42.641" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170517 20:04:42.640" endtime="20170517 20:04:42.641"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170517 20:04:42.641" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170517 20:04:42.641" endtime="20170517 20:04:42.641"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170517 20:04:42.642" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170517 20:04:42.641" endtime="20170517 20:04:42.642"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170517 20:04:42.642" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170517 20:04:42.642" endtime="20170517 20:04:42.642"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:42.640" endtime="20170517 20:04:42.643"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:42.639" endtime="20170517 20:04:42.643"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170517 20:04:42.644" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170517 20:04:42.643" endtime="20170517 20:04:42.644"></status>
</kw>
<msg timestamp="20170517 20:04:42.644" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170517 20:04:42.643" endtime="20170517 20:04:42.644"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:42.645" endtime="20170517 20:04:42.645"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:42.646" endtime="20170517 20:04:42.646"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:42.645" endtime="20170517 20:04:42.646"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:42.644" endtime="20170517 20:04:42.646"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170517 20:04:42.647" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170517 20:04:44.309" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170517 20:04:42.646" endtime="20170517 20:04:44.309"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:42.637" endtime="20170517 20:04:44.310"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:04:44.310" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170517 20:04:44.377" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:04:44.377" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170517 20:04:44.377" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:04:44.310" endtime="20170517 20:04:44.377"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:04:44.378" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:04:44.377" endtime="20170517 20:04:44.378"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170517 20:04:44.378" level="INFO">Length is 11</msg>
<status status="PASS" starttime="20170517 20:04:44.378" endtime="20170517 20:04:44.378"></status>
</kw>
<msg timestamp="20170517 20:04:44.378" level="INFO">${bmc_model} = Witherspoon</msg>
<status status="PASS" starttime="20170517 20:04:42.636" endtime="20170517 20:04:44.378"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170517 20:04:44.379" level="INFO">BMC Model=Witherspoon</msg>
<status status="PASS" starttime="20170517 20:04:44.379" endtime="20170517 20:04:44.379"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:42.636" endtime="20170517 20:04:44.379"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:42.636" endtime="20170517 20:04:44.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170517 20:04:44.381" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170517 20:04:44.381" endtime="20170517 20:04:44.381"></status>
</kw>
<msg timestamp="20170517 20:04:44.381" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170517 20:04:44.380" endtime="20170517 20:04:44.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:44.382" endtime="20170517 20:04:44.382"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:44.381" endtime="20170517 20:04:44.382"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170517 20:04:44.384" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170517 20:04:44.383" endtime="20170517 20:04:44.384"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170517 20:04:44.385" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170517 20:04:44.384" endtime="20170517 20:04:44.385"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170517 20:04:44.385" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170517 20:04:44.385" endtime="20170517 20:04:44.385"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170517 20:04:44.386" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170517 20:04:44.385" endtime="20170517 20:04:44.386"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:44.383" endtime="20170517 20:04:44.386"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:44.383" endtime="20170517 20:04:44.386"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170517 20:04:44.387" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170517 20:04:44.387" endtime="20170517 20:04:44.387"></status>
</kw>
<msg timestamp="20170517 20:04:44.387" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170517 20:04:44.386" endtime="20170517 20:04:44.387"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:44.388" endtime="20170517 20:04:44.389"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:44.389" endtime="20170517 20:04:44.389"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:44.388" endtime="20170517 20:04:44.389"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:44.387" endtime="20170517 20:04:44.389"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170517 20:04:44.390" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170517 20:04:46.038" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170517 20:04:44.390" endtime="20170517 20:04:46.038"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:44.380" endtime="20170517 20:04:46.038"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:04:46.039" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170517 20:04:46.146" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:04:46.146" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170517 20:04:46.146" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:04:46.039" endtime="20170517 20:04:46.146"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:04:46.147" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:04:46.147" endtime="20170517 20:04:46.147"></status>
</kw>
<msg timestamp="20170517 20:04:46.147" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" starttime="20170517 20:04:46.038" endtime="20170517 20:04:46.147"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.147" endtime="20170517 20:04:46.148"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:44.380" endtime="20170517 20:04:46.148"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:44.379" endtime="20170517 20:04:46.148"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.148" endtime="20170517 20:04:46.148"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:39.997" endtime="20170517 20:04:46.149"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/13665/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/13665/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:04:46.229" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:04:46.228" endtime="20170517 20:04:46.229"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:04:46.230" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:04:46.230" endtime="20170517 20:04:46.230"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:04:46.231" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:04:46.230" endtime="20170517 20:04:46.231"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:04:46.231" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:04:46.231" endtime="20170517 20:04:46.231"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:04:46.426" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:04:46.232" endtime="20170517 20:04:46.427"></status>
</kw>
<msg timestamp="20170517 20:04:46.427" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:04:46.427" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:04:46.232" endtime="20170517 20:04:46.427"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:04:46.427" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:04:46.427" endtime="20170517 20:04:46.428"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:04:46.428" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:04:46.428" endtime="20170517 20:04:46.428"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.228" endtime="20170517 20:04:46.428"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.228" endtime="20170517 20:04:46.428"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.227" endtime="20170517 20:04:46.429"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:04:46.433" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:04:46.433" endtime="20170517 20:04:46.434"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:04:46.435" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:04:46.434" endtime="20170517 20:04:46.435"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:04:46.435" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:04:46.435" endtime="20170517 20:04:46.435"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:04:46.436" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:04:46.435" endtime="20170517 20:04:46.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:04:46.639" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:04:46.436" endtime="20170517 20:04:46.640"></status>
</kw>
<msg timestamp="20170517 20:04:46.640" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:04:46.640" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:04:46.436" endtime="20170517 20:04:46.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:04:46.640" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:04:46.640" endtime="20170517 20:04:46.641"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:04:46.641" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:04:46.641" endtime="20170517 20:04:46.641"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.432" endtime="20170517 20:04:46.641"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.432" endtime="20170517 20:04:46.641"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.431" endtime="20170517 20:04:46.642"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:04:46.642" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170517 20:04:46.642" endtime="20170517 20:04:46.642"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:04:46.644" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:04:46.643" endtime="20170517 20:04:46.644"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:04:46.646" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:04:46.645" endtime="20170517 20:04:46.646"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.645" endtime="20170517 20:04:46.646"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.643" endtime="20170517 20:04:46.646"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.642" endtime="20170517 20:04:46.646"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:04:46.712" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170517 20:04:46.713" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:04:46.646" endtime="20170517 20:04:46.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:04:46.714" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:04:46.714" endtime="20170517 20:04:46.714"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:04:46.716" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:04:46.715" endtime="20170517 20:04:46.716"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.715" endtime="20170517 20:04:46.716"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.713" endtime="20170517 20:04:46.716"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.713" endtime="20170517 20:04:46.716"></status>
</kw>
<msg timestamp="20170517 20:04:46.716" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:04:46.431" endtime="20170517 20:04:46.716"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:04:46.717" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:04:46.716" endtime="20170517 20:04:46.717"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:04:46.717" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:04:46.717" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:04:46.717" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20170517 20:04:46.717" endtime="20170517 20:04:46.718"></status>
</kw>
<msg timestamp="20170517 20:04:46.718" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170517 20:04:46.430" endtime="20170517 20:04:46.718"></status>
</kw>
<msg timestamp="20170517 20:04:46.718" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170517 20:04:46.430" endtime="20170517 20:04:46.718"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170517 20:04:46.719" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170517 20:04:46.719" endtime="20170517 20:04:46.719"></status>
</kw>
<msg timestamp="20170517 20:04:46.719" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170517 20:04:46.718" endtime="20170517 20:04:46.719"></status>
</kw>
<msg timestamp="20170517 20:04:46.720" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170517 20:04:46.429" endtime="20170517 20:04:46.720"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.720" endtime="20170517 20:04:46.720"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.720" endtime="20170517 20:04:46.721"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170517 20:04:46.729" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170517 20:04:46.721" endtime="20170517 20:04:46.729"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170517 20:04:46.737" level="INFO">${FFDC_DIR_PATH} = </msg>
<status status="PASS" starttime="20170517 20:04:46.729" endtime="20170517 20:04:46.737"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170517 20:04:46.746" level="INFO">${cur_time} = 2017-05-17 20:04:46:745346</msg>
<status status="PASS" starttime="20170517 20:04:46.745" endtime="20170517 20:04:46.746"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170517 20:04:46.746" level="INFO">${cur_time} = 20170517200446745346</msg>
<status status="PASS" starttime="20170517 20:04:46.746" endtime="20170517 20:04:46.746"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.745" endtime="20170517 20:04:46.747"></status>
</kw>
<msg timestamp="20170517 20:04:46.750" level="INFO">${FFDC_TIME} = 20170517200446745346</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170517 20:04:46.752" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170517 20:04:46.752" endtime="20170517 20:04:46.752"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170517 20:04:46.752" level="INFO">${suite_name} = 20170517200446745346_TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170517 20:04:46.752" endtime="20170517 20:04:46.752"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170517 20:04:46.753" level="INFO">${test_name} = TestSSLConnection</msg>
<status status="PASS" starttime="20170517 20:04:46.753" endtime="20170517 20:04:46.753"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170517 20:04:46.754" level="INFO">${test_name} = 20170517200446745346_TestSSLConnection</msg>
<status status="PASS" starttime="20170517 20:04:46.753" endtime="20170517 20:04:46.754"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.751" endtime="20170517 20:04:46.754"></status>
</kw>
<msg timestamp="20170517 20:04:46.754" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200446745346_TestsSecurityTestSsl/20170517200446745346_TestSSLConnection/</msg>
<msg timestamp="20170517 20:04:46.758" level="INFO">${FFDC_PREFIX} = 20170517200446745346_</msg>
<status status="PASS" starttime="20170517 20:04:46.738" endtime="20170517 20:04:46.759"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.737" endtime="20170517 20:04:46.759"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.759" endtime="20170517 20:04:46.760"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170517 20:04:46.760" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs"&gt;/tmp/fspcibld/13665/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:04:46.760" endtime="20170517 20:04:46.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170517 20:04:46.762" level="FAIL">File '/tmp/fspcibld/13665/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" starttime="20170517 20:04:46.761" endtime="20170517 20:04:46.762"></status>
</kw>
<msg timestamp="20170517 20:04:46.762" level="INFO">${exist} = False</msg>
<status status="PASS" starttime="20170517 20:04:46.761" endtime="20170517 20:04:46.762"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170517 20:04:46.763" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:04:46.763" endtime="20170517 20:04:46.763"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.762" endtime="20170517 20:04:46.763"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.763" endtime="20170517 20:04:46.764"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170517 20:04:46.765" level="INFO">${cur_time} = 2017-05-17 20:04:46:764734</msg>
<status status="PASS" starttime="20170517 20:04:46.765" endtime="20170517 20:04:46.765"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170517 20:04:46.765" level="INFO">${cur_time} = 20170517200446764734</msg>
<status status="PASS" starttime="20170517 20:04:46.765" endtime="20170517 20:04:46.765"></status>
</kw>
<msg timestamp="20170517 20:04:46.766" level="INFO">${cur_time} = 20170517200446764734</msg>
<status status="PASS" starttime="20170517 20:04:46.764" endtime="20170517 20:04:46.766"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170517 20:04:46.767" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:04:46.766" endtime="20170517 20:04:46.767"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.721" endtime="20170517 20:04:46.767"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.429" endtime="20170517 20:04:46.767"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" starttime="20170517 20:04:46.226" endtime="20170517 20:04:46.767" critical="yes"></status>
</test>
<kw type="teardown" library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170517 20:04:46.768" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170517 20:04:46.768" endtime="20170517 20:04:46.768"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" starttime="20170517 20:04:46.151" endtime="20170517 20:04:46.768"></status>
</suite>
<status status="PASS" starttime="20170517 20:04:46.149" endtime="20170517 20:04:46.769"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/13665/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" library="utils" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170517 20:04:46.806" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:04:46.806" endtime="20170517 20:04:46.806"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170517 20:04:46.807" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:04:46.807" endtime="20170517 20:04:46.807"></status>
</kw>
<msg timestamp="20170517 20:04:46.807" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:04:46.806" endtime="20170517 20:04:46.807"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170517 20:04:46.809" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:04:46.808" endtime="20170517 20:04:46.809"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170517 20:04:46.809" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:04:46.809" endtime="20170517 20:04:46.809"></status>
</kw>
<msg timestamp="20170517 20:04:46.810" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:04:46.808" endtime="20170517 20:04:46.810"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:04:46.810" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170517 20:04:46.810" endtime="20170517 20:04:46.811"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.811" endtime="20170517 20:04:46.818"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:04:46.823" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:04:46.826" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:04:46.826" level="INFO">${output} = /tmp/fspcibld/13665/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170517 20:04:46.819" endtime="20170517 20:04:46.827"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.828" endtime="20170517 20:04:46.838"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.838" endtime="20170517 20:04:46.839"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:04:46.840" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170517 20:04:46.839" endtime="20170517 20:04:46.840"></status>
</kw>
<msg timestamp="20170517 20:04:46.840" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170517 20:04:46.810" endtime="20170517 20:04:46.840"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:04:46.841" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170517 20:04:46.841" endtime="20170517 20:04:46.841"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.841" endtime="20170517 20:04:46.848"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170517 20:04:46.852" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:04:46.865" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:04:46.865" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20170517 20:04:46.849" endtime="20170517 20:04:46.866"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.867" endtime="20170517 20:04:46.877"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:04:46.877" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20170517 20:04:46.877" endtime="20170517 20:04:46.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.878" endtime="20170517 20:04:46.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:04:46.879" level="INFO">${rc} = None</msg>
<msg timestamp="20170517 20:04:46.879" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20170517 20:04:46.879" endtime="20170517 20:04:46.879"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.880" endtime="20170517 20:04:46.880"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:04:46.881" level="INFO">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170517 20:04:46.881" endtime="20170517 20:04:46.881"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.881" endtime="20170517 20:04:46.889"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:04:46.892" level="INFO">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:04:46.896" level="INFO">${rc} = 1</msg>
<msg timestamp="20170517 20:04:46.896" level="INFO">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status status="PASS" starttime="20170517 20:04:46.889" endtime="20170517 20:04:46.896"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.898" endtime="20170517 20:04:46.906"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.906" endtime="20170517 20:04:46.906"></status>
</kw>
<msg timestamp="20170517 20:04:46.907" level="INFO">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status status="PASS" starttime="20170517 20:04:46.808" endtime="20170517 20:04:46.907"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170517 20:04:46.907" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:04:46.907" endtime="20170517 20:04:46.908"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:04:46.908" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170517 20:04:46.908" endtime="20170517 20:04:46.908"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.909" endtime="20170517 20:04:46.916"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:04:46.919" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:04:46.923" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:04:46.923" level="INFO">${output} = /tmp/fspcibld/13665/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170517 20:04:46.916" endtime="20170517 20:04:46.923"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.925" endtime="20170517 20:04:46.933"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.933" endtime="20170517 20:04:46.933"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:04:46.934" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170517 20:04:46.934" endtime="20170517 20:04:46.934"></status>
</kw>
<msg timestamp="20170517 20:04:46.934" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170517 20:04:46.908" endtime="20170517 20:04:46.934"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:04:46.935" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" starttime="20170517 20:04:46.935" endtime="20170517 20:04:46.935"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.935" endtime="20170517 20:04:46.944"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:04:46.948" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170517 20:04:46.953" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:04:46.953" level="INFO">${output} = </msg>
<status status="PASS" starttime="20170517 20:04:46.945" endtime="20170517 20:04:46.953"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:46.955" endtime="20170517 20:04:46.955"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.805" endtime="20170517 20:04:46.956"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170517 20:04:46.956" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170517 20:04:46.958" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20170517 20:04:46.958" endtime="20170517 20:04:46.958"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:04:46.959" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170517 20:04:46.959" endtime="20170517 20:04:46.960"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:04:46.962" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:04:46.962" endtime="20170517 20:04:46.963"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:04:46.964" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:04:46.964" endtime="20170517 20:04:46.964"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:04:46.965" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:04:46.964" endtime="20170517 20:04:46.965"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:04:46.965" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:04:46.965" endtime="20170517 20:04:46.965"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:04:47.442" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:04:46.966" endtime="20170517 20:04:47.442"></status>
</kw>
<msg timestamp="20170517 20:04:47.442" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:04:47.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:04:46.966" endtime="20170517 20:04:47.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:04:47.443" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:04:47.443" endtime="20170517 20:04:47.443"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:04:47.444" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:04:47.444" endtime="20170517 20:04:47.444"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.961" endtime="20170517 20:04:47.445"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.961" endtime="20170517 20:04:47.445"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.960" endtime="20170517 20:04:47.445"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:04:47.446" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170517 20:04:47.445" endtime="20170517 20:04:47.446"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:04:47.446" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:04:47.446" endtime="20170517 20:04:47.447"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:47.447" endtime="20170517 20:04:47.447"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:04:47.449" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status status="PASS" starttime="20170517 20:04:47.448" endtime="20170517 20:04:47.449"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:04:47.451" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170517 20:04:47.450" endtime="20170517 20:04:47.451"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:47.450" endtime="20170517 20:04:47.451"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:47.447" endtime="20170517 20:04:47.451"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:04:48.729" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170517 20:04:48.730" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:04:47.451" endtime="20170517 20:04:48.730"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:04:48.731" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:04:48.730" endtime="20170517 20:04:48.731"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:04:48.732" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:04:48.732" endtime="20170517 20:04:48.732"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:48.731" endtime="20170517 20:04:48.732"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:48.730" endtime="20170517 20:04:48.732"></status>
</kw>
<msg timestamp="20170517 20:04:48.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:04:46.960" endtime="20170517 20:04:48.732"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:04:48.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:04:48.733" endtime="20170517 20:04:48.733"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170517 20:04:48.734" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:04:48.734" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:04:48.734" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status status="PASS" starttime="20170517 20:04:48.733" endtime="20170517 20:04:48.734"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.958" endtime="20170517 20:04:48.734"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170517 20:04:48.734" endtime="20170517 20:04:48.735"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:04:48.739" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:04:48.739" endtime="20170517 20:04:48.740"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:04:48.740" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:04:48.740" endtime="20170517 20:04:48.740"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:04:48.741" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:04:48.740" endtime="20170517 20:04:48.741"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:04:48.741" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:04:48.741" endtime="20170517 20:04:48.742"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:04:49.884" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:04:48.742" endtime="20170517 20:04:49.884"></status>
</kw>
<msg timestamp="20170517 20:04:49.884" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:04:49.884" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:04:48.742" endtime="20170517 20:04:49.884"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:04:49.885" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:04:49.884" endtime="20170517 20:04:49.885"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:04:49.886" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:04:49.885" endtime="20170517 20:04:49.886"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:48.738" endtime="20170517 20:04:49.886"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:48.738" endtime="20170517 20:04:49.886"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:48.737" endtime="20170517 20:04:49.886"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:04:49.887" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170517 20:04:49.886" endtime="20170517 20:04:49.887"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:04:49.890" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:04:49.889" endtime="20170517 20:04:49.890"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:04:49.891" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:04:49.891" endtime="20170517 20:04:49.891"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:49.890" endtime="20170517 20:04:49.891"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:49.888" endtime="20170517 20:04:49.892"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:49.887" endtime="20170517 20:04:49.892"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:04:50.062" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170517 20:04:50.062" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:04:49.892" endtime="20170517 20:04:50.062"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:04:50.064" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:04:50.064" endtime="20170517 20:04:50.064"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:04:50.065" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:04:50.065" endtime="20170517 20:04:50.065"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:50.064" endtime="20170517 20:04:50.065"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:50.063" endtime="20170517 20:04:50.065"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:50.062" endtime="20170517 20:04:50.065"></status>
</kw>
<msg timestamp="20170517 20:04:50.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:04:48.737" endtime="20170517 20:04:50.066"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:04:50.066" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:04:50.066" endtime="20170517 20:04:50.066"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:04:50.067" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:04:50.067" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:04:50.067" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20170517 20:04:50.067" endtime="20170517 20:04:50.067"></status>
</kw>
<msg timestamp="20170517 20:04:50.067" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170517 20:04:48.736" endtime="20170517 20:04:50.067"></status>
</kw>
<msg timestamp="20170517 20:04:50.068" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170517 20:04:48.736" endtime="20170517 20:04:50.068"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170517 20:04:50.068" level="FAIL">Off != Running</msg>
<status status="FAIL" starttime="20170517 20:04:50.068" endtime="20170517 20:04:50.068"></status>
</kw>
<status status="FAIL" starttime="20170517 20:04:48.735" endtime="20170517 20:04:50.069"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:05:00.074" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:05:00.073" endtime="20170517 20:05:00.074"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:05:00.075" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:05:00.074" endtime="20170517 20:05:00.075"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:05:00.075" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:05:00.075" endtime="20170517 20:05:00.075"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:05:00.076" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:05:00.076" endtime="20170517 20:05:00.076"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:05:00.267" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:05:00.077" endtime="20170517 20:05:00.267"></status>
</kw>
<msg timestamp="20170517 20:05:00.267" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:05:00.268" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.076" endtime="20170517 20:05:00.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:05:00.268" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.268" endtime="20170517 20:05:00.269"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:00.269" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.269" endtime="20170517 20:05:00.270"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.073" endtime="20170517 20:05:00.270"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.072" endtime="20170517 20:05:00.270"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.072" endtime="20170517 20:05:00.270"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:05:00.271" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170517 20:05:00.270" endtime="20170517 20:05:00.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:00.274" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:00.273" endtime="20170517 20:05:00.274"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:00.275" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:00.275" endtime="20170517 20:05:00.275"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.274" endtime="20170517 20:05:00.275"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.272" endtime="20170517 20:05:00.275"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.271" endtime="20170517 20:05:00.275"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:05:00.339" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170517 20:05:00.339" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.276" endtime="20170517 20:05:00.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:00.341" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:00.340" endtime="20170517 20:05:00.341"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:00.342" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:00.341" endtime="20170517 20:05:00.342"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.341" endtime="20170517 20:05:00.342"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.340" endtime="20170517 20:05:00.342"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.339" endtime="20170517 20:05:00.342"></status>
</kw>
<msg timestamp="20170517 20:05:00.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.071" endtime="20170517 20:05:00.342"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:00.343" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.342" endtime="20170517 20:05:00.343"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:05:00.343" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:05:00.343" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:05:00.344" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" starttime="20170517 20:05:00.343" endtime="20170517 20:05:00.344"></status>
</kw>
<msg timestamp="20170517 20:05:00.344" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170517 20:05:00.070" endtime="20170517 20:05:00.344"></status>
</kw>
<msg timestamp="20170517 20:05:00.344" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170517 20:05:00.070" endtime="20170517 20:05:00.344"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:05:00.345" endtime="20170517 20:05:00.345"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.069" endtime="20170517 20:05:00.345"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:48.735" endtime="20170517 20:05:00.345"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.957" endtime="20170517 20:05:00.345"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw library="utils" name="Is OS Off">
<doc>Check if boot progress is "Off".</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:05:00.350" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:05:00.349" endtime="20170517 20:05:00.350"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:05:00.351" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:05:00.350" endtime="20170517 20:05:00.351"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:05:00.351" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:05:00.351" endtime="20170517 20:05:00.351"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:05:00.352" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:05:00.352" endtime="20170517 20:05:00.352"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:05:00.545" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:05:00.353" endtime="20170517 20:05:00.545"></status>
</kw>
<msg timestamp="20170517 20:05:00.545" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:05:00.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.352" endtime="20170517 20:05:00.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:05:00.546" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.545" endtime="20170517 20:05:00.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:00.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.546" endtime="20170517 20:05:00.547"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.349" endtime="20170517 20:05:00.547"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.348" endtime="20170517 20:05:00.547"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.348" endtime="20170517 20:05:00.547"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:05:00.547" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:05:00.547" endtime="20170517 20:05:00.547"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:00.549" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:00.549" endtime="20170517 20:05:00.550"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:00.550" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:00.550" endtime="20170517 20:05:00.551"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.550" endtime="20170517 20:05:00.551"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.548" endtime="20170517 20:05:00.551"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.548" endtime="20170517 20:05:00.551"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:05:00.619" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:05:00.620" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.551" endtime="20170517 20:05:00.620"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:00.621" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:00.621" endtime="20170517 20:05:00.621"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:00.622" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:00.622" endtime="20170517 20:05:00.622"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.621" endtime="20170517 20:05:00.622"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.620" endtime="20170517 20:05:00.622"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.620" endtime="20170517 20:05:00.623"></status>
</kw>
<msg timestamp="20170517 20:05:00.623" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.347" endtime="20170517 20:05:00.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:00.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.623" endtime="20170517 20:05:00.623"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:05:00.624" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:05:00.624" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:05:00.624" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status status="PASS" starttime="20170517 20:05:00.624" endtime="20170517 20:05:00.624"></status>
</kw>
<msg timestamp="20170517 20:05:00.625" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170517 20:05:00.346" endtime="20170517 20:05:00.625"></status>
</kw>
<msg timestamp="20170517 20:05:00.625" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170517 20:05:00.346" endtime="20170517 20:05:00.625"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status status="PASS" starttime="20170517 20:05:00.625" endtime="20170517 20:05:00.625"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.346" endtime="20170517 20:05:00.625"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.345" endtime="20170517 20:05:00.625"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170517 20:05:00.626" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" starttime="20170517 20:05:00.626" endtime="20170517 20:05:00.627"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:05:00.628" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170517 20:05:00.628" endtime="20170517 20:05:00.628"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:05:00.630" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:05:00.630" endtime="20170517 20:05:00.631"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:05:00.631" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:05:00.631" endtime="20170517 20:05:00.632"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:05:00.632" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:05:00.632" endtime="20170517 20:05:00.632"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:05:00.633" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:05:00.632" endtime="20170517 20:05:00.633"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:05:00.832" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:05:00.633" endtime="20170517 20:05:00.832"></status>
</kw>
<msg timestamp="20170517 20:05:00.832" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:05:00.832" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.633" endtime="20170517 20:05:00.832"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:05:00.833" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.832" endtime="20170517 20:05:00.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:00.833" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.833" endtime="20170517 20:05:00.833"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.630" endtime="20170517 20:05:00.834"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.629" endtime="20170517 20:05:00.834"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.629" endtime="20170517 20:05:00.834"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:05:00.834" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170517 20:05:00.834" endtime="20170517 20:05:00.834"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:05:00.835" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:05:00.835" endtime="20170517 20:05:00.835"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:05:00.835" endtime="20170517 20:05:00.836"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:00.837" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status status="PASS" starttime="20170517 20:05:00.836" endtime="20170517 20:05:00.837"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:00.838" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170517 20:05:00.838" endtime="20170517 20:05:00.838"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.837" endtime="20170517 20:05:00.838"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.836" endtime="20170517 20:05:00.839"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:05:01.046" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170517 20:05:01.046" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.839" endtime="20170517 20:05:01.046"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:01.048" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:01.047" endtime="20170517 20:05:01.048"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:01.049" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:01.049" endtime="20170517 20:05:01.049"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:01.048" endtime="20170517 20:05:01.049"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:01.046" endtime="20170517 20:05:01.049"></status>
</kw>
<msg timestamp="20170517 20:05:01.049" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:00.628" endtime="20170517 20:05:01.050"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:01.050" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:01.050" endtime="20170517 20:05:01.050"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170517 20:05:01.051" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:05:01.051" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:05:01.051" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status status="PASS" starttime="20170517 20:05:01.050" endtime="20170517 20:05:01.051"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.627" endtime="20170517 20:05:01.051"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170517 20:05:01.051" endtime="20170517 20:05:01.052"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:05:01.056" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:05:01.056" endtime="20170517 20:05:01.056"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:05:01.057" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:05:01.057" endtime="20170517 20:05:01.057"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:05:01.060" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:05:01.057" endtime="20170517 20:05:01.060"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:05:01.061" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:05:01.060" endtime="20170517 20:05:01.061"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:05:01.726" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:05:01.061" endtime="20170517 20:05:01.726"></status>
</kw>
<msg timestamp="20170517 20:05:01.726" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:05:01.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:01.061" endtime="20170517 20:05:01.726"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:05:01.727" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:01.726" endtime="20170517 20:05:01.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:01.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:01.727" endtime="20170517 20:05:01.727"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:01.055" endtime="20170517 20:05:01.727"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:01.055" endtime="20170517 20:05:01.728"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:01.054" endtime="20170517 20:05:01.728"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:05:01.728" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170517 20:05:01.728" endtime="20170517 20:05:01.728"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:01.730" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:01.730" endtime="20170517 20:05:01.730"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:01.731" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:01.731" endtime="20170517 20:05:01.731"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:01.731" endtime="20170517 20:05:01.731"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:01.729" endtime="20170517 20:05:01.732"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:01.729" endtime="20170517 20:05:01.732"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:05:02.208" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170517 20:05:02.208" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:01.732" endtime="20170517 20:05:02.208"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:02.210" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:02.209" endtime="20170517 20:05:02.210"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:02.210" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:02.210" endtime="20170517 20:05:02.211"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:02.210" endtime="20170517 20:05:02.211"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:02.209" endtime="20170517 20:05:02.211"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:02.208" endtime="20170517 20:05:02.211"></status>
</kw>
<msg timestamp="20170517 20:05:02.211" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:01.053" endtime="20170517 20:05:02.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:02.212" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:02.211" endtime="20170517 20:05:02.212"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:05:02.212" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:05:02.212" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:05:02.212" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" starttime="20170517 20:05:02.212" endtime="20170517 20:05:02.212"></status>
</kw>
<msg timestamp="20170517 20:05:02.213" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170517 20:05:01.053" endtime="20170517 20:05:02.213"></status>
</kw>
<msg timestamp="20170517 20:05:02.213" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170517 20:05:01.053" endtime="20170517 20:05:02.213"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170517 20:05:02.214" level="FAIL">Running != Off</msg>
<status status="FAIL" starttime="20170517 20:05:02.213" endtime="20170517 20:05:02.214"></status>
</kw>
<status status="FAIL" starttime="20170517 20:05:01.052" endtime="20170517 20:05:02.214"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:05:12.219" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:05:12.219" endtime="20170517 20:05:12.220"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:05:12.221" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:05:12.220" endtime="20170517 20:05:12.221"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:05:12.222" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:05:12.221" endtime="20170517 20:05:12.222"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:05:12.223" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:05:12.222" endtime="20170517 20:05:12.223"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:05:15.155" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:05:12.224" endtime="20170517 20:05:15.155"></status>
</kw>
<msg timestamp="20170517 20:05:15.155" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:05:15.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:12.223" endtime="20170517 20:05:15.155"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:05:15.156" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:15.155" endtime="20170517 20:05:15.156"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:15.156" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:15.156" endtime="20170517 20:05:15.156"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:12.219" endtime="20170517 20:05:15.157"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:12.218" endtime="20170517 20:05:15.157"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:12.217" endtime="20170517 20:05:15.157"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:05:15.157" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170517 20:05:15.157" endtime="20170517 20:05:15.157"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:15.159" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:15.159" endtime="20170517 20:05:15.159"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:15.160" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:15.160" endtime="20170517 20:05:15.160"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:15.160" endtime="20170517 20:05:15.160"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:15.158" endtime="20170517 20:05:15.161"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:15.158" endtime="20170517 20:05:15.161"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:05:15.835" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170517 20:05:15.835" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:15.161" endtime="20170517 20:05:15.835"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:15.837" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:15.836" endtime="20170517 20:05:15.837"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:15.837" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:15.837" endtime="20170517 20:05:15.838"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:15.837" endtime="20170517 20:05:15.838"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:15.836" endtime="20170517 20:05:15.838"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:15.835" endtime="20170517 20:05:15.838"></status>
</kw>
<msg timestamp="20170517 20:05:15.838" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:12.216" endtime="20170517 20:05:15.838"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:15.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:15.839" endtime="20170517 20:05:15.839"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:05:15.839" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:05:15.840" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:05:15.840" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" starttime="20170517 20:05:15.839" endtime="20170517 20:05:15.840"></status>
</kw>
<msg timestamp="20170517 20:05:15.840" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170517 20:05:12.216" endtime="20170517 20:05:15.840"></status>
</kw>
<msg timestamp="20170517 20:05:15.840" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170517 20:05:12.215" endtime="20170517 20:05:15.840"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170517 20:05:15.841" level="FAIL">Running != Off</msg>
<status status="FAIL" starttime="20170517 20:05:15.841" endtime="20170517 20:05:15.841"></status>
</kw>
<status status="FAIL" starttime="20170517 20:05:12.215" endtime="20170517 20:05:15.841"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:05:25.847" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:05:25.847" endtime="20170517 20:05:25.848"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:05:25.848" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:05:25.848" endtime="20170517 20:05:25.848"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:05:25.849" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:05:25.849" endtime="20170517 20:05:25.849"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:05:25.850" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:05:25.850" endtime="20170517 20:05:25.850"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:05:26.091" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:05:25.851" endtime="20170517 20:05:26.091"></status>
</kw>
<msg timestamp="20170517 20:05:26.091" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:05:26.091" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:25.851" endtime="20170517 20:05:26.091"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:05:26.092" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:26.092" endtime="20170517 20:05:26.092"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:26.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:26.092" endtime="20170517 20:05:26.093"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:25.846" endtime="20170517 20:05:26.093"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:25.845" endtime="20170517 20:05:26.093"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:25.844" endtime="20170517 20:05:26.093"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:05:26.094" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170517 20:05:26.093" endtime="20170517 20:05:26.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:26.096" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:26.095" endtime="20170517 20:05:26.096"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:26.097" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:26.097" endtime="20170517 20:05:26.097"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.096" endtime="20170517 20:05:26.097"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.095" endtime="20170517 20:05:26.097"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.094" endtime="20170517 20:05:26.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:05:26.160" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170517 20:05:26.160" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:26.097" endtime="20170517 20:05:26.161"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:26.162" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:26.162" endtime="20170517 20:05:26.162"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:26.163" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:26.163" endtime="20170517 20:05:26.163"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.162" endtime="20170517 20:05:26.163"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.161" endtime="20170517 20:05:26.163"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.161" endtime="20170517 20:05:26.164"></status>
</kw>
<msg timestamp="20170517 20:05:26.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:25.844" endtime="20170517 20:05:26.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:26.164" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:26.164" endtime="20170517 20:05:26.164"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:05:26.165" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:05:26.165" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:05:26.165" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20170517 20:05:26.165" endtime="20170517 20:05:26.165"></status>
</kw>
<msg timestamp="20170517 20:05:26.166" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170517 20:05:25.843" endtime="20170517 20:05:26.166"></status>
</kw>
<msg timestamp="20170517 20:05:26.166" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170517 20:05:25.842" endtime="20170517 20:05:26.166"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:05:26.166" endtime="20170517 20:05:26.166"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:25.842" endtime="20170517 20:05:26.167"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:01.052" endtime="20170517 20:05:26.167"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:00.626" endtime="20170517 20:05:26.167"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:05:26.171" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:05:26.171" endtime="20170517 20:05:26.172"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:05:26.172" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:05:26.172" endtime="20170517 20:05:26.172"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:05:26.173" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:05:26.173" endtime="20170517 20:05:26.173"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:05:26.174" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:05:26.173" endtime="20170517 20:05:26.174"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:05:26.364" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:05:26.174" endtime="20170517 20:05:26.365"></status>
</kw>
<msg timestamp="20170517 20:05:26.365" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:05:26.365" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:26.174" endtime="20170517 20:05:26.365"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:05:26.365" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:26.365" endtime="20170517 20:05:26.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:26.366" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:26.366" endtime="20170517 20:05:26.366"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.170" endtime="20170517 20:05:26.366"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.170" endtime="20170517 20:05:26.366"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.169" endtime="20170517 20:05:26.367"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:05:26.367" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:05:26.367" endtime="20170517 20:05:26.367"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:26.369" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:26.368" endtime="20170517 20:05:26.369"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:26.370" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:26.370" endtime="20170517 20:05:26.370"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.369" endtime="20170517 20:05:26.370"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.368" endtime="20170517 20:05:26.370"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.367" endtime="20170517 20:05:26.371"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:05:26.435" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:05:26.436" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:26.371" endtime="20170517 20:05:26.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:26.437" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:26.437" endtime="20170517 20:05:26.437"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:26.438" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:26.438" endtime="20170517 20:05:26.438"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.438" endtime="20170517 20:05:26.439"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.436" endtime="20170517 20:05:26.439"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.436" endtime="20170517 20:05:26.439"></status>
</kw>
<msg timestamp="20170517 20:05:26.439" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:26.169" endtime="20170517 20:05:26.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:26.439" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:26.439" endtime="20170517 20:05:26.440"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:05:26.440" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:05:26.440" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:05:26.440" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status status="PASS" starttime="20170517 20:05:26.440" endtime="20170517 20:05:26.440"></status>
</kw>
<msg timestamp="20170517 20:05:26.441" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170517 20:05:26.168" endtime="20170517 20:05:26.441"></status>
</kw>
<msg timestamp="20170517 20:05:26.441" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170517 20:05:26.168" endtime="20170517 20:05:26.441"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:05:26.441" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:05:26.441" endtime="20170517 20:05:26.441"></status>
</kw>
<status status="FAIL" starttime="20170517 20:05:26.167" endtime="20170517 20:05:26.442"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:05:36.447" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:05:36.447" endtime="20170517 20:05:36.448"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:05:36.448" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:05:36.448" endtime="20170517 20:05:36.448"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:05:36.449" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:05:36.448" endtime="20170517 20:05:36.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:05:36.449" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:05:36.449" endtime="20170517 20:05:36.449"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:05:36.658" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:05:36.450" endtime="20170517 20:05:36.658"></status>
</kw>
<msg timestamp="20170517 20:05:36.658" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:05:36.658" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:36.450" endtime="20170517 20:05:36.658"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:05:36.659" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:36.658" endtime="20170517 20:05:36.659"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:36.659" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:36.659" endtime="20170517 20:05:36.659"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:36.446" endtime="20170517 20:05:36.660"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:36.446" endtime="20170517 20:05:36.660"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:36.445" endtime="20170517 20:05:36.660"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:05:36.660" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:05:36.660" endtime="20170517 20:05:36.660"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:36.663" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:36.662" endtime="20170517 20:05:36.663"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:36.664" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:36.663" endtime="20170517 20:05:36.664"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:36.663" endtime="20170517 20:05:36.664"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:36.661" endtime="20170517 20:05:36.664"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:36.661" endtime="20170517 20:05:36.664"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:05:36.737" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:05:36.737" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:36.664" endtime="20170517 20:05:36.737"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:36.739" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:36.739" endtime="20170517 20:05:36.739"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:36.740" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:36.740" endtime="20170517 20:05:36.740"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:36.740" endtime="20170517 20:05:36.740"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:36.738" endtime="20170517 20:05:36.741"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:36.738" endtime="20170517 20:05:36.741"></status>
</kw>
<msg timestamp="20170517 20:05:36.741" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:36.444" endtime="20170517 20:05:36.741"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:36.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:36.741" endtime="20170517 20:05:36.742"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:05:36.742" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:05:36.742" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:05:36.742" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status status="PASS" starttime="20170517 20:05:36.742" endtime="20170517 20:05:36.742"></status>
</kw>
<msg timestamp="20170517 20:05:36.743" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170517 20:05:36.444" endtime="20170517 20:05:36.743"></status>
</kw>
<msg timestamp="20170517 20:05:36.743" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170517 20:05:36.443" endtime="20170517 20:05:36.743"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:05:36.743" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:05:36.743" endtime="20170517 20:05:36.743"></status>
</kw>
<status status="FAIL" starttime="20170517 20:05:36.442" endtime="20170517 20:05:36.744"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:05:46.750" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:05:46.749" endtime="20170517 20:05:46.750"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:05:46.751" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:05:46.750" endtime="20170517 20:05:46.751"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:05:46.752" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:05:46.751" endtime="20170517 20:05:46.752"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:05:46.752" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:05:46.752" endtime="20170517 20:05:46.752"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:05:47.047" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:05:46.753" endtime="20170517 20:05:47.047"></status>
</kw>
<msg timestamp="20170517 20:05:47.047" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:05:47.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:46.752" endtime="20170517 20:05:47.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:05:47.048" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:47.048" endtime="20170517 20:05:47.048"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:47.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:47.048" endtime="20170517 20:05:47.049"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:46.749" endtime="20170517 20:05:47.049"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:46.748" endtime="20170517 20:05:47.049"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:46.747" endtime="20170517 20:05:47.049"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:05:47.051" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:05:47.050" endtime="20170517 20:05:47.051"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:47.054" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:47.053" endtime="20170517 20:05:47.054"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:47.055" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:47.055" endtime="20170517 20:05:47.055"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:47.054" endtime="20170517 20:05:47.056"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:47.052" endtime="20170517 20:05:47.056"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:47.051" endtime="20170517 20:05:47.056"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:05:47.222" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:05:47.222" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:47.056" endtime="20170517 20:05:47.222"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:47.224" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:47.224" endtime="20170517 20:05:47.225"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:47.225" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:47.225" endtime="20170517 20:05:47.226"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:47.225" endtime="20170517 20:05:47.226"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:47.223" endtime="20170517 20:05:47.226"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:47.223" endtime="20170517 20:05:47.226"></status>
</kw>
<msg timestamp="20170517 20:05:47.226" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:46.747" endtime="20170517 20:05:47.226"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:47.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:47.226" endtime="20170517 20:05:47.227"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:05:47.227" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:05:47.227" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:05:47.227" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" starttime="20170517 20:05:47.227" endtime="20170517 20:05:47.227"></status>
</kw>
<msg timestamp="20170517 20:05:47.228" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:05:46.746" endtime="20170517 20:05:47.228"></status>
</kw>
<msg timestamp="20170517 20:05:47.228" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:05:46.746" endtime="20170517 20:05:47.228"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:05:47.229" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:05:47.228" endtime="20170517 20:05:47.229"></status>
</kw>
<status status="FAIL" starttime="20170517 20:05:46.745" endtime="20170517 20:05:47.229"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:05:57.235" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:05:57.235" endtime="20170517 20:05:57.236"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:05:57.236" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:05:57.236" endtime="20170517 20:05:57.236"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:05:57.237" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:05:57.237" endtime="20170517 20:05:57.237"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:05:57.238" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:05:57.237" endtime="20170517 20:05:57.238"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:05:57.476" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:05:57.238" endtime="20170517 20:05:57.476"></status>
</kw>
<msg timestamp="20170517 20:05:57.476" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:05:57.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:57.238" endtime="20170517 20:05:57.476"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:05:57.477" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:57.477" endtime="20170517 20:05:57.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:57.478" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:57.477" endtime="20170517 20:05:57.478"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:57.234" endtime="20170517 20:05:58.308"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:57.234" endtime="20170517 20:05:58.308"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:57.233" endtime="20170517 20:05:58.309"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:05:58.311" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:05:58.309" endtime="20170517 20:05:58.311"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:58.315" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:58.314" endtime="20170517 20:05:58.315"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:58.317" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:05:58.317" endtime="20170517 20:05:58.317"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:58.316" endtime="20170517 20:05:58.318"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:58.312" endtime="20170517 20:05:58.318"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:58.311" endtime="20170517 20:05:58.318"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:05:58.419" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:05:58.420" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:58.318" endtime="20170517 20:05:58.420"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:05:58.422" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:58.421" endtime="20170517 20:05:58.422"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:05:58.423" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:05:58.423" endtime="20170517 20:05:58.423"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:58.422" endtime="20170517 20:05:58.423"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:58.421" endtime="20170517 20:05:58.423"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:58.420" endtime="20170517 20:05:58.423"></status>
</kw>
<msg timestamp="20170517 20:05:58.424" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:05:57.232" endtime="20170517 20:05:58.424"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:05:58.424" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:05:58.424" endtime="20170517 20:05:58.424"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:05:58.425" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:05:58.425" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:05:58.425" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" starttime="20170517 20:05:58.424" endtime="20170517 20:05:58.425"></status>
</kw>
<msg timestamp="20170517 20:05:58.425" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:05:57.231" endtime="20170517 20:05:58.425"></status>
</kw>
<msg timestamp="20170517 20:05:58.426" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:05:57.231" endtime="20170517 20:05:58.426"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:05:58.426" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:05:58.426" endtime="20170517 20:05:58.426"></status>
</kw>
<status status="FAIL" starttime="20170517 20:05:57.230" endtime="20170517 20:05:58.426"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:06:08.445" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:06:08.444" endtime="20170517 20:06:08.445"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:06:08.446" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:06:08.445" endtime="20170517 20:06:08.446"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:06:08.446" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:06:08.446" endtime="20170517 20:06:08.446"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:06:08.447" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:06:08.447" endtime="20170517 20:06:08.447"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:06:08.645" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:06:08.448" endtime="20170517 20:06:08.646"></status>
</kw>
<msg timestamp="20170517 20:06:08.646" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:06:08.646" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:08.447" endtime="20170517 20:06:08.646"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:06:08.647" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:08.646" endtime="20170517 20:06:08.647"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:06:08.648" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:08.647" endtime="20170517 20:06:08.648"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:08.444" endtime="20170517 20:06:08.648"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:08.442" endtime="20170517 20:06:08.648"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:08.440" endtime="20170517 20:06:08.648"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:06:08.649" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:06:08.648" endtime="20170517 20:06:08.649"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:06:08.651" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:06:08.650" endtime="20170517 20:06:08.651"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:06:08.652" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:06:08.651" endtime="20170517 20:06:08.652"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:08.651" endtime="20170517 20:06:08.652"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:08.649" endtime="20170517 20:06:08.652"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:08.649" endtime="20170517 20:06:08.652"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:06:08.720" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:06:08.721" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:08.653" endtime="20170517 20:06:08.721"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:06:08.724" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:06:08.723" endtime="20170517 20:06:08.724"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:06:08.725" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:06:08.725" endtime="20170517 20:06:08.725"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:08.724" endtime="20170517 20:06:08.725"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:08.723" endtime="20170517 20:06:08.725"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:08.722" endtime="20170517 20:06:08.725"></status>
</kw>
<msg timestamp="20170517 20:06:08.725" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:08.440" endtime="20170517 20:06:08.726"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:06:08.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:08.726" endtime="20170517 20:06:08.726"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:06:08.727" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:06:08.727" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:06:08.727" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" starttime="20170517 20:06:08.726" endtime="20170517 20:06:08.727"></status>
</kw>
<msg timestamp="20170517 20:06:08.727" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:06:08.439" endtime="20170517 20:06:08.727"></status>
</kw>
<msg timestamp="20170517 20:06:08.727" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:06:08.438" endtime="20170517 20:06:08.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:06:08.728" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:06:08.728" endtime="20170517 20:06:08.728"></status>
</kw>
<status status="FAIL" starttime="20170517 20:06:08.433" endtime="20170517 20:06:08.728"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:06:18.736" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:06:18.736" endtime="20170517 20:06:18.736"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:06:18.737" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:06:18.737" endtime="20170517 20:06:18.737"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:06:18.738" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:06:18.737" endtime="20170517 20:06:18.738"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:06:18.738" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:06:18.738" endtime="20170517 20:06:18.738"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:06:18.926" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:06:18.739" endtime="20170517 20:06:18.926"></status>
</kw>
<msg timestamp="20170517 20:06:18.926" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:06:18.926" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:18.739" endtime="20170517 20:06:18.926"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:06:18.927" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:18.926" endtime="20170517 20:06:18.927"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:06:18.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:18.927" endtime="20170517 20:06:18.928"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:18.735" endtime="20170517 20:06:18.928"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:18.734" endtime="20170517 20:06:18.928"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:18.733" endtime="20170517 20:06:18.928"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:06:18.930" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:06:18.929" endtime="20170517 20:06:18.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:06:18.932" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:06:18.931" endtime="20170517 20:06:18.932"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:06:18.932" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:06:18.932" endtime="20170517 20:06:18.933"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:18.932" endtime="20170517 20:06:18.933"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:18.930" endtime="20170517 20:06:18.933"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:18.930" endtime="20170517 20:06:18.933"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:06:19.000" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:06:19.001" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:18.933" endtime="20170517 20:06:19.001"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:06:19.002" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:06:19.002" endtime="20170517 20:06:19.002"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:06:19.005" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:06:19.003" endtime="20170517 20:06:19.005"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:19.003" endtime="20170517 20:06:19.006"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:19.001" endtime="20170517 20:06:19.006"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:19.001" endtime="20170517 20:06:19.006"></status>
</kw>
<msg timestamp="20170517 20:06:19.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:18.733" endtime="20170517 20:06:19.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:06:19.007" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:19.006" endtime="20170517 20:06:19.007"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:06:19.007" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:06:19.007" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:06:19.008" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" starttime="20170517 20:06:19.007" endtime="20170517 20:06:19.008"></status>
</kw>
<msg timestamp="20170517 20:06:19.008" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:06:18.732" endtime="20170517 20:06:19.008"></status>
</kw>
<msg timestamp="20170517 20:06:19.008" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:06:18.731" endtime="20170517 20:06:19.008"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:06:19.009" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:06:19.009" endtime="20170517 20:06:19.009"></status>
</kw>
<status status="FAIL" starttime="20170517 20:06:18.730" endtime="20170517 20:06:19.009"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:06:29.033" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:06:29.032" endtime="20170517 20:06:29.035"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:06:29.038" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:06:29.037" endtime="20170517 20:06:29.039"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:06:29.042" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:06:29.040" endtime="20170517 20:06:29.042"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:06:29.045" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:06:29.043" endtime="20170517 20:06:29.045"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:06:29.262" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:06:29.049" endtime="20170517 20:06:29.263"></status>
</kw>
<msg timestamp="20170517 20:06:29.263" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:06:29.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:29.047" endtime="20170517 20:06:29.264"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:06:29.268" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:29.266" endtime="20170517 20:06:29.268"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:06:29.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:29.270" endtime="20170517 20:06:29.274"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:29.029" endtime="20170517 20:06:29.275"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:29.026" endtime="20170517 20:06:29.275"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:29.023" endtime="20170517 20:06:29.276"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:06:29.279" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:06:29.277" endtime="20170517 20:06:29.280"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:06:29.305" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:06:29.300" endtime="20170517 20:06:29.305"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:06:29.310" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:06:29.309" endtime="20170517 20:06:29.311"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:29.306" endtime="20170517 20:06:29.311"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:29.296" endtime="20170517 20:06:29.312"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:29.293" endtime="20170517 20:06:29.312"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:06:29.399" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:06:29.400" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:29.313" endtime="20170517 20:06:29.400"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:06:29.410" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:06:29.407" endtime="20170517 20:06:29.410"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:06:29.415" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:06:29.414" endtime="20170517 20:06:29.416"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:29.411" endtime="20170517 20:06:29.416"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:29.403" endtime="20170517 20:06:29.417"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:29.401" endtime="20170517 20:06:29.417"></status>
</kw>
<msg timestamp="20170517 20:06:29.418" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:29.019" endtime="20170517 20:06:29.418"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:06:29.421" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:29.420" endtime="20170517 20:06:29.422"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:06:29.425" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:06:29.425" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:06:29.425" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" starttime="20170517 20:06:29.423" endtime="20170517 20:06:29.426"></status>
</kw>
<msg timestamp="20170517 20:06:29.427" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:06:29.016" endtime="20170517 20:06:29.427"></status>
</kw>
<msg timestamp="20170517 20:06:29.428" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:06:29.014" endtime="20170517 20:06:29.428"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:06:29.431" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:06:29.429" endtime="20170517 20:06:29.432"></status>
</kw>
<status status="FAIL" starttime="20170517 20:06:29.011" endtime="20170517 20:06:29.432"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:06:39.466" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:06:39.465" endtime="20170517 20:06:39.468"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:06:39.471" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:06:39.470" endtime="20170517 20:06:39.471"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:06:39.474" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:06:39.472" endtime="20170517 20:06:39.475"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:06:39.478" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:06:39.476" endtime="20170517 20:06:39.482"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:06:39.689" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:06:39.486" endtime="20170517 20:06:39.690"></status>
</kw>
<msg timestamp="20170517 20:06:39.691" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:06:39.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:39.483" endtime="20170517 20:06:39.691"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:06:39.694" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:39.692" endtime="20170517 20:06:39.695"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:06:39.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:39.696" endtime="20170517 20:06:39.698"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:39.461" endtime="20170517 20:06:39.699"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:39.458" endtime="20170517 20:06:39.699"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:39.454" endtime="20170517 20:06:39.700"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:06:39.703" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:06:39.701" endtime="20170517 20:06:39.703"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:06:39.720" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:06:39.716" endtime="20170517 20:06:39.720"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:06:39.726" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:06:39.724" endtime="20170517 20:06:39.726"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:39.721" endtime="20170517 20:06:39.727"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:39.712" endtime="20170517 20:06:39.728"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:39.704" endtime="20170517 20:06:39.728"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:06:39.802" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:06:39.803" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:39.729" endtime="20170517 20:06:39.803"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:06:39.813" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:06:39.810" endtime="20170517 20:06:39.813"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:06:39.817" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:06:39.816" endtime="20170517 20:06:39.820"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:39.813" endtime="20170517 20:06:39.820"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:39.807" endtime="20170517 20:06:39.821"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:39.805" endtime="20170517 20:06:39.821"></status>
</kw>
<msg timestamp="20170517 20:06:39.822" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:39.443" endtime="20170517 20:06:39.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:06:39.826" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:39.824" endtime="20170517 20:06:39.826"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:06:39.830" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:06:39.830" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:06:39.831" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" starttime="20170517 20:06:39.828" endtime="20170517 20:06:39.831"></status>
</kw>
<msg timestamp="20170517 20:06:39.832" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:06:39.440" endtime="20170517 20:06:39.832"></status>
</kw>
<msg timestamp="20170517 20:06:39.833" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:06:39.438" endtime="20170517 20:06:39.834"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:06:39.837" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:06:39.835" endtime="20170517 20:06:39.837"></status>
</kw>
<status status="FAIL" starttime="20170517 20:06:39.435" endtime="20170517 20:06:39.838"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:06:49.874" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:06:49.872" endtime="20170517 20:06:49.876"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:06:49.880" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:06:49.878" endtime="20170517 20:06:49.880"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:06:49.883" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:06:49.881" endtime="20170517 20:06:49.884"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:06:49.888" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:06:49.885" endtime="20170517 20:06:49.888"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:06:50.149" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:06:49.892" endtime="20170517 20:06:50.149"></status>
</kw>
<msg timestamp="20170517 20:06:50.150" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:06:50.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:49.890" endtime="20170517 20:06:50.150"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:06:50.154" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:50.152" endtime="20170517 20:06:50.154"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:06:50.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:50.155" endtime="20170517 20:06:50.168"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:49.869" endtime="20170517 20:06:50.168"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:49.865" endtime="20170517 20:06:50.168"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:49.862" endtime="20170517 20:06:50.169"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:06:50.172" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:06:50.170" endtime="20170517 20:06:50.172"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:06:50.183" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:06:50.179" endtime="20170517 20:06:50.183"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:06:50.198" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:06:50.197" endtime="20170517 20:06:50.199"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:50.184" endtime="20170517 20:06:50.200"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:50.175" endtime="20170517 20:06:50.201"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:50.173" endtime="20170517 20:06:50.201"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:06:50.289" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:06:50.289" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:50.202" endtime="20170517 20:06:50.290"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:06:50.299" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:06:50.297" endtime="20170517 20:06:50.300"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:06:50.305" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:06:50.304" endtime="20170517 20:06:50.306"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:50.301" endtime="20170517 20:06:50.307"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:50.294" endtime="20170517 20:06:50.307"></status>
</kw>
<status status="PASS" starttime="20170517 20:06:50.291" endtime="20170517 20:06:50.308"></status>
</kw>
<msg timestamp="20170517 20:06:50.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:06:49.859" endtime="20170517 20:06:50.309"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:06:50.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:06:50.311" endtime="20170517 20:06:50.313"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:06:50.316" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:06:50.316" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:06:50.317" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" starttime="20170517 20:06:50.314" endtime="20170517 20:06:50.317"></status>
</kw>
<msg timestamp="20170517 20:06:50.318" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:06:49.856" endtime="20170517 20:06:50.318"></status>
</kw>
<msg timestamp="20170517 20:06:50.319" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:06:49.854" endtime="20170517 20:06:50.320"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:06:50.323" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:06:50.321" endtime="20170517 20:06:50.324"></status>
</kw>
<status status="FAIL" starttime="20170517 20:06:49.851" endtime="20170517 20:06:50.325"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:07:00.349" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:07:00.347" endtime="20170517 20:07:00.351"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:07:00.354" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:07:00.352" endtime="20170517 20:07:00.354"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:07:00.357" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:07:00.355" endtime="20170517 20:07:00.357"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:07:00.360" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:07:00.358" endtime="20170517 20:07:00.360"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:07:00.611" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:07:00.364" endtime="20170517 20:07:00.612"></status>
</kw>
<msg timestamp="20170517 20:07:00.612" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:07:00.613" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:00.362" endtime="20170517 20:07:00.613"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:07:00.617" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:00.614" endtime="20170517 20:07:00.617"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:00.620" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:00.618" endtime="20170517 20:07:00.621"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.343" endtime="20170517 20:07:00.621"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.341" endtime="20170517 20:07:00.622"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.338" endtime="20170517 20:07:00.622"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:07:00.626" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:07:00.624" endtime="20170517 20:07:00.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:00.637" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:00.633" endtime="20170517 20:07:00.637"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:00.641" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:00.640" endtime="20170517 20:07:00.641"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.638" endtime="20170517 20:07:00.642"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.630" endtime="20170517 20:07:00.642"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.628" endtime="20170517 20:07:00.643"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:07:00.736" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:07:00.737" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:00.644" endtime="20170517 20:07:00.737"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:00.746" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:00.744" endtime="20170517 20:07:00.746"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:00.751" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:00.750" endtime="20170517 20:07:00.753"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.747" endtime="20170517 20:07:00.754"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.741" endtime="20170517 20:07:00.754"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.739" endtime="20170517 20:07:00.755"></status>
</kw>
<msg timestamp="20170517 20:07:00.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:00.334" endtime="20170517 20:07:00.756"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:00.759" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:00.758" endtime="20170517 20:07:00.760"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:07:00.763" level="INFO">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:07:00.763" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:07:00.763" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Starting OS'}</msg>
<status status="PASS" starttime="20170517 20:07:00.761" endtime="20170517 20:07:00.764"></status>
</kw>
<msg timestamp="20170517 20:07:00.765" level="INFO">${state} = FW Progress, Starting OS</msg>
<status status="PASS" starttime="20170517 20:07:00.331" endtime="20170517 20:07:00.765"></status>
</kw>
<msg timestamp="20170517 20:07:00.766" level="INFO">${boot_progress} = FW Progress, Starting OS</msg>
<status status="PASS" starttime="20170517 20:07:00.329" endtime="20170517 20:07:00.766"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<status status="PASS" starttime="20170517 20:07:00.768" endtime="20170517 20:07:00.769"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.327" endtime="20170517 20:07:00.770"></status>
</kw>
<status status="PASS" starttime="20170517 20:05:26.167" endtime="20170517 20:07:00.770"></status>
</kw>
<kw library="utils" name="Flush REST Sessions">
<doc>Removes all the active session objects</doc>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170517 20:07:00.775" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170517 20:07:00.774" endtime="20170517 20:07:00.780"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.771" endtime="20170517 20:07:00.781"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.957" endtime="20170517 20:07:00.781"></status>
</kw>
<msg timestamp="20170517 20:07:00.782" level="INFO">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170517 20:07:00.798" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20170517 20:07:00.795" endtime="20170517 20:07:00.798"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:07:00.807" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170517 20:07:00.804" endtime="20170517 20:07:00.807"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:07:00.825" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:07:00.823" endtime="20170517 20:07:00.827"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:07:00.831" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:07:00.829" endtime="20170517 20:07:00.831"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:07:00.835" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:07:00.832" endtime="20170517 20:07:00.835"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:07:00.838" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:07:00.836" endtime="20170517 20:07:00.838"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:07:01.116" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:07:00.842" endtime="20170517 20:07:01.116"></status>
</kw>
<msg timestamp="20170517 20:07:01.117" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:07:01.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:00.840" endtime="20170517 20:07:01.117"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:07:01.120" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:01.119" endtime="20170517 20:07:01.121"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:01.123" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:01.122" endtime="20170517 20:07:01.124"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.819" endtime="20170517 20:07:01.124"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.817" endtime="20170517 20:07:01.125"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.813" endtime="20170517 20:07:01.125"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:07:01.129" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170517 20:07:01.127" endtime="20170517 20:07:01.129"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:07:01.131" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:07:01.130" endtime="20170517 20:07:01.132"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:07:01.133" endtime="20170517 20:07:01.135"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:01.144" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status status="PASS" starttime="20170517 20:07:01.140" endtime="20170517 20:07:01.144"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:01.148" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170517 20:07:01.147" endtime="20170517 20:07:01.149"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:01.145" endtime="20170517 20:07:01.150"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:01.135" endtime="20170517 20:07:01.150"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:07:01.349" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170517 20:07:01.349" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:01.151" endtime="20170517 20:07:01.350"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:01.356" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:01.353" endtime="20170517 20:07:01.356"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:01.361" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:01.360" endtime="20170517 20:07:01.362"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:01.357" endtime="20170517 20:07:01.363"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:01.351" endtime="20170517 20:07:01.363"></status>
</kw>
<msg timestamp="20170517 20:07:01.364" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:00.808" endtime="20170517 20:07:01.364"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:01.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:01.366" endtime="20170517 20:07:01.368"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170517 20:07:01.371" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:07:01.371" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:07:01.371" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status status="PASS" starttime="20170517 20:07:01.369" endtime="20170517 20:07:01.372"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.799" endtime="20170517 20:07:01.372"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170517 20:07:01.373" endtime="20170517 20:07:01.375"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:07:01.399" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:07:01.397" endtime="20170517 20:07:01.401"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:07:01.404" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:07:01.402" endtime="20170517 20:07:01.404"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:07:01.407" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:07:01.405" endtime="20170517 20:07:01.408"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:07:01.412" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:07:01.410" endtime="20170517 20:07:01.412"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:07:02.141" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:07:01.416" endtime="20170517 20:07:02.142"></status>
</kw>
<msg timestamp="20170517 20:07:02.143" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:07:02.143" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:01.413" endtime="20170517 20:07:02.143"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:07:02.147" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:02.145" endtime="20170517 20:07:02.147"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:02.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:02.149" endtime="20170517 20:07:02.152"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:01.394" endtime="20170517 20:07:02.238"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:01.390" endtime="20170517 20:07:02.238"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:01.388" endtime="20170517 20:07:02.239"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:07:02.243" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170517 20:07:02.241" endtime="20170517 20:07:02.243"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:02.258" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:02.253" endtime="20170517 20:07:02.258"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:02.263" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:02.262" endtime="20170517 20:07:02.264"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:02.259" endtime="20170517 20:07:02.265"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:02.248" endtime="20170517 20:07:02.265"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:02.245" endtime="20170517 20:07:02.265"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:07:03.261" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170517 20:07:03.262" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:02.267" endtime="20170517 20:07:03.263"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:03.273" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:03.269" endtime="20170517 20:07:03.273"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:03.283" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:03.282" endtime="20170517 20:07:03.283"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:03.279" endtime="20170517 20:07:03.284"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:03.266" endtime="20170517 20:07:03.285"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:03.264" endtime="20170517 20:07:03.285"></status>
</kw>
<msg timestamp="20170517 20:07:03.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:01.384" endtime="20170517 20:07:03.286"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:03.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:03.288" endtime="20170517 20:07:03.290"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:07:03.293" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:07:03.293" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:07:03.294" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20170517 20:07:03.292" endtime="20170517 20:07:03.294"></status>
</kw>
<msg timestamp="20170517 20:07:03.295" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170517 20:07:01.381" endtime="20170517 20:07:03.295"></status>
</kw>
<msg timestamp="20170517 20:07:03.307" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170517 20:07:01.380" endtime="20170517 20:07:03.307"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170517 20:07:03.311" level="FAIL">Off != Running</msg>
<status status="FAIL" starttime="20170517 20:07:03.309" endtime="20170517 20:07:03.311"></status>
</kw>
<status status="FAIL" starttime="20170517 20:07:01.378" endtime="20170517 20:07:03.312"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:07:13.339" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:07:13.337" endtime="20170517 20:07:13.340"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:07:13.342" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:07:13.341" endtime="20170517 20:07:13.343"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:07:13.345" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:07:13.344" endtime="20170517 20:07:13.345"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:07:13.348" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:07:13.346" endtime="20170517 20:07:13.348"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:07:13.564" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:07:13.351" endtime="20170517 20:07:13.564"></status>
</kw>
<msg timestamp="20170517 20:07:13.565" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:07:13.565" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:13.349" endtime="20170517 20:07:13.565"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:07:13.568" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:13.567" endtime="20170517 20:07:13.569"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:13.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:13.574" endtime="20170517 20:07:13.593"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.335" endtime="20170517 20:07:13.594"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.334" endtime="20170517 20:07:13.594"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.331" endtime="20170517 20:07:13.595"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:07:13.598" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170517 20:07:13.596" endtime="20170517 20:07:13.599"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:13.611" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:13.607" endtime="20170517 20:07:13.612"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:13.616" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:13.615" endtime="20170517 20:07:13.617"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.612" endtime="20170517 20:07:13.618"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.603" endtime="20170517 20:07:13.618"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.600" endtime="20170517 20:07:13.619"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:07:13.693" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170517 20:07:13.694" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:13.620" endtime="20170517 20:07:13.694"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:13.703" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:13.700" endtime="20170517 20:07:13.703"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:13.708" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:13.707" endtime="20170517 20:07:13.709"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.704" endtime="20170517 20:07:13.710"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.698" endtime="20170517 20:07:13.710"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.696" endtime="20170517 20:07:13.711"></status>
</kw>
<msg timestamp="20170517 20:07:13.712" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:13.328" endtime="20170517 20:07:13.712"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:13.728" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:13.713" endtime="20170517 20:07:13.728"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:07:13.732" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:07:13.732" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:07:13.732" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" starttime="20170517 20:07:13.730" endtime="20170517 20:07:13.733"></status>
</kw>
<msg timestamp="20170517 20:07:13.734" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170517 20:07:13.318" endtime="20170517 20:07:13.734"></status>
</kw>
<msg timestamp="20170517 20:07:13.736" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170517 20:07:13.316" endtime="20170517 20:07:13.736"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:07:13.739" endtime="20170517 20:07:13.740"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.314" endtime="20170517 20:07:13.741"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:01.376" endtime="20170517 20:07:13.741"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.784" endtime="20170517 20:07:13.742"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw library="utils" name="Is OS Off">
<doc>Check if boot progress is "Off".</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:07:13.769" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:07:13.767" endtime="20170517 20:07:13.771"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:07:13.774" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:07:13.772" endtime="20170517 20:07:13.774"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:07:13.777" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:07:13.775" endtime="20170517 20:07:13.777"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:07:13.780" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:07:13.778" endtime="20170517 20:07:13.780"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:07:14.052" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:07:13.783" endtime="20170517 20:07:14.052"></status>
</kw>
<msg timestamp="20170517 20:07:14.053" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:07:14.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:13.781" endtime="20170517 20:07:14.053"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:07:14.057" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:14.055" endtime="20170517 20:07:14.057"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:14.060" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:14.058" endtime="20170517 20:07:14.061"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.764" endtime="20170517 20:07:14.061"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.762" endtime="20170517 20:07:14.062"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.760" endtime="20170517 20:07:14.062"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:07:14.065" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:07:14.063" endtime="20170517 20:07:14.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:14.077" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:14.073" endtime="20170517 20:07:14.077"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:14.081" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:14.080" endtime="20170517 20:07:14.082"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.078" endtime="20170517 20:07:14.082"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.070" endtime="20170517 20:07:14.083"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.067" endtime="20170517 20:07:14.083"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:07:14.160" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:07:14.160" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:14.084" endtime="20170517 20:07:14.161"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:14.172" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:14.169" endtime="20170517 20:07:14.172"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:14.176" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:14.175" endtime="20170517 20:07:14.182"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.173" endtime="20170517 20:07:14.183"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.167" endtime="20170517 20:07:14.183"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.163" endtime="20170517 20:07:14.184"></status>
</kw>
<msg timestamp="20170517 20:07:14.185" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:13.751" endtime="20170517 20:07:14.185"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:14.189" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:14.187" endtime="20170517 20:07:14.189"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:07:14.192" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:07:14.192" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:07:14.193" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status status="PASS" starttime="20170517 20:07:14.190" endtime="20170517 20:07:14.193"></status>
</kw>
<msg timestamp="20170517 20:07:14.194" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170517 20:07:13.747" endtime="20170517 20:07:14.195"></status>
</kw>
<msg timestamp="20170517 20:07:14.196" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170517 20:07:13.746" endtime="20170517 20:07:14.196"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status status="PASS" starttime="20170517 20:07:14.197" endtime="20170517 20:07:14.199"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.744" endtime="20170517 20:07:14.199"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:13.743" endtime="20170517 20:07:14.199"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170517 20:07:14.213" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" starttime="20170517 20:07:14.202" endtime="20170517 20:07:14.213"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:07:14.219" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170517 20:07:14.217" endtime="20170517 20:07:14.219"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:07:14.235" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:07:14.233" endtime="20170517 20:07:14.237"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:07:14.240" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:07:14.239" endtime="20170517 20:07:14.240"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:07:14.243" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:07:14.241" endtime="20170517 20:07:14.243"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:07:14.247" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:07:14.245" endtime="20170517 20:07:14.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:07:14.460" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:07:14.250" endtime="20170517 20:07:14.461"></status>
</kw>
<msg timestamp="20170517 20:07:14.461" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:07:14.462" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:14.248" endtime="20170517 20:07:14.462"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:07:14.465" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:14.464" endtime="20170517 20:07:14.466"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:14.469" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:14.467" endtime="20170517 20:07:14.469"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.230" endtime="20170517 20:07:14.470"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.228" endtime="20170517 20:07:14.470"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.224" endtime="20170517 20:07:14.471"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:07:14.474" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170517 20:07:14.472" endtime="20170517 20:07:14.474"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:07:14.477" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:07:14.475" endtime="20170517 20:07:14.477"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:07:14.478" endtime="20170517 20:07:14.480"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:14.597" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status status="PASS" starttime="20170517 20:07:14.484" endtime="20170517 20:07:14.597"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:14.603" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170517 20:07:14.601" endtime="20170517 20:07:14.604"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.598" endtime="20170517 20:07:14.604"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.480" endtime="20170517 20:07:14.605"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:07:14.954" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170517 20:07:14.955" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:14.606" endtime="20170517 20:07:14.955"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:14.961" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:14.959" endtime="20170517 20:07:14.962"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:14.966" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:14.965" endtime="20170517 20:07:14.967"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.962" endtime="20170517 20:07:14.967"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.956" endtime="20170517 20:07:14.968"></status>
</kw>
<msg timestamp="20170517 20:07:14.969" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:14.220" endtime="20170517 20:07:14.969"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:14.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:14.970" endtime="20170517 20:07:14.972"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170517 20:07:14.975" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:07:14.975" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:07:14.976" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status status="PASS" starttime="20170517 20:07:14.974" endtime="20170517 20:07:14.976"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.214" endtime="20170517 20:07:14.977"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170517 20:07:14.978" endtime="20170517 20:07:14.980"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:07:15.005" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:07:15.003" endtime="20170517 20:07:15.007"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:07:15.012" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:07:15.009" endtime="20170517 20:07:15.013"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:07:15.016" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:07:15.014" endtime="20170517 20:07:15.016"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:07:15.020" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:07:15.017" endtime="20170517 20:07:15.020"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:07:16.078" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:07:15.024" endtime="20170517 20:07:16.078"></status>
</kw>
<msg timestamp="20170517 20:07:16.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:07:16.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:15.021" endtime="20170517 20:07:16.079"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:07:16.082" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:16.081" endtime="20170517 20:07:16.083"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:16.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:16.084" endtime="20170517 20:07:16.086"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.999" endtime="20170517 20:07:16.087"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.997" endtime="20170517 20:07:16.087"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.994" endtime="20170517 20:07:16.088"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:07:16.091" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170517 20:07:16.089" endtime="20170517 20:07:16.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:16.103" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:16.099" endtime="20170517 20:07:16.103"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:16.108" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:16.106" endtime="20170517 20:07:16.108"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:16.104" endtime="20170517 20:07:16.109"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:16.095" endtime="20170517 20:07:16.110"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:16.093" endtime="20170517 20:07:16.110"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:07:16.242" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170517 20:07:16.243" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:16.112" endtime="20170517 20:07:16.243"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:16.254" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:16.250" endtime="20170517 20:07:16.255"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:16.259" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:16.258" endtime="20170517 20:07:16.259"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:16.256" endtime="20170517 20:07:16.260"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:16.248" endtime="20170517 20:07:16.260"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:16.245" endtime="20170517 20:07:16.261"></status>
</kw>
<msg timestamp="20170517 20:07:16.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:14.990" endtime="20170517 20:07:16.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:16.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:16.263" endtime="20170517 20:07:16.265"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:07:16.267" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:07:16.267" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:07:16.267" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" starttime="20170517 20:07:16.266" endtime="20170517 20:07:16.267"></status>
</kw>
<msg timestamp="20170517 20:07:16.269" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170517 20:07:14.988" endtime="20170517 20:07:16.269"></status>
</kw>
<msg timestamp="20170517 20:07:16.270" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170517 20:07:14.985" endtime="20170517 20:07:16.271"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170517 20:07:16.273" level="FAIL">Running != Off</msg>
<status status="FAIL" starttime="20170517 20:07:16.272" endtime="20170517 20:07:16.274"></status>
</kw>
<status status="FAIL" starttime="20170517 20:07:14.984" endtime="20170517 20:07:16.274"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:07:26.288" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:07:26.287" endtime="20170517 20:07:26.288"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:07:26.289" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:07:26.289" endtime="20170517 20:07:26.289"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:07:26.290" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:07:26.289" endtime="20170517 20:07:26.290"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:07:26.291" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:07:26.290" endtime="20170517 20:07:26.291"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:07:27.469" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:07:26.292" endtime="20170517 20:07:27.469"></status>
</kw>
<msg timestamp="20170517 20:07:27.470" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:07:27.470" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:26.291" endtime="20170517 20:07:27.470"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:07:27.473" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:27.471" endtime="20170517 20:07:27.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:27.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:27.475" endtime="20170517 20:07:27.477"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:26.286" endtime="20170517 20:07:27.477"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:26.286" endtime="20170517 20:07:27.478"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:26.285" endtime="20170517 20:07:27.478"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:07:27.479" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170517 20:07:27.479" endtime="20170517 20:07:27.480"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:27.490" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:27.485" endtime="20170517 20:07:27.490"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:27.493" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:27.493" endtime="20170517 20:07:27.494"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:27.491" endtime="20170517 20:07:27.494"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:27.482" endtime="20170517 20:07:27.495"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:27.481" endtime="20170517 20:07:27.495"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:07:28.521" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170517 20:07:28.522" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:27.496" endtime="20170517 20:07:28.523"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:28.529" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:28.527" endtime="20170517 20:07:28.530"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:28.533" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:28.532" endtime="20170517 20:07:28.533"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:28.530" endtime="20170517 20:07:28.534"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:28.525" endtime="20170517 20:07:28.534"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:28.524" endtime="20170517 20:07:28.535"></status>
</kw>
<msg timestamp="20170517 20:07:28.535" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:26.284" endtime="20170517 20:07:28.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:28.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:28.536" endtime="20170517 20:07:28.539"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:07:28.542" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:07:28.543" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:07:28.543" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" starttime="20170517 20:07:28.540" endtime="20170517 20:07:28.544"></status>
</kw>
<msg timestamp="20170517 20:07:28.545" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170517 20:07:26.283" endtime="20170517 20:07:28.546"></status>
</kw>
<msg timestamp="20170517 20:07:28.548" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170517 20:07:26.282" endtime="20170517 20:07:28.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170517 20:07:28.552" level="FAIL">Running != Off</msg>
<status status="FAIL" starttime="20170517 20:07:28.550" endtime="20170517 20:07:28.553"></status>
</kw>
<status status="FAIL" starttime="20170517 20:07:26.281" endtime="20170517 20:07:28.553"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:07:38.591" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:07:38.588" endtime="20170517 20:07:38.593"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:07:38.596" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:07:38.595" endtime="20170517 20:07:38.597"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:07:38.600" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:07:38.598" endtime="20170517 20:07:38.600"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:07:38.604" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:07:38.602" endtime="20170517 20:07:38.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:07:38.851" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:07:38.607" endtime="20170517 20:07:38.851"></status>
</kw>
<msg timestamp="20170517 20:07:38.852" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:07:38.852" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:38.606" endtime="20170517 20:07:38.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:07:38.854" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:38.853" endtime="20170517 20:07:38.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:38.856" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:38.855" endtime="20170517 20:07:38.857"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:38.581" endtime="20170517 20:07:38.857"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:38.572" endtime="20170517 20:07:38.858"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:38.568" endtime="20170517 20:07:38.858"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:07:38.862" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170517 20:07:38.860" endtime="20170517 20:07:38.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:38.871" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:38.868" endtime="20170517 20:07:38.871"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:38.875" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:38.874" endtime="20170517 20:07:38.875"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:38.872" endtime="20170517 20:07:38.876"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:38.865" endtime="20170517 20:07:38.876"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:38.863" endtime="20170517 20:07:38.877"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:07:38.947" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170517 20:07:38.948" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:38.878" endtime="20170517 20:07:38.948"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:38.956" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:38.953" endtime="20170517 20:07:38.956"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:38.959" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:38.958" endtime="20170517 20:07:38.959"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:38.956" endtime="20170517 20:07:38.960"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:38.951" endtime="20170517 20:07:38.960"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:38.949" endtime="20170517 20:07:38.960"></status>
</kw>
<msg timestamp="20170517 20:07:38.961" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:38.564" endtime="20170517 20:07:38.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:38.963" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:38.962" endtime="20170517 20:07:38.964"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:07:38.967" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:07:38.967" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:07:38.967" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20170517 20:07:38.965" endtime="20170517 20:07:38.968"></status>
</kw>
<msg timestamp="20170517 20:07:38.969" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170517 20:07:38.561" endtime="20170517 20:07:38.969"></status>
</kw>
<msg timestamp="20170517 20:07:38.969" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170517 20:07:38.559" endtime="20170517 20:07:38.970"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:07:38.971" endtime="20170517 20:07:38.972"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:38.557" endtime="20170517 20:07:38.972"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.981" endtime="20170517 20:07:38.972"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:14.200" endtime="20170517 20:07:38.973"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:07:38.986" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:07:38.985" endtime="20170517 20:07:38.986"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:07:38.987" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:07:38.987" endtime="20170517 20:07:38.988"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:07:38.989" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:07:38.988" endtime="20170517 20:07:38.989"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:07:38.991" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:07:38.990" endtime="20170517 20:07:38.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:07:39.270" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:07:39.038" endtime="20170517 20:07:39.270"></status>
</kw>
<msg timestamp="20170517 20:07:39.270" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:07:39.270" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:38.991" endtime="20170517 20:07:39.271"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:07:39.272" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:39.271" endtime="20170517 20:07:39.272"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:39.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:39.273" endtime="20170517 20:07:39.274"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:38.984" endtime="20170517 20:07:39.274"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:38.983" endtime="20170517 20:07:39.274"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:38.981" endtime="20170517 20:07:39.274"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:07:39.275" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:07:39.275" endtime="20170517 20:07:39.275"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:39.280" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:39.277" endtime="20170517 20:07:39.280"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:39.283" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:39.282" endtime="20170517 20:07:39.283"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:39.281" endtime="20170517 20:07:39.283"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:39.276" endtime="20170517 20:07:39.283"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:39.276" endtime="20170517 20:07:39.284"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:07:39.421" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:07:39.421" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:39.284" endtime="20170517 20:07:39.422"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:39.427" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:39.425" endtime="20170517 20:07:39.427"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:39.430" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:39.429" endtime="20170517 20:07:39.431"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:39.428" endtime="20170517 20:07:39.432"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:39.424" endtime="20170517 20:07:39.433"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:39.423" endtime="20170517 20:07:39.433"></status>
</kw>
<msg timestamp="20170517 20:07:39.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:38.979" endtime="20170517 20:07:39.434"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:39.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:39.435" endtime="20170517 20:07:39.436"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:07:39.438" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:07:39.438" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:07:39.439" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status status="PASS" starttime="20170517 20:07:39.437" endtime="20170517 20:07:39.439"></status>
</kw>
<msg timestamp="20170517 20:07:39.440" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170517 20:07:38.978" endtime="20170517 20:07:39.440"></status>
</kw>
<msg timestamp="20170517 20:07:39.441" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170517 20:07:38.977" endtime="20170517 20:07:39.441"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:07:39.443" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:07:39.442" endtime="20170517 20:07:39.443"></status>
</kw>
<status status="FAIL" starttime="20170517 20:07:38.975" endtime="20170517 20:07:39.445"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:07:49.469" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:07:49.468" endtime="20170517 20:07:49.471"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:07:49.473" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:07:49.472" endtime="20170517 20:07:49.473"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:07:49.476" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:07:49.474" endtime="20170517 20:07:49.476"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:07:49.478" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:07:49.477" endtime="20170517 20:07:49.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:07:50.162" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:07:49.481" endtime="20170517 20:07:50.162"></status>
</kw>
<msg timestamp="20170517 20:07:50.162" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:07:50.162" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:49.480" endtime="20170517 20:07:50.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:07:50.163" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:50.163" endtime="20170517 20:07:50.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:50.164" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:50.163" endtime="20170517 20:07:50.164"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:49.464" endtime="20170517 20:07:50.164"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:49.461" endtime="20170517 20:07:50.164"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:49.458" endtime="20170517 20:07:50.164"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:07:50.165" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:07:50.164" endtime="20170517 20:07:50.165"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:50.167" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:50.166" endtime="20170517 20:07:50.167"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:50.168" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:07:50.168" endtime="20170517 20:07:50.168"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:50.167" endtime="20170517 20:07:50.168"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:50.166" endtime="20170517 20:07:50.168"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:50.165" endtime="20170517 20:07:50.168"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:07:50.248" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:07:50.740" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:50.169" endtime="20170517 20:07:50.740"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:07:50.751" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:50.748" endtime="20170517 20:07:50.751"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:07:50.761" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:07:50.760" endtime="20170517 20:07:50.761"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:50.754" endtime="20170517 20:07:50.762"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:50.746" endtime="20170517 20:07:50.762"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:50.742" endtime="20170517 20:07:50.762"></status>
</kw>
<msg timestamp="20170517 20:07:50.763" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:07:49.455" endtime="20170517 20:07:50.763"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:07:50.765" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:07:50.763" endtime="20170517 20:07:50.766"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:07:50.768" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:07:50.769" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:07:50.769" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status status="PASS" starttime="20170517 20:07:50.767" endtime="20170517 20:07:50.769"></status>
</kw>
<msg timestamp="20170517 20:07:50.770" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170517 20:07:49.452" endtime="20170517 20:07:50.770"></status>
</kw>
<msg timestamp="20170517 20:07:50.771" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170517 20:07:49.449" endtime="20170517 20:07:50.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:07:50.774" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:07:50.772" endtime="20170517 20:07:50.774"></status>
</kw>
<status status="FAIL" starttime="20170517 20:07:49.447" endtime="20170517 20:07:50.774"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:08:00.782" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:08:00.782" endtime="20170517 20:08:00.784"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:08:00.784" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:08:00.784" endtime="20170517 20:08:00.784"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:08:00.785" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:08:00.785" endtime="20170517 20:08:00.785"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:08:00.786" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:08:00.785" endtime="20170517 20:08:00.786"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:08:01.499" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:08:00.786" endtime="20170517 20:08:01.499"></status>
</kw>
<msg timestamp="20170517 20:08:01.500" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:08:01.500" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:00.786" endtime="20170517 20:08:01.500"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:08:01.503" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:01.502" endtime="20170517 20:08:01.503"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:08:01.505" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:01.504" endtime="20170517 20:08:01.505"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:00.781" endtime="20170517 20:08:01.506"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:00.780" endtime="20170517 20:08:01.506"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:00.780" endtime="20170517 20:08:01.506"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:08:01.508" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:08:01.507" endtime="20170517 20:08:01.508"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:08:01.559" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:08:01.556" endtime="20170517 20:08:01.559"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:08:01.573" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:08:01.571" endtime="20170517 20:08:01.574"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:01.560" endtime="20170517 20:08:01.575"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:01.553" endtime="20170517 20:08:01.575"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:01.551" endtime="20170517 20:08:01.576"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:08:01.741" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:08:01.743" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:01.577" endtime="20170517 20:08:01.743"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:08:01.753" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:08:01.750" endtime="20170517 20:08:01.753"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:08:01.758" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:08:01.756" endtime="20170517 20:08:01.759"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:01.754" endtime="20170517 20:08:01.760"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:01.747" endtime="20170517 20:08:01.761"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:01.744" endtime="20170517 20:08:01.762"></status>
</kw>
<msg timestamp="20170517 20:08:01.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:00.779" endtime="20170517 20:08:01.765"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:08:01.769" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:01.767" endtime="20170517 20:08:01.769"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:08:01.771" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:08:01.771" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:08:01.772" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" starttime="20170517 20:08:01.770" endtime="20170517 20:08:01.772"></status>
</kw>
<msg timestamp="20170517 20:08:01.773" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:08:00.778" endtime="20170517 20:08:01.773"></status>
</kw>
<msg timestamp="20170517 20:08:01.774" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:08:00.777" endtime="20170517 20:08:01.774"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:08:01.777" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:08:01.775" endtime="20170517 20:08:01.777"></status>
</kw>
<status status="FAIL" starttime="20170517 20:08:00.776" endtime="20170517 20:08:01.779"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:08:11.785" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:08:11.784" endtime="20170517 20:08:11.785"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:08:11.786" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:08:11.785" endtime="20170517 20:08:11.786"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:08:11.786" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:08:11.786" endtime="20170517 20:08:11.786"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:08:11.787" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:08:11.786" endtime="20170517 20:08:11.787"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:08:11.985" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:08:11.787" endtime="20170517 20:08:11.985"></status>
</kw>
<msg timestamp="20170517 20:08:11.986" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:08:11.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:11.787" endtime="20170517 20:08:11.987"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:08:11.990" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:11.988" endtime="20170517 20:08:11.991"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:08:11.995" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:11.993" endtime="20170517 20:08:11.995"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:11.783" endtime="20170517 20:08:11.996"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:11.783" endtime="20170517 20:08:11.996"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:11.782" endtime="20170517 20:08:11.998"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:08:12.001" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:08:12.000" endtime="20170517 20:08:12.002"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:08:12.013" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:08:12.009" endtime="20170517 20:08:12.013"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:08:12.019" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:08:12.017" endtime="20170517 20:08:12.020"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:12.014" endtime="20170517 20:08:12.022"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:12.005" endtime="20170517 20:08:12.023"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:12.003" endtime="20170517 20:08:12.023"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:08:12.180" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:08:12.180" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:12.025" endtime="20170517 20:08:12.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:08:12.185" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:08:12.184" endtime="20170517 20:08:12.186"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:08:12.187" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:08:12.187" endtime="20170517 20:08:12.187"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:12.186" endtime="20170517 20:08:12.187"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:12.183" endtime="20170517 20:08:12.187"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:12.181" endtime="20170517 20:08:12.187"></status>
</kw>
<msg timestamp="20170517 20:08:12.187" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:11.781" endtime="20170517 20:08:12.188"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:08:12.188" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:12.188" endtime="20170517 20:08:12.189"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:08:12.189" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:08:12.189" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:08:12.189" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" starttime="20170517 20:08:12.189" endtime="20170517 20:08:12.189"></status>
</kw>
<msg timestamp="20170517 20:08:12.190" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:08:11.781" endtime="20170517 20:08:12.190"></status>
</kw>
<msg timestamp="20170517 20:08:12.190" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:08:11.780" endtime="20170517 20:08:12.190"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:08:12.191" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:08:12.190" endtime="20170517 20:08:12.191"></status>
</kw>
<status status="FAIL" starttime="20170517 20:08:11.780" endtime="20170517 20:08:12.191"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:08:22.213" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:08:22.212" endtime="20170517 20:08:22.214"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:08:22.215" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:08:22.214" endtime="20170517 20:08:22.215"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:08:22.217" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:08:22.216" endtime="20170517 20:08:22.217"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:08:22.218" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:08:22.218" endtime="20170517 20:08:22.219"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:08:22.503" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:08:22.220" endtime="20170517 20:08:22.503"></status>
</kw>
<msg timestamp="20170517 20:08:22.504" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:08:22.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:22.219" endtime="20170517 20:08:22.505"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:08:22.508" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:22.506" endtime="20170517 20:08:22.509"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:08:22.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:22.510" endtime="20170517 20:08:22.513"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:22.211" endtime="20170517 20:08:22.513"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:22.211" endtime="20170517 20:08:22.513"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:22.205" endtime="20170517 20:08:22.514"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:08:22.517" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:08:22.515" endtime="20170517 20:08:22.517"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:08:22.532" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:08:22.525" endtime="20170517 20:08:22.532"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:08:22.536" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:08:22.535" endtime="20170517 20:08:22.536"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:22.532" endtime="20170517 20:08:22.536"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:22.522" endtime="20170517 20:08:22.537"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:22.521" endtime="20170517 20:08:22.537"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:08:22.610" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:08:22.611" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:22.539" endtime="20170517 20:08:22.611"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:08:22.621" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:08:22.619" endtime="20170517 20:08:22.622"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:08:22.626" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:08:22.625" endtime="20170517 20:08:22.627"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:22.622" endtime="20170517 20:08:22.628"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:22.617" endtime="20170517 20:08:22.628"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:22.614" endtime="20170517 20:08:22.628"></status>
</kw>
<msg timestamp="20170517 20:08:22.630" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:22.204" endtime="20170517 20:08:22.630"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:08:22.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:22.632" endtime="20170517 20:08:22.634"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:08:22.637" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:08:22.637" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:08:22.638" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" starttime="20170517 20:08:22.635" endtime="20170517 20:08:22.638"></status>
</kw>
<msg timestamp="20170517 20:08:22.639" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:08:22.203" endtime="20170517 20:08:22.640"></status>
</kw>
<msg timestamp="20170517 20:08:22.640" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:08:22.202" endtime="20170517 20:08:22.641"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:08:22.643" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:08:22.642" endtime="20170517 20:08:22.644"></status>
</kw>
<status status="FAIL" starttime="20170517 20:08:22.199" endtime="20170517 20:08:22.645"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:08:32.652" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:08:32.652" endtime="20170517 20:08:32.653"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:08:32.653" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:08:32.653" endtime="20170517 20:08:32.653"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:08:32.654" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:08:32.654" endtime="20170517 20:08:32.654"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:08:32.655" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:08:32.654" endtime="20170517 20:08:32.655"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:08:33.510" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:08:32.655" endtime="20170517 20:08:33.510"></status>
</kw>
<msg timestamp="20170517 20:08:33.510" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:08:33.510" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:32.655" endtime="20170517 20:08:33.510"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:08:33.511" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:33.511" endtime="20170517 20:08:33.511"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:08:33.512" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:33.511" endtime="20170517 20:08:33.512"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:32.651" endtime="20170517 20:08:33.512"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:32.650" endtime="20170517 20:08:33.512"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:32.650" endtime="20170517 20:08:33.512"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:08:33.513" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:08:33.512" endtime="20170517 20:08:33.513"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:08:33.515" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:08:33.514" endtime="20170517 20:08:33.515"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:08:33.516" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:08:33.516" endtime="20170517 20:08:33.516"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:33.515" endtime="20170517 20:08:33.516"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:33.514" endtime="20170517 20:08:33.516"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:33.513" endtime="20170517 20:08:33.517"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:08:33.586" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:08:33.586" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:33.517" endtime="20170517 20:08:33.586"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:08:33.588" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:08:33.587" endtime="20170517 20:08:33.588"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:08:33.589" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:08:33.589" endtime="20170517 20:08:33.589"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:33.588" endtime="20170517 20:08:33.590"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:33.587" endtime="20170517 20:08:33.590"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:33.586" endtime="20170517 20:08:33.590"></status>
</kw>
<msg timestamp="20170517 20:08:33.590" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:32.649" endtime="20170517 20:08:33.590"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:08:33.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:33.590" endtime="20170517 20:08:33.591"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:08:33.591" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:08:33.591" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:08:33.591" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" starttime="20170517 20:08:33.591" endtime="20170517 20:08:33.591"></status>
</kw>
<msg timestamp="20170517 20:08:33.592" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:08:32.648" endtime="20170517 20:08:33.592"></status>
</kw>
<msg timestamp="20170517 20:08:33.592" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:08:32.648" endtime="20170517 20:08:33.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:08:33.593" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:08:33.592" endtime="20170517 20:08:33.593"></status>
</kw>
<status status="FAIL" starttime="20170517 20:08:32.647" endtime="20170517 20:08:33.593"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:08:43.599" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:08:43.598" endtime="20170517 20:08:43.599"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:08:43.600" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:08:43.600" endtime="20170517 20:08:43.600"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:08:43.600" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:08:43.600" endtime="20170517 20:08:43.600"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:08:43.601" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:08:43.601" endtime="20170517 20:08:43.601"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:08:43.796" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:08:43.602" endtime="20170517 20:08:50.229"></status>
</kw>
<msg timestamp="20170517 20:08:50.230" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:08:50.230" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:43.601" endtime="20170517 20:08:50.230"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:08:50.232" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:50.231" endtime="20170517 20:08:50.232"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:08:50.234" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:50.232" endtime="20170517 20:08:50.234"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:43.598" endtime="20170517 20:08:50.235"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:43.597" endtime="20170517 20:08:50.235"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:43.596" endtime="20170517 20:08:50.236"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:08:50.237" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:08:50.236" endtime="20170517 20:08:50.237"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:08:50.241" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:08:50.240" endtime="20170517 20:08:50.241"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:08:50.242" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:08:50.242" endtime="20170517 20:08:50.243"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:50.241" endtime="20170517 20:08:50.243"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:50.239" endtime="20170517 20:08:50.244"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:50.238" endtime="20170517 20:08:50.244"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:08:50.329" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:08:50.329" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:50.244" endtime="20170517 20:08:50.330"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:08:50.332" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:08:50.332" endtime="20170517 20:08:50.332"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:08:50.333" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:08:50.333" endtime="20170517 20:08:50.333"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:50.332" endtime="20170517 20:08:50.333"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:50.331" endtime="20170517 20:08:50.334"></status>
</kw>
<status status="PASS" starttime="20170517 20:08:50.330" endtime="20170517 20:08:50.334"></status>
</kw>
<msg timestamp="20170517 20:08:50.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:08:43.596" endtime="20170517 20:08:50.334"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:08:50.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:08:50.334" endtime="20170517 20:08:50.335"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:08:50.335" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:08:50.335" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:08:50.335" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" starttime="20170517 20:08:50.335" endtime="20170517 20:08:50.335"></status>
</kw>
<msg timestamp="20170517 20:08:50.336" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:08:43.595" endtime="20170517 20:08:50.336"></status>
</kw>
<msg timestamp="20170517 20:08:50.337" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:08:43.595" endtime="20170517 20:08:50.337"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:08:50.339" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:08:50.338" endtime="20170517 20:08:50.340"></status>
</kw>
<status status="FAIL" starttime="20170517 20:08:43.594" endtime="20170517 20:08:50.340"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:09:00.352" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:09:00.351" endtime="20170517 20:09:00.353"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:09:00.354" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:09:00.354" endtime="20170517 20:09:00.355"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:09:00.356" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:09:00.355" endtime="20170517 20:09:00.356"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:09:00.357" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:09:00.356" endtime="20170517 20:09:00.357"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:09:00.572" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:09:00.359" endtime="20170517 20:09:00.572"></status>
</kw>
<msg timestamp="20170517 20:09:00.573" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:09:00.573" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:09:00.358" endtime="20170517 20:09:00.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:09:00.574" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:09:00.573" endtime="20170517 20:09:00.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:09:00.575" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:09:00.574" endtime="20170517 20:09:00.575"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:00.349" endtime="20170517 20:09:00.575"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:00.348" endtime="20170517 20:09:00.575"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:00.347" endtime="20170517 20:09:00.575"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:09:00.576" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:09:00.575" endtime="20170517 20:09:00.576"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:09:00.578" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:09:00.577" endtime="20170517 20:09:00.578"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:09:00.579" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:09:00.579" endtime="20170517 20:09:00.579"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:00.578" endtime="20170517 20:09:00.579"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:00.576" endtime="20170517 20:09:00.580"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:00.576" endtime="20170517 20:09:00.580"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:09:04.777" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:09:04.778" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:09:00.580" endtime="20170517 20:09:04.778"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:09:04.781" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:09:04.780" endtime="20170517 20:09:04.781"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:09:04.782" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:09:04.781" endtime="20170517 20:09:04.782"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:04.781" endtime="20170517 20:09:04.782"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:04.779" endtime="20170517 20:09:04.782"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:04.779" endtime="20170517 20:09:04.782"></status>
</kw>
<msg timestamp="20170517 20:09:04.783" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:09:00.345" endtime="20170517 20:09:04.783"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:09:04.783" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:09:04.783" endtime="20170517 20:09:04.783"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:09:04.784" level="INFO">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:09:04.784" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:09:04.784" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status status="PASS" starttime="20170517 20:09:04.784" endtime="20170517 20:09:04.784"></status>
</kw>
<msg timestamp="20170517 20:09:04.785" level="INFO">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:09:00.344" endtime="20170517 20:09:04.785"></status>
</kw>
<msg timestamp="20170517 20:09:04.785" level="INFO">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170517 20:09:00.343" endtime="20170517 20:09:04.785"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170517 20:09:04.786" level="FAIL">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170517 20:09:04.786" endtime="20170517 20:09:04.786"></status>
</kw>
<status status="FAIL" starttime="20170517 20:09:00.342" endtime="20170517 20:09:04.786"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:09:14.793" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:09:14.793" endtime="20170517 20:09:14.794"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:09:14.794" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:09:14.794" endtime="20170517 20:09:14.794"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:09:14.795" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:09:14.794" endtime="20170517 20:09:14.795"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:09:14.795" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:09:14.795" endtime="20170517 20:09:14.796"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:09:14.989" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:09:14.796" endtime="20170517 20:09:14.990"></status>
</kw>
<msg timestamp="20170517 20:09:14.990" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:09:14.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:09:14.796" endtime="20170517 20:09:14.990"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:09:14.990" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:09:14.990" endtime="20170517 20:09:14.991"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:09:14.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:09:14.991" endtime="20170517 20:09:14.992"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:14.792" endtime="20170517 20:09:14.992"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:14.792" endtime="20170517 20:09:14.992"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:14.791" endtime="20170517 20:09:14.992"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:09:14.992" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170517 20:09:14.992" endtime="20170517 20:09:14.992"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:09:14.994" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:09:14.994" endtime="20170517 20:09:14.995"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:09:14.995" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:09:14.995" endtime="20170517 20:09:14.996"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:14.995" endtime="20170517 20:09:14.996"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:14.993" endtime="20170517 20:09:14.996"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:14.993" endtime="20170517 20:09:14.996"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:09:15.091" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170517 20:09:15.091" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:09:14.996" endtime="20170517 20:09:15.092"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:09:15.099" level="INFO">${msg} = Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:09:15.096" endtime="20170517 20:09:15.099"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:09:15.103" level="INFO">Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:09:15.102" endtime="20170517 20:09:15.103"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.100" endtime="20170517 20:09:15.103"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.093" endtime="20170517 20:09:15.103"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.092" endtime="20170517 20:09:15.104"></status>
</kw>
<msg timestamp="20170517 20:09:15.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:09:14.790" endtime="20170517 20:09:15.105"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:09:15.107" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:09:15.105" endtime="20170517 20:09:15.107"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:09:15.109" level="INFO">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:09:15.109" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:09:15.109" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Starting OS'}</msg>
<status status="PASS" starttime="20170517 20:09:15.108" endtime="20170517 20:09:15.109"></status>
</kw>
<msg timestamp="20170517 20:09:15.110" level="INFO">${state} = FW Progress, Starting OS</msg>
<status status="PASS" starttime="20170517 20:09:14.789" endtime="20170517 20:09:15.110"></status>
</kw>
<msg timestamp="20170517 20:09:15.110" level="INFO">${boot_progress} = FW Progress, Starting OS</msg>
<status status="PASS" starttime="20170517 20:09:14.789" endtime="20170517 20:09:15.111"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.111" endtime="20170517 20:09:15.112"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:14.788" endtime="20170517 20:09:15.112"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:38.974" endtime="20170517 20:09:15.112"></status>
</kw>
<kw library="utils" name="Flush REST Sessions">
<doc>Removes all the active session objects</doc>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170517 20:09:15.114" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170517 20:09:15.114" endtime="20170517 20:09:15.118"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.113" endtime="20170517 20:09:15.119"></status>
</kw>
<status status="PASS" starttime="20170517 20:07:00.783" endtime="20170517 20:09:15.119"></status>
</kw>
<status status="PASS" starttime="20170517 20:04:46.956" endtime="20170517 20:09:15.119"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:09:15.125" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:09:15.124" endtime="20170517 20:09:15.125"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:09:15.126" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:09:15.125" endtime="20170517 20:09:15.126"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:09:15.126" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:09:15.126" endtime="20170517 20:09:15.126"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:09:15.127" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:09:15.127" endtime="20170517 20:09:15.127"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:09:15.454" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:09:15.128" endtime="20170517 20:09:15.454"></status>
</kw>
<msg timestamp="20170517 20:09:15.454" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:09:15.454" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:09:15.127" endtime="20170517 20:09:15.454"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:09:15.455" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:09:15.454" endtime="20170517 20:09:15.455"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:09:15.455" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:09:15.455" endtime="20170517 20:09:15.455"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.124" endtime="20170517 20:09:15.456"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.123" endtime="20170517 20:09:15.456"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.123" endtime="20170517 20:09:15.456"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:09:15.456" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170517 20:09:15.456" endtime="20170517 20:09:15.456"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:09:15.459" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:09:15.458" endtime="20170517 20:09:15.459"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:09:15.460" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:09:15.459" endtime="20170517 20:09:15.460"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.459" endtime="20170517 20:09:15.460"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.457" endtime="20170517 20:09:15.460"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.457" endtime="20170517 20:09:15.460"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:09:15.523" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170517 20:09:15.523" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:09:15.460" endtime="20170517 20:09:15.523"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:09:15.525" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:09:15.525" endtime="20170517 20:09:15.525"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:09:15.526" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:09:15.526" endtime="20170517 20:09:15.526"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.525" endtime="20170517 20:09:15.526"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.524" endtime="20170517 20:09:15.526"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.524" endtime="20170517 20:09:15.526"></status>
</kw>
<msg timestamp="20170517 20:09:15.527" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:09:15.122" endtime="20170517 20:09:15.527"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:09:15.527" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:09:15.527" endtime="20170517 20:09:15.527"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:09:15.528" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:09:15.528" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:09:15.528" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20170517 20:09:15.528" endtime="20170517 20:09:15.528"></status>
</kw>
<msg timestamp="20170517 20:09:15.528" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170517 20:09:15.121" endtime="20170517 20:09:15.528"></status>
</kw>
<msg timestamp="20170517 20:09:15.529" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170517 20:09:15.121" endtime="20170517 20:09:15.529"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170517 20:09:15.530" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170517 20:09:15.529" endtime="20170517 20:09:15.530"></status>
</kw>
<msg timestamp="20170517 20:09:15.530" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170517 20:09:15.529" endtime="20170517 20:09:15.530"></status>
</kw>
<msg timestamp="20170517 20:09:15.530" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170517 20:09:15.121" endtime="20170517 20:09:15.530"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.531" endtime="20170517 20:09:15.531"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.531" endtime="20170517 20:09:15.532"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170517 20:09:15.541" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170517 20:09:15.533" endtime="20170517 20:09:15.541"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170517 20:09:15.542" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200446745346_TestsSecurityTestSsl/20170517200446745346_TestSSLConnection/</msg>
<status status="PASS" starttime="20170517 20:09:15.542" endtime="20170517 20:09:15.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.542" endtime="20170517 20:09:15.543"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.543" endtime="20170517 20:09:15.543"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170517 20:09:15.544" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs"&gt;/tmp/fspcibld/13665/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20170517 20:09:15.543" endtime="20170517 20:09:15.544"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170517 20:09:15.545" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20170517 20:09:15.545" endtime="20170517 20:09:15.545"></status>
</kw>
<msg timestamp="20170517 20:09:15.545" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20170517 20:09:15.544" endtime="20170517 20:09:15.545"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.546" endtime="20170517 20:09:15.546"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.546" endtime="20170517 20:09:15.547"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170517 20:09:15.548" level="INFO">${cur_time} = 2017-05-17 20:09:15:547825</msg>
<status status="PASS" starttime="20170517 20:09:15.547" endtime="20170517 20:09:15.548"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170517 20:09:15.549" level="INFO">${cur_time} = 20170517200915547825</msg>
<status status="PASS" starttime="20170517 20:09:15.548" endtime="20170517 20:09:15.549"></status>
</kw>
<msg timestamp="20170517 20:09:15.549" level="INFO">${cur_time} = 20170517200915547825</msg>
<status status="PASS" starttime="20170517 20:09:15.547" endtime="20170517 20:09:15.549"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170517 20:09:15.550" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:15.549" endtime="20170517 20:09:15.550"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.532" endtime="20170517 20:09:15.550"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.120" endtime="20170517 20:09:15.550"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170517 20:09:15.552" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:09:15.551" endtime="20170517 20:09:15.552"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170517 20:09:15.552" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:09:15.552" endtime="20170517 20:09:15.553"></status>
</kw>
<msg timestamp="20170517 20:09:15.553" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:09:15.551" endtime="20170517 20:09:15.553"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:09:15.554" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170517 20:09:15.554" endtime="20170517 20:09:15.554"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.554" endtime="20170517 20:09:15.561"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:09:15.566" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:09:15.571" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:09:15.571" level="INFO">${output} = /tmp/fspcibld/13665/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170517 20:09:15.562" endtime="20170517 20:09:15.571"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.573" endtime="20170517 20:09:15.581"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.582" endtime="20170517 20:09:15.583"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:09:15.583" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170517 20:09:15.583" endtime="20170517 20:09:15.583"></status>
</kw>
<msg timestamp="20170517 20:09:15.584" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170517 20:09:15.553" endtime="20170517 20:09:15.584"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:09:15.584" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170517 20:09:15.584" endtime="20170517 20:09:15.584"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.584" endtime="20170517 20:09:15.592"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170517 20:09:15.595" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:09:15.606" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:09:15.606" level="INFO">${os_con_pid} = 194</msg>
<status status="PASS" starttime="20170517 20:09:15.592" endtime="20170517 20:09:15.606"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.608" endtime="20170517 20:09:15.619"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:09:15.620" level="INFO">${cmd_buf} = kill -9 194</msg>
<status status="PASS" starttime="20170517 20:09:15.619" endtime="20170517 20:09:15.620"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.621" endtime="20170517 20:09:15.629"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.620" endtime="20170517 20:09:15.629"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20170517 20:09:15.633" level="INFO">Running command 'kill -9 194 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20170517 20:09:15.630" endtime="20170517 20:09:15.636"></status>
</kw>
<msg timestamp="20170517 20:09:15.637" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:09:15.637" level="INFO">${output} = </msg>
<status status="PASS" starttime="20170517 20:09:15.630" endtime="20170517 20:09:15.637"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.641" endtime="20170517 20:09:15.656"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.639" endtime="20170517 20:09:15.656"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:09:15.656" level="INFO">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170517 20:09:15.656" endtime="20170517 20:09:15.656"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.657" endtime="20170517 20:09:15.664"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:09:15.668" level="INFO">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:09:15.673" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:09:15.674" level="INFO">${output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:gMCtopUMYpxiyP85C0VORiMp9Fjox3UGLCsLwPOSKH8...</msg>
<status status="PASS" starttime="20170517 20:09:15.664" endtime="20170517 20:09:15.674"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.676" endtime="20170517 20:09:15.686"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.686" endtime="20170517 20:09:15.687"></status>
</kw>
<msg timestamp="20170517 20:09:15.687" level="INFO">${sol_log} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:gMCtopUMYpxiyP85C0VORiMp9Fjox3UGLCsLwPOSKH8...</msg>
<status status="PASS" starttime="20170517 20:09:15.550" endtime="20170517 20:09:15.687"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170517 20:09:15.688" level="INFO">spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:gMCtopUMYpxiyP85C0VORiMp9Fjox3UGLCsLwPOSKH8.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.49903|secure|SecureROM invalid - skipping functionality
 12.16525|ISTEP  6. 5
 12.84970|ISTEP  6. 6
 12.85046|ISTEP  6. 7
 13.61752|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.61753|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.92224|ISTEP  6. 8
 13.97440|SECURE|Security Access Bit&gt; 0x0000000000000000
 13.97441|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 13.97457|ISTEP  6. 9
 14.61048|ISTEP  6.10
 14.66125|ISTEP  6.11
 14.66205|ISTEP  6.12
 14.91726|ISTEP  7. 2
 16.93401|ISTEP  7. 3
 17.57893|ISTEP  7. 4
 20.39413|ISTEP  7. 5
 20.47235|ISTEP  8. 1
 20.90247|ISTEP  8. 2
 20.95440|ISTEP  8. 3
 21.03237|ISTEP  8. 4
 31.41366|ISTEP  8. 5
 31.43918|ISTEP  8. 6
 31.44229|ISTEP  8. 7
 31.62913|ISTEP  8. 8
 31.67997|ISTEP  8. 9
 31.80760|ISTEP  8.10
 31.80974|ISTEP  8.11
 31.81063|ISTEP  8.12
 32.28848|ISTEP  8.13
 35.98924|ISTEP  8.14
 35.99102|ISTEP  8.15
 35.99261|ISTEP  8.16
 36.25468|ISTEP  8.17
 36.55040|================================================
 36.55041|Error reported by istep (0x1700) PLID 0x90000014
 36.57577|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 36.57578|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 36.57579|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 36.57580|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 36.57581|  UserData2  Target PEC HUID : 0x0000000000000000
 36.60116|------------------------------------------------
 36.60117|  Callout type             : Procedure Callout
 36.60117|  Procedure                : EPUB_PRC_HB_CODE
 36.60118|  Priority                 : SRCI_PRIORITY_HIGH
 36.60119|------------------------------------------------
 36.60120|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 36.60120|================================================
 37.59495|ISTEP  8.18
 37.59650|ISTEP  8.19
 37.61139|ISTEP  8.20
 37.62000|ISTEP  9. 1
 37.74581|ISTEP  9. 2
 38.86138|ISTEP  9. 3
 38.88735|ISTEP  9. 4
 39.22983|ISTEP  9. 5
 39.25586|ISTEP  9. 6
 39.30860|ISTEP  9. 7
 39.39769|ISTEP  9. 8
 39.42846|ISTEP 10. 1
 40.00624|ISTEP 10. 2
 40.10482|================================================
 40.10483|Error reported by i2c (0x0700) PLID 0x90000015
 40.13092|  Timed out waiting for command complete.
 40.13093|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 40.13093|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 40.15686|  UserData1  Status Register Value : 0x0001000000050001
 40.15687|  UserData2  Master Target : 0x0200ffff0190004d
 40.15687|------------------------------------------------
 40.15688|  Callout type             : Hardware Callout
 40.15689|  CPU id                   : 6
 40.15690|  Target                   : Physical:/Sys0/Node0/Proc1
 40.15691|  Deconfig State           : NO_DECONFIG
 40.15692|  GARD Error Type          : GARD_NULL
 40.15693|  Priority                 : SRCI_PRIORITY_HIGH
 40.15693|------------------------------------------------
 40.15694|  Callout type             : Procedure Callout
 40.15695|  Procedure                : EPUB_PRC_HB_CODE
 40.15696|  Priority                 : SRCI_PRIORITY_LOW
 40.15697|------------------------------------------------
 40.15698|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 40.15698|================================================
 43.69189|ISTEP 10. 3
 44.02297|ISTEP 11. 1
 44.10069|ISTEP 12. 1
 44.15279|ISTEP 13. 1
 45.27295|ISTEP 13. 2
 45.50710|ISTEP 13. 3
 45.79374|ISTEP 13. 4
 45.81813|ISTEP 13. 6
 46.02912|ISTEP 13. 7
 46.03094|ISTEP 13. 8
 48.33106|ISTEP 13. 9
 48.88460|ISTEP 13.10
 50.28194|ISTEP 13.11
 50.93823|ISTEP 13.12
 50.94089|ISTEP 13.13
 51.16089|ISTEP 14. 1
 99.66577|ISTEP 14. 2
 99.72090|ISTEP 14. 3
 99.83069|ISTEP 14. 4
 99.83346|ISTEP 14. 5
100.14694|ISTEP 14. 6
100.20418|ISTEP 14. 7
100.21014|ISTEP 15. 1
103.25795|ISTEP 15. 2
103.28637|ISTEP 15. 3
103.34527|ISTEP 15. 4
103.50678|ISTEP 16. 1
  0.03084|ISTEP 16. 2
105.10689|ISTEP 16. 3
105.13863|ISTEP 16. 4
105.23028|ISTEP 16. 5
105.25961|ISTEP 18.11
106.13808|ISTEP 18.12
106.11626|ISTEP 20. 1
108.13628|ISTEP 20. 2
111.25231|ISTEP 21. 1


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.37952|secure|SecureROM invalid - skipping functionality
  8.23977|ERRL|Dumping errors reported prior to registration
  8.38876|================================================
  8.38876|Error reported by istep (0x1700) PLID 0x90000014
  8.41372|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
  8.41372|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
  8.41373|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
  8.41373|  UserData1  Target processor chip's HUID : 0x00050001002d0004
  8.41374|  UserData2  Target PEC HUID : 0x0000000000000000
  8.46424|------------------------------------------------
  8.46425|  Callout type             : Procedure Callout
  8.46425|  Procedure                : EPUB_PRC_HB_CODE
  8.46426|  Priority                 : SRCI_PRIORITY_HIGH
  8.46427|------------------------------------------------
  8.46427|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
  8.46428|================================================
 10.48286|================================================
 10.48287|Error reported by i2c (0x0700) PLID 0x90000015
 10.53341|  Timed out waiting for command complete.
 10.53342|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 10.53342|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 10.55873|  UserData1  Status Register Value : 0x0001000000050001
 10.55874|  UserData2  Master Target : 0x0200ffff0190004d
 10.55875|------------------------------------------------
 10.55876|  Callout type             : Hardware Callout
 10.55876|  CPU id                   : 6
 10.55878|  Target                   : Physical:/Sys0/Node0/Proc1
 10.55879|  Deconfig State           : NO_DECONFIG
 10.55880|  GARD Error Type          : GARD_NULL
 10.55881|  Priority                 : SRCI_PRIORITY_HIGH
 10.55881|------------------------------------------------
 10.55882|  Callout type             : Procedure Callout
 10.55883|  Procedure                : EPUB_PRC_HB_CODE
 10.55884|  Priority                 : SRCI_PRIORITY_LOW
 10.55885|------------------------------------------------
 10.55885|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 10.55886|================================================
 12.36962|ISTEP  6. 5
 13.02937|ISTEP  6. 6
 13.02995|ISTEP  6. 7
 13.79589|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.79590|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 14.10105|ISTEP  6. 8
 14.15309|SECURE|Security Access Bit&gt; 0x0000000000000000
 14.15310|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 14.15327|ISTEP  6. 9
 14.78930|ISTEP  6.10
 14.84019|ISTEP  6.11
 14.84071|ISTEP  6.12
 15.09550|ISTEP  7. 2
 17.11434|ISTEP  7. 3
 17.76077|ISTEP  7. 4
 20.57914|ISTEP  7. 5
 20.65744|ISTEP  8. 1
 21.08637|ISTEP  8. 2
 21.13818|ISTEP  8. 3
 21.21758|ISTEP  8. 4
 31.59904|ISTEP  8. 5
 31.62451|ISTEP  8. 6
 31.62757|ISTEP  8. 7
 31.81405|ISTEP  8. 8
 31.86536|ISTEP  8. 9
 31.99270|ISTEP  8.10
 31.99425|ISTEP  8.11
 31.99488|ISTEP  8.12
 32.47163|ISTEP  8.13
 36.18116|ISTEP  8.14
 36.18300|ISTEP  8.15
 36.18444|ISTEP  8.16
 36.44604|ISTEP  8.17
 36.56715|================================================
 36.56716|Error reported by istep (0x1700) PLID 0x90000017
 36.56718|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 36.56719|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 36.56720|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 36.56721|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 36.56722|  UserData2  Target PEC HUID : 0x0000000000000000
 36.56723|------------------------------------------------
 36.56724|  Callout type             : Procedure Callout
 36.56725|  Procedure                : EPUB_PRC_HB_CODE
 36.56726|  Priority                 : SRCI_PRIORITY_HIGH
 36.56727|------------------------------------------------
 36.56728|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 36.56728|================================================
 37.64354|ISTEP  8.18
 37.64515|ISTEP  8.19
 37.65992|ISTEP  8.20
 37.66870|ISTEP  9. 1
 37.79465|ISTEP  9. 2
 38.89609|ISTEP  9. 3
 38.92231|ISTEP  9. 4
 39.26340|ISTEP  9. 5
 39.28942|ISTEP  9. 6
 39.34245|ISTEP  9. 7
 39.43348|ISTEP  9. 8
 39.46427|ISTEP 10. 1
 40.04092|ISTEP 10. 2
 40.06354|================================================
 40.06355|Error reported by i2c (0x0700) PLID 0x90000018
 40.06356|  Timed out waiting for command complete.
 40.06357|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 40.06358|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 40.06359|  UserData1  Status Register Value : 0x0001000000050001
 40.06360|  UserData2  Master Target : 0x0200ffff0190004d
 40.06361|------------------------------------------------
 40.06361|  Callout type             : Hardware Callout
 40.06362|  CPU id                   : 6
 40.06364|  Target                   : Physical:/Sys0/Node0/Proc1
 40.06365|  Deconfig State           : NO_DECONFIG
 40.06365|  GARD Error Type          : GARD_NULL
 40.06366|  Priority                 : SRCI_PRIORITY_HIGH
 40.06367|------------------------------------------------
 40.06368|  Callout type             : Procedure Callout
 40.06369|  Procedure                : EPUB_PRC_HB_CODE
 40.06369|  Priority                 : SRCI_PRIORITY_LOW
 40.06370|------------------------------------------------
 40.06371|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 40.06372|================================================
 43.68302|ISTEP 10. 3
 44.01402|ISTEP 11. 1
 44.09172|ISTEP 12. 1
 44.14387|ISTEP 13. 1
 45.26624|ISTEP 13. 2
 45.49997|ISTEP 13. 3
 45.75698|ISTEP 13. 4
 45.80434|ISTEP 13. 6
 46.01373|ISTEP 13. 7
 46.01882|ISTEP 13. 8
 48.29120|ISTEP 13. 9
 48.84506|ISTEP 13.10
 50.24267|ISTEP 13.11
 50.90087|ISTEP 13.12
 50.90330|ISTEP 13.13
 51.12381|ISTEP 14. 1
 99.62129|ISTEP 14. 2
 99.67637|ISTEP 14. 3
 99.78571|ISTEP 14. 4
 99.78974|ISTEP 14. 5
100.10272|ISTEP 14. 6
100.15924|ISTEP 14. 7
100.16498|ISTEP 15. 1
103.21047|ISTEP 15. 2
103.23815|ISTEP 15. 3
103.29685|ISTEP 15. 4
103.45730|ISTEP 16. 1
  0.03076|ISTEP 16. 2
105.06812|ISTEP 16. 3
105.09649|ISTEP 16. 4
105.17483|ISTEP 16. 5
105.22705|ISTEP 18.11
106.07762|ISTEP 18.12
106.09326|ISTEP 20. 1
108.06147|ISTEP 20. 2
111.21204|ISTEP 21. 1</msg>
<status status="PASS" starttime="20170517 20:09:15.687" endtime="20170517 20:09:15.688"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.120" endtime="20170517 20:09:15.688"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="PASS" starttime="20170517 20:04:46.805" endtime="20170517 20:09:15.688" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="Check For Application Failures">
<kw type="setup" library="utils" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170517 20:09:15.691" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:09:15.691" endtime="20170517 20:09:15.691"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170517 20:09:15.692" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:09:15.691" endtime="20170517 20:09:15.692"></status>
</kw>
<msg timestamp="20170517 20:09:15.692" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:09:15.690" endtime="20170517 20:09:15.692"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170517 20:09:15.694" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:09:15.693" endtime="20170517 20:09:15.694"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170517 20:09:15.695" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:09:15.694" endtime="20170517 20:09:15.695"></status>
</kw>
<msg timestamp="20170517 20:09:15.695" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:09:15.693" endtime="20170517 20:09:15.695"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:09:15.696" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170517 20:09:15.695" endtime="20170517 20:09:15.696"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.696" endtime="20170517 20:09:15.703"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:09:15.707" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:09:15.713" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:09:15.713" level="INFO">${output} = /tmp/fspcibld/13665/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170517 20:09:15.703" endtime="20170517 20:09:15.713"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.715" endtime="20170517 20:09:15.723"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.723" endtime="20170517 20:09:15.724"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:09:15.725" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170517 20:09:15.724" endtime="20170517 20:09:15.725"></status>
</kw>
<msg timestamp="20170517 20:09:15.725" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170517 20:09:15.695" endtime="20170517 20:09:15.725"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:09:15.726" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170517 20:09:15.726" endtime="20170517 20:09:15.726"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.726" endtime="20170517 20:09:15.734"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170517 20:09:15.738" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:09:15.745" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:09:15.745" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20170517 20:09:15.735" endtime="20170517 20:09:15.746"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.747" endtime="20170517 20:09:15.759"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:09:15.760" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20170517 20:09:15.759" endtime="20170517 20:09:15.760"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.760" endtime="20170517 20:09:15.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:09:15.761" level="INFO">${rc} = None</msg>
<msg timestamp="20170517 20:09:15.761" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20170517 20:09:15.761" endtime="20170517 20:09:15.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.762" endtime="20170517 20:09:15.762"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:09:15.763" level="INFO">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170517 20:09:15.762" endtime="20170517 20:09:15.763"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.763" endtime="20170517 20:09:15.770"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:09:15.774" level="INFO">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:09:15.778" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:09:15.778" level="INFO">${output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:gMCtopUMYpxiyP85C0VORiMp9Fjox3UGLCsLwPOSKH8...</msg>
<status status="PASS" starttime="20170517 20:09:15.770" endtime="20170517 20:09:15.779"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.780" endtime="20170517 20:09:15.789"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.790" endtime="20170517 20:09:15.790"></status>
</kw>
<msg timestamp="20170517 20:09:15.791" level="INFO">${log_output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:gMCtopUMYpxiyP85C0VORiMp9Fjox3UGLCsLwPOSKH8...</msg>
<status status="PASS" starttime="20170517 20:09:15.692" endtime="20170517 20:09:15.791"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170517 20:09:15.792" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:15.791" endtime="20170517 20:09:15.792"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:09:15.793" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170517 20:09:15.792" endtime="20170517 20:09:15.793"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.793" endtime="20170517 20:09:15.800"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:09:15.804" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:09:15.807" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:09:15.807" level="INFO">${output} = /tmp/fspcibld/13665/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170517 20:09:15.800" endtime="20170517 20:09:15.808"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.809" endtime="20170517 20:09:15.820"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.820" endtime="20170517 20:09:15.820"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:09:15.821" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170517 20:09:15.821" endtime="20170517 20:09:15.821"></status>
</kw>
<msg timestamp="20170517 20:09:15.822" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170517 20:09:15.792" endtime="20170517 20:09:15.822"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:09:15.822" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" starttime="20170517 20:09:15.822" endtime="20170517 20:09:15.822"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.822" endtime="20170517 20:09:15.830"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:09:15.834" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170517 20:09:15.837" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:09:15.837" level="INFO">${output} = </msg>
<status status="PASS" starttime="20170517 20:09:15.831" endtime="20170517 20:09:15.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.839" endtime="20170517 20:09:15.840"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.690" endtime="20170517 20:09:15.840"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170517 20:09:15.846" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170517 20:09:15.845" endtime="20170517 20:09:15.846"></status>
</kw>
<msg timestamp="20170517 20:09:15.847" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170517 20:09:15.845" endtime="20170517 20:09:15.847"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.848" endtime="20170517 20:09:15.849"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.847" endtime="20170517 20:09:15.849"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170517 20:09:15.853" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170517 20:09:15.851" endtime="20170517 20:09:15.853"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170517 20:09:15.853" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170517 20:09:15.853" endtime="20170517 20:09:15.853"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170517 20:09:15.854" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170517 20:09:15.854" endtime="20170517 20:09:15.854"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170517 20:09:15.855" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170517 20:09:15.854" endtime="20170517 20:09:15.855"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.851" endtime="20170517 20:09:15.855"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.850" endtime="20170517 20:09:15.855"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170517 20:09:15.856" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170517 20:09:15.856" endtime="20170517 20:09:15.856"></status>
</kw>
<msg timestamp="20170517 20:09:15.856" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170517 20:09:15.856" endtime="20170517 20:09:15.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.858" endtime="20170517 20:09:15.858"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:15.859" endtime="20170517 20:09:15.859"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.858" endtime="20170517 20:09:15.859"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.857" endtime="20170517 20:09:15.859"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170517 20:09:15.860" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170517 20:09:17.924" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170517 20:09:15.860" endtime="20170517 20:09:17.924"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:15.842" endtime="20170517 20:09:17.925"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>journalctl --no-pager | egrep '${ERROR_REGEX}'</arg>
</arguments>
<assign>
<var>${journal_log}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:09:17.926" level="INFO">Executing command 'journalctl --no-pager | egrep 'SEGV|core-dump''.</msg>
<msg timestamp="20170517 20:09:23.888" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:09:23.889" level="INFO">${stdout} = Apr 20 17:36:05 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:36:06 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core...</msg>
<msg timestamp="20170517 20:09:23.890" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:09:17.926" endtime="20170517 20:09:23.890"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:09:23.892" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:09:23.891" endtime="20170517 20:09:23.892"></status>
</kw>
<msg timestamp="20170517 20:09:23.892" level="INFO">${journal_log} = Apr 20 17:36:05 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:36:06 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core...</msg>
<status status="PASS" starttime="20170517 20:09:17.925" endtime="20170517 20:09:23.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${journal_log}</arg>
</arguments>
<msg timestamp="20170517 20:09:23.894" level="INFO">Length is 12392</msg>
<msg timestamp="20170517 20:09:23.896" level="FAIL">'Apr 20 17:36:05 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:36:06 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:36:22 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:36:22 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:36:37 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:36:37 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:36:53 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:36:53 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:37:09 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:37:09 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:37:25 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:37:25 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:37:40 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:37:40 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:37:56 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:37:56 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:38:12 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:38:12 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:38:45 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:39:01 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:39:01 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:39:17 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:39:17 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:39:33 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:39:33 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:39:48 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:39:48 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:40:04 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:40:04 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:40:20 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:40:20 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:40:35 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:40:35 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:40:51 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:40:51 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:41:06 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:41:06 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:41:22 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:41:22 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:41:38 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:41:38 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:41:54 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:41:54 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:42:10 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:42:10 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:42:26 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:42:26 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:42:41 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:42:41 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:42:57 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:42:57 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:43:24 witherspoon systemd[1]: xyz.openbmc_project.Hwmon@ahb-apb-i2c\x401e78a000-i2c\x2dbus\x40100-max31785\x4052.service: Failed with result 'core-dump'.
Apr 20 17:43:32 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:43:48 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:43:48 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:44:04 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:44:04 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:44:20 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:44:20 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:44:36 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:44:36 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:44:51 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:44:51 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:45:07 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:45:07 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:45:23 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:45:23 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:45:39 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:45:39 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:45:54 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:45:54 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:46:10 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:46:10 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:46:25 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:46:25 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:46:41 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:46:41 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:47:17 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:47:18 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:47:18 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:47:34 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:47:34 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:47:49 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:47:49 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:48:05 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:48:05 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:48:21 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:48:21 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:48:37 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:48:37 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:48:52 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:48:52 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:49:21 witherspoon systemd[1]: xyz.openbmc_project.Hwmon@ahb-apb-i2c\x401e78a000-i2c\x2dbus\x40100-max31785\x4052.service: Failed with result 'core-dump'.
Apr 20 17:49:29 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:49:30 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:49:30 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:49:46 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:49:46 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:50:02 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:50:02 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:50:18 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:50:18 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:50:34 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:50:34 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:50:50 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:50:50 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:51:05 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:51:05 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:51:21 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:51:21 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.' should be empty.</msg>
<status status="FAIL" starttime="20170517 20:09:23.893" endtime="20170517 20:09:23.897"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:09:23.916" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:09:23.915" endtime="20170517 20:09:23.917"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:09:23.918" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:09:23.917" endtime="20170517 20:09:23.918"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:09:23.919" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:09:23.918" endtime="20170517 20:09:23.919"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:09:23.920" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:09:23.920" endtime="20170517 20:09:23.920"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:09:24.145" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:09:23.921" endtime="20170517 20:09:24.146"></status>
</kw>
<msg timestamp="20170517 20:09:24.146" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:09:24.146" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:09:23.921" endtime="20170517 20:09:24.146"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:09:24.147" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:09:24.147" endtime="20170517 20:09:24.148"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:09:24.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:09:24.149" endtime="20170517 20:09:24.150"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:23.913" endtime="20170517 20:09:24.150"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:23.912" endtime="20170517 20:09:24.150"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:23.910" endtime="20170517 20:09:24.150"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:09:24.151" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170517 20:09:24.151" endtime="20170517 20:09:24.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:09:24.156" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:09:24.154" endtime="20170517 20:09:24.156"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:09:24.159" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170517 20:09:24.159" endtime="20170517 20:09:24.160"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:24.157" endtime="20170517 20:09:24.160"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:24.152" endtime="20170517 20:09:24.160"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:24.152" endtime="20170517 20:09:24.160"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:09:24.228" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170517 20:09:24.229" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:09:24.160" endtime="20170517 20:09:24.229"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170517 20:09:24.236" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:09:24.234" endtime="20170517 20:09:24.236"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170517 20:09:24.238" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:09:24.238" endtime="20170517 20:09:24.239"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:24.236" endtime="20170517 20:09:24.239"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:24.233" endtime="20170517 20:09:24.239"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:24.231" endtime="20170517 20:09:24.239"></status>
</kw>
<msg timestamp="20170517 20:09:24.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:09:23.908" endtime="20170517 20:09:24.240"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:09:24.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:09:24.240" endtime="20170517 20:09:24.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:09:24.243" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:09:24.243" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:09:24.244" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" starttime="20170517 20:09:24.242" endtime="20170517 20:09:24.244"></status>
</kw>
<msg timestamp="20170517 20:09:24.245" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170517 20:09:23.902" endtime="20170517 20:09:24.245"></status>
</kw>
<msg timestamp="20170517 20:09:24.248" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170517 20:09:23.901" endtime="20170517 20:09:24.248"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170517 20:09:24.253" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170517 20:09:24.251" endtime="20170517 20:09:24.253"></status>
</kw>
<msg timestamp="20170517 20:09:24.253" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170517 20:09:24.250" endtime="20170517 20:09:24.253"></status>
</kw>
<msg timestamp="20170517 20:09:24.254" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170517 20:09:23.900" endtime="20170517 20:09:24.254"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170517 20:09:24.770" level="INFO">Length is 12</msg>
<status status="PASS" starttime="20170517 20:09:24.769" endtime="20170517 20:09:24.770"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:09:24.776" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:09:27.798" level="INFO">${RC} = 0</msg>
<msg timestamp="20170517 20:09:27.798" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.58 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=410 ms
64 bytes from 9.41.166.169: ...</msg>
<status status="PASS" starttime="20170517 20:09:24.770" endtime="20170517 20:09:27.798"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170517 20:09:27.801" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.58 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=410 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.683 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.652 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.652/103.394/410.658/177.399 ms</msg>
<status status="PASS" starttime="20170517 20:09:27.800" endtime="20170517 20:09:27.801"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:27.802" endtime="20170517 20:09:27.803"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:24.768" endtime="20170517 20:09:27.803"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170517 20:09:36.068" level="INFO">${cur_time} = 2017-05-17 20:09:36:067436</msg>
<status status="PASS" starttime="20170517 20:09:27.828" endtime="20170517 20:09:36.068"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170517 20:09:36.069" level="INFO">${cur_time} = 20170517200936067436</msg>
<status status="PASS" starttime="20170517 20:09:36.068" endtime="20170517 20:09:36.069"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:27.828" endtime="20170517 20:09:36.069"></status>
</kw>
<msg timestamp="20170517 20:09:36.069" level="INFO">${FFDC_TIME} = 20170517200936067436</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170517 20:09:36.087" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170517 20:09:36.087" endtime="20170517 20:09:36.088"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170517 20:09:36.088" level="INFO">${suite_name} = 20170517200936067436_TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170517 20:09:36.088" endtime="20170517 20:09:36.088"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170517 20:09:36.089" level="INFO">${test_name} = CheckForApplicationFailures</msg>
<status status="PASS" starttime="20170517 20:09:36.088" endtime="20170517 20:09:36.089"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170517 20:09:36.089" level="INFO">${test_name} = 20170517200936067436_CheckForApplicationFailures</msg>
<status status="PASS" starttime="20170517 20:09:36.089" endtime="20170517 20:09:36.089"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.087" endtime="20170517 20:09:36.090"></status>
</kw>
<msg timestamp="20170517 20:09:36.091" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/</msg>
<msg timestamp="20170517 20:09:36.091" level="INFO">${FFDC_PREFIX} = 20170517200936067436_</msg>
<msg timestamp="20170517 20:09:36.141" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/</arg>
</arguments>
<msg timestamp="20170517 20:09:36.144" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:36.143" endtime="20170517 20:09:36.144"></status>
</kw>
<msg timestamp="20170517 20:09:36.151" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.194" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:36.194" endtime="20170517 20:09:36.194"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.193" endtime="20170517 20:09:36.194"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.196" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:36.195" endtime="20170517 20:09:36.196"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.195" endtime="20170517 20:09:36.196"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.197" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:36.197" endtime="20170517 20:09:36.197"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.196" endtime="20170517 20:09:36.197"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.198" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:36.198" endtime="20170517 20:09:36.199"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.197" endtime="20170517 20:09:36.199"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.202" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:36.201" endtime="20170517 20:09:36.203"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.199" endtime="20170517 20:09:36.203"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.204" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:36.204" endtime="20170517 20:09:36.204"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.203" endtime="20170517 20:09:36.205"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.206" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:36.205" endtime="20170517 20:09:36.206"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.205" endtime="20170517 20:09:36.206"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.208" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:36.207" endtime="20170517 20:09:36.208"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.206" endtime="20170517 20:09:36.208"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.209" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:36.208" endtime="20170517 20:09:36.209"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.208" endtime="20170517 20:09:36.209"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.211" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:36.211" endtime="20170517 20:09:36.211"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.210" endtime="20170517 20:09:36.211"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.212" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:36.212" endtime="20170517 20:09:36.212"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.211" endtime="20170517 20:09:36.212"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.214" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:36.213" endtime="20170517 20:09:36.214"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.213" endtime="20170517 20:09:36.214"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.215" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:36.215" endtime="20170517 20:09:36.215"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.214" endtime="20170517 20:09:36.215"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170517 20:09:36.217" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170517 20:09:36.217" endtime="20170517 20:09:36.217"></status>
</kw>
<msg timestamp="20170517 20:09:36.217" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170517 20:09:36.216" endtime="20170517 20:09:36.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:36.218" endtime="20170517 20:09:36.219"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.218" endtime="20170517 20:09:36.219"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170517 20:09:36.221" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170517 20:09:36.221" endtime="20170517 20:09:36.221"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170517 20:09:36.222" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170517 20:09:36.221" endtime="20170517 20:09:36.222"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170517 20:09:36.223" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170517 20:09:36.222" endtime="20170517 20:09:36.223"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.224" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170517 20:09:36.223" endtime="20170517 20:09:36.224"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.220" endtime="20170517 20:09:36.224"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.219" endtime="20170517 20:09:36.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170517 20:09:36.227" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170517 20:09:36.226" endtime="20170517 20:09:36.227"></status>
</kw>
<msg timestamp="20170517 20:09:36.227" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170517 20:09:36.225" endtime="20170517 20:09:36.227"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:36.230" endtime="20170517 20:09:36.231"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:36.231" endtime="20170517 20:09:36.234"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.229" endtime="20170517 20:09:36.234"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.228" endtime="20170517 20:09:36.234"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170517 20:09:36.235" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170517 20:09:38.764" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170517 20:09:36.235" endtime="20170517 20:09:38.765"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.216" endtime="20170517 20:09:38.765"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:09:38.766" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170517 20:09:38.850" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:09:38.850" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170517 20:09:38.851" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:09:38.766" endtime="20170517 20:09:38.851"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:09:38.852" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:09:38.852" endtime="20170517 20:09:38.853"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170517 20:09:38.853" level="INFO">Length is 11</msg>
<status status="PASS" starttime="20170517 20:09:38.853" endtime="20170517 20:09:38.853"></status>
</kw>
<msg timestamp="20170517 20:09:38.854" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" starttime="20170517 20:09:36.215" endtime="20170517 20:09:38.854"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:38.856" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:38.855" endtime="20170517 20:09:38.856"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.854" endtime="20170517 20:09:38.856"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.209" endtime="20170517 20:09:38.857"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:38.858" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:38.858" endtime="20170517 20:09:38.858"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.857" endtime="20170517 20:09:38.859"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170517 20:09:38.859" level="INFO">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20170517 20:09:38.859" endtime="20170517 20:09:38.859"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:38.864" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:38.863" endtime="20170517 20:09:38.864"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.860" endtime="20170517 20:09:38.864"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:38.865" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:38.865" endtime="20170517 20:09:38.866"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.864" endtime="20170517 20:09:38.866"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.860" endtime="20170517 20:09:38.866"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:38.868" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:38.867" endtime="20170517 20:09:38.868"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.866" endtime="20170517 20:09:38.868"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:38.873" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:38.869" endtime="20170517 20:09:38.873"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.868" endtime="20170517 20:09:38.873"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.866" endtime="20170517 20:09:38.873"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:38.875" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:38.875" endtime="20170517 20:09:38.876"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.874" endtime="20170517 20:09:38.876"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:38.878" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:38.877" endtime="20170517 20:09:38.878"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.877" endtime="20170517 20:09:38.878"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.874" endtime="20170517 20:09:38.879"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.859" endtime="20170517 20:09:38.879"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:09:38.880" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:09:38.880" endtime="20170517 20:09:38.880"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.879" endtime="20170517 20:09:38.880"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:36.192" endtime="20170517 20:09:38.881"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170517 20:09:38.899" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" starttime="20170517 20:09:38.899" endtime="20170517 20:09:38.899"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170517 20:09:38.901" level="INFO">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('SEL Log', 'Collect eSEL Log') | ('BMC Specific Files', 'BMC FFDC Files') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('F...</msg>
<status status="PASS" starttime="20170517 20:09:38.901" endtime="20170517 20:09:38.901"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:38.902" endtime="20170517 20:09:38.902"></status>
</kw>
<msg timestamp="20170517 20:09:38.903" level="INFO">@{ffdc_function_list} = [ Get Request FFDC | SEL Log | BMC Specific Files | OS FFDC | Core Files | FFDC Generic Report ]</msg>
<status status="PASS" starttime="20170517 20:09:38.901" endtime="20170517 20:09:38.903"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:38.904" endtime="20170517 20:09:38.904"></status>
</kw>
<msg timestamp="20170517 20:09:38.905" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:09:38.905" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170517 20:09:38.904" endtime="20170517 20:09:38.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:38.905" endtime="20170517 20:09:38.905"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170517 20:09:38.973" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170517 20:09:38.973" endtime="20170517 20:09:38.973"></status>
</kw>
<msg timestamp="20170517 20:09:38.973" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170517 20:09:38.972" endtime="20170517 20:09:38.973"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:38.974" endtime="20170517 20:09:38.975"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.974" endtime="20170517 20:09:38.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170517 20:09:38.977" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170517 20:09:38.976" endtime="20170517 20:09:38.977"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170517 20:09:38.977" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170517 20:09:38.977" endtime="20170517 20:09:38.977"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170517 20:09:38.978" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170517 20:09:38.977" endtime="20170517 20:09:38.978"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170517 20:09:38.979" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170517 20:09:38.978" endtime="20170517 20:09:38.979"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.976" endtime="20170517 20:09:38.980"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.975" endtime="20170517 20:09:38.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170517 20:09:38.981" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170517 20:09:38.980" endtime="20170517 20:09:38.981"></status>
</kw>
<msg timestamp="20170517 20:09:38.981" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170517 20:09:38.980" endtime="20170517 20:09:38.981"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:38.983" endtime="20170517 20:09:38.983"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:09:38.983" endtime="20170517 20:09:38.984"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.982" endtime="20170517 20:09:38.984"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.981" endtime="20170517 20:09:38.984"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170517 20:09:38.984" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170517 20:09:41.250" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170517 20:09:38.984" endtime="20170517 20:09:41.251"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.971" endtime="20170517 20:09:41.251"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170517 20:09:41.252" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" starttime="20170517 20:09:41.252" endtime="20170517 20:09:41.252"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170517 20:09:41.253" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" starttime="20170517 20:09:41.253" endtime="20170517 20:09:41.253"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170517 20:10:03.107" level="INFO">${logpath} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_elog.txt</msg>
<status status="PASS" starttime="20170517 20:10:03.104" endtime="20170517 20:10:03.107"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:10:03.111" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:10:03.110" endtime="20170517 20:10:03.113"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:10:03.113" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:10:03.113" endtime="20170517 20:10:03.113"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:10:03.114" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:10:03.113" endtime="20170517 20:10:03.114"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:10:03.114" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:10:03.114" endtime="20170517 20:10:03.114"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:10:03.379" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:10:03.115" endtime="20170517 20:10:03.379"></status>
</kw>
<msg timestamp="20170517 20:10:03.379" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:03.379" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:03.115" endtime="20170517 20:10:03.379"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:10:03.380" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:03.379" endtime="20170517 20:10:03.380"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:03.381" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:03.380" endtime="20170517 20:10:03.381"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:03.110" endtime="20170517 20:10:03.381"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:03.109" endtime="20170517 20:10:03.381"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:03.109" endtime="20170517 20:10:03.381"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:10:03.382" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" starttime="20170517 20:10:03.381" endtime="20170517 20:10:03.382"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:03.382" endtime="20170517 20:10:03.382"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:10:03.635" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170517 20:10:03.635" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:03.383" endtime="20170517 20:10:03.635"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:03.635" endtime="20170517 20:10:03.636"></status>
</kw>
<msg timestamp="20170517 20:10:03.636" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:03.108" endtime="20170517 20:10:03.636"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:03.637" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:03.637" endtime="20170517 20:10:03.637"></status>
</kw>
<msg timestamp="20170517 20:10:03.638" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170517 20:10:03.636" endtime="20170517 20:10:03.638"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:03.638" endtime="20170517 20:10:03.638"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170517 20:10:03.640" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 56 0f 65 42 00 00 00 04 56 10 82 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710485353, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 56 0f 65 42 00 00 00 04 56 10 82 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710488407, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5b ef b9 ce 00 00 00 04 5b f0 c4 d9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 17 90 00 00 17 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710617628, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c6 a2 88 b5 00 00 00 04 c6 a3 1b 8b 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 18 90 00 00 18 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 28 02 94 e5 4e 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 28 02 97 f7 7e 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 28 02 98 09 16 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 28 02 98 3b f9 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 28 03 c5 d1 50 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710620735, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:10:03.640" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170517 20:10:03.640" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00...</msg>
<status status="PASS" starttime="20170517 20:10:03.638" endtime="20170517 20:10:03.640"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:03.642" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_elog.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:03.641" endtime="20170517 20:10:03.642"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:03.640" endtime="20170517 20:10:03.642"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:41.254" endtime="20170517 20:10:03.642"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170517 20:10:03.643" level="INFO">${logpath} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_sensor_list.txt</msg>
<status status="PASS" starttime="20170517 20:10:03.642" endtime="20170517 20:10:03.643"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:10:03.645" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:10:03.645" endtime="20170517 20:10:03.646"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:10:03.646" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:10:03.646" endtime="20170517 20:10:03.646"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:10:03.647" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:10:03.646" endtime="20170517 20:10:03.647"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:10:03.647" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:10:03.647" endtime="20170517 20:10:03.647"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:10:04.033" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:10:03.648" endtime="20170517 20:10:04.033"></status>
</kw>
<msg timestamp="20170517 20:10:04.034" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:04.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:03.648" endtime="20170517 20:10:04.034"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:10:04.035" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:04.035" endtime="20170517 20:10:04.035"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:04.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:04.036" endtime="20170517 20:10:04.037"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:03.644" endtime="20170517 20:10:04.037"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:03.644" endtime="20170517 20:10:04.038"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:03.643" endtime="20170517 20:10:04.039"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:10:04.041" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" starttime="20170517 20:10:04.040" endtime="20170517 20:10:04.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:04.041" endtime="20170517 20:10:04.042"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:10:06.767" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170517 20:10:06.767" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:04.042" endtime="20170517 20:10:06.768"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:06.768" endtime="20170517 20:10:06.769"></status>
</kw>
<msg timestamp="20170517 20:10:06.769" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:03.643" endtime="20170517 20:10:06.769"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:06.771" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:06.770" endtime="20170517 20:10:06.772"></status>
</kw>
<msg timestamp="20170517 20:10:06.772" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170517 20:10:06.770" endtime="20170517 20:10:06.772"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:06.773" endtime="20170517 20:10:06.773"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170517 20:10:06.775" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:10:06.775" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170517 20:10:06.775" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" starttime="20170517 20:10:06.774" endtime="20170517 20:10:06.775"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:06.778" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_sensor_list.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:06.777" endtime="20170517 20:10:06.778"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:06.775" endtime="20170517 20:10:06.778"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:03.642" endtime="20170517 20:10:06.778"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170517 20:10:06.780" level="INFO">${logpath} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_inventory.txt</msg>
<status status="PASS" starttime="20170517 20:10:06.779" endtime="20170517 20:10:06.780"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:10:06.785" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:10:06.784" endtime="20170517 20:10:06.786"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:10:06.787" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:10:06.786" endtime="20170517 20:10:06.787"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:10:06.789" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:10:06.788" endtime="20170517 20:10:06.790"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:10:06.791" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:10:06.790" endtime="20170517 20:10:06.791"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:10:07.292" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:10:06.792" endtime="20170517 20:10:07.292"></status>
</kw>
<msg timestamp="20170517 20:10:07.293" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:07.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:06.792" endtime="20170517 20:10:07.293"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:10:07.295" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:07.294" endtime="20170517 20:10:07.295"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:07.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:07.296" endtime="20170517 20:10:07.297"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:06.783" endtime="20170517 20:10:07.298"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:06.783" endtime="20170517 20:10:07.298"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:06.781" endtime="20170517 20:10:07.298"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:10:07.301" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" starttime="20170517 20:10:07.300" endtime="20170517 20:10:07.301"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:07.302" endtime="20170517 20:10:07.303"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:10:09.693" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170517 20:10:09.694" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:07.304" endtime="20170517 20:10:09.694"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:09.695" endtime="20170517 20:10:09.696"></status>
</kw>
<msg timestamp="20170517 20:10:09.697" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:06.780" endtime="20170517 20:10:09.697"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:09.700" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:09.699" endtime="20170517 20:10:09.700"></status>
</kw>
<msg timestamp="20170517 20:10:09.701" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170517 20:10:09.698" endtime="20170517 20:10:09.701"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:09.702" endtime="20170517 20:10:09.703"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170517 20:10:09.707" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "2", 
      "PartNumber": "0000000000000000", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "0000000", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:10:09.708" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170517 20:10:09.709" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
 ...</msg>
<status status="PASS" starttime="20170517 20:10:09.703" endtime="20170517 20:10:09.709"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:09.714" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_inventory.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:09.712" endtime="20170517 20:10:09.714"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:09.709" endtime="20170517 20:10:09.714"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:06.779" endtime="20170517 20:10:09.714"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170517 20:10:09.716" level="INFO">${logpath} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_led.txt</msg>
<status status="PASS" starttime="20170517 20:10:09.715" endtime="20170517 20:10:09.716"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:10:09.724" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:10:09.723" endtime="20170517 20:10:09.725"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:10:09.726" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:10:09.725" endtime="20170517 20:10:09.726"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:10:09.727" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:10:09.726" endtime="20170517 20:10:09.727"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:10:09.728" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:10:09.727" endtime="20170517 20:10:09.728"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:10:09.929" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:10:09.729" endtime="20170517 20:10:09.929"></status>
</kw>
<msg timestamp="20170517 20:10:09.929" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:09.929" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:09.728" endtime="20170517 20:10:09.929"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:10:09.930" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:09.930" endtime="20170517 20:10:09.931"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:09.932" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:09.931" endtime="20170517 20:10:09.932"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:09.721" endtime="20170517 20:10:09.932"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:09.720" endtime="20170517 20:10:09.932"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:09.718" endtime="20170517 20:10:09.932"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:10:09.933" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" starttime="20170517 20:10:09.933" endtime="20170517 20:10:09.933"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:09.934" endtime="20170517 20:10:09.934"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:10:10.069" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170517 20:10:10.070" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:09.935" endtime="20170517 20:10:10.070"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:10.070" endtime="20170517 20:10:10.071"></status>
</kw>
<msg timestamp="20170517 20:10:10.072" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:09.717" endtime="20170517 20:10:10.072"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:10.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:10.074" endtime="20170517 20:10:10.075"></status>
</kw>
<msg timestamp="20170517 20:10:10.075" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170517 20:10:10.072" endtime="20170517 20:10:10.075"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:10.076" endtime="20170517 20:10:10.076"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170517 20:10:10.077" level="INFO">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:10:10.077" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170517 20:10:10.078" level="INFO">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status status="PASS" starttime="20170517 20:10:10.077" endtime="20170517 20:10:10.078"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:10.080" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_led.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:10.079" endtime="20170517 20:10:10.080"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.078" endtime="20170517 20:10:10.080"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:09.714" endtime="20170517 20:10:10.080"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170517 20:10:10.081" level="INFO">${logpath} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_record_log.txt</msg>
<status status="PASS" starttime="20170517 20:10:10.081" endtime="20170517 20:10:10.082"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:10:10.088" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:10:10.086" endtime="20170517 20:10:10.089"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:10:10.091" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:10:10.090" endtime="20170517 20:10:10.091"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:10:10.093" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:10:10.092" endtime="20170517 20:10:10.093"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:10:10.096" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:10:10.093" endtime="20170517 20:10:10.096"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:10:10.321" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:10:10.098" endtime="20170517 20:10:10.321"></status>
</kw>
<msg timestamp="20170517 20:10:10.321" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:10.321" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:10.097" endtime="20170517 20:10:10.321"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:10:10.322" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:10.322" endtime="20170517 20:10:10.323"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:10.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:10.323" endtime="20170517 20:10:10.324"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.084" endtime="20170517 20:10:10.324"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.084" endtime="20170517 20:10:10.324"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.083" endtime="20170517 20:10:10.324"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:10:10.325" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" starttime="20170517 20:10:10.325" endtime="20170517 20:10:10.325"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:10.326" endtime="20170517 20:10:10.326"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:10:10.373" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170517 20:10:10.373" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:10.327" endtime="20170517 20:10:10.373"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:10.374" endtime="20170517 20:10:10.375"></status>
</kw>
<msg timestamp="20170517 20:10:10.375" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:10.082" endtime="20170517 20:10:10.375"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:10.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170517 20:10:10.377" level="FAIL">404 != 200</msg>
<status status="FAIL" starttime="20170517 20:10:10.376" endtime="20170517 20:10:10.378"></status>
</kw>
<msg timestamp="20170517 20:10:10.378" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170517 20:10:10.376" endtime="20170517 20:10:10.378"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170517 20:10:10.379" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170517 20:10:10.379" endtime="20170517 20:10:10.379"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.378" endtime="20170517 20:10:10.379"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.080" endtime="20170517 20:10:10.380"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:41.253" endtime="20170517 20:10:10.380"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:41.252" endtime="20170517 20:10:10.380"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:41.252" endtime="20170517 20:10:10.380"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:41.252" endtime="20170517 20:10:10.380"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.971" endtime="20170517 20:10:10.380"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.905" endtime="20170517 20:10:10.380"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.903" endtime="20170517 20:10:10.381"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.903" endtime="20170517 20:10:10.381"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:10.383" endtime="20170517 20:10:10.384"></status>
</kw>
<msg timestamp="20170517 20:10:10.384" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:10.384" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170517 20:10:10.383" endtime="20170517 20:10:10.384"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:10.385" endtime="20170517 20:10:10.385"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:10:10.513" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:10:10.512" endtime="20170517 20:10:10.514"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:10:10.516" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:10:10.515" endtime="20170517 20:10:10.516"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:10:10.517" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:10:10.516" endtime="20170517 20:10:10.517"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:10:10.518" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:10:10.518" endtime="20170517 20:10:10.519"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:10:10.729" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:10:10.520" endtime="20170517 20:10:10.729"></status>
</kw>
<msg timestamp="20170517 20:10:10.730" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:10.730" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:10.519" endtime="20170517 20:10:10.730"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:10:10.733" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:10.732" endtime="20170517 20:10:10.733"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:10.734" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:10.734" endtime="20170517 20:10:10.735"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.511" endtime="20170517 20:10:10.735"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.510" endtime="20170517 20:10:10.735"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.508" endtime="20170517 20:10:10.735"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:10:10.736" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" starttime="20170517 20:10:10.736" endtime="20170517 20:10:10.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:10.737" endtime="20170517 20:10:10.738"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:10:10.918" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170517 20:10:10.919" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:10.739" endtime="20170517 20:10:10.919"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:10.920" endtime="20170517 20:10:10.922"></status>
</kw>
<msg timestamp="20170517 20:10:10.923" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:10.507" endtime="20170517 20:10:10.923"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:10.927" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:10.926" endtime="20170517 20:10:10.927"></status>
</kw>
<msg timestamp="20170517 20:10:10.927" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170517 20:10:10.924" endtime="20170517 20:10:10.927"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:10.928" endtime="20170517 20:10:10.929"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:10:10.934" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 56 0f 65 42 00 00 00 04 56 10 82 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710485353, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 56 0f 65 42 00 00 00 04 56 10 82 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710488407, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5b ef b9 ce 00 00 00 04 5b f0 c4 d9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 17 90 00 00 17 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710617628, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c6 a2 88 b5 00 00 00 04 c6 a3 1b 8b 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 18 90 00 00 18 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 28 02 94 e5 4e 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 28 02 97 f7 7e 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 28 02 98 09 16 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 28 02 98 3b f9 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 28 03 c5 d1 50 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492710620735, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:10:10.937" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:10:10.938" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/3': {u'Resolved': 0, u'Id': 3, u'Timestamp': 1492710617628, u'associations': [], u'Severity': u'xyz.openbmc_pro...</msg>
<status status="PASS" starttime="20170517 20:10:10.931" endtime="20170517 20:10:10.938"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170517 20:10:10.940" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4']</msg>
<status status="PASS" starttime="20170517 20:10:10.939" endtime="20170517 20:10:10.941"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170517 20:10:10.944" level="INFO">${logpath} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel</msg>
<status status="PASS" starttime="20170517 20:10:10.942" endtime="20170517 20:10:10.945"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170517 20:10:10.948" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:10.947" endtime="20170517 20:10:10.949"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:10:10.977" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:10:10.977" endtime="20170517 20:10:10.978"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:10:10.979" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:10:10.979" endtime="20170517 20:10:10.979"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:10:10.981" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:10:10.980" endtime="20170517 20:10:10.981"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:10:10.982" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:10:10.981" endtime="20170517 20:10:10.982"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.368" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:10:10.983" endtime="20170517 20:10:11.369"></status>
</kw>
<msg timestamp="20170517 20:10:11.369" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:11.369" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:10.983" endtime="20170517 20:10:11.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.371" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:11.370" endtime="20170517 20:10:11.371"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:11.372" endtime="20170517 20:10:11.373"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.975" endtime="20170517 20:10:11.373"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.974" endtime="20170517 20:10:11.373"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.973" endtime="20170517 20:10:11.373"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:10:11.374" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" starttime="20170517 20:10:11.374" endtime="20170517 20:10:11.375"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:11.375" endtime="20170517 20:10:11.375"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:10:11.476" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170517 20:10:11.477" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:11.376" endtime="20170517 20:10:11.477"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:11.477" endtime="20170517 20:10:11.478"></status>
</kw>
<msg timestamp="20170517 20:10:11.478" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:10.972" endtime="20170517 20:10:11.478"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.479" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:11.478" endtime="20170517 20:10:11.479"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:10:11.479" level="INFO">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 56 0f 65 42 00 00 00 04 56 10 82 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:10:11.479" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:10:11.479" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 56 0f 65 42 00 00 00 04 56 10 82 6d 42 00 00 07 00 00 00 ...</msg>
<status status="PASS" starttime="20170517 20:10:11.479" endtime="20170517 20:10:11.479"></status>
</kw>
<msg timestamp="20170517 20:10:11.480" level="INFO">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 56 0f 65 42 00 00 00 04 56 10 82 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 ...</msg>
<status status="PASS" starttime="20170517 20:10:10.970" endtime="20170517 20:10:11.480"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170517 20:10:11.480" level="INFO">Length is 1</msg>
<msg timestamp="20170517 20:10:11.480" level="INFO">${length} = 1</msg>
<status status="PASS" starttime="20170517 20:10:11.480" endtime="20170517 20:10:11.480"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:11.481" endtime="20170517 20:10:11.481"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.482" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:11.482" endtime="20170517 20:10:11.483"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:11.481" endtime="20170517 20:10:11.483"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.484" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:11.483" endtime="20170517 20:10:11.484"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:11.483" endtime="20170517 20:10:11.484"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.970" endtime="20170517 20:10:11.484"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:10:11.489" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:10:11.489" endtime="20170517 20:10:11.489"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:10:11.490" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:10:11.490" endtime="20170517 20:10:11.490"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:10:11.491" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:10:11.491" endtime="20170517 20:10:11.491"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:10:11.493" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:10:11.492" endtime="20170517 20:10:11.494"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.692" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:10:11.496" endtime="20170517 20:10:11.692"></status>
</kw>
<msg timestamp="20170517 20:10:11.692" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:11.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:11.495" endtime="20170517 20:10:11.693"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.695" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:11.694" endtime="20170517 20:10:11.696"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:11.697" endtime="20170517 20:10:11.698"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:11.488" endtime="20170517 20:10:11.699"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:11.487" endtime="20170517 20:10:11.699"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:11.486" endtime="20170517 20:10:11.699"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:10:11.700" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" starttime="20170517 20:10:11.699" endtime="20170517 20:10:11.700"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:11.700" endtime="20170517 20:10:11.701"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:10:11.795" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170517 20:10:11.795" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:11.701" endtime="20170517 20:10:11.795"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:11.796" endtime="20170517 20:10:11.796"></status>
</kw>
<msg timestamp="20170517 20:10:11.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:11.485" endtime="20170517 20:10:11.796"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:11.797" endtime="20170517 20:10:11.797"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:10:11.798" level="INFO">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 56 0f 65 42 00 00 00 04 56 10 82 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:10:11.798" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:10:11.798" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 56 0f 65 42 00 00 00 04 56 10 82 6d 42 00 00 07 00 00 00 ...</msg>
<status status="PASS" starttime="20170517 20:10:11.797" endtime="20170517 20:10:11.798"></status>
</kw>
<msg timestamp="20170517 20:10:11.798" level="INFO">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 56 0f 65 42 00 00 00 04 56 10 82 6d 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 ...</msg>
<status status="PASS" starttime="20170517 20:10:11.484" endtime="20170517 20:10:11.798"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170517 20:10:11.799" level="INFO">Length is 1</msg>
<msg timestamp="20170517 20:10:11.799" level="INFO">${length} = 1</msg>
<status status="PASS" starttime="20170517 20:10:11.799" endtime="20170517 20:10:11.799"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:11.799" endtime="20170517 20:10:11.800"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.801" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:11.801" endtime="20170517 20:10:11.802"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:11.800" endtime="20170517 20:10:11.802"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.803" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:11.803" endtime="20170517 20:10:11.803"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:11.802" endtime="20170517 20:10:11.803"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:11.484" endtime="20170517 20:10:11.804"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:10:11.807" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:10:11.807" endtime="20170517 20:10:11.807"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:10:11.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:10:11.807" endtime="20170517 20:10:11.808"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:10:11.808" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:10:11.808" endtime="20170517 20:10:11.808"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:10:11.809" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:10:11.809" endtime="20170517 20:10:11.809"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.996" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:10:11.810" endtime="20170517 20:10:11.996"></status>
</kw>
<msg timestamp="20170517 20:10:11.996" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:11.996" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:11.809" endtime="20170517 20:10:11.996"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.997" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:11.997" endtime="20170517 20:10:11.997"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:11.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:11.997" endtime="20170517 20:10:11.998"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:11.806" endtime="20170517 20:10:11.998"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:11.806" endtime="20170517 20:10:11.998"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:11.805" endtime="20170517 20:10:11.998"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:10:11.999" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" starttime="20170517 20:10:11.998" endtime="20170517 20:10:11.999"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:11.999" endtime="20170517 20:10:11.999"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:10:12.102" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170517 20:10:12.103" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:12.000" endtime="20170517 20:10:12.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:12.103" endtime="20170517 20:10:12.104"></status>
</kw>
<msg timestamp="20170517 20:10:12.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:11.804" endtime="20170517 20:10:12.105"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:12.106" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:12.105" endtime="20170517 20:10:12.106"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:10:12.107" level="INFO">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5b ef b9 ce 00 00 00 04 5b f0 c4 d9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 17 90 00 00 17 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:10:12.107" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:10:12.107" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5b ef b9 ce 00 00 00 04 5b f0 c4 d9 42 00 00 07 00 00 00 ...</msg>
<status status="PASS" starttime="20170517 20:10:12.106" endtime="20170517 20:10:12.107"></status>
</kw>
<msg timestamp="20170517 20:10:12.108" level="INFO">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 5b ef b9 ce 00 00 00 04 5b f0 c4 d9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 17 90 00 00 17 ...</msg>
<status status="PASS" starttime="20170517 20:10:11.804" endtime="20170517 20:10:12.108"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170517 20:10:12.109" level="INFO">Length is 1</msg>
<msg timestamp="20170517 20:10:12.109" level="INFO">${length} = 1</msg>
<status status="PASS" starttime="20170517 20:10:12.108" endtime="20170517 20:10:12.109"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:12.110" endtime="20170517 20:10:12.110"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:12.113" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:12.112" endtime="20170517 20:10:12.113"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.111" endtime="20170517 20:10:12.113"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:12.115" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:12.114" endtime="20170517 20:10:12.115"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.113" endtime="20170517 20:10:12.115"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:11.804" endtime="20170517 20:10:12.115"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170517 20:10:12.120" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170517 20:10:12.120" endtime="20170517 20:10:12.121"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170517 20:10:12.122" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170517 20:10:12.122" endtime="20170517 20:10:12.122"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170517 20:10:12.123" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170517 20:10:12.123" endtime="20170517 20:10:12.123"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170517 20:10:12.124" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170517 20:10:12.123" endtime="20170517 20:10:12.124"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170517 20:10:12.320" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170517 20:10:12.125" endtime="20170517 20:10:12.320"></status>
</kw>
<msg timestamp="20170517 20:10:12.320" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:12.321" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:12.124" endtime="20170517 20:10:12.321"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170517 20:10:12.322" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:12.321" endtime="20170517 20:10:12.322"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:12.324" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:12.323" endtime="20170517 20:10:12.324"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.119" endtime="20170517 20:10:12.324"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.118" endtime="20170517 20:10:12.325"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.117" endtime="20170517 20:10:12.325"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170517 20:10:12.327" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status status="PASS" starttime="20170517 20:10:12.326" endtime="20170517 20:10:12.327"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:12.327" endtime="20170517 20:10:12.328"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170517 20:10:12.418" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170517 20:10:12.418" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:12.329" endtime="20170517 20:10:12.418"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:12.419" endtime="20170517 20:10:12.419"></status>
</kw>
<msg timestamp="20170517 20:10:12.419" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170517 20:10:12.116" endtime="20170517 20:10:12.419"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170517 20:10:12.420" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170517 20:10:12.420" endtime="20170517 20:10:12.420"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170517 20:10:12.421" level="INFO">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c6 a2 88 b5 00 00 00 04 c6 a3 1b 8b 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 18 90 00 00 18 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 28 02 94 e5 4e 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 28 02 97 f7 7e 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 28 02 98 09 16 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 28 02 98 3b f9 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 28 03 c5 d1 50 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170517 20:10:12.421" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170517 20:10:12.421" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c6 a2 88 b5 00 00 00 04 c6 a3 1b 8b 42 00 00 08 00 00 00 ...</msg>
<status status="PASS" starttime="20170517 20:10:12.420" endtime="20170517 20:10:12.421"></status>
</kw>
<msg timestamp="20170517 20:10:12.421" level="INFO">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c6 a2 88 b5 00 00 00 04 c6 a3 1b 8b 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 18 90 00 00 18 ...</msg>
<status status="PASS" starttime="20170517 20:10:12.116" endtime="20170517 20:10:12.421"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170517 20:10:12.422" level="INFO">Length is 1</msg>
<msg timestamp="20170517 20:10:12.422" level="INFO">${length} = 1</msg>
<status status="PASS" starttime="20170517 20:10:12.422" endtime="20170517 20:10:12.422"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:12.422" endtime="20170517 20:10:12.423"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:12.424" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:12.423" endtime="20170517 20:10:12.424"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.423" endtime="20170517 20:10:12.424"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:12.425" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:12.425" endtime="20170517 20:10:12.425"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.424" endtime="20170517 20:10:12.425"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.115" endtime="20170517 20:10:12.425"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.949" endtime="20170517 20:10:12.426"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170517 20:10:12.430" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:10:12.440" level="INFO">${out} = </msg>
<status status="PASS" starttime="20170517 20:10:12.426" endtime="20170517 20:10:12.440"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170517 20:10:12.444" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" starttime="20170517 20:10:12.444" endtime="20170517 20:10:12.444"></status>
</kw>
<msg timestamp="20170517 20:10:12.444" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170517 20:10:12.443" endtime="20170517 20:10:12.444"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170517 20:10:12.445" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170517 20:10:12.445" endtime="20170517 20:10:12.445"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.506" endtime="20170517 20:10:12.446"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.386" endtime="20170517 20:10:12.446"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.381" endtime="20170517 20:10:12.446"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:10.381" endtime="20170517 20:10:12.447"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:12.449" endtime="20170517 20:10:12.449"></status>
</kw>
<msg timestamp="20170517 20:10:12.449" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:12.449" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170517 20:10:12.448" endtime="20170517 20:10:12.449"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:12.449" endtime="20170517 20:10:12.450"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170517 20:10:12.492" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170517 20:10:12.492" endtime="20170517 20:10:12.492"></status>
</kw>
<msg timestamp="20170517 20:10:12.492" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170517 20:10:12.491" endtime="20170517 20:10:12.492"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:12.493" endtime="20170517 20:10:12.494"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.493" endtime="20170517 20:10:12.494"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170517 20:10:12.497" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170517 20:10:12.496" endtime="20170517 20:10:12.497"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170517 20:10:12.499" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170517 20:10:12.497" endtime="20170517 20:10:12.499"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170517 20:10:12.501" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170517 20:10:12.500" endtime="20170517 20:10:12.501"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170517 20:10:12.504" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170517 20:10:12.503" endtime="20170517 20:10:12.504"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.495" endtime="20170517 20:10:12.504"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.494" endtime="20170517 20:10:12.504"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170517 20:10:12.509" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170517 20:10:12.507" endtime="20170517 20:10:12.509"></status>
</kw>
<msg timestamp="20170517 20:10:12.510" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170517 20:10:12.505" endtime="20170517 20:10:12.510"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:12.516" endtime="20170517 20:10:12.517"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:12.518" endtime="20170517 20:10:12.521"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.514" endtime="20170517 20:10:12.521"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.511" endtime="20170517 20:10:12.521"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170517 20:10:12.524" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170517 20:10:14.223" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170517 20:10:12.523" endtime="20170517 20:10:14.224"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.490" endtime="20170517 20:10:14.224"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170517 20:10:14.225" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" starttime="20170517 20:10:14.224" endtime="20170517 20:10:14.225"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170517 20:10:14.226" level="INFO">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" starttime="20170517 20:10:14.226" endtime="20170517 20:10:14.226"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170517 20:10:14.227" level="INFO">${logpath} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_dmesg.txt</msg>
<status status="PASS" starttime="20170517 20:10:14.226" endtime="20170517 20:10:14.227"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:14.229" endtime="20170517 20:10:14.229"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:14.230" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170517 20:10:14.324" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:14.324" level="INFO">${stdout} = systemd[1]: Started Dispatch Password Requests to Console Directory Watch.
systemd[1]: Reached target Swap.
systemd[1]: Listening on udev Kernel Socket.
systemd[1]: Started Forward Password Requests t...</msg>
<msg timestamp="20170517 20:10:14.324" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:14.230" endtime="20170517 20:10:14.324"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:20.154" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_dmesg.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:14.330" endtime="20170517 20:10:20.156"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:14.329" endtime="20170517 20:10:20.156"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:14.324" endtime="20170517 20:10:20.157"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:14.227" endtime="20170517 20:10:20.157"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:14.226" endtime="20170517 20:10:20.157"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170517 20:10:20.160" level="INFO">${logpath} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_meminfo.txt</msg>
<status status="PASS" starttime="20170517 20:10:20.158" endtime="20170517 20:10:20.160"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:20.164" endtime="20170517 20:10:20.165"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:20.167" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170517 20:10:20.245" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:20.246" level="INFO">${stdout} = MemTotal:         432932 kB
MemFree:          258012 kB
MemAvailable:     299724 kB
Buffers:           10504 kB
Cached:            54844 kB
SwapCached:            0 kB
Active:           122536 kB
Inac...</msg>
<msg timestamp="20170517 20:10:20.246" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:20.166" endtime="20170517 20:10:20.246"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:20.266" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_meminfo.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:20.265" endtime="20170517 20:10:20.266"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:20.264" endtime="20170517 20:10:20.266"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:20.247" endtime="20170517 20:10:20.266"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:20.161" endtime="20170517 20:10:20.267"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:20.157" endtime="20170517 20:10:20.267"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170517 20:10:20.268" level="INFO">${logpath} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_proc_list.txt</msg>
<status status="PASS" starttime="20170517 20:10:20.267" endtime="20170517 20:10:20.268"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:20.271" endtime="20170517 20:10:20.271"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:20.272" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170517 20:10:20.699" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:20.700" level="INFO">${stdout} = Mem: 175044K used, 257888K free, 19588K shrd, 10504K buff, 54848K cached
CPU:  20% usr  26% sys   0% nic  53% idle   0% io   0% irq   0% sirq
Load average: 1.52 2.35 2.14 1/138 3120
  PID  PPID USER  ...</msg>
<msg timestamp="20170517 20:10:20.700" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:20.272" endtime="20170517 20:10:20.700"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:20.713" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_proc_list.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:20.711" endtime="20170517 20:10:20.713"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:20.710" endtime="20170517 20:10:20.713"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:20.700" endtime="20170517 20:10:20.713"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:20.269" endtime="20170517 20:10:20.714"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:20.267" endtime="20170517 20:10:20.714"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170517 20:10:20.715" level="INFO">${logpath} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_procinfo.txt</msg>
<status status="PASS" starttime="20170517 20:10:20.714" endtime="20170517 20:10:20.716"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:20.718" endtime="20170517 20:10:20.718"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:20.719" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170517 20:10:20.828" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:20.829" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170517 20:10:20.829" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:20.719" endtime="20170517 20:10:20.829"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:20.843" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_procinfo.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:20.842" endtime="20170517 20:10:20.843"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:20.840" endtime="20170517 20:10:20.844"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:20.830" endtime="20170517 20:10:20.844"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:20.716" endtime="20170517 20:10:20.844"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:20.714" endtime="20170517 20:10:20.844"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170517 20:10:20.845" level="INFO">${logpath} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_journalctl.txt</msg>
<status status="PASS" starttime="20170517 20:10:20.845" endtime="20170517 20:10:20.845"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:20.847" endtime="20170517 20:10:20.847"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:20.848" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170517 20:10:30.514" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:30.538" level="INFO">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:27 UTC, end at Thu 2017-04-20 17:52:22 UTC. --
Apr 20 17:29:27 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:27 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170517 20:10:30.539" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:20.848" endtime="20170517 20:10:30.539"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:30.571" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_journalctl.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:30.565" endtime="20170517 20:10:30.571"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.547" endtime="20170517 20:10:30.571"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.540" endtime="20170517 20:10:30.571"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:20.846" endtime="20170517 20:10:30.572"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:20.844" endtime="20170517 20:10:30.572"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:14.226" endtime="20170517 20:10:30.572"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:14.225" endtime="20170517 20:10:30.572"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:14.225" endtime="20170517 20:10:30.572"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:14.225" endtime="20170517 20:10:30.572"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.489" endtime="20170517 20:10:30.572"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.450" endtime="20170517 20:10:30.573"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.447" endtime="20170517 20:10:30.573"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:12.447" endtime="20170517 20:10:30.573"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:30.577" endtime="20170517 20:10:30.577"></status>
</kw>
<msg timestamp="20170517 20:10:30.577" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:30.577" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170517 20:10:30.576" endtime="20170517 20:10:30.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:30.578" endtime="20170517 20:10:30.579"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170517 20:10:30.641" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170517 20:10:30.640" endtime="20170517 20:10:30.641"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.639" endtime="20170517 20:10:30.641"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.579" endtime="20170517 20:10:30.641"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.574" endtime="20170517 20:10:30.641"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.573" endtime="20170517 20:10:30.641"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:30.644" endtime="20170517 20:10:30.645"></status>
</kw>
<msg timestamp="20170517 20:10:30.645" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:30.645" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170517 20:10:30.644" endtime="20170517 20:10:30.645"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:30.645" endtime="20170517 20:10:30.645"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170517 20:10:30.690" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170517 20:10:30.689" endtime="20170517 20:10:30.690"></status>
</kw>
<msg timestamp="20170517 20:10:30.690" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170517 20:10:30.689" endtime="20170517 20:10:30.690"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:30.691" endtime="20170517 20:10:30.692"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.691" endtime="20170517 20:10:30.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170517 20:10:30.697" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170517 20:10:30.694" endtime="20170517 20:10:30.697"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170517 20:10:30.697" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170517 20:10:30.697" endtime="20170517 20:10:30.698"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170517 20:10:30.698" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170517 20:10:30.698" endtime="20170517 20:10:30.698"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170517 20:10:30.699" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170517 20:10:30.699" endtime="20170517 20:10:30.700"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.693" endtime="20170517 20:10:30.700"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.692" endtime="20170517 20:10:30.700"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170517 20:10:30.701" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170517 20:10:30.701" endtime="20170517 20:10:30.701"></status>
</kw>
<msg timestamp="20170517 20:10:30.701" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170517 20:10:30.700" endtime="20170517 20:10:30.702"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:30.703" endtime="20170517 20:10:30.704"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:30.704" endtime="20170517 20:10:30.708"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.703" endtime="20170517 20:10:30.708"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.702" endtime="20170517 20:10:30.708"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170517 20:10:30.709" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170517 20:10:32.395" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170517 20:10:30.708" endtime="20170517 20:10:32.396"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.688" endtime="20170517 20:10:32.396"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170517 20:10:32.396" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170517 20:10:32.445" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:32.445" level="INFO">${core_files} = /tmp/core_phosphor-fan-mo.2409
/tmp/core_phosphor-fan-mo.2614
/tmp/core_phosphor-fan-mo.2619
/tmp/core_phosphor-fan-mo.2622
/tmp/core_phosphor-fan-mo.2647
/tmp/core_phosphor-fan-mo.2650
/tmp/core_phos...</msg>
<status status="PASS" starttime="20170517 20:10:32.396" endtime="20170517 20:10:32.445"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170517 20:10:32.446" level="INFO">@{core_list} = [ /tmp/core_phosphor-fan-mo.2409 | /tmp/core_phosphor-fan-mo.2614 | /tmp/core_phosphor-fan-mo.2619 | /tmp/core_phosphor-fan-mo.2622 | /tmp/core_phosphor-fan-mo.2647 | /tmp/core_phosphor-fan-mo.2650 | ...</msg>
<status status="PASS" starttime="20170517 20:10:32.446" endtime="20170517 20:10:32.447"></status>
</kw>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:32.447" endtime="20170517 20:10:32.491"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:32.493" endtime="20170517 20:10:33.195"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:32.492" endtime="20170517 20:10:33.195"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:32.491" endtime="20170517 20:10:33.196"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:32.447" endtime="20170517 20:10:33.196"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2409">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:33.197" endtime="20170517 20:10:33.467"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:33.469" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.2409'.</msg>
<msg timestamp="20170517 20:10:33.517" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:33.518" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:33.518" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:33.468" endtime="20170517 20:10:33.518"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:33.518" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:33.518" endtime="20170517 20:10:33.518"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:33.467" endtime="20170517 20:10:33.519"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:33.196" endtime="20170517 20:10:33.519"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2614">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:33.519" endtime="20170517 20:10:33.818"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:33.819" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.2614'.</msg>
<msg timestamp="20170517 20:10:33.876" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:33.876" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:33.876" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:33.819" endtime="20170517 20:10:33.876"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:33.877" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:33.876" endtime="20170517 20:10:33.877"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:33.818" endtime="20170517 20:10:33.877"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:33.519" endtime="20170517 20:10:33.877"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2619">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:33.877" endtime="20170517 20:10:43.017"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:43.021" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.2619'.</msg>
<msg timestamp="20170517 20:10:43.075" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:43.075" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:43.075" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:43.020" endtime="20170517 20:10:43.075"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:43.076" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:43.075" endtime="20170517 20:10:43.076"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:43.017" endtime="20170517 20:10:43.076"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:33.877" endtime="20170517 20:10:43.076"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2622">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:43.077" endtime="20170517 20:10:43.391"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:43.393" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.2622'.</msg>
<msg timestamp="20170517 20:10:43.440" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:43.441" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:43.441" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:43.393" endtime="20170517 20:10:43.441"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:43.442" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:43.442" endtime="20170517 20:10:43.442"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:43.391" endtime="20170517 20:10:43.443"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:43.076" endtime="20170517 20:10:43.443"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2647">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:43.443" endtime="20170517 20:10:43.704"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:43.707" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.2647'.</msg>
<msg timestamp="20170517 20:10:43.759" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:43.759" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:43.759" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:43.706" endtime="20170517 20:10:43.759"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:43.761" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:43.760" endtime="20170517 20:10:43.761"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:43.705" endtime="20170517 20:10:43.761"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:43.443" endtime="20170517 20:10:43.761"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2650">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:43.762" endtime="20170517 20:10:44.013"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:44.014" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.2650'.</msg>
<msg timestamp="20170517 20:10:44.071" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:44.072" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:44.072" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:44.014" endtime="20170517 20:10:44.072"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:44.073" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:44.073" endtime="20170517 20:10:44.073"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:44.013" endtime="20170517 20:10:44.073"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:43.761" endtime="20170517 20:10:44.073"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2653">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:44.074" endtime="20170517 20:10:44.360"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:44.362" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.2653'.</msg>
<msg timestamp="20170517 20:10:44.420" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:44.420" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:44.420" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:44.362" endtime="20170517 20:10:44.420"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:44.421" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:44.421" endtime="20170517 20:10:44.421"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:44.360" endtime="20170517 20:10:44.422"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:44.074" endtime="20170517 20:10:44.422"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2656">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:44.422" endtime="20170517 20:10:44.702"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:44.703" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.2656'.</msg>
<msg timestamp="20170517 20:10:44.762" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:44.762" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:44.762" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:44.703" endtime="20170517 20:10:44.762"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:44.763" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:44.763" endtime="20170517 20:10:44.763"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:44.702" endtime="20170517 20:10:44.763"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:44.422" endtime="20170517 20:10:44.763"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2659">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:44.764" endtime="20170517 20:10:45.043"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:45.045" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.2659'.</msg>
<msg timestamp="20170517 20:10:45.093" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:45.094" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:45.094" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:45.045" endtime="20170517 20:10:45.094"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:45.095" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:45.094" endtime="20170517 20:10:45.095"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:45.043" endtime="20170517 20:10:45.095"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:44.763" endtime="20170517 20:10:45.095"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.2816">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:45.096" endtime="20170517 20:10:45.459"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:45.461" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.2816'.</msg>
<msg timestamp="20170517 20:10:45.521" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:45.521" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:45.521" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:45.461" endtime="20170517 20:10:45.521"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:45.522" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:45.522" endtime="20170517 20:10:45.522"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:45.460" endtime="20170517 20:10:45.522"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:45.095" endtime="20170517 20:10:45.522"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.3030">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:45.523" endtime="20170517 20:10:45.779"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:45.782" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.3030'.</msg>
<msg timestamp="20170517 20:10:45.829" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:45.830" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:45.830" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:45.781" endtime="20170517 20:10:45.830"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:45.831" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:45.830" endtime="20170517 20:10:45.831"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:45.779" endtime="20170517 20:10:45.831"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:45.523" endtime="20170517 20:10:45.831"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.3035">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:45.832" endtime="20170517 20:10:46.105"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:46.107" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.3035'.</msg>
<msg timestamp="20170517 20:10:46.165" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:46.165" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:46.165" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:46.107" endtime="20170517 20:10:46.165"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:46.166" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:46.166" endtime="20170517 20:10:46.166"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:46.106" endtime="20170517 20:10:46.167"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:45.831" endtime="20170517 20:10:46.167"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.3038">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:46.167" endtime="20170517 20:10:46.500"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:46.502" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.3038'.</msg>
<msg timestamp="20170517 20:10:46.550" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:46.550" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:46.550" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:46.502" endtime="20170517 20:10:46.550"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:46.551" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:46.551" endtime="20170517 20:10:46.551"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:46.501" endtime="20170517 20:10:46.552"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:46.167" endtime="20170517 20:10:46.552"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.3062">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:46.552" endtime="20170517 20:10:46.801"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:46.803" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.3062'.</msg>
<msg timestamp="20170517 20:10:46.850" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:46.850" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:46.850" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:46.802" endtime="20170517 20:10:46.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:46.851" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:46.850" endtime="20170517 20:10:46.851"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:46.802" endtime="20170517 20:10:46.851"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:46.552" endtime="20170517 20:10:46.851"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.3065">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:46.851" endtime="20170517 20:10:47.109"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:47.110" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.3065'.</msg>
<msg timestamp="20170517 20:10:47.157" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:47.157" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:47.157" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:47.110" endtime="20170517 20:10:47.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:47.158" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:47.157" endtime="20170517 20:10:47.158"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:47.109" endtime="20170517 20:10:47.158"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:46.851" endtime="20170517 20:10:47.158"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.3068">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:47.158" endtime="20170517 20:10:47.478"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:47.480" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.3068'.</msg>
<msg timestamp="20170517 20:10:47.528" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:47.528" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:47.528" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:47.479" endtime="20170517 20:10:47.528"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:47.529" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:47.529" endtime="20170517 20:10:47.529"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:47.478" endtime="20170517 20:10:47.530"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:47.158" endtime="20170517 20:10:47.530"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.3071">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:47.530" endtime="20170517 20:10:47.787"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:47.789" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.3071'.</msg>
<msg timestamp="20170517 20:10:47.837" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:47.837" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:47.837" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:47.789" endtime="20170517 20:10:47.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:47.838" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:47.838" endtime="20170517 20:10:47.838"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:47.787" endtime="20170517 20:10:47.839"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:47.530" endtime="20170517 20:10:47.839"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.3074">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:47.839" endtime="20170517 20:10:48.106"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:48.108" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.3074'.</msg>
<msg timestamp="20170517 20:10:48.155" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:48.156" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:48.156" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:48.108" endtime="20170517 20:10:48.156"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:48.158" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:48.157" endtime="20170517 20:10:48.158"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:48.107" endtime="20170517 20:10:48.158"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:47.839" endtime="20170517 20:10:48.158"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.3077">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:48.159" endtime="20170517 20:10:48.422"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:48.423" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.3077'.</msg>
<msg timestamp="20170517 20:10:48.500" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:48.500" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:48.500" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:48.423" endtime="20170517 20:10:48.500"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:48.501" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:48.501" endtime="20170517 20:10:48.501"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:48.422" endtime="20170517 20:10:48.501"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:48.158" endtime="20170517 20:10:48.501"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.3092">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:48.502" endtime="20170517 20:10:48.756"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:48.757" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.3092'.</msg>
<msg timestamp="20170517 20:10:48.804" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:48.804" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:48.804" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:48.757" endtime="20170517 20:10:48.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:48.805" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:48.805" endtime="20170517 20:10:48.805"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:48.756" endtime="20170517 20:10:48.806"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:48.502" endtime="20170517 20:10:48.806"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.3096">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:48.806" endtime="20170517 20:10:49.064"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:49.066" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.3096'.</msg>
<msg timestamp="20170517 20:10:49.122" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:49.122" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:49.122" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:49.065" endtime="20170517 20:10:49.122"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:49.123" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:49.123" endtime="20170517 20:10:49.123"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:49.064" endtime="20170517 20:10:49.123"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:48.806" endtime="20170517 20:10:49.123"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.3109">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:49.124" endtime="20170517 20:10:49.387"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:49.389" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.3109'.</msg>
<msg timestamp="20170517 20:10:49.436" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:49.436" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:49.436" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:49.388" endtime="20170517 20:10:49.436"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:49.437" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:49.436" endtime="20170517 20:10:49.437"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:49.387" endtime="20170517 20:10:49.437"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:49.123" endtime="20170517 20:10:49.437"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-mo.3113">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:49.437" endtime="20170517 20:10:49.738"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:49.739" level="INFO">Executing command 'rm /tmp/core_phosphor-fan-mo.3113'.</msg>
<msg timestamp="20170517 20:10:49.786" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:49.786" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:49.786" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:49.739" endtime="20170517 20:10:49.786"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:49.787" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:49.787" endtime="20170517 20:10:49.787"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:49.738" endtime="20170517 20:10:49.787"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:49.437" endtime="20170517 20:10:49.787"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.2534">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:49.788" endtime="20170517 20:10:50.069"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:50.071" level="INFO">Executing command 'rm /tmp/core_phosphor-hwmon-.2534'.</msg>
<msg timestamp="20170517 20:10:50.118" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:50.118" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:50.118" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:50.070" endtime="20170517 20:10:50.118"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170517 20:10:50.119" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170517 20:10:50.118" endtime="20170517 20:10:50.119"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:50.069" endtime="20170517 20:10:50.119"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:49.787" endtime="20170517 20:10:50.119"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:33.196" endtime="20170517 20:10:50.119"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.688" endtime="20170517 20:10:50.119"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.646" endtime="20170517 20:10:50.119"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.642" endtime="20170517 20:10:50.119"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:30.641" endtime="20170517 20:10:50.119"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:50.121" endtime="20170517 20:10:50.122"></status>
</kw>
<msg timestamp="20170517 20:10:50.122" level="INFO">${status} = PASS</msg>
<msg timestamp="20170517 20:10:50.122" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170517 20:10:50.121" endtime="20170517 20:10:50.122"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:50.122" endtime="20170517 20:10:50.122"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170517 20:10:50.172" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170517 20:10:50.172" endtime="20170517 20:10:50.172"></status>
</kw>
<msg timestamp="20170517 20:10:50.172" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170517 20:10:50.171" endtime="20170517 20:10:50.172"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:50.173" endtime="20170517 20:10:50.173"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:50.172" endtime="20170517 20:10:50.173"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170517 20:10:50.175" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170517 20:10:50.175" endtime="20170517 20:10:50.175"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170517 20:10:50.176" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170517 20:10:50.175" endtime="20170517 20:10:50.176"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170517 20:10:50.177" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170517 20:10:50.176" endtime="20170517 20:10:50.177"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170517 20:10:50.177" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170517 20:10:50.177" endtime="20170517 20:10:50.177"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:50.174" endtime="20170517 20:10:50.178"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:50.174" endtime="20170517 20:10:50.178"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170517 20:10:50.179" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170517 20:10:50.178" endtime="20170517 20:10:50.179"></status>
</kw>
<msg timestamp="20170517 20:10:50.179" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170517 20:10:50.178" endtime="20170517 20:10:50.179"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:50.180" endtime="20170517 20:10:50.181"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:50.181" endtime="20170517 20:10:50.181"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:50.180" endtime="20170517 20:10:50.181"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:50.179" endtime="20170517 20:10:50.181"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170517 20:10:50.182" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170517 20:10:51.885" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170517 20:10:50.182" endtime="20170517 20:10:51.886"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:50.170" endtime="20170517 20:10:51.886"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170517 20:10:51.888" level="INFO">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20170517 20:10:51.887" endtime="20170517 20:10:51.888"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170517 20:10:51.891" level="INFO">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" starttime="20170517 20:10:51.890" endtime="20170517 20:10:51.891"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170517 20:10:51.900" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" starttime="20170517 20:10:51.891" endtime="20170517 20:10:51.900"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:51.909" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:51.905" endtime="20170517 20:10:51.909"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.905" endtime="20170517 20:10:51.909"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:51.911" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:51.911" endtime="20170517 20:10:51.912"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.910" endtime="20170517 20:10:51.912"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:51.913" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:51.913" endtime="20170517 20:10:51.913"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.912" endtime="20170517 20:10:51.913"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:51.915" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:51.914" endtime="20170517 20:10:51.915"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.914" endtime="20170517 20:10:51.915"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.903" endtime="20170517 20:10:51.915"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.903" endtime="20170517 20:10:51.916"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:51.916" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170517 20:10:51.974" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:51.974" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg timestamp="20170517 20:10:51.974" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:51.916" endtime="20170517 20:10:51.974"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:51.982" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:51.981" endtime="20170517 20:10:51.982"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.980" endtime="20170517 20:10:51.982"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.974" endtime="20170517 20:10:51.982"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.901" endtime="20170517 20:10:51.982"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.901" endtime="20170517 20:10:51.982"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:51.985" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:51.985" endtime="20170517 20:10:51.985"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.984" endtime="20170517 20:10:51.986"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:51.987" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:51.986" endtime="20170517 20:10:51.987"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.986" endtime="20170517 20:10:51.987"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:51.988" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:51.988" endtime="20170517 20:10:51.988"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.987" endtime="20170517 20:10:51.988"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:51.990" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:51.989" endtime="20170517 20:10:51.990"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.989" endtime="20170517 20:10:51.990"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.984" endtime="20170517 20:10:51.990"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.983" endtime="20170517 20:10:51.990"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:51.991" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170517 20:10:52.110" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:52.112" level="INFO">${stdout} =  17:52:53 up 23 min,  load average: 1.65, 2.31, 2.13</msg>
<msg timestamp="20170517 20:10:52.112" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:51.990" endtime="20170517 20:10:52.112"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:52.121" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:52.121" endtime="20170517 20:10:52.121"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.120" endtime="20170517 20:10:52.121"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.113" endtime="20170517 20:10:52.121"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.983" endtime="20170517 20:10:52.122"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.983" endtime="20170517 20:10:52.122"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:52.125" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:52.124" endtime="20170517 20:10:52.125"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.124" endtime="20170517 20:10:52.125"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:52.126" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:52.126" endtime="20170517 20:10:52.126"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.125" endtime="20170517 20:10:52.126"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:52.127" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:52.127" endtime="20170517 20:10:52.128"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.126" endtime="20170517 20:10:52.128"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:52.129" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:52.128" endtime="20170517 20:10:52.129"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.128" endtime="20170517 20:10:52.129"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.123" endtime="20170517 20:10:52.129"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.123" endtime="20170517 20:10:52.129"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:52.130" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170517 20:10:52.190" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:52.190" level="INFO">${stdout} = Linux witherspoon 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 #1 Wed May 17 19:35:21 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170517 20:10:52.190" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:52.129" endtime="20170517 20:10:52.190"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:52.199" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:52.198" endtime="20170517 20:10:52.199"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.197" endtime="20170517 20:10:52.199"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.191" endtime="20170517 20:10:52.199"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.122" endtime="20170517 20:10:52.199"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.122" endtime="20170517 20:10:52.199"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.901" endtime="20170517 20:10:52.199"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.889" endtime="20170517 20:10:52.199"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.889" endtime="20170517 20:10:52.199"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170517 20:10:52.200" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" starttime="20170517 20:10:52.200" endtime="20170517 20:10:52.200"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170517 20:10:52.201" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" starttime="20170517 20:10:52.201" endtime="20170517 20:10:52.201"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:52.205" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:52.204" endtime="20170517 20:10:52.205"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.204" endtime="20170517 20:10:52.205"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:52.206" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:52.206" endtime="20170517 20:10:52.206"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.205" endtime="20170517 20:10:52.207"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:52.208" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:52.207" endtime="20170517 20:10:52.208"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.207" endtime="20170517 20:10:52.208"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:52.209" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:52.209" endtime="20170517 20:10:52.209"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.208" endtime="20170517 20:10:52.209"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.203" endtime="20170517 20:10:52.209"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.203" endtime="20170517 20:10:52.209"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:52.210" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170517 20:10:53.566" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:53.566" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg timestamp="20170517 20:10:53.566" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:52.210" endtime="20170517 20:10:53.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:53.573" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:53.572" endtime="20170517 20:10:53.573"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.571" endtime="20170517 20:10:53.573"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.567" endtime="20170517 20:10:53.573"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.202" endtime="20170517 20:10:53.573"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.202" endtime="20170517 20:10:53.573"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.201" endtime="20170517 20:10:53.573"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.200" endtime="20170517 20:10:53.573"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:52.199" endtime="20170517 20:10:53.573"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170517 20:10:53.574" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status status="PASS" starttime="20170517 20:10:53.574" endtime="20170517 20:10:53.574"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170517 20:10:53.575" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" starttime="20170517 20:10:53.575" endtime="20170517 20:10:53.575"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:53.578" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:53.578" endtime="20170517 20:10:53.578"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.577" endtime="20170517 20:10:53.578"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:53.580" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:53.579" endtime="20170517 20:10:53.580"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.578" endtime="20170517 20:10:53.580"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:53.581" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:53.581" endtime="20170517 20:10:53.582"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.580" endtime="20170517 20:10:53.582"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:53.583" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:53.582" endtime="20170517 20:10:53.583"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.582" endtime="20170517 20:10:53.583"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.577" endtime="20170517 20:10:53.583"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.576" endtime="20170517 20:10:53.583"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:53.584" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170517 20:10:53.662" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170517 20:10:53.662" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.5-39"
VERSION_ID="v1.99.5-39-g7507177"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170517 20:10:53.662" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170517 20:10:53.583" endtime="20170517 20:10:53.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:53.671" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:53.670" endtime="20170517 20:10:53.671"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.669" endtime="20170517 20:10:53.671"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.663" endtime="20170517 20:10:53.671"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.576" endtime="20170517 20:10:53.671"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.575" endtime="20170517 20:10:53.671"></status>
</kw>
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:53.674" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:53.674" endtime="20170517 20:10:53.674"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.673" endtime="20170517 20:10:53.674"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:53.676" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:53.675" endtime="20170517 20:10:53.676"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.675" endtime="20170517 20:10:53.676"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:53.677" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:53.677" endtime="20170517 20:10:53.677"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.676" endtime="20170517 20:10:53.677"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:53.678" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:53.678" endtime="20170517 20:10:53.679"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.678" endtime="20170517 20:10:53.679"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.673" endtime="20170517 20:10:53.679"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.672" endtime="20170517 20:10:53.679"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170517 20:10:53.679" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170517 20:10:53.805" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170517 20:10:53.806" level="INFO">${stdout} = </msg>
<msg timestamp="20170517 20:10:53.806" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" starttime="20170517 20:10:53.679" endtime="20170517 20:10:53.806"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170517 20:10:53.812" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/20170517200936067436_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:53.812" endtime="20170517 20:10:53.812"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.811" endtime="20170517 20:10:53.813"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.806" endtime="20170517 20:10:53.813"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.672" endtime="20170517 20:10:53.813"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.671" endtime="20170517 20:10:53.813"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.575" endtime="20170517 20:10:53.813"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.573" endtime="20170517 20:10:53.813"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:53.573" endtime="20170517 20:10:53.813"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:51.888" endtime="20170517 20:10:53.813"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:50.170" endtime="20170517 20:10:53.813"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:50.123" endtime="20170517 20:10:53.813"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:50.120" endtime="20170517 20:10:53.813"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:50.120" endtime="20170517 20:10:53.813"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.903" endtime="20170517 20:10:53.814"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.900" endtime="20170517 20:10:53.814"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.900" endtime="20170517 20:10:53.814"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.899" endtime="20170517 20:10:53.814"></status>
</kw>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20170517 20:10:53.814" endtime="20170517 20:10:54.014"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:38.897" endtime="20170517 20:10:54.014"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:24.256" endtime="20170517 20:10:54.015"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:24.255" endtime="20170517 20:10:54.015"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:54.015" endtime="20170517 20:10:54.015"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170517 20:10:54.024" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170517 20:10:54.016" endtime="20170517 20:10:54.024"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170517 20:10:54.025" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/13665/obmc-robot/logs/20170517200936067436_TestsTestBasicPoweron/20170517200936067436_CheckForApplicationFailures/</msg>
<status status="PASS" starttime="20170517 20:10:54.024" endtime="20170517 20:10:54.025"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:54.025" endtime="20170517 20:10:54.025"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:54.026" endtime="20170517 20:10:54.026"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170517 20:10:54.027" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs"&gt;/tmp/fspcibld/13665/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20170517 20:10:54.026" endtime="20170517 20:10:54.027"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170517 20:10:54.028" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20170517 20:10:54.027" endtime="20170517 20:10:54.028"></status>
</kw>
<msg timestamp="20170517 20:10:54.028" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20170517 20:10:54.027" endtime="20170517 20:10:54.028"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:54.028" endtime="20170517 20:10:54.028"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:54.029" endtime="20170517 20:10:54.029"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170517 20:10:54.030" level="INFO">${cur_time} = 2017-05-17 20:10:54:029777</msg>
<status status="PASS" starttime="20170517 20:10:54.030" endtime="20170517 20:10:54.030"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170517 20:10:54.031" level="INFO">${cur_time} = 20170517201054029777</msg>
<status status="PASS" starttime="20170517 20:10:54.030" endtime="20170517 20:10:54.031"></status>
</kw>
<msg timestamp="20170517 20:10:54.031" level="INFO">${cur_time} = 20170517201054029777</msg>
<status status="PASS" starttime="20170517 20:10:54.029" endtime="20170517 20:10:54.031"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170517 20:10:54.032" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13665/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/13665/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170517 20:10:54.031" endtime="20170517 20:10:54.032"></status>
</kw>
<status status="PASS" starttime="20170517 20:10:54.016" endtime="20170517 20:10:54.032"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:23.899" endtime="20170517 20:10:54.032"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170517 20:10:54.034" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:10:54.033" endtime="20170517 20:10:54.034"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170517 20:10:54.034" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:10:54.034" endtime="20170517 20:10:54.034"></status>
</kw>
<msg timestamp="20170517 20:10:54.035" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170517 20:10:54.033" endtime="20170517 20:10:54.035"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:10:54.035" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170517 20:10:54.035" endtime="20170517 20:10:54.035"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:10:54.036" endtime="20170517 20:10:54.048"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:10:54.055" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:11:05.877" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:11:05.878" level="INFO">${output} = /tmp/fspcibld/13665/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170517 20:10:54.049" endtime="20170517 20:11:05.878"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170517 20:11:05.888" endtime="20170517 20:11:05.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170517 20:11:05.907" endtime="20170517 20:11:05.908"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:11:05.909" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170517 20:11:05.909" endtime="20170517 20:11:05.909"></status>
</kw>
<msg timestamp="20170517 20:11:05.910" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status status="PASS" starttime="20170517 20:10:54.035" endtime="20170517 20:11:05.910"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:11:05.910" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170517 20:11:05.910" endtime="20170517 20:11:05.910"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:11:05.911" endtime="20170517 20:11:05.949"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170517 20:11:05.956" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:11:06.029" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:11:06.030" level="INFO">${os_con_pid} = 223</msg>
<status status="PASS" starttime="20170517 20:11:05.951" endtime="20170517 20:11:06.030"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170517 20:11:06.031" endtime="20170517 20:11:06.040"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:11:06.040" level="INFO">${cmd_buf} = kill -9 223</msg>
<status status="PASS" starttime="20170517 20:11:06.040" endtime="20170517 20:11:06.040"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:11:06.042" endtime="20170517 20:11:06.049"></status>
</kw>
<status status="PASS" starttime="20170517 20:11:06.041" endtime="20170517 20:11:06.049"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg timestamp="20170517 20:11:06.054" level="INFO">Running command 'kill -9 223 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20170517 20:11:06.050" endtime="20170517 20:11:06.057"></status>
</kw>
<msg timestamp="20170517 20:11:06.058" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:11:06.058" level="INFO">${output} = </msg>
<status status="PASS" starttime="20170517 20:11:06.049" endtime="20170517 20:11:06.058"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170517 20:11:06.062" endtime="20170517 20:11:06.073"></status>
</kw>
<status status="PASS" starttime="20170517 20:11:06.060" endtime="20170517 20:11:06.073"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170517 20:11:06.074" level="INFO">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170517 20:11:06.073" endtime="20170517 20:11:06.074"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:11:06.074" endtime="20170517 20:11:06.081"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170517 20:11:06.086" level="INFO">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg timestamp="20170517 20:11:06.137" level="INFO">${rc} = 0</msg>
<msg timestamp="20170517 20:11:06.138" level="INFO">${output} = spawn ssh -p 2200 root@9.41.166.169
root@9.41.166.169's password: 
111.21204|ISTEP 21. 1
131.13896|ISTEP 21. 2
131.13954|ISTEP 21. 3
[  131.448864387,5] SkiBoot skiboot-5.5.0-rc3 starting...
[  131.44...</msg>
<status status="PASS" starttime="20170517 20:11:06.082" endtime="20170517 20:11:06.138"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status status="PASS" starttime="20170517 20:11:06.140" endtime="20170517 20:11:06.149"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" starttime="20170517 20:11:06.150" endtime="20170517 20:11:06.150"></status>
</kw>
<msg timestamp="20170517 20:11:06.151" level="INFO">${sol_log} = spawn ssh -p 2200 root@9.41.166.169
root@9.41.166.169's password: 
111.21204|ISTEP 21. 1
131.13896|ISTEP 21. 2
131.13954|ISTEP 21. 3
[  131.448864387,5] SkiBoot skiboot-5.5.0-rc3 starting...
[  131.44...</msg>
<status status="PASS" starttime="20170517 20:10:54.032" endtime="20170517 20:11:06.151"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170517 20:11:06.152" level="INFO">spawn ssh -p 2200 root@9.41.166.169
root@9.41.166.169's password: 
111.21204|ISTEP 21. 1
131.13896|ISTEP 21. 2
131.13954|ISTEP 21. 3
[  131.448864387,5] SkiBoot skiboot-5.5.0-rc3 starting...
[  131.448867952,5] initial console log level: memory 7, driver 5
[  131.448870746,6] CPU: P9 generation processor(max 4 threads/core)
[  131.448873391,7] CPU: Boot CPU PIR is 0x0848 PVR is 0x004e0100
[  131.448876056,7] CPU: Initial max PIR set to 0x7fff
[  131.450278538,5] OPAL table: 0x300d2740 .. 0x300d2c00, branch table: 0x30002000
[  131.450285195,7] Parsing HDAT...
[  131.450287196,5] SPIRA-S found.
[  131.450291838,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[  131.450296422,6] SP Family is ibm,ast2500,openbmc
[  131.450303993,7] LPC: IOPATH chip id = 0
[  131.450305945,7] LPC: FW BAR       = f0000000
[  131.450308026,7] LPC: MEM BAR      = e0000000
[  131.450310069,7] LPC: IO BAR       = d0010000
[  131.450312119,7] LPC: Internal BAR = c0012000
[  131.450328705,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[  131.450332544,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[  131.450917023,5] UART: Using UART at 0x60300d00103f8
[  131.452015410,5] IOHUB: PHB4 active bridge mask fc
[  131.452145672,5] IOHUB: PHB4 active bridge mask 9c
[  131.452249500,4] VPD: Model name 0000000000000000 not known
[  131.452349711,5] P9 DD1.03 detected
[  131.452376406,5] XSCOM: chip 0x0 at 0x603fc00000000 [P9N DD1.0]
[  131.452416363,5] P9 DD1.03 detected
[  131.452440231,5] XSCOM: chip 0x8 at 0x623fc00000000 [P9N DD1.0]
[  131.452532810,5] LPC: LPC[000]: Initialized, access via MMIO @0x6030000000000
[  131.452596806,5] LPC: LPC: Default bus on chip 0x0
[  131.452673232,4] HOMER image is not reserved! Reserving
[  131.452730962,4] HOMER image is not reserved! Reserving
[  131.452796309,5] SLW: Enabling: stop0_lite
[  131.452909348,5] PLAT: Using virtual UART
[  131.453073066,7] LPC: LPC: Routing irq 9, policy: 0 (r=1)
[  131.453075878,7] LPC: LPC: SerIRQ 9 using route 0 targetted at OPAL
[  131.453178372,5] PLAT: Detected Witherspoon platform
[  131.453862352,4] XIVE[ IC 00  ] IC BAR invalid, reconfiguring
[  131.457336922,4] XIVE[ IC 08  ] IC BAR invalid, reconfiguring
[  131.476019654,5] PSI[0x000]: ESB MMIO invalid, reconfiguring...
[  131.476085230,5] PSI[0x000]: ESB MMIO at @0x60302031c0000
[  131.476144866,5] PSI[0x000]: Found PSI bridge [active=0]
[  131.476191604,5] PSI[0x008]: ESB MMIO invalid, reconfiguring...
[  131.476238044,5] PSI[0x008]: ESB MMIO at @0x62302031c0000
[  131.476295032,5] PSI[0x008]: Found PSI bridge [active=0]
[  131.477423399,5] CPU: All 32 processors called in...
[    0.278860448,3] LPC-MBOX: Got a status bit set that don't know about: 0x80
[    1.279837664,5] FLASH: Found system flash:  id:0
[    1.279909488,5] BT: Interface initialized, IO 0x00e4
[    1.279943504,7] LPC: LPC: Routing irq 10, policy: 0 (r=1)
[    1.279946256,7] LPC: LPC: SerIRQ 10 using route 1 targetted at OPAL
[    2.228958912,5] NVRAM: Size is 576 KB
[    3.244297824,5] STB: secure and trusted boot not supported
[    3.244348736,5] OPAL: Using OPAL UART console
[    3.244389120,7] LPC: LPC: Routing irq 4, policy: 0 (r=1)
[    3.244391520,7] LPC: LPC: SerIRQ 4 using route 2 targetted at OPAL
[    3.244468256,5] SLW: Init chip 0x0
[    3.244487344,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.244523712,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.244592272,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.244628272,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.244671504,5] SLW: Init chip 0x8
[    3.244709696,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.244745728,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.244782112,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.244816416,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.244873440,5] CAPI: WARNING: no compat thing found
[    3.244906128,5] FLASH: Queueing preload of 0/0
[    3.244932240,5] FLASH: Queueing preload of 1/0
[    3.245048256,5] PHB: Chip 0 Found PHB4 PBCQ0 Stack 0 at /xscom@603fc00000000/pbcq@4010c00/stack@0
[    3.245106896,3] PHB[0:0] No PHB BAR set ! Overriding
[    3.245141328,3] PHB[0:0] REGS     = 0x000600c3c0000000 [4k]
[    3.245170960,3] PHB[0:0] No IRQ BAR set ! Overriding
[    3.245197392,3] PHB[0:0] ESB      = 0x000600c300000000 [...]
[    3.245228128,3] PHB[0:0] No MMIO BAR set ! Overriding
[    3.245266464,3] ETU reset: 0
[    3.245796240,3] Version reg: 0x000000a400000001
[    3.245841312,5] PHB: Chip 0 Found PHB4 PBCQ1 Stack 0 at /xscom@603fc00000000/pbcq@4011000/stack@0
[    3.245896720,3] PHB[0:1] No PHB BAR set ! Overriding
[    3.245923696,3] PHB[0:1] REGS     = 0x000600c3c0100000 [4k]
[    3.245957152,3] PHB[0:1] No IRQ BAR set ! Overriding
[    3.245984368,3] PHB[0:1] ESB      = 0x000600c320000000 [...]
[    3.246015472,3] PHB[0:1] No MMIO BAR set ! Overriding
[    3.246053008,3] ETU reset: 0
[    3.246583792,3] Version reg: 0x000000a400000001
[    3.246627760,5] PHB: Chip 0 Found PHB4 PBCQ1 Stack 1 at /xscom@603fc00000000/pbcq@4011000/stack@1
[    3.246681600,3] PHB[0:2] No PHB BAR set ! Overriding
[    3.246709040,3] PHB[0:2] REGS     = 0x000600c3c0200000 [4k]
[    3.246741312,3] PHB[0:2] No IRQ BAR set ! Overriding
[    3.246767376,3] PHB[0:2] ESB      = 0x000600c340000000 [...]
[    3.246797264,3] PHB[0:2] No MMIO BAR set ! Overriding
[    3.246834624,3] ETU reset: 0
[    3.247364016,3] Version reg: 0x000000a400000001
[    3.247410432,5] PHB: Chip 0 Found PHB4 PBCQ2 Stack 0 at /xscom@603fc00000000/pbcq@4011400/stack@0
[    3.247465888,3] PHB[0:3] No PHB BAR set ! Overriding
[    3.247493936,3] PHB[0:3] REGS     = 0x000600c3c0300000 [4k]
[    3.247526544,3] PHB[0:3] No IRQ BAR set ! Overriding
[    3.247553232,3] PHB[0:3] ESB      = 0x000600c360000000 [...]
[    3.247583024,3] PHB[0:3] No MMIO BAR set ! Overriding
[    3.247625216,3] ETU reset: 0
[    3.248156096,3] Version reg: 0x000000a400000001
[    3.248204416,5] PHB: Chip 0 Found PHB4 PBCQ2 Stack 1 at /xscom@603fc00000000/pbcq@4011400/stack@1
[    3.248260544,3] PHB[0:4] No PHB BAR set ! Overriding
[    3.248288176,3] PHB[0:4] REGS     = 0x000600c3c0400000 [4k]
[    3.248319024,3] PHB[0:4] No IRQ BAR set ! Overriding
[    3.248345952,3] PHB[0:4] ESB      = 0x000600c380000000 [...]
[    3.248376704,3] PHB[0:4] No MMIO BAR set ! Overriding
[    3.248414944,3] ETU reset: 0
[    3.248947392,3] Version reg: 0x000000a400000001
[    3.249000064,5] PHB: Chip 0 Found PHB4 PBCQ2 Stack 2 at /xscom@603fc00000000/pbcq@4011400/stack@2
[    3.249057120,3] PHB[0:5] No PHB BAR set ! Overriding
[    3.249084240,3] PHB[0:5] REGS     = 0x000600c3c0500000 [4k]
[    3.249114352,3] PHB[0:5] No IRQ BAR set ! Overriding
[    3.249147648,3] PHB[0:5] ESB      = 0x000600c3a0000000 [...]
[    3.249178352,3] PHB[0:5] No MMIO BAR set ! Overriding
[    3.249216384,3] ETU reset: 0
[    3.249746240,3] Version reg: 0x000000a400000001
[    3.249795264,5] PHB: Chip 8 Found PHB4 PBCQ0 Stack 0 at /xscom@623fc00000000/pbcq@4010c00/stack@0
[    3.249850048,3] PHB[8:0] No PHB BAR set ! Overriding
[    3.249914944,3] PHB[8:0] REGS     = 0x000620c3c0000000 [4k]
[    3.249945232,3] PHB[8:0] No IRQ BAR set ! Overriding
[    3.249976512,3] PHB[8:0] ESB      = 0x000620c300000000 [...]
[    3.250016976,3] PHB[8:0] No MMIO BAR set ! Overriding
[    3.250053520,3] ETU reset: 0
[    3.250586704,3] Version reg: 0x000000a400000001
[    3.250636640,5] PHB: Chip 8 Found PHB4 PBCQ2 Stack 0 at /xscom@623fc00000000/pbcq@4011400/stack@0
[    3.250707696,3] PHB[8:3] No PHB BAR set ! Overriding
[    3.250734880,3] PHB[8:3] REGS     = 0x000620c3c0300000 [4k]
[    3.250764832,3] PHB[8:3] No IRQ BAR set ! Overriding
[    3.250824000,3] PHB[8:3] ESB      = 0x000620c360000000 [...]
[    3.250856352,3] PHB[8:3] No MMIO BAR set ! Overriding
[    3.250893888,3] ETU reset: 0
[    3.251423456,3] Version reg: 0x000000a400000001
[    3.251466416,5] PHB: Chip 8 Found PHB4 PBCQ2 Stack 1 at /xscom@623fc00000000/pbcq@4011400/stack@1
[    3.251525184,3] PHB[8:4] No PHB BAR set ! Overriding
[    3.251553232,3] PHB[8:4] REGS     = 0x000620c3c0400000 [4k]
[    3.251583504,3] PHB[8:4] No IRQ BAR set ! Overriding
[    3.251609648,3] PHB[8:4] ESB      = 0x000620c380000000 [...]
[    3.251639856,3] PHB[8:4] No MMIO BAR set ! Overriding
[    3.251676272,3] ETU reset: 0
[    3.252203856,3] Version reg: 0x000000a400000001
[    3.252250800,5] PHB: Chip 8 Found PHB4 PBCQ2 Stack 2 at /xscom@623fc00000000/pbcq@4011400/stack@2
[    3.252308992,3] PHB[8:5] No PHB BAR set ! Overriding
[    3.252336800,3] PHB[8:5] REGS     = 0x000620c3c0500000 [4k]
[    3.252366832,3] PHB[8:5] No IRQ BAR set ! Overriding
[    3.252393312,3] PHB[8:5] ESB      = 0x000620c3a0000000 [...]
[    3.252459056,3] PHB[8:5] No MMIO BAR set ! Overriding
[    3.252496480,3] ETU reset: 0
[    3.253026064,3] Version reg: 0x000000a400000001
[    3.253114896,3] PHB#0000[0:0]: Base location code not found !
[    3.254258256,3] PHB#0001[0:1]: Base location code not found !
[    3.255212528,3] PHB#0002[0:2]: Base location code not found !
[    3.256168096,3] PHB#0003[0:3]: Base location code not found !
[    3.257307904,3] PHB#0004[0:4]: Base location code not found !
[    3.258272432,3] PHB#0005[0:5]: Base location code not found !
[    3.259227136,3] PHB#0030[8:0]: Base location code not found !
[    3.260201632,3] PHB#0033[8:3]: Base location code not found !
[    3.261182448,3] PHB#0034[8:4]: Base location code not found !
[    3.262059664,3] PHB#0035[8:5]: Base location code not found !
[    3.263007808,5] PCI: Resetting PHBs...
[   10.400727984,5] PCI: Probing slots...
[   10.457181616,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   10.457250480,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[   10.457296560,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[   10.457340512,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[   10.457389520,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[   10.457485552,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[   10.457531568,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   10.457576800,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..12 
[   10.457622320,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..12 
[   10.457686448,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[   10.457742864,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[   10.457798160,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..08 
[   10.457844384,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:09..0d 
[   10.457890368,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:0e..12 
[   10.457936928,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   10.457988304,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   10.458035840,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   10.458085824,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   10.458133376,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[   10.458180032,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   10.458226528,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   10.458271216,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   10.458315744,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   10.458359728,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   10.458403440,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..0c 
[   10.458450064,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..0c 
[   10.458502032,5] PHB#0035:02:08.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..07 
[   10.458548544,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:08..0c 
[   10.477765984,5] irq ffff0 name: psi:fsp (7/0)
[   10.477805424,5] irq ffff1 name: psi:occ (7/8)
[   10.477829712,5] irq ffff2 name: psi:fsi (7/16)
[   10.477856400,5] irq ffff3 name: psi:lpchc (9/24)
[   10.477881808,5] irq ffff4 name: psi:local_err (13/34)
[   10.477910704,5] irq ffff5 name: psi:global_err (14/48)
[   10.477937952,5] irq ffff6 name: psi:external (12/63)
[   10.477966240,5] irq ffff7 name: psi:lpc_serirq_mux0 (19/76)
[   10.477996496,5] irq ffff8 name: psi:lpc_serirq_mux1 (19/96)
[   10.478027888,5] irq ffff9 name: psi:lpc_serirq_mux2 (19/116)
[   10.478060672,5] irq ffffa name: psi:lpc_serirq_mux3 (19/136)
[   10.478093744,5] irq ffffb name: psi:i2c (7/156)
[   10.478121024,5] irq ffffc name: psi:dio (7/164)
[   10.478146928,5] irq ffffd name: psi:psu (7/172)
[   10.478176608,5] irq 1ffff0 name: psi:fsp (7/180)
[   10.478204752,5] irq 1ffff1 name: psi:occ (7/188)
[   10.478230736,5] irq 1ffff2 name: psi:fsi (7/196)
[   10.478256992,5] irq 1ffff3 name: psi:lpchc (9/204)
[   10.478284560,5] irq 1ffff4 name: psi:local_err (13/214)
[   10.478315872,5] irq 1ffff5 name: psi:global_err (14/228)
[   10.478345856,5] irq 1ffff6 name: psi:external (12/243)
[   10.478374848,5] irq 1ffffb name: psi:i2c (7/256)
[   10.478399872,5] irq 1ffffc name: psi:dio (7/264)
[   10.478426240,5] irq 1ffffd name: psi:psu (7/272)
[   10.478719008,5] Releasing unused memory:
[   10.478741104,5]     ibm,firmware-heap: 5371960/13631488 used
[   10.478775664,5]     ibm,firmware-allocs-memory@200000000000: 21504000/68677533696 used
[   10.478822224,5]     ibm,firmware-allocs-memory@0: 26746880/67347939328 used
[   10.478862144,5]     ibm,firmware-allocs-memory@200000000000: 0/33554432 used
[   10.478911200,5] Reserved regions:
[   10.478929392,5]   0x200ffdc00000..200ffdffffff : ibm,homer-image
[   10.478966592,5]   0x200ffd800000..200ffdbfffff : ibm,homer-image
[   10.479004608,5]   0x000031c00000..000033d5ffff : ibm,firmware-stacks
[   10.479042672,5]   0x000031000000..000031bfffff : ibm,firmware-data
[   10.479080368,5]   0x000030300000..000030ffffff : ibm,firmware-heap
[   10.479115616,5]   0x000030000000..0000302fffff : ibm,firmware-code
[   10.479152528,5]   0x200000000000..200001481fff : ibm,firmware-allocs-memory@200000000000
[   10.479202816,5]   0x200ffd470000..200ffd694287 : ibm,hbrt-code-image
[   10.479240368,5]   0x200ffd6a0000..200ffd6f9fff : ibm,hbrt-target-image
[   10.479282688,5]   0x200ffd700000..200ffd7fffff : ibm,hbrt-vpd-image
[   10.479322240,5]   0x000051c00000..000053581fff : ibm,firmware-allocs-memory@0
[   10.479402528,5] INIT: Waiting for kernel...
[   20.408688784,5] STB: sb_verify skipped resource 0, secure_mode=0
[   20.408747104,5] STB: tb_measure skipped resource 0, trusted_mode=0
[   20.411251248,5] INIT: Kernel loaded, size: 13866600 bytes (0 = unknown preload)
[   20.411316992,5] INIT: 64-bit LE kernel discovered
[   20.411342016,5] INIT: 64-bit kernel entry at 0x20010000, size 0xd39668
[   21.102556752,3] FLASH: Failed to get ROOTFS partition info
[   21.114178896,5] Free space in HEAP memory regions:
[   21.114241952,5] Region ibm,firmware-heap free: 764520
[   21.114281808,5] Region ibm,firmware-allocs-memory@200000000000 free: 5f7620
[   21.114326416,5] Region ibm,firmware-allocs-memory@0 free: a755c0
[   21.114363680,5] Total free: 24973568
[   21.114384736,5] INIT: stdout-path: /ibm,opal/consoles/serial@0
[   21.114420176,5] INIT: Starting kernel at 0x20010000, fdt at 0x30820538 197659 bytes)
[   22.352134752,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000200fffff0000
[    0.000000] Mapping range 0x0 - 0x1000000000 with 0x40000000
[    0.000000] Mapping range 0x200000000000 - 0x201000000000 with 0x40000000
[    0.000000] Process table c000200fff000000 and radix root for kernel: c0000000013a0000
[    0.000000] Linux version 4.10.7-openpower1 (fspbld@gfwa611.aus.stglabs.ibm.com) (gcc version 4.9.4 (Buildroot 2017.02-00004-gc28573e) ) #2 SMP Thu Apr 6 09:28:47 CDT 2017
[    0.000000] OPAL: Power8 LPC bus found, chip ID 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 31
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x2000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x477c7afd18500249
[    0.000000]   possible        = 0x7f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaec00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0xfffffffff]
[    0.000000] numa:   NODE_DATA [mem 0xfffff6700-0xfffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x200fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x200ffffac200-0x200ffffb5aff]
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006001fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x2000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006002000000000..0x0006003fffffffff -&gt; 0x0006002000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006005fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006006000000000..0x0006007fffffffff -&gt; 0x0006006000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x2000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x0006009fffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x000600a000000000..0x000600bfffffffff -&gt; 0x000600a000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006201fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x2000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006206000000000..0x0006207fffffffff -&gt; 0x0006206000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x2000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006208000000000..0x0006209fffffffff -&gt; 0x0006208000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x000620a000000000..0x000620bfffffffff -&gt; 0x000620a000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000200fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000000fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000000fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000200fffffffff]
[    0.000000] percpu: Embedded 2 pages/cpu @c000000ffc3c0000 s58136 r0 d72936 u131072
[    0.000000] Built 2 zonelists in Node order, mobility grouping on.  Total pages: 2095360
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 133937024K/134217728K available (6272K kernel code, 832K rwdata, 1956K rodata, 11008K init, 1658K bss, 280704K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=32, Nodes=9
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=32.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=32
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] XICS: Using OPAL ICP fallbacks
[    0.000000] ICS OPAL backend registered
[    0.000005] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000222] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.000590] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001054] Console: colour dummy device 80x25
[    0.002780] console [tty0] enabled
[    0.002919] console [hvc0] enabled
[    0.002919] console [hvc0] enabled
[    0.003099] bootconsole [udbg0] disabled
[    0.003099] bootconsole [udbg0] disabled
[    0.004034] pid_max: default: 32768 minimum: 301
[    0.006873] Security Framework initialized
[    0.009752] Dentry cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.074478] Inode-cache hash table entries: 8388608 (order: 10, 67108864 bytes)
[    0.106650] Mount-cache hash table entries: 262144 (order: 5, 2097152 bytes)
[    0.106829] Mountpoint-cache hash table entries: 262144 (order: 5, 2097152 bytes)
[    0.112190] EEH: PowerNV platform initialized
[    0.112285] POWER9 performance monitor hardware support registered
[    0.113272] smp: Bringing up secondary CPUs ...
[    0.145397] smp: Brought up 2 nodes, 32 CPUs
[    0.145519] numa: Node 0 CPUs: 0-15
[    0.145589] numa: Node 8 CPUs: 16-31
[    0.155082] devtmpfs: initialized
[    0.162502] evm: security.capability
[    0.163452] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.163691] futex hash table entries: 8192 (order: 4, 1048576 bytes)
[    0.164878] NET: Registered protocol family 16
[    0.231299] cpuidle: using governor menu
[    0.253047] PCI: Probing PCI hardware
[    0.253239] PCI host bridge to bus 0000:00
[    0.253351] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.253581] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6001fbfffffff 64bit pref]
[    0.253775] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.254334] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.254634] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.254928] PCI host bridge to bus 0001:00
[    0.255045] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.255267] pci_bus 0001:00: root bus resource [mem 0x6002000000000-0x6003f7fffffff 64bit pref]
[    0.255452] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.256530] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.256837] PCI host bridge to bus 0002:00
[    0.256941] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.257173] pci_bus 0002:00: root bus resource [mem 0x6004000000000-0x6005f7fffffff 64bit pref]
[    0.257361] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.258354] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.259211] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.259487] PCI host bridge to bus 0003:00
[    0.259592] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.259815] pci_bus 0003:00: root bus resource [mem 0x6006000000000-0x6007fbfffffff 64bit pref]
[    0.259984] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.260444] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.260744] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.261040] PCI host bridge to bus 0004:00
[    0.261145] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.261380] pci_bus 0004:00: root bus resource [mem 0x6008000000000-0x6009f7fffffff 64bit pref]
[    0.261571] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.264393] pci 0004:00:00.0: PCI bridge to [bus 01-12]
[    0.266806] pci 0004:01:00.0: PCI bridge to [bus 02-12]
[    0.268225] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.268547] pci 0004:02:0a.0: PCI bridge to [bus 04-08]
[    0.268838] pci 0004:02:0b.0: PCI bridge to [bus 09-0d]
[    0.269126] pci 0004:02:0c.0: PCI bridge to [bus 0e-12]
[    0.269441] PCI host bridge to bus 0005:00
[    0.269541] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.269742] pci_bus 0005:00: root bus resource [mem 0x600a000000000-0x600bf7fffffff 64bit pref]
[    0.269936] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.271584] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.271911] PCI host bridge to bus 0030:00
[    0.272016] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.272242] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6201fbfffffff 64bit pref]
[    0.272435] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.272864] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.273206] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.273453] PCI host bridge to bus 0033:00
[    0.273560] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.273787] pci_bus 0033:00: root bus resource [mem 0x6206000000000-0x6207fbfffffff 64bit pref]
[    0.273976] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.274412] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.274768] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.275007] PCI host bridge to bus 0034:00
[    0.275110] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.275337] pci_bus 0034:00: root bus resource [mem 0x6208000000000-0x6209f7fffffff 64bit pref]
[    0.275528] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.275960] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.276252] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    0.276549] PCI host bridge to bus 0035:00
[    0.276654] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.276882] pci_bus 0035:00: root bus resource [mem 0x620a000000000-0x620bf7fffffff 64bit pref]
[    0.277069] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.278033] pci 0035:00:00.0: PCI bridge to [bus 01-0c]
[    0.279174] pci 0035:01:00.0: PCI bridge to [bus 02-0c]
[    0.279747] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.280059] pci 0035:02:0d.0: PCI bridge to [bus 08-0c]
[    0.280313] pci 0000:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.280544] pci 0000:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.280766] pci 0000:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.281367] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.281559] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c080ffffff]
[    0.281732] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.281930] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.282125] pci 0001:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.282724] pci 0001:01     : [PE# 7d] Secondary bus 1 associated with PE#7d
[    0.283328] pci 0001:01     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.295254] IOMMU table initialized, virtual merging enabled
[    0.295394] pci 0001:01     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.295732] pci 0001:01     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.295877] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.296002] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.296250] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    0.296445] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    0.296617] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.296758] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.296901] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.297081] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.297258] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.297399] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.297545] pci 0002:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.298145] pci 0002:02     : [PE# 7d] Secondary bus 2..2 associated with PE#7d
[    0.298755] pci 0002:02     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.310676] pci 0002:02     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.310851] pci 0002:02     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.310992] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.311116] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.311307] pci 0002:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
[    0.311908] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.312038] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.312222] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.312467] pci 0003:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.312693] pci 0003:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.312909] pci 0003:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.313504] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.313858] pci 0004:00:00.0: BAR 9: assigned [mem 0x6008000000000-0x600803fffffff 64bit pref]
[    0.314045] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c201ffffff]
[    0.314288] pci 0004:01:00.0: BAR 9: assigned [mem 0x6008000000000-0x600803fffffff 64bit pref]
[    0.314506] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.314681] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c201000000-0x600c20103ffff]
[    0.314857] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c201040000-0x600c201041fff]
[    0.315035] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c201042000-0x600c201043fff]
[    0.315211] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c201044000-0x600c201045fff]
[    0.315394] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c201046000-0x600c201047fff]
[    0.315569] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.315710] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.315852] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.315972] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.316149] pci 0004:02:02.0: BAR 9: assigned [mem 0x6008000000000-0x600803fffffff 64bit pref]
[    0.316342] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.316514] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.316651] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.316796] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.316933] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.317080] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    0.317260] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    0.317437] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.317576] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.317715] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.317836] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.317979] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.318115] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.318259] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.318397] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.318520] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.318658] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.318801] pci 0004:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.319378] pci 0004:03     : [PE# 7d] Secondary bus 3 associated with PE#7d
[    0.319977] pci 0004:03     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.331896] pci 0004:03     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.332074] pci 0004:03     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.332231] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.332352] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c200ffffff]
[    0.332532] pci 0004:02:02.0:   bridge window [mem 0x6008000000000-0x600803fffffff 64bit pref]
[    0.332730] pci 0004:02:0a.0: PCI bridge to [bus 04-08]
[    0.332870] pci 0004:02:0b.0: PCI bridge to [bus 09-0d]
[    0.333006] pci 0004:02:0c.0: PCI bridge to [bus 0e-12]
[    0.333153] pci 0004:02     : [PE# 7c] Secondary bus 2 associated with PE#7c
[    0.333750] pci 0004:01:00.0: PCI bridge to [bus 02-12]
[    0.333889] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.334057] pci 0004:01:00.0:   bridge window [mem 0x6008000000000-0x6009f7ff0ffff 64bit pref]
[    0.334298] pci 0004:01     : [PE# 7b] Secondary bus 1 associated with PE#7b
[    0.334902] pci 0004:01     : [PE# 7b] Setting up 32-bit TCE table at 0..80000000
[    0.346828] pci 0004:01     : [PE# 7b] Setting up window#0 0..7fffffff pg=1000
[    0.347006] pci 0004:01     : [PE# 7b] Enabling 64-bit DMA bypass
[    0.347146] pci 0004:00:00.0: PCI bridge to [bus 01-12]
[    0.347273] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.347449] pci 0004:00:00.0:   bridge window [mem 0x6008000000000-0x6009f7ff0ffff 64bit pref]
[    0.347648] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.347929] pci 0005:00:00.0: BAR 9: assigned [mem 0x600a000000000-0x600a03fffffff 64bit pref]
[    0.348121] pci 0005:01:00.0: BAR 0: assigned [mem 0x600a000000000-0x600a00000ffff 64bit pref]
[    0.348332] pci 0005:01:00.0: BAR 2: assigned [mem 0x600a000010000-0x600a00001ffff 64bit pref]
[    0.348547] pci 0005:01:00.0: BAR 4: assigned [mem 0x600a000020000-0x600a00002ffff 64bit pref]
[    0.348759] pci 0005:01:00.1: BAR 0: assigned [mem 0x600a000030000-0x600a00003ffff 64bit pref]
[    0.348944] random: fast init done
[    0.349060] pci 0005:01:00.1: BAR 2: assigned [mem 0x600a000040000-0x600a00004ffff 64bit pref]
[    0.349275] pci 0005:01:00.1: BAR 4: assigned [mem 0x600a000050000-0x600a00005ffff 64bit pref]
[    0.349485] pci 0005:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.350099] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.350688] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.362652] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.362828] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.362965] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.363095] pci 0005:00:00.0:   bridge window [mem 0x600a000000000-0x600bf7fffffff 64bit pref]
[    0.363340] pci 0030:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.363569] pci 0030:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.363787] pci 0030:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.364376] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.364549] pci 0033:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.364777] pci 0033:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.364993] pci 0033:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.365586] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.365761] pci 0034:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.365988] pci 0034:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.366166] pci 0034:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.366804] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.367030] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c280ffffff]
[    0.367205] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.367385] pci 0035:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.367978] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.368130] pci 0035:02:0d.0: PCI bridge to [bus 08-0c]
[    0.368272] pci 0035:02     : [PE# 7d] Secondary bus 2 associated with PE#7d
[    0.368867] pci 0035:01:00.0: PCI bridge to [bus 02-0c]
[    0.369010] pci 0035:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
[    0.369607] pci 0035:00:00.0: PCI bridge to [bus 01-0c]
[    0.369734] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.372089] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.444871] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.445084] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.445212] vgaarb: loaded
[    0.445873] SCSI subsystem initialized
[    0.446243] usbcore: registered new interface driver usbfs
[    0.446408] usbcore: registered new interface driver hub
[    0.446915] usbcore: registered new device driver usb
[    0.447125] pps_core: LinuxPPS API ver. 1 registered
[    0.447238] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.447447] PTP clock support registered
[    0.448497] clocksource: Switched to clocksource timebase
[    0.457179] NET: Registered protocol family 2
[    0.457745] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.461136] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.461702] TCP: Hash tables configured (established 524288 bind 65536)
[    0.461915] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.463220] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.464668] NET: Registered protocol family 1
[    0.464827] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[    6.660723] Initialise system trusted keyrings
[    6.661571] workingset: timestamp_bits=54 max_order=21 bucket_order=0
[    6.673082] Key type asymmetric registered
[    6.673175] Asymmetric key parser 'x509' registered
[    6.673805] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    6.673974] io scheduler noop registered
[    6.675041] io scheduler cfq registered (default)
[    6.676816] ipmi message handler version 39.2
[    6.676940] ipmi device interface
[    6.677115] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[    6.724464] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[    6.767896] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    6.768063] hvc0: No interrupts property, using OPAL event
[    6.769210] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[    6.770290] [drm] Initialized
[    6.770407] [drm] radeon kernel modesetting enabled.
[    6.771010] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[    6.771345] [drm] platform has no IO space, trying MMIO
[    6.771462] [drm] VGA not enabled on entry, requesting chip POST
[    6.771616] [drm] Using device-tree for configuration
[    6.771731] [drm] AST 2500 detected
[    6.771815] [drm] Analog VGA only
[    6.771942] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    6.772177] [TTM] Zone  kernel: Available graphics memory: 66968512 kiB
[    6.772307] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    6.772449] [TTM] Initializing pool allocator
[    6.881932] Console: switching to colour frame buffer device 128x48
[    6.929022] ast 0002:02:00.0: fb0: astdrmfb frame buffer device
[    6.998356] [drm] Initialized ast 0.1.0 20120228 for 0002:02:00.0 on minor 0
[    7.010230] brd: module loaded
[    7.019052] loop: module loaded
[    7.019303] Adaptec aacraid driver 1.2-1[41066]-ms
[    7.019908] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    7.030234] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    7.030499] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    7.031971] scsi host0: ahci
[    7.032504] scsi host1: ahci
[    7.033039] scsi host2: ahci
[    7.033627] scsi host3: ahci
[    7.033841] ata1: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010100 irq 88
[    7.034134] ata2: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010180 irq 88
[    7.034417] ata3: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010200 irq 88
[    7.034682] ata4: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010280 irq 88
[    7.035206] libphy: Fixed MDIO Bus: probed
[    7.035404] tg3.c:v3.137 (May 11, 2014)
[    7.038245] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[    7.074067] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    7.077676] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:24:21
[    7.080757] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    7.083885] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    7.086979] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    7.090173] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[    7.124050] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    7.127664] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:24:22
[    7.130854] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    7.134041] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    7.137169] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    7.140600] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    7.143754] ehci-pci: EHCI PCI platform driver
[    7.146884] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    7.150031] ohci-pci: OHCI PCI platform driver
[    7.153275] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    7.156504] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    7.159772] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    7.163034] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x00000000
[    7.167355] hub 1-0:1.0: USB hub found
[    7.170501] hub 1-0:1.0: 4 ports detected
[    7.173887] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    7.177142] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    7.180408] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    7.184017] hub 2-0:1.0: USB hub found
[    7.187166] hub 2-0:1.0: 4 ports detected
[    7.190685] usbcore: registered new interface driver usb-storage
[    7.194178] mousedev: PS/2 mouse device common for all mice
[    7.248523] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    7.251796] i2c /dev entries driver
[    7.255436] powernv-cpufreq: ibm,pstate-min node not found
[    7.258653] powernv-cpufreq: Platform driver disabled. System does not support PState control
[    7.262477] usbcore: registered new interface driver usbhid
[    7.265777] usbhid: USB HID core driver
[    7.269374] ipip: IPv4 and MPLS over IPv4 tunneling driver
[    7.273213] NET: Registered protocol family 17
[    7.276597] Key type dns_resolver registered
[    7.280504] registered taskstats version 1
[    7.283913] Loading compiled-in X.509 certificates
[    7.298272] Loaded X.509 cert 'Build time autogenerated kernel key: 3c07c7e1774ab0b25b66b6b26a2792fbaeef8f63'
[    7.316748] Key type encrypted registered
[    7.320327] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    7.324070] evm: HMAC attrs: 0x1
[    7.359708] ata3: SATA link down (SStatus 0 SControl 300)
[    7.369672] ata4: SATA link down (SStatus 0 SControl 300)
[    7.398743] rtc-opal opal-rtc: setting system clock to 2017-04-20 17:52:04 UTC (1492710724)
[    7.528345] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    7.532884] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    7.536527] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    7.540216] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    7.544383] ata2.00: configured for UDMA/133
[    7.548069] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    7.551679] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    7.555895] ata1.00: configured for UDMA/133
[    7.560108] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    7.719023] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    7.900281] Freeing unused kernel memory: 11008K
[    7.903742] This architecture does not have kernel memory protection.
[    7.947409] udevd[1570]: starting version 3.2.1
[    7.957341] udevd[1571]: starting eudev-3.2.1
[    8.040280] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    8.040602] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    8.040609] sd 0:0:0:0: [sda] 4096-byte physical blocks
[    8.040648] sd 0:0:0:0: [sda] Write Protect is off
[    8.040705] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    8.040801] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)

(B)0[1;24r[m[?7h[?1h=[H[J[H[J Petitboot (v1.4.2-pa470686)[1B [0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[2B  [0mSystem information[1B  System configuration[1B  System status log[1B  Language[1B  Rescan devices[1B  Retrieve config from URL[1B *[0;7mExit to shell           [12B[25D[0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[1B [0mEnter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[1B Welcome to Petitboot[J[1;47H0000000000000000 0000000000000000[23B [3;21r[3;1HMM[1;24r[3;3H[Disk: sda2 / 0566767e-5331-44ea-b067-c056fa071384][1B[49DUbuntu[12;27H[0;7m                           [12B[52D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-gd40f5c5[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-gd40f5c5 (recovery mode)[14;54H[0;7m [10B[53D[m[enP5p1s0f0] Configuring with DHCP[24;12H1[24;36H Booting in 9 sec: Ubuntu          [24;26H[24;13H8[24;26H[24;13H7[24;26H[24;13H6[24;26H[24;13H5[24;26H[24;13H4[24;26H[24;13H3[24;26H[24;13H2[24;26H[24;13H1[24;26H[24;10HUbuntu          [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/vmlinux-4.10.0-gd4[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/initrd.img-4.10.0-gd40f5[?7lc[?7h Running boot hooks[K Performing kexec loadrebootThe system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   23.845650] kexec_core: Starting new kernel
[   47.153701248,5] OPAL: Switch to big-endian OS
[   47.371571952,5] OPAL: Switch to little-endian OS
opal: OPAL detected !
Page sizes from device-tree:
Page size shift = 12 AP=0x0
Page size shift = 16 AP=0x5
Page size shift = 21 AP=0x1
Page size shift = 30 AP=0x2
Initializing Radix MMU
Partition table c000200fffff0000
Mapping range 0x0 - 0x1000000000 with 0x40000000
Mapping range 0x200000000000 - 0x201000000000 with 0x40000000
Process table c000200fff000000 and radix root for kernel: c000000001060000
Linux version 4.10.0-gd40f5c5 (rgrimm@bml86) (gcc version 5.4.0 20160609 (Ubuntu/IBM 5.4.0-6ubuntu1~16.04.4) ) #1 SMP Wed Mar 15 01:52:47 CDT 2017
Found initrd at 0xc0000000026f0000:0xc00000000350b4ff
OPAL: Found memory mapped LPC bus on chip 0
Using PowerNV machine description
bootconsole [udbg0] enabled
CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 31
 &lt;- smp_release_cpus()
-----------------------------------------------------
ppc64_pft_size    = 0x0
phys_mem_size     = 0x2000000000
dcache_bsize      = 0x80
icache_bsize      = 0x80
cpu_features      = 0x477c7afd18500249
  possible        = 0x7fffffff18500649
  always          = 0x0000000018100040
cpu_user_features = 0xdc0065c2 0xaec00000
mmu_features      = 0x3c004041
firmware_features = 0x0000000010000000
-----------------------------------------------------
cma: Reserved 6560 MiB at 0x0000200e63000000
numa: Initmem setup node 0 [mem 0x00000000-0xfffffffff]
numa:   NODE_DATA [mem 0xfffff6300-0xfffffffff]
numa: Initmem setup node 8 [mem 0x200000000000-0x200fffffffff]
numa:   NODE_DATA [mem 0x200ffff96300-0x200ffff9ffff]
Initializing IODA2 PHB (/pciex@600c3c0000000)
PCI host bridge /pciex@600c3c0000000 (primary) ranges:
 MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
 MEM 0x0006000000000000..0x0006001fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
 Using M64 #31 as default window
  256 (255) PE's M32: 0x80000000 [segment=0x800000]
                 M64: 0x2000000000 [segment=0x20000000]
  Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
Initializing IODA2 PHB (/pciex@600c3c0100000)
PCI host bridge /pciex@600c3c0100000  ranges:
 MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
 MEM 0x0006002000000000..0x0006003fffffffff -&gt; 0x0006002000000000 (M64 #1..15)
 Using M64 #15 as default window
  128 (127) PE's M32: 0x80000000 [segment=0x1000000]
                 M64: 0x2000000000 [segment=0x40000000]
  Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
Initializing IODA2 PHB (/pciex@600c3c0200000)
PCI host bridge /pciex@600c3c0200000  ranges:
 MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
 MEM 0x0006004000000000..0x0006005fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
 Using M64 #15 as default window
  128 (127) PE's M32: 0x80000000 [segment=0x1000000]
                 M64: 0x2000000000 [segment=0x40000000]
  Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
Initializing IODA2 PHB (/pciex@600c3c0300000)
PCI host bridge /pciex@600c3c0300000  ranges:
 MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
 MEM 0x0006006000000000..0x0006007fffffffff -&gt; 0x0006006000000000 (M64 #1..31)
 Using M64 #31 as default window
  256 (255) PE's M32: 0x80000000 [segment=0x800000]
                 M64: 0x2000000000 [segment=0x20000000]
  Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
Initializing IODA2 PHB (/pciex@600c3c0400000)
PCI host bridge /pciex@600c3c0400000  ranges:
 MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
 MEM 0x0006008000000000..0x0006009fffffffff -&gt; 0x0006008000000000 (M64 #1..15)
 Using M64 #15 as default window
  128 (127) PE's M32: 0x80000000 [segment=0x1000000]
                 M64: 0x2000000000 [segment=0x40000000]
  Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
Initializing IODA2 PHB (/pciex@600c3c0500000)
PCI host bridge /pciex@600c3c0500000  ranges:
 MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
 MEM 0x000600a000000000..0x000600bfffffffff -&gt; 0x000600a000000000 (M64 #1..15)
 Using M64 #15 as default window
  128 (127) PE's M32: 0x80000000 [segment=0x1000000]
                 M64: 0x2000000000 [segment=0x40000000]
  Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
Initializing IODA2 PHB (/pciex@620c3c0000000)
PCI host bridge /pciex@620c3c0000000  ranges:
 MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
 MEM 0x0006200000000000..0x0006201fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
 Using M64 #31 as default window
  256 (255) PE's M32: 0x80000000 [segment=0x800000]
                 M64: 0x2000000000 [segment=0x20000000]
  Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
Initializing IODA2 PHB (/pciex@620c3c0300000)
PCI host bridge /pciex@620c3c0300000  ranges:
 MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
 MEM 0x0006206000000000..0x0006207fffffffff -&gt; 0x0006206000000000 (M64 #1..31)
 Using M64 #31 as default window
  256 (255) PE's M32: 0x80000000 [segment=0x800000]
                 M64: 0x2000000000 [segment=0x20000000]
  Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
Initializing IODA2 PHB (/pciex@620c3c0400000)
PCI host bridge /pciex@620c3c0400000  ranges:
 MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
 MEM 0x0006208000000000..0x0006209fffffffff -&gt; 0x0006208000000000 (M64 #1..15)
 Using M64 #15 as default window
  128 (127) PE's M32: 0x80000000 [segment=0x1000000]
                 M64: 0x2000000000 [segment=0x40000000]
  Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
Initializing IODA2 PHB (/pciex@620c3c0500000)
PCI host bridge /pciex@620c3c0500000  ranges:
 MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
 MEM 0x000620a000000000..0x000620bfffffffff -&gt; 0x000620a000000000 (M64 #1..15)
 Using M64 #15 as default window
  128 (127) PE's M32: 0x80000000 [segment=0x1000000]
                 M64: 0x2000000000 [segment=0x40000000]
  Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
OPAL nvram setup, 589824 bytes
Zone ranges:
  DMA      [mem 0x0000000000000000-0x0000200fffffffff]
  DMA32    empty
  Normal   empty
Movable zone start for each node
Early memory node ranges
  node   0: [mem 0x0000000000000000-0x0000000fffffffff]
  node   8: [mem 0x0000200000000000-0x0000200fffffffff]
Initmem setup node 0 [mem 0x0000000000000000-0x0000000fffffffff]
Initmem setup node 8 [mem 0x0000200000000000-0x0000200fffffffff]
percpu: Embedded 3 pages/cpu @c000000ffb9c0000 s125848 r0 d70760 u196608
Built 2 zonelists in Node order, mobility grouping on.  Total pages: 2095104
Policy zone: DMA
Kernel command line: root=/dev/mapper/21762--vg-root ro
log_buf_len individual max cpu contribution: 8192 bytes
log_buf_len total cpu_extra contributions: 253952 bytes
log_buf_len min size: 262144 bytes
log_buf_len: 524288 bytes
early log buf free: 252228(96%)
PID hash table entries: 4096 (order: -1, 32768 bytes)
Memory: 127189248K/134217728K available (11136K kernel code, 1280K rwdata, 3608K rodata, 704K init, 1292K bss, 311040K reserved, 6717440K cma-reserved)
SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=32, Nodes=9
Hierarchical RCU implementation.
	Build-time adjustment of leaf fanout to 64.
	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=32.
RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=32
NR_IRQS:512 nr_irqs:512 16
XICS: Using OPAL ICP fallbacks
ICS OPAL backend registered
time_init: 56 bit decrementer (max: 7fffffffffffff)
clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
clocksource: timebase mult[1f40000] shift[24] registered
Console: colour dummy device 80x25
console [hvc0] enabled
console [hvc0] enabled
bootconsole [udbg0] disabled
bootconsole [udbg0] disabled
mempolicy: Enabling automatic NUMA balancing. Configure with numa_balancing= or the kernel.numa_balancing sysctl
pid_max: default: 32768 minimum: 301
Dentry cache hash table entries: 16777216 (order: 11, 134217728 bytes)
Inode-cache hash table entries: 8388608 (order: 10, 67108864 bytes)
Mount-cache hash table entries: 262144 (order: 5, 2097152 bytes)
Mountpoint-cache hash table entries: 262144 (order: 5, 2097152 bytes)
EEH: PowerNV platform initialized
POWER9 performance monitor hardware support registered
smp: Bringing up secondary CPUs ...
smp: Brought up 2 nodes, 32 CPUs
numa: Node 0 CPUs: 0-15
numa: Node 8 CPUs: 16-31
devtmpfs: initialized
kworker/u65:0 (204) used greatest stack depth: 12288 bytes left
clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
futex hash table entries: 8192 (order: 4, 1048576 bytes)
NET: Registered protocol family 16
cpuidle: using governor menu
pstore: using zlib compression
pstore: Registered nvram as persistent store backend
PCI: Probing PCI hardware
PCI host bridge to bus 0000:00
pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6001fbfffffff 64bit pref]
pci_bus 0000:00: root bus resource [bus 00-ff]
pci 0000:00:00.0: PCI bridge to [bus 01]
PCI host bridge to bus 0001:00
pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0001:00: root bus resource [mem 0x6002000000000-0x6003f7fffffff 64bit pref]
pci_bus 0001:00: root bus resource [bus 00-ff]
pci 0001:00:00.0: PCI bridge to [bus 01]
PCI host bridge to bus 0002:00
pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0002:00: root bus resource [mem 0x6004000000000-0x6005f7fffffff 64bit pref]
pci_bus 0002:00: root bus resource [bus 00-ff]
pci 0002:00:00.0: PCI bridge to [bus 01-02]
pci 0002:01:00.0: PCI bridge to [bus 02]
PCI host bridge to bus 0003:00
pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0003:00: root bus resource [mem 0x6006000000000-0x6007fbfffffff 64bit pref]
pci_bus 0003:00: root bus resource [bus 00-ff]
pci 0003:00:00.0: PCI bridge to [bus 01]
PCI host bridge to bus 0004:00
pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0004:00: root bus resource [mem 0x6008000000000-0x6009f7fffffff 64bit pref]
pci_bus 0004:00: root bus resource [bus 00-ff]
pci 0004:00:00.0: PCI bridge to [bus 01-12]
pci 0004:01:00.0: PCI bridge to [bus 02-12]
pci 0004:02:02.0: PCI bridge to [bus 03]
pci 0004:02:0a.0: PCI bridge to [bus 04-08]
pci 0004:02:0b.0: PCI bridge to [bus 09-0d]
pci 0004:02:0c.0: PCI bridge to [bus 0e-12]
PCI host bridge to bus 0005:00
pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0005:00: root bus resource [mem 0x600a000000000-0x600bf7fffffff 64bit pref]
pci_bus 0005:00: root bus resource [bus 00-ff]
pci 0005:00:00.0: PCI bridge to [bus 01]
PCI host bridge to bus 0030:00
pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6201fbfffffff 64bit pref]
pci_bus 0030:00: root bus resource [bus 00-ff]
pci 0030:00:00.0: PCI bridge to [bus 01]
PCI host bridge to bus 0033:00
pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0033:00: root bus resource [mem 0x6206000000000-0x6207fbfffffff 64bit pref]
pci_bus 0033:00: root bus resource [bus 00-ff]
pci 0033:00:00.0: PCI bridge to [bus 01]
PCI host bridge to bus 0034:00
pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0034:00: root bus resource [mem 0x6208000000000-0x6209f7fffffff 64bit pref]
pci_bus 0034:00: root bus resource [bus 00-ff]
pci 0034:00:00.0: PCI bridge to [bus 01]
PCI host bridge to bus 0035:00
pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
pci_bus 0035:00: root bus resource [mem 0x620a000000000-0x620bf7fffffff 64bit pref]
pci_bus 0035:00: root bus resource [bus 00-ff]
pci 0035:00:00.0: PCI bridge to [bus 01-0c]
pci 0035:01:00.0: PCI bridge to [bus 02-0c]
pci 0035:02:08.0: PCI bridge to [bus 03-07]
pci 0035:02:0d.0: PCI bridge to [bus 08-0c]
pci 0000:00     : [PE# fe] Secondary bus 0 associated with PE#fe
pci 0000:00:00.0: PCI bridge to [bus 01]
pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c080ffffff]
pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
pci 0001:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
pci 0001:01     : [PE# 7d] Secondary bus 1 associated with PE#7d
pci 0001:01     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
IOMMU table initialized, virtual merging enabled
pci 0001:01     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
pci 0001:01     : [PE# 7d] Enabling 64-bit DMA bypass
pci 0001:00:00.0: PCI bridge to [bus 01]
pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
pci 0002:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
pci 0002:02     : [PE# 7d] Secondary bus 2..2 associated with PE#7d
pci 0002:02     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
pci 0002:02     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
pci 0002:02     : [PE# 7d] Enabling 64-bit DMA bypass
pci 0002:01:00.0: PCI bridge to [bus 02]
pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
pci 0002:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
pci 0002:00:00.0: PCI bridge to [bus 01-02]
pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
pci 0003:00     : [PE# fe] Secondary bus 0 associated with PE#fe
pci 0003:00:00.0: PCI bridge to [bus 01]
pci 0004:00:00.0: BAR 9: assigned [mem 0x6008000000000-0x600803fffffff 64bit pref]
pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c201ffffff]
pci 0004:01:00.0: BAR 9: assigned [mem 0x6008000000000-0x600803fffffff 64bit pref]
pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
pci 0004:01:00.0: BAR 0: assigned [mem 0x600c201000000-0x600c20103ffff]
pci 0004:01:00.1: BAR 0: assigned [mem 0x600c201040000-0x600c201041fff]
pci 0004:01:00.2: BAR 0: assigned [mem 0x600c201042000-0x600c201043fff]
pci 0004:01:00.3: BAR 0: assigned [mem 0x600c201044000-0x600c201045fff]
pci 0004:01:00.4: BAR 0: assigned [mem 0x600c201046000-0x600c201047fff]
pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
pci 0004:02:02.0: BAR 9: assigned [mem 0x6008000000000-0x600803fffffff 64bit pref]
pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
pci 0004:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
pci 0004:03     : [PE# 7d] Secondary bus 3 associated with PE#7d
pci 0004:03     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
pci 0004:03     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
pci 0004:03     : [PE# 7d] Enabling 64-bit DMA bypass
pci 0004:02:02.0: PCI bridge to [bus 03]
pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c200ffffff]
pci 0004:02:02.0:   bridge window [mem 0x6008000000000-0x600803fffffff 64bit pref]
pci 0004:02:0a.0: PCI bridge to [bus 04-08]
pci 0004:02:0b.0: PCI bridge to [bus 09-0d]
pci 0004:02:0c.0: PCI bridge to [bus 0e-12]
pci 0004:02     : [PE# 7c] Secondary bus 2 associated with PE#7c
pci 0004:01:00.0: PCI bridge to [bus 02-12]
pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
pci 0004:01:00.0:   bridge window [mem 0x6008000000000-0x6009f7ff0ffff 64bit pref]
pci 0004:01     : [PE# 7b] Secondary bus 1 associated with PE#7b
pci 0004:01     : [PE# 7b] Setting up 32-bit TCE table at 0..80000000
pci 0004:01     : [PE# 7b] Setting up window#0 0..7fffffff pg=1000
pci 0004:01     : [PE# 7b] Enabling 64-bit DMA bypass
pci 0004:00:00.0: PCI bridge to [bus 01-12]
pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
pci 0004:00:00.0:   bridge window [mem 0x6008000000000-0x6009f7ff0ffff 64bit pref]
pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
pci 0005:00:00.0: BAR 9: assigned [mem 0x600a000000000-0x600a03fffffff 64bit pref]
pci 0005:01:00.0: BAR 0: assigned [mem 0x600a000000000-0x600a00000ffff 64bit pref]
pci 0005:01:00.0: BAR 2: assigned [mem 0x600a000010000-0x600a00001ffff 64bit pref]
pci 0005:01:00.0: BAR 4: assigned [mem 0x600a000020000-0x600a00002ffff 64bit pref]
pci 0005:01:00.1: BAR 0: assigned [mem 0x600a000030000-0x600a00003ffff 64bit pref]
pci 0005:01:00.1: BAR 2: assigned [mem 0x600a000040000-0x600a00004ffff 64bit pref]
pci 0005:01:00.1: BAR 4: assigned [mem 0x600a000050000-0x600a00005ffff 64bit pref]
pci 0005:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
pci 0005:00:00.0: PCI bridge to [bus 01]
pci 0005:00:00.0:   bridge window [mem 0x600a000000000-0x600bf7fffffff 64bit pref]
pci 0030:00     : [PE# fe] Secondary bus 0 associated with PE#fe
pci 0030:00:00.0: PCI bridge to [bus 01]
pci 0033:00     : [PE# fe] Secondary bus 0 associated with PE#fe
pci 0033:00:00.0: PCI bridge to [bus 01]
pci 0034:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
pci 0034:00:00.0: PCI bridge to [bus 01]
pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c280ffffff]
pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
pci 0035:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
pci 0035:02:08.0: PCI bridge to [bus 03-07]
random: fast init done
pci 0035:02:0d.0: PCI bridge to [bus 08-0c]
pci 0035:02     : [PE# 7d] Secondary bus 2 associated with PE#7d
pci 0035:01:00.0: PCI bridge to [bus 02-0c]
pci 0035:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
pci 0035:00:00.0: PCI bridge to [bus 01-0c]
pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
EEH: PCI Enhanced I/O Error Handling Enabled
powernv:idle: Default stop: psscr = 0x0000000000000330,mask=0x00000000003003ff
powernv:idle: Deepest stop: psscr = 0x0000000000000330,mask=0x00000000003003ff
powernv:idle: RL value of first deep stop = 0xf
powernv: idle: Saving PACA pointers of all CPUs in their thread sibling PACA
HugeTLB registered 2 MB page size, pre-allocated 0 pages
HugeTLB registered 1 GB page size, pre-allocated 0 pages
pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
pci 0002:02:00.0: vgaarb: bridge control possible
vgaarb: loaded
SCSI subsystem initialized
usbcore: registered new interface driver usbfs
usbcore: registered new interface driver hub
usbcore: registered new device driver usb
pps_core: LinuxPPS API ver. 1 registered
pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
PTP clock support registered
clocksource: Switched to clocksource timebase
NET: Registered protocol family 2
TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
TCP: Hash tables configured (established 524288 bind 65536)
UDP hash table entries: 65536 (order: 5, 2097152 bytes)
UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
NET: Registered protocol family 1
RPC: Registered named UNIX socket transport module.
RPC: Registered udp transport module.
RPC: Registered tcp transport module.
RPC: Registered tcp NFSv4.1 backchannel transport module.
Trying to unpack rootfs image as initramfs...
Freeing initrd memory: 14400K
audit: initializing netlink subsys (disabled)
audit: type=2000 audit(1492710742.920:1): initialized
workingset: timestamp_bits=38 max_order=21 bucket_order=0
NFS: Registering the id_resolver key type
Key type id_resolver registered
Key type id_legacy registered
Block layer SCSI generic (bsg) driver version 0.4 loaded (major 251)
io scheduler noop registered
io scheduler deadline registered
io scheduler cfq registered (default)
Using unsupported 1024x768 vga at 600c100010000, depth=32, pitch=4096
Console: switching to colour frame buffer device 128x48
fb0: Open Firmware frame buffer device on /pciex@600c3c0200000/pci@0/pci@0/vga@0
ipmi message handler version 39.2
ipmi device interface
ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
hvc0: No interrupts property, using OPAL event
Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[drm] Initialized
[drm] platform has no IO space, trying MMIO
[drm] AST 2500 detected
[drm] Analog VGA only
[drm] dram -1094967296 7 16 01000000
[TTM] Zone  kernel: Available graphics memory: 66960544 kiB
[TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[TTM] Initializing pool allocator
fb: switching to astdrmfb from OFfb vga
Console: switching to colour dummy device 80x25
Console: switching to colour frame buffer device 128x48
ast 0002:02:00.0: fb0: astdrmfb frame buffer device
[drm] Initialized ast 0.1.0 20120228 for 0002:02:00.0 on minor 0
brd: module loaded
loop: module loaded
Uniform Multi-Platform E-IDE driver
ide-gd driver 1.18
ide-cd driver 5.00
ipr: IBM Power RAID SCSI Device Driver version: 2.6.3 (October 17, 2015)
ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
scsi host0: ahci
scsi host1: ahci
scsi host2: ahci
scsi host3: ahci
ata1: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010100 irq 88
ata2: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010180 irq 88
ata3: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010200 irq 88
ata4: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010280 irq 88
libphy: Fixed MDIO Bus: probed
bnx2x: QLogic 5771x/578xx 10/20-Gigabit Ethernet Driver bnx2x 1.712.30-0 (2014/02/10)
tg3.c:v3.137 (May 11, 2014)
tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:24:21
tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:24:22
tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
eth0: bogus network driver initialization
No IRQ retreived
e100: Intel(R) PRO/100 Network Driver, 3.5.24-k2-NAPI
e100: Copyright(c) 1999-2006 Intel Corporation
e1000: Intel(R) PRO/1000 Network Driver - version 7.3.21-k8-NAPI
e1000: Copyright (c) 1999-2006 Intel Corporation.
e1000e: Intel(R) PRO/1000 Network Driver - 3.2.6-k
e1000e: Copyright(c) 1999 - 2015 Intel Corporation.
i40e: Intel(R) Ethernet Connection XL710 Network Driver - version 1.6.25-k
i40e: Copyright (c) 2013 - 2014 Intel Corporation.
ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
ehci-pci: EHCI PCI platform driver
ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
ohci-pci: OHCI PCI platform driver
xhci_hcd 0001:01:00.0: xHCI Host Controller
xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x00000000
hub 1-0:1.0: USB hub found
hub 1-0:1.0: 4 ports detected
xhci_hcd 0001:01:00.0: xHCI Host Controller
xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
hub 2-0:1.0: USB hub found
hub 2-0:1.0: 4 ports detected
usbcore: registered new interface driver usb-storage
mousedev: PS/2 mouse device common for all mice
rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
device-mapper: uevent: version 1.0.3
device-mapper: ioctl: 4.35.0-ioctl (2016-06-23) initialised: dm-devel@redhat.com
powernv-cpufreq: ibm,pstate-min node not found
powernv-cpufreq: Platform driver disabled. System does not support PState control
usbcore: registered new interface driver usbhid
usbhid: USB HID core driver
oprofile: using timer interrupt.
ipip: IPv4 and MPLS over IPv4 tunneling driver
NET: Registered protocol family 10
Segment Routing with IPv6
sit: IPv6, IPv4 and MPLS over IPv4 tunneling driver
NET: Registered protocol family 17
Key type dns_resolver registered
registered taskstats version 1
console [netcon0] enabled
netconsole: network logging started
rtc-opal opal-rtc: setting system clock to 2017-04-20 17:52:23 UTC (1492710743)
ata3: SATA link down (SStatus 0 SControl 300)
ata4: SATA link down (SStatus 0 SControl 300)
ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
ata2.00: configured for UDMA/133
ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
ata1.00: configured for UDMA/133
scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
sd 0:0:0:0: Attached scsi generic sg0 type 0
sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
sd 0:0:0:0: [sda] 4096-byte physical blocks
sd 0:0:0:0: [sda] Write Protect is off
sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
Alternate GPT is invalid, using primary GPT.
 sda: sda1 sda2 sda3
sd 0:0:0:0: [sda] Attached SCSI removable disk
sd 1:0:0:0: Attached scsi generic sg1 type 0
sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
sd 1:0:0:0: [sdb] 4096-byte physical blocks
sd 1:0:0:0: [sdb] Write Protect is off
sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
sd 1:0:0:0: [sdb] Attached SCSI removable disk
Freeing unused kernel memory: 704K
This architecture does not have kernel memory protection.
Loading, please wait...
exe (1657) used greatest stack depth: 12208 bytes left
starting version 232
ata_id (1678) used greatest stack depth: 11424 bytes left
tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
random: crng init done
lvm (1699) used greatest stack depth: 11264 bytes left
Begin: Loading essential drivers ... done.
Begin: Running /scripts/init-premount ... done.
Begin: Mounting root file system ... Begin: Running /scripts/local-top ...   WARNING: Failed to connect to lvmetad. Falling back to device scanning.
  WARNING: Failed to connect to lvmetad. Falling back to device scanning.
  Volume group "w45L-vg" not found
  Cannot process volume group w45L-vg
done.
Begin: Running /scripts/local-premount ... done.
Begin: Will now check root file system ... fsck from util-linux 2.29
[/sbin/fsck.ext4 (1) -- /dev/mapper/21762--vg-root] fsck.ext4 -a -C0 /dev/mapper/21762--vg-root 
/dev/mapper/21762--vg-root: recovering journal
/dev/mapper/21762--vg-root: clean, 77280/52428800 files, 4013881/209715200 blocks
done.
EXT4-fs (dm-0): mounted filesystem with ordered data mode. Opts: (null)
done.
Begin: Running /scripts/local-bottom ... done.
Begin: Running /scripts/init-bottom ... done.
ip_tables: (C) 2000-2006 Netfilter Core Team
systemd[1]: Configuration file /etc/systemd/system.conf.d/htxsystemdcustom.conf is marked executable. Please remove executable permission bits. Proceeding anyway.
systemd[1]: systemd 232 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD +IDN)
systemd[1]: Detected architecture ppc64-le.

Welcome to [1mUbuntu Zesty Zapus (development branch)[0m!

systemd[1]: Set hostname to &lt;21762&gt;.
systemd-cryptse (1793) used greatest stack depth: 11024 bytes left
systemd-rc-loca (1800) used greatest stack depth: 10496 bytes left
systemd[1]: Set up automount Arbitrary Executable File Formats File System Automount Point.
[[0;32m  OK  [0m] Set up automount Arbitrary Executab\xe2\x80\xa6rmats File System Automount Point.
systemd[1]: Listening on Syslog Socket.
[[0;32m  OK  [0m] Listening on Syslog Socket.
systemd[1]: Reached target User and Group Name Lookups.
[[0;32m  OK  [0m] Reached target User and Group Name Lookups.
systemd[1]: Started Forward Password Requests to Wall Directory Watch.
[[0;32m  OK  [0m] Started Forward Password Requests to Wall Directory Watch.
systemd[1]: Listening on Journal Audit Socket.
[[0;32m  OK  [0m] Listening on Journal Audit Socket.
systemd[1]: Created slice User and Session Slice.
[[0;32m  OK  [0m] Created slice User and Session Slice.
systemd[1]: Listening on Journal Socket.
[[0;32m  OK  [0m] Listening on Journal Socket.
[[0;32m  OK  [0m] Listening on udev Kernel Socket.
[[0;32m  OK  [0m] Listening on LVM2 metadata daemon socket.
[[0;32m  OK  [0m] Listening on LVM2 poll daemon socket.
[[0;32m  OK  [0m] Listening on Journal Socket (/dev/log).
[[0;32m  OK  [0m] Listening on fsck to fsckd communication Socket.
[[0;32m  OK  [0m] Listening on Device-mapper event daemon FIFOs.
[[0;32m  OK  [0m] Created slice System Slice.
         Starting Load Kernel Modules...
         Starting Create list of required st\xe2\x80\xa6ce nodes for the current kernel...
         Starting Set the console keyboard layout...
[[0;32m  OK  [0m] Reached target Slices.
         Starting Uncomplicated firewall...
[[0;32m  OK  [0m] Created slice system-serial\x2dgetty.slice.
         Mounting Huge Pages File System...
         Mounting Debug File System...
[[0;32m  OK  [0m] Started Read required files in advance.
         Starting Journal Service...
[[0;32m  OK  [0m] Listening on udev Control Socket.
         Mounting POSIX Message Queue File System...
[[0;32m  OK  [0m] Created slice system-systemd\x2dfsck.slice.
         Starting Nameserver information manager...
         Starting Monitoring of LVM2 mirrors\xe2\x80\xa6ng dmeventd or progress polling...
[[0;32m  OK  [0m] Reached target Remote File Systems.
[[0;32m  OK  [0m] Listening on /dev/initctl Compatibility Named Pipe.
[[0;32m  OK  [0m] Started Load Kernel Modules.
         Starting Apply Kernel Variables...
[[0;32m  OK  [0m] Started Apply Kernel Variables.
[[0;32m  OK  [0m] Started Create list of required sta\xe2\x80\xa6vice nodes for the current kernel.
         Starting Create Static Device Nodes in /dev...
[[0;32m  OK  [0m] Started Uncomplicated firewall.
[[0;32m  OK  [0m] Started Journal Service.
[[0;32m  OK  [0m] Started Create Static Device Nodes in /dev.
         Starting udev Kernel Device Manager...
[[0;32m  OK  [0m] Mounted Debug File System.
[[0;32m  OK  [0m] Mounted POSIX Message Queue File System.
[[0;32m  OK  [0m] Mounted Huge Pages File System.
[[0;32m  OK  [0m] Started LVM2 metadata daemon.
[[0;32m  OK  [0m] Started Nameserver information manager.
[[0;32m  OK  [0m] Reached target Network (Pre).
[[0;32m  OK  [0m] Started udev Kernel Device Manager.
         Starting Remount Root and Kernel File Systems...
[[0;32m  OK  [0m] Started Remount Root and Kernel File Systems.
         Starting Flush Journal to Persistent Storage...
         Starting udev Coldplug all Devices...
         Starting Load/Save Random Seed...
[[0;32m  OK  [0m] Started Flush Journal to Persistent Storage.
[[0;32m  OK  [0m] Started Set the console keyboard layout.
[[0;32m  OK  [0m] Started Load/Save Random Seed.
[[0;32m  OK  [0m] Started udev Coldplug all Devices.
[[0;32m  OK  [0m] Started Dispatch Password Requests to Console Directory Watch.
[[0;32m  OK  [0m] Reached target Paths.
[[0;32m  OK  [0m] Reached target Encrypted Volumes.
[[0;32m  OK  [0m] Found device /dev/hvc0.
[[0;32m  OK  [0m] Found device NetXtreme BCM5719 Gigabit Ethernet PCIe.
[[0;32m  OK  [0m] Found device ST1000NX0313_00LY266_00LY265IBM 2.
[[0;32m  OK  [0m] Found device /dev/mapper/21762--vg-swap_1.
         Activating swap /dev/mapper/21762--vg-swap_1...
[[0;32m  OK  [0m] Activated swap /dev/mapper/21762--vg-swap_1.
[[0;32m  OK  [0m] Reached target Swap.
[[0;32m  OK  [0m] Started Monitoring of LVM2 mirrors,\xe2\x80\xa6sing dmeventd or progress polling.
[[0;32m  OK  [0m] Reached target Local File Systems (Pre).
         Starting File System Check on /dev/\xe2\x80\xa667e-5331-44ea-b067-c056fa071384...
[[0;32m  OK  [0m] Started File System Check Daemon to report status.
Checking in progress on 1 disk (0.0% complete)Checking in progress on 1 disk (4.7% complete)Checking in progress on 1 disk (9.3% complete)Checking in progress on 1 disk (14.0% complete)Checking in progress on 1 disk (18.7% complete)Checking in progress on 1 disk (23.3% complete)Checking in progress on 1 disk (28.0% complete)Checking in progress on 1 disk (32.7% complete)Checking in progress on 1 disk (37.3% complete)Checking in progress on 1 disk (42.0% complete)Checking in progress on 1 disk (46.7% complete)Checking in progress on 1 disk (51.3% complete)Checking in progress on 1 disk (56.0% complete)Checking in progress on 1 disk (60.7% complete)Checking in progress on 1 disk (65.3% complete)Checking in progress on 1 disk (70.0% complete)Checking in progress on 1 disk (78.0% complete)Checking in progress on 1 disk (80.0% complete)Checking in progress on 1 disk (82.0% complete)Checking in progress on 1 disk (90.0% complete)Checking in progress on 1 disk (92.0% complete)Checking in progress on 1 disk (92.2% complete)Checking in progress on 1 disk (92.4% complete)Checking in progress on 1 disk (92.6% complete)Checking in progress on 1 disk (92.8% complete)Checking in progress on 1 disk (93.0% complete)Checking in progress on 1 disk (93.2% complete)Checking in progress on 1 disk (93.4% complete)Checking in progress on 1 disk (93.6% complete)Checking in progress on 1 disk (93.8% complete)Checking in progress on 1 disk (94.0% complete)Checking in progress on 1 disk (94.2% complete)Checking in progress on 1 disk (94.4% complete)Checking in progress on 1 disk (94.6% complete)Checking in progress on 1 disk (94.8% complete)Checking in progress on 1 disk (95.0% complete)Checking in progress on 1 disk (95.7% complete)Checking in progress on 1 disk (97.3% complete)Checking in progress on 1 disk (97.5% complete)Checking in progress on 1 disk (97.7% complete)Checking in progress on 1 disk (97.8% complete)Checking in progress on 1 disk (98.0% complete)Checking in progress on 1 disk (98.2% complete)Checking in progress on 1 disk (98.3% complete)Checking in progress on 1 disk (98.5% complete)Checking in progress on 1 disk (98.7% complete)Checking in progress on 1 disk (98.8% complete)Checking in progress on 1 disk (99.0% complete)Checking in progress on 1 disk (99.2% complete)Checking in progress on 1 disk (99.3% complete)Checking in progress on 1 disk (99.5% complete)Checking in progress on 1 disk (99.7% complete)Checking in progress on 1 disk (99.8% complete)Checking in progress on 1 disk (100.0% complete)Checking in progress on 0 disks (100.0% complete)[[0;32m  OK  [0m] Started File System Check on /dev/d\xe2\x80\xa66767e-5331-44ea-b067-c056fa071384.
         Mounting /boot...
[[0;32m  OK  [0m] Mounted /boot.
[[0;32m  OK  [0m] Reached target Local File Systems.
         Starting Create Volatile Files and Directories...
         Starting Set console font and keymap...
         Starting Tell Plymouth To Write Out Runtime Data...
[[0;32m  OK  [0m] Started ifup for enP5p1s0f0.
         Starting Raise network interfaces...
[[0;32m  OK  [0m] Started Tell Plymouth To Write Out Runtime Data.
[[0;32m  OK  [0m] Started Set console font and keymap.
[[0;32m  OK  [0m] Started Create Volatile Files and Directories.
         Starting Update UTMP about System Boot/Shutdown...
         Starting Network Time Synchronization...
[[0;32m  OK  [0m] Started Update UTMP about System Boot/Shutdown.
[[0;32m  OK  [0m] Started Network Time Synchronization.
[[0;32m  OK  [0m] Reached target System Time Synchronized.
[[0;32m  OK  [0m] Reached target System Initialization.
[[0;32m  OK  [0m] Listening on UUID daemon activation socket.
[[0;32m  OK  [0m] Listening on D-Bus System Message Bus Socket.
[[0;32m  OK  [0m] Reached target Sockets.
[[0;32m  OK  [0m] Reached target Basic System.
         Starting LSB: daemon to balance interrupts for SMP systems...
         Starting System Logging Service...
         Starting LSB: Start opensm subnet manager....
[[0;32m  OK  [0m] Started Regular background program processing daemon.
         Starting LSB: Start htx daemon...
[[0;32m  OK  [0m] Started Set the CPU Frequency Scaling governor.
[[0;32m  OK  [0m] Started Message of the Day.
[[0;32m  OK  [0m] Started D-Bus System Message Bus.
         Starting Login Service...
         Starting LSB: Example initscript...
[[0;32m  OK  [0m] Started Daily Cleanup of Temporary Directories.
         Starting Accounts Service...
[[0;32m  OK  [0m] Started Daily apt activities.
[[0;32m  OK  [0m] Reached target Timers.
[[0;32m  OK  [0m] Started System Logging Service.
[[0;32m  OK  [0m] Started LSB: Example initscript.
[[0;32m  OK  [0m] Started LSB: Start opensm subnet manager..
[[0;32m  OK  [0m] Started Login Service.
[[0;32m  OK  [0m] Started LSB: daemon to balance interrupts for SMP systems.
[[0;32m  OK  [0m] Started Raise network interfaces.
[[0;32m  OK  [0m] Reached target Network.
         Starting Permit User Sessions...
         Starting OpenBSD Secure Shell server...
         Starting Network Name Resolution...
[[0;32m  OK  [0m] Started Permit User Sessions.
         Starting Hold until boot process finishes up...
         Starting Terminate Plymouth Boot Screen...
[[0;32m  OK  [0m] Started Hold until boot process finishes up.
[[0;32m  OK  [0m] Started Serial Getty on hvc0.
         Starting Set console scheme...
[[0;32m  OK  [0m] Started Terminate Plymouth Boot Screen.
[[0;32m  OK  [0m] Started Set console scheme.
[[0;32m  OK  [0m] Created slice system-getty.slice.
[[0;32m  OK  [0m] Started Getty on tty1.
[[0;32m  OK  [0m] Reached target Login Prompts.
[[0;32m  OK  [0m] Started Accounts Service.
[[0;32m  OK  [0m] Started OpenBSD Secure Shell server.
[[0;32m  OK  [0m] Started Network Name Resolution.
[[0;32m  OK  [0m] Started LSB: Start htx daemon.
[[0;32m  OK  [0m] Reached target Multi-User System.
[[0;32m  OK  [0m] Reached target Graphical Interface.
         Starting Update UTMP about System Runlevel Changes...
[[0;32m  OK  [0m] Started Stop ureadahead data collection 45s after completed startup.
[[0;32m  OK  [0m] Started Update UTMP about System Runlevel Changes.

Ubuntu Zesty Zapus (development branch) 21762 hvc0

21762 login:                                                    </msg>
<status status="PASS" starttime="20170517 20:11:06.151" endtime="20170517 20:11:06.155"></status>
</kw>
<status status="PASS" starttime="20170517 20:09:23.898" endtime="20170517 20:11:06.155"></status>
</kw>
<doc>Parse the journal log and check for failures.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Check_For_Application_Failures</tag>
</tags>
<status status="FAIL" starttime="20170517 20:09:15.689" endtime="20170517 20:11:06.155" critical="yes">'Apr 20 17:36:05 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:36:06 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:36:22 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:36:22 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:36:37 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:36:37 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:36:53 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:36:53 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:37:09 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:37:09 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
    [ Message content over the limit has been removed. ]
Apr 20 17:50:18 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:50:18 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:50:34 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:50:34 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:50:50 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:50:50 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:51:05 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:51:05 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
Apr 20 17:51:21 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
Apr 20 17:51:21 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.' should be empty.</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" starttime="20170517 20:04:46.770" endtime="20170517 20:11:06.157"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" starttime="20170517 20:04:39.431" endtime="20170517 20:11:06.162"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="2">Critical Tests</stat>
<stat fail="1" pass="2">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="1">chassisboot</stat>
<stat fail="1" pass="0">Check_For_Application_Failures</stat>
<stat fail="0" pass="1">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Tests" pass="2">Tests</stat>
<stat fail="0" id="s1-s1" name="Security" pass="1">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" name="Test Basic Poweron" pass="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
