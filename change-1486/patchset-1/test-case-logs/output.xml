<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161213 02:38:58.885" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite name="Tests" id="s1" source="/tmp/root/17055/obmc-robot/tests">
<suite name="Security" id="s1-s1" source="/tmp/root/17055/obmc-robot/tests/security">
<suite name="Test Ssl" id="s1-s1-s1" source="/tmp/root/17055/obmc-robot/tests/security/test_ssl.robot">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:38:59.550">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:38:59.550" status="PASS" endtime="20161213 02:38:59.550"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:38:59.551">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:38:59.551" status="PASS" endtime="20161213 02:38:59.551"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:38:59.552">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:38:59.551" status="PASS" endtime="20161213 02:38:59.552"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:38:59.552">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:38:59.552" status="PASS" endtime="20161213 02:38:59.552"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:38:59.901">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:38:59.901">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:38:59.552" status="PASS" endtime="20161213 02:38:59.901"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:38:59.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:38:59.902" status="PASS" endtime="20161213 02:38:59.902"></status>
</kw>
<status starttime="20161213 02:38:59.549" status="PASS" endtime="20161213 02:38:59.903"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161213 02:38:59.903" status="PASS" endtime="20161213 02:38:59.906"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:38:59.907">Created directory '&lt;a href="file:///tmp/root/17055/obmc-robot/logs"&gt;/tmp/root/17055/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20161213 02:38:59.907" status="PASS" endtime="20161213 02:38:59.907"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:38:59.908">File '/tmp/root/17055/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20161213 02:38:59.908" status="FAIL" endtime="20161213 02:38:59.908"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:38:59.908">${exist} = False</msg>
<status starttime="20161213 02:38:59.907" status="PASS" endtime="20161213 02:38:59.908"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:38:59.912">Created file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17055/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:38:59.911" status="PASS" endtime="20161213 02:38:59.912"></status>
</kw>
<status starttime="20161213 02:38:59.908" status="PASS" endtime="20161213 02:38:59.912"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:38:59.913">${cur_time} = 2016-12-13 02:38:59:912642</msg>
<status starttime="20161213 02:38:59.912" status="PASS" endtime="20161213 02:38:59.913"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:38:59.913">${cur_time} = 20161213023859912642</msg>
<status starttime="20161213 02:38:59.913" status="PASS" endtime="20161213 02:38:59.913"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:38:59.914">${cur_time} = 20161213023859912642</msg>
<status starttime="20161213 02:38:59.912" status="PASS" endtime="20161213 02:38:59.914"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:38:59.914">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17055/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:38:59.914" status="PASS" endtime="20161213 02:38:59.914"></status>
</kw>
<status starttime="20161213 02:38:59.906" status="PASS" endtime="20161213 02:38:59.914"></status>
</kw>
<status starttime="20161213 02:38:59.903" status="PASS" endtime="20161213 02:38:59.915"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20161213 02:38:59.549" critical="yes" status="PASS" endtime="20161213 02:38:59.915"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20161213 02:38:59.915">Delete All Sessions</msg>
<status starttime="20161213 02:38:59.915" status="PASS" endtime="20161213 02:38:59.915"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20161213 02:38:58.913" status="PASS" endtime="20161213 02:38:59.916"></status>
</suite>
<status starttime="20161213 02:38:58.912" status="PASS" endtime="20161213 02:38:59.917"></status>
</suite>
<suite name="Test Association" id="s1-s2" source="/tmp/root/17055/obmc-robot/tests/test_association.robot">
<kw name="Suite Initialization Setup" type="setup">
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:38:59.950">Dictionary does not contain key 'host'.</msg>
<status starttime="20161213 02:38:59.950" status="FAIL" endtime="20161213 02:38:59.950"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:38:59.950">${has_host} = False</msg>
<status starttime="20161213 02:38:59.949" status="PASS" endtime="20161213 02:38:59.950"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161213 02:38:59.954" status="PASS" endtime="20161213 02:38:59.955"></status>
</kw>
<status starttime="20161213 02:38:59.950" status="PASS" endtime="20161213 02:38:59.955"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:38:59.959">${port_num} = 22</msg>
<status starttime="20161213 02:38:59.959" status="PASS" endtime="20161213 02:38:59.959"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:38:59.960">${SSH_PORT} = 22</msg>
<status starttime="20161213 02:38:59.960" status="PASS" endtime="20161213 02:38:59.960"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:38:59.960">${https_num} = 443</msg>
<status starttime="20161213 02:38:59.960" status="PASS" endtime="20161213 02:38:59.960"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:38:59.961">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161213 02:38:59.961" status="PASS" endtime="20161213 02:38:59.961"></status>
</kw>
<status starttime="20161213 02:38:59.959" status="PASS" endtime="20161213 02:38:59.961"></status>
</kw>
<status starttime="20161213 02:38:59.955" status="PASS" endtime="20161213 02:38:59.961"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:38:59.962">Dictionary does not contain key 'port'.</msg>
<status starttime="20161213 02:38:59.962" status="FAIL" endtime="20161213 02:38:59.962"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:38:59.962">${has_port} = False</msg>
<status starttime="20161213 02:38:59.961" status="PASS" endtime="20161213 02:38:59.962"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161213 02:38:59.966" status="PASS" endtime="20161213 02:38:59.967"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161213 02:38:59.967" status="PASS" endtime="20161213 02:38:59.967"></status>
</kw>
<status starttime="20161213 02:38:59.966" status="PASS" endtime="20161213 02:38:59.967"></status>
</kw>
<status starttime="20161213 02:38:59.963" status="PASS" endtime="20161213 02:38:59.967"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:38:59.968">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161213 02:39:02.266">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161213 02:38:59.967" status="PASS" endtime="20161213 02:39:02.266"></status>
</kw>
<status starttime="20161213 02:38:59.949" status="PASS" endtime="20161213 02:39:02.267"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:02.270">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161213 02:39:02.270" status="PASS" endtime="20161213 02:39:02.270"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:02.271">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:02.271" status="PASS" endtime="20161213 02:39:02.271"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:39:02.272" status="PASS" endtime="20161213 02:39:02.272"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:02.280">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:02.279" status="PASS" endtime="20161213 02:39:02.280"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:02.282">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:02.281" status="PASS" endtime="20161213 02:39:02.282"></status>
</kw>
<status starttime="20161213 02:39:02.281" status="PASS" endtime="20161213 02:39:02.282"></status>
</kw>
<status starttime="20161213 02:39:02.278" status="PASS" endtime="20161213 02:39:02.282"></status>
</kw>
<status starttime="20161213 02:39:02.273" status="PASS" endtime="20161213 02:39:02.282"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:02.283">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:02.283" status="PASS" endtime="20161213 02:39:02.284"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:02.284">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:02.284" status="PASS" endtime="20161213 02:39:02.284"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:02.285">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:02.284" status="PASS" endtime="20161213 02:39:02.285"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:02.285">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:02.285" status="PASS" endtime="20161213 02:39:02.285"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:02.625">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:02.625">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:02.285" status="PASS" endtime="20161213 02:39:02.625"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:02.626">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:02.625" status="PASS" endtime="20161213 02:39:02.626"></status>
</kw>
<status starttime="20161213 02:39:02.282" status="PASS" endtime="20161213 02:39:02.626"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:03.140">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:03.140">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:02.627" status="PASS" endtime="20161213 02:39:03.140"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:03.145">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:03.144" status="PASS" endtime="20161213 02:39:03.145"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:03.146">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:03.146" status="PASS" endtime="20161213 02:39:03.146"></status>
</kw>
<status starttime="20161213 02:39:03.145" status="PASS" endtime="20161213 02:39:03.146"></status>
</kw>
<status starttime="20161213 02:39:03.144" status="PASS" endtime="20161213 02:39:03.146"></status>
</kw>
<status starttime="20161213 02:39:03.141" status="PASS" endtime="20161213 02:39:03.146"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:03.146">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:02.268" status="PASS" endtime="20161213 02:39:03.146"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:03.147">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:03.147" status="PASS" endtime="20161213 02:39:03.147"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:03.148">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161213 02:39:03.148" status="PASS" endtime="20161213 02:39:03.148"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:03.152">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161213 02:39:03.152" status="PASS" endtime="20161213 02:39:03.152"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:03.154">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161213 02:39:03.154" status="PASS" endtime="20161213 02:39:03.154"></status>
</kw>
<status starttime="20161213 02:39:03.153" status="PASS" endtime="20161213 02:39:03.154"></status>
</kw>
<status starttime="20161213 02:39:03.151" status="PASS" endtime="20161213 02:39:03.154"></status>
</kw>
<status starttime="20161213 02:39:03.148" status="PASS" endtime="20161213 02:39:03.154"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:03.155">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:03.155" status="PASS" endtime="20161213 02:39:03.155"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:03.156">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:03.155" status="PASS" endtime="20161213 02:39:03.156"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:03.156">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:03.156" status="PASS" endtime="20161213 02:39:03.156"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:03.157">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:03.157" status="PASS" endtime="20161213 02:39:03.157"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:03.939">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:03.940">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:03.157" status="PASS" endtime="20161213 02:39:03.940"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:03.941">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:03.940" status="PASS" endtime="20161213 02:39:03.941"></status>
</kw>
<status starttime="20161213 02:39:03.154" status="PASS" endtime="20161213 02:39:03.941"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.010">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:39:04.011">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:03.941" status="PASS" endtime="20161213 02:39:04.011"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.018">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:04.017" status="PASS" endtime="20161213 02:39:04.018"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:04.020">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:04.019" status="PASS" endtime="20161213 02:39:04.020"></status>
</kw>
<status starttime="20161213 02:39:04.018" status="PASS" endtime="20161213 02:39:04.020"></status>
</kw>
<status starttime="20161213 02:39:04.017" status="PASS" endtime="20161213 02:39:04.020"></status>
</kw>
<status starttime="20161213 02:39:04.011" status="PASS" endtime="20161213 02:39:04.020"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:04.021">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:03.147" status="PASS" endtime="20161213 02:39:04.021"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.022">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:04.022">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:04.022">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:04.021" status="PASS" endtime="20161213 02:39:04.022"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:04.022">Length is 0</msg>
<status starttime="20161213 02:39:04.022" status="PASS" endtime="20161213 02:39:04.022"></status>
</kw>
<status starttime="20161213 02:39:02.268" status="PASS" endtime="20161213 02:39:04.023"></status>
</kw>
<status starttime="20161213 02:39:02.267" status="PASS" endtime="20161213 02:39:04.023"></status>
</kw>
<status starttime="20161213 02:38:59.949" status="PASS" endtime="20161213 02:39:04.023"></status>
</kw>
<test name="Create error log on single FRU" id="s1-s2-t1">
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.025">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161213 02:39:04.025" status="PASS" endtime="20161213 02:39:04.025"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:04.025" status="PASS" endtime="20161213 02:39:04.026"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:39:04.026" status="PASS" endtime="20161213 02:39:04.026"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.031">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:04.030" status="PASS" endtime="20161213 02:39:04.031"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:04.032">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:04.032" status="PASS" endtime="20161213 02:39:04.032"></status>
</kw>
<status starttime="20161213 02:39:04.031" status="PASS" endtime="20161213 02:39:04.032"></status>
</kw>
<status starttime="20161213 02:39:04.030" status="PASS" endtime="20161213 02:39:04.032"></status>
</kw>
<status starttime="20161213 02:39:04.027" status="PASS" endtime="20161213 02:39:04.032"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:04.033">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:04.033" status="PASS" endtime="20161213 02:39:04.033"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.034">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:04.034" status="PASS" endtime="20161213 02:39:04.034"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.035">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:04.034" status="PASS" endtime="20161213 02:39:04.035"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.035">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:04.035" status="PASS" endtime="20161213 02:39:04.035"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.609">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:04.609">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:04.036" status="PASS" endtime="20161213 02:39:04.609"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:04.610">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:04.609" status="PASS" endtime="20161213 02:39:04.610"></status>
</kw>
<status starttime="20161213 02:39:04.032" status="PASS" endtime="20161213 02:39:04.610"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.947">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:04.947">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:04.611" status="PASS" endtime="20161213 02:39:04.947"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.956">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:04.955" status="PASS" endtime="20161213 02:39:04.956"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:04.957">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:04.957" status="PASS" endtime="20161213 02:39:04.957"></status>
</kw>
<status starttime="20161213 02:39:04.956" status="PASS" endtime="20161213 02:39:04.958"></status>
</kw>
<status starttime="20161213 02:39:04.954" status="PASS" endtime="20161213 02:39:04.958"></status>
</kw>
<status starttime="20161213 02:39:04.947" status="PASS" endtime="20161213 02:39:04.958"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:04.958">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:04.024" status="PASS" endtime="20161213 02:39:04.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:04.959">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:04.959" status="PASS" endtime="20161213 02:39:04.959"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.961">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161213 02:39:04.961" status="PASS" endtime="20161213 02:39:04.961"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.967">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161213 02:39:04.966" status="PASS" endtime="20161213 02:39:04.967"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:04.967">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161213 02:39:04.967" status="PASS" endtime="20161213 02:39:04.967"></status>
</kw>
<status starttime="20161213 02:39:04.967" status="PASS" endtime="20161213 02:39:04.968"></status>
</kw>
<status starttime="20161213 02:39:04.965" status="PASS" endtime="20161213 02:39:04.968"></status>
</kw>
<status starttime="20161213 02:39:04.962" status="PASS" endtime="20161213 02:39:04.968"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:04.969">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:04.968" status="PASS" endtime="20161213 02:39:04.969"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.970">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:04.969" status="PASS" endtime="20161213 02:39:04.970"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.970">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:04.970" status="PASS" endtime="20161213 02:39:04.970"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:04.971">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:04.970" status="PASS" endtime="20161213 02:39:04.971"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:05.303">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:05.303">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:04.971" status="PASS" endtime="20161213 02:39:05.303"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:05.304">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:05.303" status="PASS" endtime="20161213 02:39:05.304"></status>
</kw>
<status starttime="20161213 02:39:04.968" status="PASS" endtime="20161213 02:39:05.304"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:05.364">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:39:05.364">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:05.305" status="PASS" endtime="20161213 02:39:05.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:05.372">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:05.371" status="PASS" endtime="20161213 02:39:05.372"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:05.373">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:05.373" status="PASS" endtime="20161213 02:39:05.373"></status>
</kw>
<status starttime="20161213 02:39:05.372" status="PASS" endtime="20161213 02:39:05.374"></status>
</kw>
<status starttime="20161213 02:39:05.370" status="PASS" endtime="20161213 02:39:05.374"></status>
</kw>
<status starttime="20161213 02:39:05.365" status="PASS" endtime="20161213 02:39:05.374"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:05.374">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:04.960" status="PASS" endtime="20161213 02:39:05.374"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:05.375">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:05.375">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:05.375">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:05.374" status="PASS" endtime="20161213 02:39:05.375"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:05.376">Length is 0</msg>
<status starttime="20161213 02:39:05.375" status="PASS" endtime="20161213 02:39:05.376"></status>
</kw>
<status starttime="20161213 02:39:04.024" status="PASS" endtime="20161213 02:39:05.376"></status>
</kw>
<status starttime="20161213 02:39:04.024" status="PASS" endtime="20161213 02:39:05.376"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${CREATE_ERROR_SINGLE_FRU}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${elog}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:05.377">Executing command 'busctl call org.openbmc.records.events /org/openbmc/records/events org.openbmc.recordlog acceptHostMessage sssay "Error" "Testing failure" "/org/openbmc/inventory/system/chassis/motherboard/dimm1" 1 1'.</msg>
<msg level="INFO" timestamp="20161213 02:39:05.758">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:39:05.759">${elog} = q 351</msg>
<msg level="INFO" timestamp="20161213 02:39:05.759">${stderr} = </msg>
<status starttime="20161213 02:39:05.376" status="PASS" endtime="20161213 02:39:05.759"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:05.760">Length is 0</msg>
<status starttime="20161213 02:39:05.759" status="PASS" endtime="20161213 02:39:05.760"></status>
</kw>
<kw name="Get EventList">
<assign>
<var>${log_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:05.763">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161213 02:39:05.762" status="PASS" endtime="20161213 02:39:05.763"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:05.771">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161213 02:39:05.770" status="PASS" endtime="20161213 02:39:05.771"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:05.772">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161213 02:39:05.772" status="PASS" endtime="20161213 02:39:05.772"></status>
</kw>
<status starttime="20161213 02:39:05.771" status="PASS" endtime="20161213 02:39:05.772"></status>
</kw>
<status starttime="20161213 02:39:05.769" status="PASS" endtime="20161213 02:39:05.773"></status>
</kw>
<status starttime="20161213 02:39:05.763" status="PASS" endtime="20161213 02:39:05.773"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:05.773">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:05.773" status="PASS" endtime="20161213 02:39:05.774"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:05.774">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:05.774" status="PASS" endtime="20161213 02:39:05.774"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:05.775">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:05.775" status="PASS" endtime="20161213 02:39:05.775"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:05.775">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:05.775" status="PASS" endtime="20161213 02:39:05.775"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.155">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:06.155">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:05.776" status="PASS" endtime="20161213 02:39:06.155"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:06.157">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:06.156" status="PASS" endtime="20161213 02:39:06.157"></status>
</kw>
<status starttime="20161213 02:39:05.773" status="PASS" endtime="20161213 02:39:06.157"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.216">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:39:06.216">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:06.158" status="PASS" endtime="20161213 02:39:06.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.223">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/351"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:06.223" status="PASS" endtime="20161213 02:39:06.223"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:06.224">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/351"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:06.224" status="PASS" endtime="20161213 02:39:06.224"></status>
</kw>
<status starttime="20161213 02:39:06.223" status="PASS" endtime="20161213 02:39:06.224"></status>
</kw>
<status starttime="20161213 02:39:06.222" status="PASS" endtime="20161213 02:39:06.224"></status>
</kw>
<status starttime="20161213 02:39:06.216" status="PASS" endtime="20161213 02:39:06.224"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:06.225">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:05.761" status="PASS" endtime="20161213 02:39:06.225"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:06.225">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:06.225" status="PASS" endtime="20161213 02:39:06.225"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.226">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/351"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:06.226">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:06.226">${jsondata} = {u'data': [u'/org/openbmc/records/events/351'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:06.225" status="PASS" endtime="20161213 02:39:06.226"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:06.226">${log_list} = [u'/org/openbmc/records/events/351']</msg>
<status starttime="20161213 02:39:05.761" status="PASS" endtime="20161213 02:39:06.226"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>'${log_list}'</arg>
<arg>${elog.strip('q ')}</arg>
</arguments>
<status starttime="20161213 02:39:06.227" status="PASS" endtime="20161213 02:39:06.227"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}/${elog.strip('q ')}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.228">${association_uri} = /org/openbmc/records/events/351/fru</msg>
<status starttime="20161213 02:39:06.227" status="PASS" endtime="20161213 02:39:06.228"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${association_uri}</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${association_content}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.229">${base_uri} = /org/openbmc/records/events/351/fru/attr/endpoints</msg>
<status starttime="20161213 02:39:06.229" status="PASS" endtime="20161213 02:39:06.229"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.234">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/351/fru/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161213 02:39:06.234" status="PASS" endtime="20161213 02:39:06.234"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:06.235">URI:https://9.3.23.30:443/org/openbmc/records/events/351/fru/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161213 02:39:06.235" status="PASS" endtime="20161213 02:39:06.235"></status>
</kw>
<status starttime="20161213 02:39:06.234" status="PASS" endtime="20161213 02:39:06.235"></status>
</kw>
<status starttime="20161213 02:39:06.233" status="PASS" endtime="20161213 02:39:06.235"></status>
</kw>
<status starttime="20161213 02:39:06.230" status="PASS" endtime="20161213 02:39:06.235"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:06.236">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:06.236" status="PASS" endtime="20161213 02:39:06.237"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.237">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:06.237" status="PASS" endtime="20161213 02:39:06.237"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.238">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:06.237" status="PASS" endtime="20161213 02:39:06.238"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.238">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:06.238" status="PASS" endtime="20161213 02:39:06.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.574">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:06.574">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:06.238" status="PASS" endtime="20161213 02:39:06.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:06.575">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:06.574" status="PASS" endtime="20161213 02:39:06.575"></status>
</kw>
<status starttime="20161213 02:39:06.236" status="PASS" endtime="20161213 02:39:06.575"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.667">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/351/fru/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:39:06.667">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:06.575" status="PASS" endtime="20161213 02:39:06.667"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.671">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:06.671" status="PASS" endtime="20161213 02:39:06.671"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:06.672">Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:06.672" status="PASS" endtime="20161213 02:39:06.672"></status>
</kw>
<status starttime="20161213 02:39:06.671" status="PASS" endtime="20161213 02:39:06.672"></status>
</kw>
<status starttime="20161213 02:39:06.670" status="PASS" endtime="20161213 02:39:06.672"></status>
</kw>
<status starttime="20161213 02:39:06.667" status="PASS" endtime="20161213 02:39:06.673"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:06.673">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:06.228" status="PASS" endtime="20161213 02:39:06.673"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.673">To JSON using : content={
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:06.673">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:06.673">${content} = {u'data': [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:06.673" status="PASS" endtime="20161213 02:39:06.673"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:06.674">${association_content} = [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']</msg>
<status starttime="20161213 02:39:06.228" status="PASS" endtime="20161213 02:39:06.674"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${association_content}</arg>
<arg>${DIMM1_URI}</arg>
</arguments>
<status starttime="20161213 02:39:06.674" status="PASS" endtime="20161213 02:39:06.674"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM1_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm1_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.676">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints</msg>
<status starttime="20161213 02:39:06.675" status="PASS" endtime="20161213 02:39:06.676"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.680">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161213 02:39:06.679" status="PASS" endtime="20161213 02:39:06.680"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:06.681">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161213 02:39:06.681" status="PASS" endtime="20161213 02:39:06.681"></status>
</kw>
<status starttime="20161213 02:39:06.680" status="PASS" endtime="20161213 02:39:06.681"></status>
</kw>
<status starttime="20161213 02:39:06.679" status="PASS" endtime="20161213 02:39:06.681"></status>
</kw>
<status starttime="20161213 02:39:06.676" status="PASS" endtime="20161213 02:39:06.681"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:06.682">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:06.682" status="PASS" endtime="20161213 02:39:06.683"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.683">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:06.683" status="PASS" endtime="20161213 02:39:06.683"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.684">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:06.684" status="PASS" endtime="20161213 02:39:06.684"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:06.684">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:06.684" status="PASS" endtime="20161213 02:39:06.685"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.024">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:07.024">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:06.685" status="PASS" endtime="20161213 02:39:07.024"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:07.025">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:07.024" status="PASS" endtime="20161213 02:39:07.025"></status>
</kw>
<status starttime="20161213 02:39:06.681" status="PASS" endtime="20161213 02:39:07.025"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.103">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:39:07.103">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:07.025" status="PASS" endtime="20161213 02:39:07.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.107">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/351"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:07.107" status="PASS" endtime="20161213 02:39:07.107"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:07.108">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/351"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:07.108" status="PASS" endtime="20161213 02:39:07.108"></status>
</kw>
<status starttime="20161213 02:39:07.107" status="PASS" endtime="20161213 02:39:07.108"></status>
</kw>
<status starttime="20161213 02:39:07.106" status="PASS" endtime="20161213 02:39:07.108"></status>
</kw>
<status starttime="20161213 02:39:07.103" status="PASS" endtime="20161213 02:39:07.108"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:07.109">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:06.675" status="PASS" endtime="20161213 02:39:07.109"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.109">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/351"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:07.109">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:07.109">${content} = {u'data': [u'/org/openbmc/records/events/351'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:07.109" status="PASS" endtime="20161213 02:39:07.109"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:07.110">${dimm1_event} = [u'/org/openbmc/records/events/351']</msg>
<status starttime="20161213 02:39:06.674" status="PASS" endtime="20161213 02:39:07.110"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${dimm1_event}</arg>
<arg>${log_list[0]}</arg>
</arguments>
<status starttime="20161213 02:39:07.110" status="PASS" endtime="20161213 02:39:07.110"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161213 02:39:07.111" status="PASS" endtime="20161213 02:39:07.114"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:39:07.115">Directory '&lt;a href="file:///tmp/root/17055/obmc-robot/logs"&gt;/tmp/root/17055/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161213 02:39:07.114" status="PASS" endtime="20161213 02:39:07.115"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:39:07.115">File '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17055/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161213 02:39:07.115" status="PASS" endtime="20161213 02:39:07.116"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:07.116">${exist} = True</msg>
<status starttime="20161213 02:39:07.115" status="PASS" endtime="20161213 02:39:07.116"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161213 02:39:07.116" status="PASS" endtime="20161213 02:39:07.119"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.120">${cur_time} = 2016-12-13 02:39:07:119491</msg>
<status starttime="20161213 02:39:07.119" status="PASS" endtime="20161213 02:39:07.120"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.120">${cur_time} = 20161213023907119491</msg>
<status starttime="20161213 02:39:07.120" status="PASS" endtime="20161213 02:39:07.120"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:07.120">${cur_time} = 20161213023907119491</msg>
<status starttime="20161213 02:39:07.119" status="PASS" endtime="20161213 02:39:07.121"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:39:07.122">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17055/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:39:07.121" status="PASS" endtime="20161213 02:39:07.122"></status>
</kw>
<status starttime="20161213 02:39:07.114" status="PASS" endtime="20161213 02:39:07.122"></status>
</kw>
<status starttime="20161213 02:39:07.110" status="PASS" endtime="20161213 02:39:07.122"></status>
</kw>
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status starttime="20161213 02:39:04.023" critical="yes" status="PASS" endtime="20161213 02:39:07.122"></status>
</test>
<test name="Delete error log" id="s1-s2-t2">
<kw name="Create a test log">
<assign>
<var>${log_uri1}</var>
</assign>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.123">${data} = {u'data': []}</msg>
<status starttime="20161213 02:39:07.123" status="PASS" endtime="20161213 02:39:07.123"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.124">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161213 02:39:07.124" status="PASS" endtime="20161213 02:39:07.125"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.125">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:07.125" status="PASS" endtime="20161213 02:39:07.125"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:39:07.125" status="PASS" endtime="20161213 02:39:07.126"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.130">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:07.129" status="PASS" endtime="20161213 02:39:07.130"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:07.131">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:07.131" status="PASS" endtime="20161213 02:39:07.131"></status>
</kw>
<status starttime="20161213 02:39:07.130" status="PASS" endtime="20161213 02:39:07.131"></status>
</kw>
<status starttime="20161213 02:39:07.129" status="PASS" endtime="20161213 02:39:07.131"></status>
</kw>
<status starttime="20161213 02:39:07.126" status="PASS" endtime="20161213 02:39:07.131"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:07.132">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:07.132" status="PASS" endtime="20161213 02:39:07.132"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.133">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:07.133" status="PASS" endtime="20161213 02:39:07.133"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.133">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:07.133" status="PASS" endtime="20161213 02:39:07.134"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.134">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:07.134" status="PASS" endtime="20161213 02:39:07.134"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.471">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:07.472">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:07.134" status="PASS" endtime="20161213 02:39:07.472"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:07.473">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:07.472" status="PASS" endtime="20161213 02:39:07.473"></status>
</kw>
<status starttime="20161213 02:39:07.131" status="PASS" endtime="20161213 02:39:07.473"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.963">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:07.963">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:07.474" status="PASS" endtime="20161213 02:39:07.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.971">${msg} = Response code:200, Content:{
  "data": 352, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:07.970" status="PASS" endtime="20161213 02:39:07.971"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:07.972">Response code:200, Content:{
  "data": 352, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:07.972" status="PASS" endtime="20161213 02:39:07.972"></status>
</kw>
<status starttime="20161213 02:39:07.971" status="PASS" endtime="20161213 02:39:07.972"></status>
</kw>
<status starttime="20161213 02:39:07.969" status="PASS" endtime="20161213 02:39:07.973"></status>
</kw>
<status starttime="20161213 02:39:07.964" status="PASS" endtime="20161213 02:39:07.973"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:07.973">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:07.124" status="PASS" endtime="20161213 02:39:07.973"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:07.973">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:07.973" status="PASS" endtime="20161213 02:39:07.973"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.974">To JSON using : content={
  "data": 352, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:07.974">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:07.974">${json} = {u'data': 352, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:07.974" status="PASS" endtime="20161213 02:39:07.974"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.975">${LOGID} = 352</msg>
<status starttime="20161213 02:39:07.974" status="PASS" endtime="20161213 02:39:07.975"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.975">${uri} = /org/openbmc/records/events/352</msg>
<status starttime="20161213 02:39:07.975" status="PASS" endtime="20161213 02:39:07.975"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:07.975">${log_uri1} = /org/openbmc/records/events/352</msg>
<status starttime="20161213 02:39:07.123" status="PASS" endtime="20161213 02:39:07.975"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri1}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.976">${association_uri1} = /org/openbmc/records/events/352/fru</msg>
<status starttime="20161213 02:39:07.976" status="PASS" endtime="20161213 02:39:07.976"></status>
</kw>
<kw name="Create a test log">
<assign>
<var>${log_uri2}</var>
</assign>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.977">${data} = {u'data': []}</msg>
<status starttime="20161213 02:39:07.976" status="PASS" endtime="20161213 02:39:07.977"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.978">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161213 02:39:07.977" status="PASS" endtime="20161213 02:39:07.978"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.978">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:07.978" status="PASS" endtime="20161213 02:39:07.978"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:39:07.978" status="PASS" endtime="20161213 02:39:07.979"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.983">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:07.983" status="PASS" endtime="20161213 02:39:07.983"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:07.984">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:07.984" status="PASS" endtime="20161213 02:39:07.984"></status>
</kw>
<status starttime="20161213 02:39:07.983" status="PASS" endtime="20161213 02:39:07.985"></status>
</kw>
<status starttime="20161213 02:39:07.982" status="PASS" endtime="20161213 02:39:07.985"></status>
</kw>
<status starttime="20161213 02:39:07.979" status="PASS" endtime="20161213 02:39:07.985"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:07.986">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:07.985" status="PASS" endtime="20161213 02:39:07.986"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.986">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:07.986" status="PASS" endtime="20161213 02:39:07.986"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.987">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:07.987" status="PASS" endtime="20161213 02:39:07.987"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:07.988">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:07.987" status="PASS" endtime="20161213 02:39:07.988"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:08.464">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:08.464">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:07.988" status="PASS" endtime="20161213 02:39:08.464"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:08.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:08.465" status="PASS" endtime="20161213 02:39:08.466"></status>
</kw>
<status starttime="20161213 02:39:07.985" status="PASS" endtime="20161213 02:39:08.466"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:08.796">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:08.796">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:08.467" status="PASS" endtime="20161213 02:39:08.796"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:08.804">${msg} = Response code:200, Content:{
  "data": 353, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:08.803" status="PASS" endtime="20161213 02:39:08.804"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:08.806">Response code:200, Content:{
  "data": 353, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:08.805" status="PASS" endtime="20161213 02:39:08.806"></status>
</kw>
<status starttime="20161213 02:39:08.804" status="PASS" endtime="20161213 02:39:08.806"></status>
</kw>
<status starttime="20161213 02:39:08.803" status="PASS" endtime="20161213 02:39:08.806"></status>
</kw>
<status starttime="20161213 02:39:08.797" status="PASS" endtime="20161213 02:39:08.806"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:08.806">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:07.977" status="PASS" endtime="20161213 02:39:08.807"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:08.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:08.807" status="PASS" endtime="20161213 02:39:08.808"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:08.808">To JSON using : content={
  "data": 353, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:08.809">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:08.809">${json} = {u'data': 353, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:08.808" status="PASS" endtime="20161213 02:39:08.809"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:08.810">${LOGID} = 353</msg>
<status starttime="20161213 02:39:08.809" status="PASS" endtime="20161213 02:39:08.810"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:08.811">${uri} = /org/openbmc/records/events/353</msg>
<status starttime="20161213 02:39:08.810" status="PASS" endtime="20161213 02:39:08.811"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:08.811">${log_uri2} = /org/openbmc/records/events/353</msg>
<status starttime="20161213 02:39:07.976" status="PASS" endtime="20161213 02:39:08.811"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/action/delete</arg>
</arguments>
<assign>
<var>${del_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:08.812">${del_uri} = /org/openbmc/records/events/352/action/delete</msg>
<status starttime="20161213 02:39:08.811" status="PASS" endtime="20161213 02:39:08.812"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${del_uri}</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:08.814">${base_uri} = /org/openbmc/records/events/352/action/delete</msg>
<status starttime="20161213 02:39:08.813" status="PASS" endtime="20161213 02:39:08.814"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:08.814">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:08.814" status="PASS" endtime="20161213 02:39:08.814"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:39:08.815" status="PASS" endtime="20161213 02:39:08.815"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:08.819">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/352/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:08.819" status="PASS" endtime="20161213 02:39:08.819"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:08.820">URI:https://9.3.23.30:443/org/openbmc/records/events/352/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:08.820" status="PASS" endtime="20161213 02:39:08.820"></status>
</kw>
<status starttime="20161213 02:39:08.819" status="PASS" endtime="20161213 02:39:08.820"></status>
</kw>
<status starttime="20161213 02:39:08.818" status="PASS" endtime="20161213 02:39:08.820"></status>
</kw>
<status starttime="20161213 02:39:08.815" status="PASS" endtime="20161213 02:39:08.820"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:08.821">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:08.821" status="PASS" endtime="20161213 02:39:08.822"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:08.822">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:08.822" status="PASS" endtime="20161213 02:39:08.822"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:08.823">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:08.822" status="PASS" endtime="20161213 02:39:08.823"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:08.823">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:08.823" status="PASS" endtime="20161213 02:39:08.823"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.214">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:09.214">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:08.823" status="PASS" endtime="20161213 02:39:09.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:09.216">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:09.215" status="PASS" endtime="20161213 02:39:09.216"></status>
</kw>
<status starttime="20161213 02:39:08.821" status="PASS" endtime="20161213 02:39:09.216"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.443">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/352/action/delete, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:09.443">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:09.216" status="PASS" endtime="20161213 02:39:09.443"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.453">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:09.450" status="PASS" endtime="20161213 02:39:09.453"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:09.454">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:09.454" status="PASS" endtime="20161213 02:39:09.454"></status>
</kw>
<status starttime="20161213 02:39:09.453" status="PASS" endtime="20161213 02:39:09.454"></status>
</kw>
<status starttime="20161213 02:39:09.449" status="PASS" endtime="20161213 02:39:09.454"></status>
</kw>
<status starttime="20161213 02:39:09.443" status="PASS" endtime="20161213 02:39:09.454"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:09.455">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:08.812" status="PASS" endtime="20161213 02:39:09.455"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:09.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:09.455" status="PASS" endtime="20161213 02:39:09.455"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${association_uri1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.456">${base_uri} = /org/openbmc/records/events/352/fru</msg>
<status starttime="20161213 02:39:09.456" status="PASS" endtime="20161213 02:39:09.456"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.461">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/352/fru, method:Get, args:{}</msg>
<status starttime="20161213 02:39:09.460" status="PASS" endtime="20161213 02:39:09.461"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:09.461">URI:https://9.3.23.30:443/org/openbmc/records/events/352/fru, method:Get, args:{}</msg>
<status starttime="20161213 02:39:09.461" status="PASS" endtime="20161213 02:39:09.461"></status>
</kw>
<status starttime="20161213 02:39:09.461" status="PASS" endtime="20161213 02:39:09.462"></status>
</kw>
<status starttime="20161213 02:39:09.459" status="PASS" endtime="20161213 02:39:09.462"></status>
</kw>
<status starttime="20161213 02:39:09.456" status="PASS" endtime="20161213 02:39:09.462"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:09.463">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:09.462" status="PASS" endtime="20161213 02:39:09.463"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.463">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:09.463" status="PASS" endtime="20161213 02:39:09.463"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.464">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:09.464" status="PASS" endtime="20161213 02:39:09.464"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.465">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:09.464" status="PASS" endtime="20161213 02:39:09.465"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.862">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:09.862">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:09.465" status="PASS" endtime="20161213 02:39:09.862"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:09.863">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:09.863" status="PASS" endtime="20161213 02:39:09.863"></status>
</kw>
<status starttime="20161213 02:39:09.462" status="PASS" endtime="20161213 02:39:09.863"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.917">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/352/fru, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:39:09.917">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20161213 02:39:09.864" status="PASS" endtime="20161213 02:39:09.917"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.922">${msg} = Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/352/fru"
  }, 
  "message": "404 Not Found",...</msg>
<status starttime="20161213 02:39:09.921" status="PASS" endtime="20161213 02:39:09.922"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:09.923">Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/352/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
}</msg>
<status starttime="20161213 02:39:09.922" status="PASS" endtime="20161213 02:39:09.923"></status>
</kw>
<status starttime="20161213 02:39:09.922" status="PASS" endtime="20161213 02:39:09.923"></status>
</kw>
<status starttime="20161213 02:39:09.921" status="PASS" endtime="20161213 02:39:09.923"></status>
</kw>
<status starttime="20161213 02:39:09.917" status="PASS" endtime="20161213 02:39:09.923"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:09.923">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20161213 02:39:09.455" status="PASS" endtime="20161213 02:39:09.923"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.924">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/352/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:09.924">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:09.924">${jsondata} = {u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/352/fru'}, u'status': u'error', u'message': u'404 Not Found'}</msg>
<status starttime="20161213 02:39:09.923" status="PASS" endtime="20161213 02:39:09.924"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsondata['message']}</arg>
<arg>404 Not Found</arg>
</arguments>
<status starttime="20161213 02:39:09.924" status="PASS" endtime="20161213 02:39:09.924"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM3_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm3_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.926">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints</msg>
<status starttime="20161213 02:39:09.926" status="PASS" endtime="20161213 02:39:09.926"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.930">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161213 02:39:09.930" status="PASS" endtime="20161213 02:39:09.930"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:09.931">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161213 02:39:09.931" status="PASS" endtime="20161213 02:39:09.931"></status>
</kw>
<status starttime="20161213 02:39:09.930" status="PASS" endtime="20161213 02:39:09.931"></status>
</kw>
<status starttime="20161213 02:39:09.929" status="PASS" endtime="20161213 02:39:09.931"></status>
</kw>
<status starttime="20161213 02:39:09.926" status="PASS" endtime="20161213 02:39:09.931"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:09.932">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:09.932" status="PASS" endtime="20161213 02:39:09.933"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.933">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:09.933" status="PASS" endtime="20161213 02:39:09.933"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.934">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:09.934" status="PASS" endtime="20161213 02:39:09.934"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:09.934">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:09.934" status="PASS" endtime="20161213 02:39:09.934"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.264">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:10.264">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:09.935" status="PASS" endtime="20161213 02:39:10.264"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:10.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:10.265" status="PASS" endtime="20161213 02:39:10.265"></status>
</kw>
<status starttime="20161213 02:39:09.932" status="PASS" endtime="20161213 02:39:10.266"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.345">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:39:10.345">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:10.266" status="PASS" endtime="20161213 02:39:10.345"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.354">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/353"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:10.352" status="PASS" endtime="20161213 02:39:10.354"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:10.355">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/353"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:10.355" status="PASS" endtime="20161213 02:39:10.356"></status>
</kw>
<status starttime="20161213 02:39:10.354" status="PASS" endtime="20161213 02:39:10.356"></status>
</kw>
<status starttime="20161213 02:39:10.351" status="PASS" endtime="20161213 02:39:10.356"></status>
</kw>
<status starttime="20161213 02:39:10.346" status="PASS" endtime="20161213 02:39:10.356"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:10.356">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:09.925" status="PASS" endtime="20161213 02:39:10.356"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.357">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/353"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:10.357">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:10.357">${content} = {u'data': [u'/org/openbmc/records/events/353'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:10.357" status="PASS" endtime="20161213 02:39:10.357"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:10.358">${dimm3_event} = [u'/org/openbmc/records/events/353']</msg>
<status starttime="20161213 02:39:09.924" status="PASS" endtime="20161213 02:39:10.358"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm3_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status starttime="20161213 02:39:10.358" status="PASS" endtime="20161213 02:39:10.358"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM2_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm2_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.361">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints</msg>
<status starttime="20161213 02:39:10.360" status="PASS" endtime="20161213 02:39:10.361"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.366">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161213 02:39:10.365" status="PASS" endtime="20161213 02:39:10.366"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:10.367">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161213 02:39:10.367" status="PASS" endtime="20161213 02:39:10.367"></status>
</kw>
<status starttime="20161213 02:39:10.366" status="PASS" endtime="20161213 02:39:10.367"></status>
</kw>
<status starttime="20161213 02:39:10.365" status="PASS" endtime="20161213 02:39:10.367"></status>
</kw>
<status starttime="20161213 02:39:10.361" status="PASS" endtime="20161213 02:39:10.367"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:10.368">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:10.368" status="PASS" endtime="20161213 02:39:10.368"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.369">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:10.369" status="PASS" endtime="20161213 02:39:10.369"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.369">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:10.369" status="PASS" endtime="20161213 02:39:10.369"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.370">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:10.370" status="PASS" endtime="20161213 02:39:10.370"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.707">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:10.708">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:10.371" status="PASS" endtime="20161213 02:39:10.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:10.709">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:10.708" status="PASS" endtime="20161213 02:39:10.709"></status>
</kw>
<status starttime="20161213 02:39:10.367" status="PASS" endtime="20161213 02:39:10.709"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.829">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:39:10.829">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:10.709" status="PASS" endtime="20161213 02:39:10.829"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.833">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/353"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:10.833" status="PASS" endtime="20161213 02:39:10.833"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:10.834">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/353"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:10.834" status="PASS" endtime="20161213 02:39:10.834"></status>
</kw>
<status starttime="20161213 02:39:10.833" status="PASS" endtime="20161213 02:39:10.834"></status>
</kw>
<status starttime="20161213 02:39:10.832" status="PASS" endtime="20161213 02:39:10.834"></status>
</kw>
<status starttime="20161213 02:39:10.829" status="PASS" endtime="20161213 02:39:10.834"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:10.835">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:10.359" status="PASS" endtime="20161213 02:39:10.835"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.835">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/353"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:10.835">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:10.835">${content} = {u'data': [u'/org/openbmc/records/events/353'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:10.835" status="PASS" endtime="20161213 02:39:10.835"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:10.836">${dimm2_event} = [u'/org/openbmc/records/events/353']</msg>
<status starttime="20161213 02:39:10.359" status="PASS" endtime="20161213 02:39:10.836"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm2_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status starttime="20161213 02:39:10.836" status="PASS" endtime="20161213 02:39:10.836"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161213 02:39:10.837" status="PASS" endtime="20161213 02:39:10.840"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:39:10.841">Directory '&lt;a href="file:///tmp/root/17055/obmc-robot/logs"&gt;/tmp/root/17055/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161213 02:39:10.840" status="PASS" endtime="20161213 02:39:10.841"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:39:10.841">File '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17055/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161213 02:39:10.841" status="PASS" endtime="20161213 02:39:10.841"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:10.842">${exist} = True</msg>
<status starttime="20161213 02:39:10.841" status="PASS" endtime="20161213 02:39:10.842"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161213 02:39:10.842" status="PASS" endtime="20161213 02:39:10.845"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.846">${cur_time} = 2016-12-13 02:39:10:845467</msg>
<status starttime="20161213 02:39:10.845" status="PASS" endtime="20161213 02:39:10.846"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.846">${cur_time} = 20161213023910845467</msg>
<status starttime="20161213 02:39:10.846" status="PASS" endtime="20161213 02:39:10.846"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:10.846">${cur_time} = 20161213023910845467</msg>
<status starttime="20161213 02:39:10.845" status="PASS" endtime="20161213 02:39:10.846"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:39:10.847">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17055/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:39:10.847" status="PASS" endtime="20161213 02:39:10.847"></status>
</kw>
<status starttime="20161213 02:39:10.840" status="PASS" endtime="20161213 02:39:10.847"></status>
</kw>
<status starttime="20161213 02:39:10.837" status="PASS" endtime="20161213 02:39:10.847"></status>
</kw>
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status starttime="20161213 02:39:07.122" critical="yes" status="PASS" endtime="20161213 02:39:10.847"></status>
</test>
<kw library="SSHLibrary" name="Close All Connections" type="teardown">
<doc>Closes all open connections.</doc>
<status starttime="20161213 02:39:10.849" status="PASS" endtime="20161213 02:39:10.857"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status starttime="20161213 02:38:59.917" status="PASS" endtime="20161213 02:39:10.857"></status>
</suite>
<suite name="Test Basic Poweron" id="s1-s3" source="/tmp/root/17055/obmc-robot/tests/test_basic_poweron.robot">
<test name="power on test" id="s1-s3-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start logging to a file in /tmp so that it can</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:39:10.888">Dictionary does not contain key 'host'.</msg>
<status starttime="20161213 02:39:10.887" status="FAIL" endtime="20161213 02:39:10.888"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:10.888">${has_host} = False</msg>
<status starttime="20161213 02:39:10.887" status="PASS" endtime="20161213 02:39:10.888"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161213 02:39:10.891" status="PASS" endtime="20161213 02:39:10.891"></status>
</kw>
<status starttime="20161213 02:39:10.888" status="PASS" endtime="20161213 02:39:10.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.896">${port_num} = 22</msg>
<status starttime="20161213 02:39:10.895" status="PASS" endtime="20161213 02:39:10.896"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.897">${SSH_PORT} = 22</msg>
<status starttime="20161213 02:39:10.896" status="PASS" endtime="20161213 02:39:10.897"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:10.897">${https_num} = 443</msg>
<status starttime="20161213 02:39:10.897" status="PASS" endtime="20161213 02:39:10.897"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:10.898">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161213 02:39:10.898" status="PASS" endtime="20161213 02:39:10.898"></status>
</kw>
<status starttime="20161213 02:39:10.895" status="PASS" endtime="20161213 02:39:10.898"></status>
</kw>
<status starttime="20161213 02:39:10.892" status="PASS" endtime="20161213 02:39:10.898"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:39:10.899">Dictionary does not contain key 'port'.</msg>
<status starttime="20161213 02:39:10.899" status="FAIL" endtime="20161213 02:39:10.899"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:10.899">${has_port} = False</msg>
<status starttime="20161213 02:39:10.898" status="PASS" endtime="20161213 02:39:10.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161213 02:39:10.903" status="PASS" endtime="20161213 02:39:10.903"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161213 02:39:10.904" status="PASS" endtime="20161213 02:39:10.904"></status>
</kw>
<status starttime="20161213 02:39:10.903" status="PASS" endtime="20161213 02:39:10.904"></status>
</kw>
<status starttime="20161213 02:39:10.899" status="PASS" endtime="20161213 02:39:10.904"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:10.904">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161213 02:39:13.289">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161213 02:39:10.904" status="PASS" endtime="20161213 02:39:13.289"></status>
</kw>
<status starttime="20161213 02:39:10.886" status="PASS" endtime="20161213 02:39:13.290"></status>
</kw>
<kw library="utils" name="Get Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y%m%d%H%M%S%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:13.291">${cur_time} = 20161213023913291122</msg>
<status starttime="20161213 02:39:13.291" status="PASS" endtime="20161213 02:39:13.291"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:13.292">${cur_time} = 20161213023913291122</msg>
<status starttime="20161213 02:39:13.290" status="PASS" endtime="20161213 02:39:13.292"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:13.297">${LOG_TIME} = 20161213023913291122</msg>
<status starttime="20161213 02:39:13.292" status="PASS" endtime="20161213 02:39:13.297"></status>
</kw>
<kw library="SSHLibrary" name="Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>obmc-console-client &gt; ${file_path}-${LOG_TIME}_$$</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:13.298">Starting command 'obmc-console-client &gt; /tmp/obmc-console.log-20161213023913291122_$$'.</msg>
<status starttime="20161213 02:39:13.298" status="PASS" endtime="20161213 02:39:13.306"></status>
</kw>
<status starttime="20161213 02:39:10.886" status="PASS" endtime="20161213 02:39:13.306"></status>
</kw>
<kw library="poweroffs" name="BMC Power Off">
<doc>Powers off the system and makes sure that all states are</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:39:13.309">Dictionary does not contain key 'host'.</msg>
<status starttime="20161213 02:39:13.309" status="FAIL" endtime="20161213 02:39:13.309"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:13.309">${has_host} = False</msg>
<status starttime="20161213 02:39:13.308" status="PASS" endtime="20161213 02:39:13.309"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161213 02:39:13.314" status="PASS" endtime="20161213 02:39:13.314"></status>
</kw>
<status starttime="20161213 02:39:13.310" status="PASS" endtime="20161213 02:39:13.315"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:13.320">${port_num} = 22</msg>
<status starttime="20161213 02:39:13.319" status="PASS" endtime="20161213 02:39:13.320"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:13.320">${SSH_PORT} = 22</msg>
<status starttime="20161213 02:39:13.320" status="PASS" endtime="20161213 02:39:13.320"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:13.321">${https_num} = 443</msg>
<status starttime="20161213 02:39:13.320" status="PASS" endtime="20161213 02:39:13.321"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:13.321">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161213 02:39:13.321" status="PASS" endtime="20161213 02:39:13.322"></status>
</kw>
<status starttime="20161213 02:39:13.319" status="PASS" endtime="20161213 02:39:13.322"></status>
</kw>
<status starttime="20161213 02:39:13.315" status="PASS" endtime="20161213 02:39:13.322"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:39:13.323">Dictionary does not contain key 'port'.</msg>
<status starttime="20161213 02:39:13.322" status="FAIL" endtime="20161213 02:39:13.323"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:13.323">${has_port} = False</msg>
<status starttime="20161213 02:39:13.322" status="PASS" endtime="20161213 02:39:13.323"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161213 02:39:13.327" status="PASS" endtime="20161213 02:39:13.327"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161213 02:39:13.327" status="PASS" endtime="20161213 02:39:13.327"></status>
</kw>
<status starttime="20161213 02:39:13.326" status="PASS" endtime="20161213 02:39:13.328"></status>
</kw>
<status starttime="20161213 02:39:13.323" status="PASS" endtime="20161213 02:39:13.328"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:13.328">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161213 02:39:16.212">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161213 02:39:13.328" status="PASS" endtime="20161213 02:39:16.213"></status>
</kw>
<status starttime="20161213 02:39:13.307" status="PASS" endtime="20161213 02:39:16.213"></status>
</kw>
<kw library="utils" name="Initiate Power Off">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.214">@{arglist} = [ ]</msg>
<status starttime="20161213 02:39:16.214" status="PASS" endtime="20161213 02:39:16.215"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.216">${args} = {u'data': []}</msg>
<status starttime="20161213 02:39:16.215" status="PASS" endtime="20161213 02:39:16.216"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.218">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:39:16.217" status="PASS" endtime="20161213 02:39:16.218"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.220">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status starttime="20161213 02:39:16.220" status="PASS" endtime="20161213 02:39:16.220"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.221">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:16.221" status="PASS" endtime="20161213 02:39:16.221"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:39:16.222" status="PASS" endtime="20161213 02:39:16.222"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.227">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:16.226" status="PASS" endtime="20161213 02:39:16.227"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:16.228">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:16.227" status="PASS" endtime="20161213 02:39:16.228"></status>
</kw>
<status starttime="20161213 02:39:16.227" status="PASS" endtime="20161213 02:39:16.228"></status>
</kw>
<status starttime="20161213 02:39:16.226" status="PASS" endtime="20161213 02:39:16.228"></status>
</kw>
<status starttime="20161213 02:39:16.223" status="PASS" endtime="20161213 02:39:16.228"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:16.229">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:16.229" status="PASS" endtime="20161213 02:39:16.229"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.230">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:16.230" status="PASS" endtime="20161213 02:39:16.230"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.230">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:16.230" status="PASS" endtime="20161213 02:39:16.230"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.231">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:16.231" status="PASS" endtime="20161213 02:39:16.231"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.567">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:16.567">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:16.231" status="PASS" endtime="20161213 02:39:16.567"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:16.568">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:16.567" status="PASS" endtime="20161213 02:39:16.568"></status>
</kw>
<status starttime="20161213 02:39:16.228" status="PASS" endtime="20161213 02:39:16.568"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.852">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:16.852">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:16.568" status="PASS" endtime="20161213 02:39:16.852"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.857">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:16.856" status="PASS" endtime="20161213 02:39:16.857"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:16.857">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:16.857" status="PASS" endtime="20161213 02:39:16.858"></status>
</kw>
<status starttime="20161213 02:39:16.857" status="PASS" endtime="20161213 02:39:16.858"></status>
</kw>
<status starttime="20161213 02:39:16.856" status="PASS" endtime="20161213 02:39:16.858"></status>
</kw>
<status starttime="20161213 02:39:16.852" status="PASS" endtime="20161213 02:39:16.858"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:16.858">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:16.218" status="PASS" endtime="20161213 02:39:16.858"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:16.858">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:16.216" status="PASS" endtime="20161213 02:39:16.858"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:16.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:16.859" status="PASS" endtime="20161213 02:39:16.859"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw library="utils" name="Is Power Off">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.860">@{arglist} = [ ]</msg>
<status starttime="20161213 02:39:16.860" status="PASS" endtime="20161213 02:39:16.860"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.861">${args} = {u'data': []}</msg>
<status starttime="20161213 02:39:16.861" status="PASS" endtime="20161213 02:39:16.861"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.862">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:39:16.862" status="PASS" endtime="20161213 02:39:16.862"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.863">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:39:16.863" status="PASS" endtime="20161213 02:39:16.863"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.864">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:16.864" status="PASS" endtime="20161213 02:39:16.864"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:39:16.864" status="PASS" endtime="20161213 02:39:16.864"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.869">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:16.868" status="PASS" endtime="20161213 02:39:16.869"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:16.870">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:16.869" status="PASS" endtime="20161213 02:39:16.870"></status>
</kw>
<status starttime="20161213 02:39:16.869" status="PASS" endtime="20161213 02:39:16.870"></status>
</kw>
<status starttime="20161213 02:39:16.868" status="PASS" endtime="20161213 02:39:16.870"></status>
</kw>
<status starttime="20161213 02:39:16.865" status="PASS" endtime="20161213 02:39:16.870"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:16.871">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:16.870" status="PASS" endtime="20161213 02:39:16.871"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.872">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:16.872" status="PASS" endtime="20161213 02:39:16.872"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.872">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:16.872" status="PASS" endtime="20161213 02:39:16.872"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:16.873">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:16.873" status="PASS" endtime="20161213 02:39:16.873"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:17.538">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:17.539">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:16.873" status="PASS" endtime="20161213 02:39:17.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:17.540">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:17.539" status="PASS" endtime="20161213 02:39:17.540"></status>
</kw>
<status starttime="20161213 02:39:16.870" status="PASS" endtime="20161213 02:39:17.540"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:19.212">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:19.212">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:17.540" status="PASS" endtime="20161213 02:39:19.213"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:19.223">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:19.222" status="PASS" endtime="20161213 02:39:19.223"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:19.224">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:19.224" status="PASS" endtime="20161213 02:39:19.224"></status>
</kw>
<status starttime="20161213 02:39:19.223" status="PASS" endtime="20161213 02:39:19.224"></status>
</kw>
<status starttime="20161213 02:39:19.221" status="PASS" endtime="20161213 02:39:19.224"></status>
</kw>
<status starttime="20161213 02:39:19.213" status="PASS" endtime="20161213 02:39:19.224"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:19.225">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:16.862" status="PASS" endtime="20161213 02:39:19.225"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:19.225">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:16.861" status="PASS" endtime="20161213 02:39:19.225"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:19.225">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:19.225" status="PASS" endtime="20161213 02:39:19.225"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:19.226">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:19.226">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:19.226">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:19.226" status="PASS" endtime="20161213 02:39:19.226"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:19.226">${state} = 0</msg>
<status starttime="20161213 02:39:16.860" status="PASS" endtime="20161213 02:39:19.226"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20161213 02:39:19.226" status="PASS" endtime="20161213 02:39:19.227"></status>
</kw>
<status starttime="20161213 02:39:16.860" status="PASS" endtime="20161213 02:39:19.227"></status>
</kw>
<status starttime="20161213 02:39:16.859" status="PASS" endtime="20161213 02:39:19.227"></status>
</kw>
<status starttime="20161213 02:39:16.213" status="PASS" endtime="20161213 02:39:19.227"></status>
</kw>
<kw library="poweroffs" name="Check Power Off States">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:19.228">@{arglist} = [ ]</msg>
<status starttime="20161213 02:39:19.228" status="PASS" endtime="20161213 02:39:19.228"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:19.229">${args} = {u'data': []}</msg>
<status starttime="20161213 02:39:19.228" status="PASS" endtime="20161213 02:39:19.229"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:19.231">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:39:19.230" status="PASS" endtime="20161213 02:39:19.231"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:19.232">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:39:19.232" status="PASS" endtime="20161213 02:39:19.232"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:19.233">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:19.233" status="PASS" endtime="20161213 02:39:19.233"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:39:19.233" status="PASS" endtime="20161213 02:39:19.233"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:19.238">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:19.237" status="PASS" endtime="20161213 02:39:19.238"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:19.239">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:19.238" status="PASS" endtime="20161213 02:39:19.239"></status>
</kw>
<status starttime="20161213 02:39:19.238" status="PASS" endtime="20161213 02:39:19.239"></status>
</kw>
<status starttime="20161213 02:39:19.237" status="PASS" endtime="20161213 02:39:19.239"></status>
</kw>
<status starttime="20161213 02:39:19.234" status="PASS" endtime="20161213 02:39:19.239"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:19.240">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:19.239" status="PASS" endtime="20161213 02:39:19.240"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:19.241">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:19.240" status="PASS" endtime="20161213 02:39:19.241"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:19.241">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:19.241" status="PASS" endtime="20161213 02:39:19.241"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:19.242">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:19.241" status="PASS" endtime="20161213 02:39:19.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:19.926">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:19.926">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:19.242" status="PASS" endtime="20161213 02:39:19.926"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:19.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:19.927" status="PASS" endtime="20161213 02:39:19.927"></status>
</kw>
<status starttime="20161213 02:39:19.239" status="PASS" endtime="20161213 02:39:19.928"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:20.418">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:20.418">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:19.928" status="PASS" endtime="20161213 02:39:20.418"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:20.427">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:20.424" status="PASS" endtime="20161213 02:39:20.427"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:20.428">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:20.428" status="PASS" endtime="20161213 02:39:20.429"></status>
</kw>
<status starttime="20161213 02:39:20.427" status="PASS" endtime="20161213 02:39:20.429"></status>
</kw>
<status starttime="20161213 02:39:20.424" status="PASS" endtime="20161213 02:39:20.429"></status>
</kw>
<status starttime="20161213 02:39:20.419" status="PASS" endtime="20161213 02:39:20.429"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:20.429">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:19.231" status="PASS" endtime="20161213 02:39:20.429"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:20.429">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:19.229" status="PASS" endtime="20161213 02:39:20.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:20.430">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:20.430" status="PASS" endtime="20161213 02:39:20.430"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:20.431">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:20.431">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:20.431">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:20.430" status="PASS" endtime="20161213 02:39:20.431"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:20.431">${power_state} = 0</msg>
<status starttime="20161213 02:39:19.228" status="PASS" endtime="20161213 02:39:20.431"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20161213 02:39:20.432" status="PASS" endtime="20161213 02:39:20.432"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status starttime="20161213 02:39:20.432" status="PASS" endtime="20161213 02:39:20.432"></status>
</kw>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:20.434">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20161213 02:39:20.434" status="PASS" endtime="20161213 02:39:20.434"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:20.439">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20161213 02:39:20.438" status="PASS" endtime="20161213 02:39:20.439"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:20.440">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20161213 02:39:20.439" status="PASS" endtime="20161213 02:39:20.440"></status>
</kw>
<status starttime="20161213 02:39:20.439" status="PASS" endtime="20161213 02:39:20.440"></status>
</kw>
<status starttime="20161213 02:39:20.438" status="PASS" endtime="20161213 02:39:20.440"></status>
</kw>
<status starttime="20161213 02:39:20.435" status="PASS" endtime="20161213 02:39:20.440"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:20.441">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:20.440" status="PASS" endtime="20161213 02:39:20.441"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:20.442">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:20.441" status="PASS" endtime="20161213 02:39:20.442"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:20.442">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:20.442" status="PASS" endtime="20161213 02:39:20.442"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:20.443">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:20.442" status="PASS" endtime="20161213 02:39:20.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:20.947">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:20.947">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:20.443" status="PASS" endtime="20161213 02:39:20.948"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:20.948">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:20.948" status="PASS" endtime="20161213 02:39:20.948"></status>
</kw>
<status starttime="20161213 02:39:20.440" status="PASS" endtime="20161213 02:39:20.949"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.025">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:39:21.026">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:20.949" status="PASS" endtime="20161213 02:39:21.026"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.030">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:21.029" status="PASS" endtime="20161213 02:39:21.030"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:21.031">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:21.031" status="PASS" endtime="20161213 02:39:21.031"></status>
</kw>
<status starttime="20161213 02:39:21.030" status="PASS" endtime="20161213 02:39:21.031"></status>
</kw>
<status starttime="20161213 02:39:21.029" status="PASS" endtime="20161213 02:39:21.031"></status>
</kw>
<status starttime="20161213 02:39:21.026" status="PASS" endtime="20161213 02:39:21.032"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:21.032">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:20.433" status="PASS" endtime="20161213 02:39:21.032"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.032">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:21.032">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:21.032">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:21.032" status="PASS" endtime="20161213 02:39:21.032"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:21.033">${state} = Off</msg>
<status starttime="20161213 02:39:20.433" status="PASS" endtime="20161213 02:39:21.033"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:21.033">${boot_progress} = Off</msg>
<status starttime="20161213 02:39:20.433" status="PASS" endtime="20161213 02:39:21.033"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20161213 02:39:21.033" status="PASS" endtime="20161213 02:39:21.033"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status starttime="20161213 02:39:21.034" status="PASS" endtime="20161213 02:39:21.034"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.034">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status starttime="20161213 02:39:21.034" status="PASS" endtime="20161213 02:39:21.034"></status>
</kw>
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.035">@{arglist} = [ ]</msg>
<status starttime="20161213 02:39:21.035" status="PASS" endtime="20161213 02:39:21.035"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.036">${args} = {u'data': []}</msg>
<status starttime="20161213 02:39:21.035" status="PASS" endtime="20161213 02:39:21.036"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.037">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161213 02:39:21.036" status="PASS" endtime="20161213 02:39:21.037"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.038">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161213 02:39:21.038" status="PASS" endtime="20161213 02:39:21.038"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.038">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:21.038" status="PASS" endtime="20161213 02:39:21.039"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:39:21.039" status="PASS" endtime="20161213 02:39:21.039"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.043">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:21.043" status="PASS" endtime="20161213 02:39:21.043"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:21.044">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:21.044" status="PASS" endtime="20161213 02:39:21.045"></status>
</kw>
<status starttime="20161213 02:39:21.044" status="PASS" endtime="20161213 02:39:21.045"></status>
</kw>
<status starttime="20161213 02:39:21.042" status="PASS" endtime="20161213 02:39:21.045"></status>
</kw>
<status starttime="20161213 02:39:21.039" status="PASS" endtime="20161213 02:39:21.045"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:21.046">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:21.045" status="PASS" endtime="20161213 02:39:21.046"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.047">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:21.046" status="PASS" endtime="20161213 02:39:21.047"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.047">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:21.047" status="PASS" endtime="20161213 02:39:21.047"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.048">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:21.047" status="PASS" endtime="20161213 02:39:21.048"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.387">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:21.387">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:21.048" status="PASS" endtime="20161213 02:39:21.387"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:21.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:21.388" status="PASS" endtime="20161213 02:39:21.389"></status>
</kw>
<status starttime="20161213 02:39:21.045" status="PASS" endtime="20161213 02:39:21.389"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.666">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:21.666">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:21.389" status="PASS" endtime="20161213 02:39:21.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.673">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:21.672" status="PASS" endtime="20161213 02:39:21.673"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:21.674">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:21.674" status="PASS" endtime="20161213 02:39:21.674"></status>
</kw>
<status starttime="20161213 02:39:21.673" status="PASS" endtime="20161213 02:39:21.674"></status>
</kw>
<status starttime="20161213 02:39:21.672" status="PASS" endtime="20161213 02:39:21.675"></status>
</kw>
<status starttime="20161213 02:39:21.666" status="PASS" endtime="20161213 02:39:21.675"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:21.675">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:21.037" status="PASS" endtime="20161213 02:39:21.675"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:21.675">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:21.036" status="PASS" endtime="20161213 02:39:21.675"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:21.676">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:21.676" status="PASS" endtime="20161213 02:39:21.676"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.677">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:21.677">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:21.677">${content} = {u'data': u'BMC_READY', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:21.676" status="PASS" endtime="20161213 02:39:21.677"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:21.677">${bmc_state} = BMC_READY</msg>
<status starttime="20161213 02:39:21.034" status="PASS" endtime="20161213 02:39:21.677"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${states}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status starttime="20161213 02:39:21.678" status="PASS" endtime="20161213 02:39:21.678"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status starttime="20161213 02:39:21.678" status="PASS" endtime="20161213 02:39:21.679"></status>
</kw>
<status starttime="20161213 02:39:19.227" status="PASS" endtime="20161213 02:39:21.679"></status>
</kw>
<kw library="SSHLibrary" name="Close Connection">
<doc>Closes the current connection.</doc>
<status starttime="20161213 02:39:21.679" status="PASS" endtime="20161213 02:39:21.743"></status>
</kw>
<status starttime="20161213 02:39:13.307" status="PASS" endtime="20161213 02:39:21.743"></status>
</kw>
<kw library="powerons" name="BMC Power On">
<doc>Powers on the system, checks that the OS is functional, and</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>alias=bmc_connection</arg>
</arguments>
<assign>
<var>&amp;{bmc_connection_args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.744">&amp;{bmc_connection_args} = { alias=bmc_connection }</msg>
<status starttime="20161213 02:39:21.744" status="PASS" endtime="20161213 02:39:21.744"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<arguments>
<arg>&amp;{bmc_connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:39:21.747">Dictionary does not contain key 'host'.</msg>
<status starttime="20161213 02:39:21.746" status="FAIL" endtime="20161213 02:39:21.747"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:21.747">${has_host} = False</msg>
<status starttime="20161213 02:39:21.745" status="PASS" endtime="20161213 02:39:21.747"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161213 02:39:21.752" status="PASS" endtime="20161213 02:39:21.752"></status>
</kw>
<status starttime="20161213 02:39:21.747" status="PASS" endtime="20161213 02:39:21.752"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.759">${port_num} = 22</msg>
<status starttime="20161213 02:39:21.759" status="PASS" endtime="20161213 02:39:21.759"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.760">${SSH_PORT} = 22</msg>
<status starttime="20161213 02:39:21.759" status="PASS" endtime="20161213 02:39:21.760"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:21.760">${https_num} = 443</msg>
<status starttime="20161213 02:39:21.760" status="PASS" endtime="20161213 02:39:21.760"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:21.761">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161213 02:39:21.761" status="PASS" endtime="20161213 02:39:21.761"></status>
</kw>
<status starttime="20161213 02:39:21.757" status="PASS" endtime="20161213 02:39:21.761"></status>
</kw>
<status starttime="20161213 02:39:21.753" status="PASS" endtime="20161213 02:39:21.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:39:21.763">Dictionary does not contain key 'port'.</msg>
<status starttime="20161213 02:39:21.762" status="FAIL" endtime="20161213 02:39:21.763"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:21.763">${has_port} = False</msg>
<status starttime="20161213 02:39:21.762" status="PASS" endtime="20161213 02:39:21.763"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161213 02:39:21.767" status="PASS" endtime="20161213 02:39:21.767"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161213 02:39:21.767" status="PASS" endtime="20161213 02:39:21.767"></status>
</kw>
<status starttime="20161213 02:39:21.766" status="PASS" endtime="20161213 02:39:21.768"></status>
</kw>
<status starttime="20161213 02:39:21.763" status="PASS" endtime="20161213 02:39:21.768"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:21.768">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161213 02:39:24.352">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161213 02:39:21.768" status="PASS" endtime="20161213 02:39:24.353"></status>
</kw>
<status starttime="20161213 02:39:21.744" status="PASS" endtime="20161213 02:39:24.353"></status>
</kw>
<kw library="utils" name="Initiate Power On">
<doc>Initiates the power on and waits until the Is Power On</doc>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.355">@{arglist} = [ ]</msg>
<status starttime="20161213 02:39:24.354" status="PASS" endtime="20161213 02:39:24.355"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.356">${args} = {u'data': []}</msg>
<status starttime="20161213 02:39:24.355" status="PASS" endtime="20161213 02:39:24.356"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOn</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.358">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:39:24.357" status="PASS" endtime="20161213 02:39:24.358"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.360">${base_uri} = /org/openbmc/control/chassis0//action/powerOn</msg>
<status starttime="20161213 02:39:24.360" status="PASS" endtime="20161213 02:39:24.361"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.361">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:24.361" status="PASS" endtime="20161213 02:39:24.361"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:39:24.362" status="PASS" endtime="20161213 02:39:24.362"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.367">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:24.366" status="PASS" endtime="20161213 02:39:24.367"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:24.368">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:24.367" status="PASS" endtime="20161213 02:39:24.368"></status>
</kw>
<status starttime="20161213 02:39:24.367" status="PASS" endtime="20161213 02:39:24.368"></status>
</kw>
<status starttime="20161213 02:39:24.366" status="PASS" endtime="20161213 02:39:24.368"></status>
</kw>
<status starttime="20161213 02:39:24.363" status="PASS" endtime="20161213 02:39:24.368"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:24.369">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:24.369" status="PASS" endtime="20161213 02:39:24.369"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.370">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:24.369" status="PASS" endtime="20161213 02:39:24.370"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.370">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:24.370" status="PASS" endtime="20161213 02:39:24.370"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.371">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:24.371" status="PASS" endtime="20161213 02:39:24.371"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.701">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:24.701">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:24.371" status="PASS" endtime="20161213 02:39:24.701"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:24.702">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:24.701" status="PASS" endtime="20161213 02:39:24.702"></status>
</kw>
<status starttime="20161213 02:39:24.368" status="PASS" endtime="20161213 02:39:24.702"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.982">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOn, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:24.982">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:24.702" status="PASS" endtime="20161213 02:39:24.982"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.987">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:24.986" status="PASS" endtime="20161213 02:39:24.987"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:24.987">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:24.987" status="PASS" endtime="20161213 02:39:24.987"></status>
</kw>
<status starttime="20161213 02:39:24.987" status="PASS" endtime="20161213 02:39:24.988"></status>
</kw>
<status starttime="20161213 02:39:24.986" status="PASS" endtime="20161213 02:39:24.988"></status>
</kw>
<status starttime="20161213 02:39:24.982" status="PASS" endtime="20161213 02:39:24.988"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:24.988">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:24.358" status="PASS" endtime="20161213 02:39:24.988"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:24.988">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:24.356" status="PASS" endtime="20161213 02:39:24.988"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:24.989">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:24.988" status="PASS" endtime="20161213 02:39:24.989"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20161213 02:39:24.989" status="PASS" endtime="20161213 02:39:24.992"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Power On</arg>
</arguments>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.993">@{arglist} = [ ]</msg>
<status starttime="20161213 02:39:24.993" status="PASS" endtime="20161213 02:39:24.993"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.994">${args} = {u'data': []}</msg>
<status starttime="20161213 02:39:24.994" status="PASS" endtime="20161213 02:39:24.994"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.995">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:39:24.995" status="PASS" endtime="20161213 02:39:24.995"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.997">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:39:24.996" status="PASS" endtime="20161213 02:39:24.997"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:24.997">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:24.997" status="PASS" endtime="20161213 02:39:24.997"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:39:24.997" status="PASS" endtime="20161213 02:39:24.998"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:25.003">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:25.003" status="PASS" endtime="20161213 02:39:25.003"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:25.004">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:25.004" status="PASS" endtime="20161213 02:39:25.004"></status>
</kw>
<status starttime="20161213 02:39:25.003" status="PASS" endtime="20161213 02:39:25.004"></status>
</kw>
<status starttime="20161213 02:39:25.002" status="PASS" endtime="20161213 02:39:25.004"></status>
</kw>
<status starttime="20161213 02:39:24.998" status="PASS" endtime="20161213 02:39:25.004"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:25.005">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:25.005" status="PASS" endtime="20161213 02:39:25.006"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:25.006">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:25.006" status="PASS" endtime="20161213 02:39:25.006"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:25.007">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:25.007" status="PASS" endtime="20161213 02:39:25.007"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:25.007">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:25.007" status="PASS" endtime="20161213 02:39:25.007"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:26.391">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:26.391">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:25.008" status="PASS" endtime="20161213 02:39:26.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:26.392">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:26.392" status="PASS" endtime="20161213 02:39:26.393"></status>
</kw>
<status starttime="20161213 02:39:25.005" status="PASS" endtime="20161213 02:39:26.393"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:27.453">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:27.453">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:26.393" status="PASS" endtime="20161213 02:39:27.453"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:27.458">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:27.457" status="PASS" endtime="20161213 02:39:27.458"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:27.458">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:27.458" status="PASS" endtime="20161213 02:39:27.459"></status>
</kw>
<status starttime="20161213 02:39:27.458" status="PASS" endtime="20161213 02:39:27.459"></status>
</kw>
<status starttime="20161213 02:39:27.457" status="PASS" endtime="20161213 02:39:27.459"></status>
</kw>
<status starttime="20161213 02:39:27.454" status="PASS" endtime="20161213 02:39:27.459"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:27.459">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:24.996" status="PASS" endtime="20161213 02:39:27.459"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:27.459">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:24.994" status="PASS" endtime="20161213 02:39:27.459"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:27.460">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:27.460" status="PASS" endtime="20161213 02:39:27.460"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:27.461">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:27.461">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:27.461">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:27.461" status="PASS" endtime="20161213 02:39:27.461"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:27.462">${state} = 0</msg>
<status starttime="20161213 02:39:24.993" status="PASS" endtime="20161213 02:39:27.462"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:39:27.463">0 != 1</msg>
<status starttime="20161213 02:39:27.462" status="FAIL" endtime="20161213 02:39:27.463"></status>
</kw>
<status starttime="20161213 02:39:24.992" status="FAIL" endtime="20161213 02:39:27.463"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:37.465">@{arglist} = [ ]</msg>
<status starttime="20161213 02:39:37.465" status="PASS" endtime="20161213 02:39:37.465"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:37.466">${args} = {u'data': []}</msg>
<status starttime="20161213 02:39:37.466" status="PASS" endtime="20161213 02:39:37.466"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:37.469">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:39:37.468" status="PASS" endtime="20161213 02:39:37.469"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:37.471">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:39:37.471" status="PASS" endtime="20161213 02:39:37.471"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:37.472">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:37.472" status="PASS" endtime="20161213 02:39:37.472"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:39:37.473" status="PASS" endtime="20161213 02:39:37.473"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:37.481">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:37.480" status="PASS" endtime="20161213 02:39:37.481"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:37.483">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:37.482" status="PASS" endtime="20161213 02:39:37.483"></status>
</kw>
<status starttime="20161213 02:39:37.481" status="PASS" endtime="20161213 02:39:37.483"></status>
</kw>
<status starttime="20161213 02:39:37.479" status="PASS" endtime="20161213 02:39:37.483"></status>
</kw>
<status starttime="20161213 02:39:37.473" status="PASS" endtime="20161213 02:39:37.483"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:37.484">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:37.484" status="PASS" endtime="20161213 02:39:37.484"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:37.485">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:37.485" status="PASS" endtime="20161213 02:39:37.485"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:37.486">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:37.485" status="PASS" endtime="20161213 02:39:37.486"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:37.486">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:37.486" status="PASS" endtime="20161213 02:39:37.486"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:37.948">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:37.948">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:37.487" status="PASS" endtime="20161213 02:39:37.948"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:37.949">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:37.948" status="PASS" endtime="20161213 02:39:37.949"></status>
</kw>
<status starttime="20161213 02:39:37.483" status="PASS" endtime="20161213 02:39:37.949"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:38.248">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:38.248">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:37.950" status="PASS" endtime="20161213 02:39:38.248"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:38.256">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:38.255" status="PASS" endtime="20161213 02:39:38.256"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:38.258">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:38.257" status="PASS" endtime="20161213 02:39:38.258"></status>
</kw>
<status starttime="20161213 02:39:38.256" status="PASS" endtime="20161213 02:39:38.258"></status>
</kw>
<status starttime="20161213 02:39:38.255" status="PASS" endtime="20161213 02:39:38.258"></status>
</kw>
<status starttime="20161213 02:39:38.249" status="PASS" endtime="20161213 02:39:38.258"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:38.258">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:37.469" status="PASS" endtime="20161213 02:39:38.259"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:38.259">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:37.467" status="PASS" endtime="20161213 02:39:38.259"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:38.260">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:38.259" status="PASS" endtime="20161213 02:39:38.260"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:38.261">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:38.261">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:38.261">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:38.260" status="PASS" endtime="20161213 02:39:38.261"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:38.261">${state} = 0</msg>
<status starttime="20161213 02:39:37.464" status="PASS" endtime="20161213 02:39:38.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:39:38.263">0 != 1</msg>
<status starttime="20161213 02:39:38.262" status="FAIL" endtime="20161213 02:39:38.263"></status>
</kw>
<status starttime="20161213 02:39:37.463" status="FAIL" endtime="20161213 02:39:38.263"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:48.265">@{arglist} = [ ]</msg>
<status starttime="20161213 02:39:48.265" status="PASS" endtime="20161213 02:39:48.265"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:48.266">${args} = {u'data': []}</msg>
<status starttime="20161213 02:39:48.265" status="PASS" endtime="20161213 02:39:48.266"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:48.267">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:39:48.266" status="PASS" endtime="20161213 02:39:48.267"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:48.268">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:39:48.268" status="PASS" endtime="20161213 02:39:48.268"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:48.269">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:48.268" status="PASS" endtime="20161213 02:39:48.269"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:39:48.269" status="PASS" endtime="20161213 02:39:48.269"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:48.274">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:48.273" status="PASS" endtime="20161213 02:39:48.274"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:48.275">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:48.274" status="PASS" endtime="20161213 02:39:48.275"></status>
</kw>
<status starttime="20161213 02:39:48.274" status="PASS" endtime="20161213 02:39:48.275"></status>
</kw>
<status starttime="20161213 02:39:48.272" status="PASS" endtime="20161213 02:39:48.275"></status>
</kw>
<status starttime="20161213 02:39:48.269" status="PASS" endtime="20161213 02:39:48.275"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:48.276">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:48.276" status="PASS" endtime="20161213 02:39:48.276"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:48.277">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:48.277" status="PASS" endtime="20161213 02:39:48.277"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:48.277">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:48.277" status="PASS" endtime="20161213 02:39:48.277"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:48.278">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:48.278" status="PASS" endtime="20161213 02:39:48.278"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:48.612">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:48.612">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:48.278" status="PASS" endtime="20161213 02:39:48.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:48.613">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:48.612" status="PASS" endtime="20161213 02:39:48.613"></status>
</kw>
<status starttime="20161213 02:39:48.275" status="PASS" endtime="20161213 02:39:48.613"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:49.021">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:49.021">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:48.613" status="PASS" endtime="20161213 02:39:49.021"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:49.027">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:49.026" status="PASS" endtime="20161213 02:39:49.027"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:49.028">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:49.027" status="PASS" endtime="20161213 02:39:49.028"></status>
</kw>
<status starttime="20161213 02:39:49.027" status="PASS" endtime="20161213 02:39:49.028"></status>
</kw>
<status starttime="20161213 02:39:49.026" status="PASS" endtime="20161213 02:39:49.028"></status>
</kw>
<status starttime="20161213 02:39:49.022" status="PASS" endtime="20161213 02:39:49.028"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:49.028">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:48.267" status="PASS" endtime="20161213 02:39:49.028"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:49.028">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:48.266" status="PASS" endtime="20161213 02:39:49.028"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:49.029">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:49.029" status="PASS" endtime="20161213 02:39:49.029"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:49.030">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:49.030">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:49.030">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:49.029" status="PASS" endtime="20161213 02:39:49.030"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:49.030">${state} = 0</msg>
<status starttime="20161213 02:39:48.264" status="PASS" endtime="20161213 02:39:49.030"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:39:49.031">0 != 1</msg>
<status starttime="20161213 02:39:49.030" status="FAIL" endtime="20161213 02:39:49.031"></status>
</kw>
<status starttime="20161213 02:39:48.263" status="FAIL" endtime="20161213 02:39:49.031"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:59.034">@{arglist} = [ ]</msg>
<status starttime="20161213 02:39:59.033" status="PASS" endtime="20161213 02:39:59.034"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:59.035">${args} = {u'data': []}</msg>
<status starttime="20161213 02:39:59.034" status="PASS" endtime="20161213 02:39:59.035"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:59.037">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:39:59.037" status="PASS" endtime="20161213 02:39:59.037"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:59.039">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:39:59.039" status="PASS" endtime="20161213 02:39:59.039"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:59.040">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:59.040" status="PASS" endtime="20161213 02:39:59.040"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:39:59.040" status="PASS" endtime="20161213 02:39:59.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:59.048">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:59.047" status="PASS" endtime="20161213 02:39:59.048"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:59.049">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:39:59.049" status="PASS" endtime="20161213 02:39:59.049"></status>
</kw>
<status starttime="20161213 02:39:59.048" status="PASS" endtime="20161213 02:39:59.049"></status>
</kw>
<status starttime="20161213 02:39:59.046" status="PASS" endtime="20161213 02:39:59.050"></status>
</kw>
<status starttime="20161213 02:39:59.042" status="PASS" endtime="20161213 02:39:59.050"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:59.050">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:39:59.050" status="PASS" endtime="20161213 02:39:59.051"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:59.051">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:39:59.051" status="PASS" endtime="20161213 02:39:59.051"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:59.052">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:39:59.052" status="PASS" endtime="20161213 02:39:59.052"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:59.053">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:39:59.052" status="PASS" endtime="20161213 02:39:59.053"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:59.391">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:59.391">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:59.053" status="PASS" endtime="20161213 02:39:59.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:59.392">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:59.391" status="PASS" endtime="20161213 02:39:59.392"></status>
</kw>
<status starttime="20161213 02:39:59.050" status="PASS" endtime="20161213 02:39:59.392"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:59.655">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:39:59.655">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:59.393" status="PASS" endtime="20161213 02:39:59.655"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:59.662">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:59.661" status="PASS" endtime="20161213 02:39:59.662"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:59.664">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:39:59.663" status="PASS" endtime="20161213 02:39:59.664"></status>
</kw>
<status starttime="20161213 02:39:59.662" status="PASS" endtime="20161213 02:39:59.664"></status>
</kw>
<status starttime="20161213 02:39:59.661" status="PASS" endtime="20161213 02:39:59.664"></status>
</kw>
<status starttime="20161213 02:39:59.655" status="PASS" endtime="20161213 02:39:59.664"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:59.665">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:59.037" status="PASS" endtime="20161213 02:39:59.665"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:59.665">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:39:59.036" status="PASS" endtime="20161213 02:39:59.665"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:39:59.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:39:59.665" status="PASS" endtime="20161213 02:39:59.666"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:39:59.667">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:39:59.667">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:39:59.667">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:39:59.666" status="PASS" endtime="20161213 02:39:59.667"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:39:59.668">${state} = 0</msg>
<status starttime="20161213 02:39:59.032" status="PASS" endtime="20161213 02:39:59.668"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:39:59.669">0 != 1</msg>
<status starttime="20161213 02:39:59.668" status="FAIL" endtime="20161213 02:39:59.669"></status>
</kw>
<status starttime="20161213 02:39:59.031" status="FAIL" endtime="20161213 02:39:59.669"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:09.672">@{arglist} = [ ]</msg>
<status starttime="20161213 02:40:09.672" status="PASS" endtime="20161213 02:40:09.672"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:09.673">${args} = {u'data': []}</msg>
<status starttime="20161213 02:40:09.673" status="PASS" endtime="20161213 02:40:09.673"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:09.675">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:40:09.675" status="PASS" endtime="20161213 02:40:09.675"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:09.677">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:40:09.677" status="PASS" endtime="20161213 02:40:09.677"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:09.678">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:40:09.678" status="PASS" endtime="20161213 02:40:09.678"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:40:09.679" status="PASS" endtime="20161213 02:40:09.679"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:09.687">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:40:09.685" status="PASS" endtime="20161213 02:40:09.687"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:09.688">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:40:09.688" status="PASS" endtime="20161213 02:40:09.688"></status>
</kw>
<status starttime="20161213 02:40:09.687" status="PASS" endtime="20161213 02:40:09.688"></status>
</kw>
<status starttime="20161213 02:40:09.684" status="PASS" endtime="20161213 02:40:09.688"></status>
</kw>
<status starttime="20161213 02:40:09.679" status="PASS" endtime="20161213 02:40:09.688"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:09.689">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:40:09.689" status="PASS" endtime="20161213 02:40:09.689"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:09.690">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:40:09.690" status="PASS" endtime="20161213 02:40:09.690"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:09.690">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:40:09.690" status="PASS" endtime="20161213 02:40:09.691"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:09.691">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:40:09.691" status="PASS" endtime="20161213 02:40:09.691"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:10.023">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:40:10.023">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:09.691" status="PASS" endtime="20161213 02:40:10.023"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:10.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:40:10.023" status="PASS" endtime="20161213 02:40:10.024"></status>
</kw>
<status starttime="20161213 02:40:09.688" status="PASS" endtime="20161213 02:40:10.024"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:10.297">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:40:10.297">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:10.024" status="PASS" endtime="20161213 02:40:10.297"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:10.305">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:40:10.304" status="PASS" endtime="20161213 02:40:10.305"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:10.306">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:40:10.306" status="PASS" endtime="20161213 02:40:10.307"></status>
</kw>
<status starttime="20161213 02:40:10.305" status="PASS" endtime="20161213 02:40:10.307"></status>
</kw>
<status starttime="20161213 02:40:10.304" status="PASS" endtime="20161213 02:40:10.307"></status>
</kw>
<status starttime="20161213 02:40:10.298" status="PASS" endtime="20161213 02:40:10.307"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:10.307">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:09.676" status="PASS" endtime="20161213 02:40:10.307"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:10.308">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:09.674" status="PASS" endtime="20161213 02:40:10.308"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:10.309">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:40:10.308" status="PASS" endtime="20161213 02:40:10.309"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:10.310">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:40:10.310">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:40:10.310">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:40:10.309" status="PASS" endtime="20161213 02:40:10.310"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:10.310">${state} = 0</msg>
<status starttime="20161213 02:40:09.671" status="PASS" endtime="20161213 02:40:10.310"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:40:10.311">0 != 1</msg>
<status starttime="20161213 02:40:10.311" status="FAIL" endtime="20161213 02:40:10.311"></status>
</kw>
<status starttime="20161213 02:40:09.670" status="FAIL" endtime="20161213 02:40:10.312"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:20.315">@{arglist} = [ ]</msg>
<status starttime="20161213 02:40:20.314" status="PASS" endtime="20161213 02:40:20.315"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:20.316">${args} = {u'data': []}</msg>
<status starttime="20161213 02:40:20.315" status="PASS" endtime="20161213 02:40:20.316"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:20.318">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:40:20.318" status="PASS" endtime="20161213 02:40:20.318"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:20.320">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:40:20.320" status="PASS" endtime="20161213 02:40:20.321"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:20.321">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:40:20.321" status="PASS" endtime="20161213 02:40:20.321"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:40:20.322" status="PASS" endtime="20161213 02:40:20.322"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:20.327">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:40:20.327" status="PASS" endtime="20161213 02:40:20.327"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:20.328">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:40:20.328" status="PASS" endtime="20161213 02:40:20.328"></status>
</kw>
<status starttime="20161213 02:40:20.328" status="PASS" endtime="20161213 02:40:20.328"></status>
</kw>
<status starttime="20161213 02:40:20.326" status="PASS" endtime="20161213 02:40:20.329"></status>
</kw>
<status starttime="20161213 02:40:20.323" status="PASS" endtime="20161213 02:40:20.329"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:20.329">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:40:20.329" status="PASS" endtime="20161213 02:40:20.330"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:20.330">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:40:20.330" status="PASS" endtime="20161213 02:40:20.330"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:20.331">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:40:20.331" status="PASS" endtime="20161213 02:40:20.331"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:20.331">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:40:20.331" status="PASS" endtime="20161213 02:40:20.332"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:20.665">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:40:20.666">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:20.332" status="PASS" endtime="20161213 02:40:20.666"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:20.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:40:20.666" status="PASS" endtime="20161213 02:40:20.666"></status>
</kw>
<status starttime="20161213 02:40:20.329" status="PASS" endtime="20161213 02:40:20.666"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:20.930">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:40:20.930">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:20.667" status="PASS" endtime="20161213 02:40:20.931"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:20.935">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:40:20.934" status="PASS" endtime="20161213 02:40:20.935"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:20.936">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:40:20.935" status="PASS" endtime="20161213 02:40:20.936"></status>
</kw>
<status starttime="20161213 02:40:20.935" status="PASS" endtime="20161213 02:40:20.936"></status>
</kw>
<status starttime="20161213 02:40:20.934" status="PASS" endtime="20161213 02:40:20.936"></status>
</kw>
<status starttime="20161213 02:40:20.931" status="PASS" endtime="20161213 02:40:20.936"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:20.936">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:20.319" status="PASS" endtime="20161213 02:40:20.936"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:20.936">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:20.317" status="PASS" endtime="20161213 02:40:20.936"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:20.937">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:40:20.937" status="PASS" endtime="20161213 02:40:20.937"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:20.937">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:40:20.938">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:40:20.938">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:40:20.937" status="PASS" endtime="20161213 02:40:20.938"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:20.938">${state} = 0</msg>
<status starttime="20161213 02:40:20.313" status="PASS" endtime="20161213 02:40:20.938"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:40:20.939">0 != 1</msg>
<status starttime="20161213 02:40:20.938" status="FAIL" endtime="20161213 02:40:20.939"></status>
</kw>
<status starttime="20161213 02:40:20.312" status="FAIL" endtime="20161213 02:40:20.939"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:30.941">@{arglist} = [ ]</msg>
<status starttime="20161213 02:40:30.941" status="PASS" endtime="20161213 02:40:30.941"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:30.942">${args} = {u'data': []}</msg>
<status starttime="20161213 02:40:30.942" status="PASS" endtime="20161213 02:40:30.942"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:30.945">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:40:30.944" status="PASS" endtime="20161213 02:40:30.945"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:30.947">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:40:30.946" status="PASS" endtime="20161213 02:40:30.947"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:30.948">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:40:30.947" status="PASS" endtime="20161213 02:40:30.948"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:40:30.948" status="PASS" endtime="20161213 02:40:30.949"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:30.956">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:40:30.955" status="PASS" endtime="20161213 02:40:30.956"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:30.957">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:40:30.956" status="PASS" endtime="20161213 02:40:30.957"></status>
</kw>
<status starttime="20161213 02:40:30.956" status="PASS" endtime="20161213 02:40:30.957"></status>
</kw>
<status starttime="20161213 02:40:30.954" status="PASS" endtime="20161213 02:40:30.957"></status>
</kw>
<status starttime="20161213 02:40:30.949" status="PASS" endtime="20161213 02:40:30.957"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:30.958">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:40:30.958" status="PASS" endtime="20161213 02:40:30.958"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:30.959">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:40:30.959" status="PASS" endtime="20161213 02:40:30.959"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:30.959">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:40:30.959" status="PASS" endtime="20161213 02:40:30.959"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:30.960">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:40:30.960" status="PASS" endtime="20161213 02:40:30.960"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:31.290">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:40:31.290">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:30.960" status="PASS" endtime="20161213 02:40:31.290"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:31.291">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:40:31.290" status="PASS" endtime="20161213 02:40:31.291"></status>
</kw>
<status starttime="20161213 02:40:30.957" status="PASS" endtime="20161213 02:40:31.292"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:31.555">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:40:31.555">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:31.292" status="PASS" endtime="20161213 02:40:31.555"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:31.562">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:40:31.562" status="PASS" endtime="20161213 02:40:31.562"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:31.564">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:40:31.563" status="PASS" endtime="20161213 02:40:31.564"></status>
</kw>
<status starttime="20161213 02:40:31.563" status="PASS" endtime="20161213 02:40:31.564"></status>
</kw>
<status starttime="20161213 02:40:31.561" status="PASS" endtime="20161213 02:40:31.564"></status>
</kw>
<status starttime="20161213 02:40:31.556" status="PASS" endtime="20161213 02:40:31.564"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:31.565">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:30.945" status="PASS" endtime="20161213 02:40:31.565"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:31.565">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:30.943" status="PASS" endtime="20161213 02:40:31.565"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:31.566">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:40:31.566" status="PASS" endtime="20161213 02:40:31.566"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:31.567">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:40:31.567">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:40:31.567">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:40:31.567" status="PASS" endtime="20161213 02:40:31.567"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:31.568">${state} = 0</msg>
<status starttime="20161213 02:40:30.940" status="PASS" endtime="20161213 02:40:31.568"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:40:31.569">0 != 1</msg>
<status starttime="20161213 02:40:31.568" status="FAIL" endtime="20161213 02:40:31.569"></status>
</kw>
<status starttime="20161213 02:40:30.939" status="FAIL" endtime="20161213 02:40:31.569"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:41.572">@{arglist} = [ ]</msg>
<status starttime="20161213 02:40:41.571" status="PASS" endtime="20161213 02:40:41.572"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:41.573">${args} = {u'data': []}</msg>
<status starttime="20161213 02:40:41.573" status="PASS" endtime="20161213 02:40:41.573"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:41.575">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:40:41.575" status="PASS" endtime="20161213 02:40:41.576"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:41.578">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:40:41.577" status="PASS" endtime="20161213 02:40:41.578"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:41.579">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:40:41.578" status="PASS" endtime="20161213 02:40:41.579"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:40:41.579" status="PASS" endtime="20161213 02:40:41.579"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:41.586">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:40:41.585" status="PASS" endtime="20161213 02:40:41.586"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:41.587">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:40:41.586" status="PASS" endtime="20161213 02:40:41.587"></status>
</kw>
<status starttime="20161213 02:40:41.586" status="PASS" endtime="20161213 02:40:41.587"></status>
</kw>
<status starttime="20161213 02:40:41.585" status="PASS" endtime="20161213 02:40:41.587"></status>
</kw>
<status starttime="20161213 02:40:41.580" status="PASS" endtime="20161213 02:40:41.587"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:41.588">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:40:41.588" status="PASS" endtime="20161213 02:40:41.588"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:41.589">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:40:41.588" status="PASS" endtime="20161213 02:40:41.589"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:41.589">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:40:41.589" status="PASS" endtime="20161213 02:40:41.589"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:41.590">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:40:41.589" status="PASS" endtime="20161213 02:40:41.590"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:41.919">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:40:41.919">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:41.590" status="PASS" endtime="20161213 02:40:41.919"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:41.920">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:40:41.920" status="PASS" endtime="20161213 02:40:41.920"></status>
</kw>
<status starttime="20161213 02:40:41.587" status="PASS" endtime="20161213 02:40:41.920"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:42.193">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:40:42.193">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:41.920" status="PASS" endtime="20161213 02:40:42.194"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:42.198">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:40:42.197" status="PASS" endtime="20161213 02:40:42.198"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:42.199">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:40:42.199" status="PASS" endtime="20161213 02:40:42.199"></status>
</kw>
<status starttime="20161213 02:40:42.198" status="PASS" endtime="20161213 02:40:42.199"></status>
</kw>
<status starttime="20161213 02:40:42.197" status="PASS" endtime="20161213 02:40:42.199"></status>
</kw>
<status starttime="20161213 02:40:42.194" status="PASS" endtime="20161213 02:40:42.199"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:42.199">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:41.576" status="PASS" endtime="20161213 02:40:42.199"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:42.200">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:41.574" status="PASS" endtime="20161213 02:40:42.200"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:42.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:40:42.200" status="PASS" endtime="20161213 02:40:42.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:42.201">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:40:42.201">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:40:42.201">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:40:42.200" status="PASS" endtime="20161213 02:40:42.201"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:42.201">${state} = 0</msg>
<status starttime="20161213 02:40:41.571" status="PASS" endtime="20161213 02:40:42.201"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:40:42.202">0 != 1</msg>
<status starttime="20161213 02:40:42.201" status="FAIL" endtime="20161213 02:40:42.202"></status>
</kw>
<status starttime="20161213 02:40:41.570" status="FAIL" endtime="20161213 02:40:42.202"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:52.205">@{arglist} = [ ]</msg>
<status starttime="20161213 02:40:52.204" status="PASS" endtime="20161213 02:40:52.205"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:52.206">${args} = {u'data': []}</msg>
<status starttime="20161213 02:40:52.205" status="PASS" endtime="20161213 02:40:52.206"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:52.208">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:40:52.207" status="PASS" endtime="20161213 02:40:52.208"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:52.210">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:40:52.209" status="PASS" endtime="20161213 02:40:52.210"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:52.211">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:40:52.210" status="PASS" endtime="20161213 02:40:52.211"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:40:52.211" status="PASS" endtime="20161213 02:40:52.212"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:52.218">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:40:52.217" status="PASS" endtime="20161213 02:40:52.218"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:52.219">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:40:52.218" status="PASS" endtime="20161213 02:40:52.219"></status>
</kw>
<status starttime="20161213 02:40:52.218" status="PASS" endtime="20161213 02:40:52.219"></status>
</kw>
<status starttime="20161213 02:40:52.216" status="PASS" endtime="20161213 02:40:52.219"></status>
</kw>
<status starttime="20161213 02:40:52.212" status="PASS" endtime="20161213 02:40:52.219"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:52.220">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:40:52.220" status="PASS" endtime="20161213 02:40:52.220"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:52.221">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:40:52.220" status="PASS" endtime="20161213 02:40:52.221"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:52.221">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:40:52.221" status="PASS" endtime="20161213 02:40:52.221"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:52.222">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:40:52.222" status="PASS" endtime="20161213 02:40:52.222"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:52.558">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:40:52.558">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:52.222" status="PASS" endtime="20161213 02:40:52.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:52.559">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:40:52.559" status="PASS" endtime="20161213 02:40:52.559"></status>
</kw>
<status starttime="20161213 02:40:52.219" status="PASS" endtime="20161213 02:40:52.559"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:52.822">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:40:52.822">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:52.560" status="PASS" endtime="20161213 02:40:52.822"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:52.827">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:40:52.826" status="PASS" endtime="20161213 02:40:52.827"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:52.828">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:40:52.828" status="PASS" endtime="20161213 02:40:52.828"></status>
</kw>
<status starttime="20161213 02:40:52.827" status="PASS" endtime="20161213 02:40:52.828"></status>
</kw>
<status starttime="20161213 02:40:52.826" status="PASS" endtime="20161213 02:40:52.828"></status>
</kw>
<status starttime="20161213 02:40:52.822" status="PASS" endtime="20161213 02:40:52.828"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:52.829">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:52.208" status="PASS" endtime="20161213 02:40:52.829"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:52.829">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:40:52.206" status="PASS" endtime="20161213 02:40:52.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:40:52.829">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:40:52.829" status="PASS" endtime="20161213 02:40:52.829"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:40:52.830">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:40:52.830">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:40:52.830">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:40:52.830" status="PASS" endtime="20161213 02:40:52.830"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:40:52.830">${state} = 0</msg>
<status starttime="20161213 02:40:52.203" status="PASS" endtime="20161213 02:40:52.830"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:40:52.831">0 != 1</msg>
<status starttime="20161213 02:40:52.830" status="FAIL" endtime="20161213 02:40:52.831"></status>
</kw>
<status starttime="20161213 02:40:52.202" status="FAIL" endtime="20161213 02:40:52.831"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:02.835">@{arglist} = [ ]</msg>
<status starttime="20161213 02:41:02.834" status="PASS" endtime="20161213 02:41:02.835"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:02.836">${args} = {u'data': []}</msg>
<status starttime="20161213 02:41:02.835" status="PASS" endtime="20161213 02:41:02.836"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:02.838">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:41:02.837" status="PASS" endtime="20161213 02:41:02.838"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:02.840">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:41:02.840" status="PASS" endtime="20161213 02:41:02.840"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:02.841">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:41:02.841" status="PASS" endtime="20161213 02:41:02.841"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:41:02.841" status="PASS" endtime="20161213 02:41:02.842"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:02.849">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:41:02.848" status="PASS" endtime="20161213 02:41:02.849"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:02.850">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:41:02.850" status="PASS" endtime="20161213 02:41:02.850"></status>
</kw>
<status starttime="20161213 02:41:02.849" status="PASS" endtime="20161213 02:41:02.850"></status>
</kw>
<status starttime="20161213 02:41:02.847" status="PASS" endtime="20161213 02:41:02.851"></status>
</kw>
<status starttime="20161213 02:41:02.842" status="PASS" endtime="20161213 02:41:02.851"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:02.851">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:41:02.851" status="PASS" endtime="20161213 02:41:02.852"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:02.852">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:41:02.852" status="PASS" endtime="20161213 02:41:02.852"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:02.853">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:41:02.853" status="PASS" endtime="20161213 02:41:02.853"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:02.853">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:41:02.853" status="PASS" endtime="20161213 02:41:02.854"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:03.484">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:41:03.484">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:02.854" status="PASS" endtime="20161213 02:41:03.484"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:03.485">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:41:03.485" status="PASS" endtime="20161213 02:41:03.486"></status>
</kw>
<status starttime="20161213 02:41:02.851" status="PASS" endtime="20161213 02:41:03.486"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:03.751">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:41:03.751">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:03.486" status="PASS" endtime="20161213 02:41:03.751"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:03.761">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:41:03.760" status="PASS" endtime="20161213 02:41:03.761"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:03.762">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:41:03.762" status="PASS" endtime="20161213 02:41:03.763"></status>
</kw>
<status starttime="20161213 02:41:03.761" status="PASS" endtime="20161213 02:41:03.763"></status>
</kw>
<status starttime="20161213 02:41:03.759" status="PASS" endtime="20161213 02:41:03.763"></status>
</kw>
<status starttime="20161213 02:41:03.751" status="PASS" endtime="20161213 02:41:03.763"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:03.763">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:02.838" status="PASS" endtime="20161213 02:41:03.763"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:03.764">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:02.836" status="PASS" endtime="20161213 02:41:03.764"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:03.765">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:41:03.764" status="PASS" endtime="20161213 02:41:03.765"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:03.765">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:41:03.765">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:41:03.765">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:41:03.765" status="PASS" endtime="20161213 02:41:03.765"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:03.766">${state} = 0</msg>
<status starttime="20161213 02:41:02.833" status="PASS" endtime="20161213 02:41:03.766"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:41:03.766">0 != 1</msg>
<status starttime="20161213 02:41:03.766" status="FAIL" endtime="20161213 02:41:03.766"></status>
</kw>
<status starttime="20161213 02:41:02.832" status="FAIL" endtime="20161213 02:41:03.767"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:13.769">@{arglist} = [ ]</msg>
<status starttime="20161213 02:41:13.769" status="PASS" endtime="20161213 02:41:13.769"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:13.770">${args} = {u'data': []}</msg>
<status starttime="20161213 02:41:13.770" status="PASS" endtime="20161213 02:41:13.770"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:13.772">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:41:13.772" status="PASS" endtime="20161213 02:41:13.772"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:13.774">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:41:13.774" status="PASS" endtime="20161213 02:41:13.775"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:13.776">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:41:13.775" status="PASS" endtime="20161213 02:41:13.776"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:41:13.776" status="PASS" endtime="20161213 02:41:13.777"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:13.785">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:41:13.784" status="PASS" endtime="20161213 02:41:13.785"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:13.786">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:41:13.786" status="PASS" endtime="20161213 02:41:13.786"></status>
</kw>
<status starttime="20161213 02:41:13.785" status="PASS" endtime="20161213 02:41:13.786"></status>
</kw>
<status starttime="20161213 02:41:13.783" status="PASS" endtime="20161213 02:41:13.786"></status>
</kw>
<status starttime="20161213 02:41:13.777" status="PASS" endtime="20161213 02:41:13.786"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:13.787">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:41:13.787" status="PASS" endtime="20161213 02:41:13.787"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:13.788">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:41:13.788" status="PASS" endtime="20161213 02:41:13.788"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:13.789">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:41:13.788" status="PASS" endtime="20161213 02:41:13.789"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:13.789">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:41:13.789" status="PASS" endtime="20161213 02:41:13.789"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:14.336">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:41:14.336">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:13.789" status="PASS" endtime="20161213 02:41:14.337"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:14.338">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:41:14.337" status="PASS" endtime="20161213 02:41:14.338"></status>
</kw>
<status starttime="20161213 02:41:13.786" status="PASS" endtime="20161213 02:41:14.338"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:14.797">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:41:14.798">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:14.338" status="PASS" endtime="20161213 02:41:14.798"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:14.805">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:41:14.804" status="PASS" endtime="20161213 02:41:14.805"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:14.806">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:41:14.806" status="PASS" endtime="20161213 02:41:14.806"></status>
</kw>
<status starttime="20161213 02:41:14.805" status="PASS" endtime="20161213 02:41:14.806"></status>
</kw>
<status starttime="20161213 02:41:14.804" status="PASS" endtime="20161213 02:41:14.806"></status>
</kw>
<status starttime="20161213 02:41:14.798" status="PASS" endtime="20161213 02:41:14.806"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:14.806">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:13.773" status="PASS" endtime="20161213 02:41:14.807"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:14.807">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:13.771" status="PASS" endtime="20161213 02:41:14.807"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:14.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:41:14.807" status="PASS" endtime="20161213 02:41:14.807"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:14.808">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:41:14.808">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:41:14.808">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:41:14.808" status="PASS" endtime="20161213 02:41:14.808"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:14.808">${state} = 0</msg>
<status starttime="20161213 02:41:13.768" status="PASS" endtime="20161213 02:41:14.808"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:41:14.809">0 != 1</msg>
<status starttime="20161213 02:41:14.809" status="FAIL" endtime="20161213 02:41:14.809"></status>
</kw>
<status starttime="20161213 02:41:13.767" status="FAIL" endtime="20161213 02:41:14.809"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:24.813">@{arglist} = [ ]</msg>
<status starttime="20161213 02:41:24.812" status="PASS" endtime="20161213 02:41:24.813"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:24.814">${args} = {u'data': []}</msg>
<status starttime="20161213 02:41:24.813" status="PASS" endtime="20161213 02:41:24.814"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:24.816">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:41:24.816" status="PASS" endtime="20161213 02:41:24.816"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:24.818">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:41:24.818" status="PASS" endtime="20161213 02:41:24.818"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:24.819">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:41:24.819" status="PASS" endtime="20161213 02:41:24.819"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:41:24.820" status="PASS" endtime="20161213 02:41:24.820"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:24.827">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:41:24.826" status="PASS" endtime="20161213 02:41:24.827"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:24.828">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:41:24.827" status="PASS" endtime="20161213 02:41:24.828"></status>
</kw>
<status starttime="20161213 02:41:24.827" status="PASS" endtime="20161213 02:41:24.828"></status>
</kw>
<status starttime="20161213 02:41:24.826" status="PASS" endtime="20161213 02:41:24.828"></status>
</kw>
<status starttime="20161213 02:41:24.821" status="PASS" endtime="20161213 02:41:24.828"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:24.829">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:41:24.828" status="PASS" endtime="20161213 02:41:24.829"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:24.830">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:41:24.829" status="PASS" endtime="20161213 02:41:24.830"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:24.830">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:41:24.830" status="PASS" endtime="20161213 02:41:24.830"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:24.831">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:41:24.830" status="PASS" endtime="20161213 02:41:24.831"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:25.162">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:41:25.162">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:24.831" status="PASS" endtime="20161213 02:41:25.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:25.163">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:41:25.163" status="PASS" endtime="20161213 02:41:25.163"></status>
</kw>
<status starttime="20161213 02:41:24.828" status="PASS" endtime="20161213 02:41:25.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:25.432">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:41:25.432">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:25.164" status="PASS" endtime="20161213 02:41:25.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:25.436">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:41:25.436" status="PASS" endtime="20161213 02:41:25.437"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:25.437">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:41:25.437" status="PASS" endtime="20161213 02:41:25.437"></status>
</kw>
<status starttime="20161213 02:41:25.437" status="PASS" endtime="20161213 02:41:25.438"></status>
</kw>
<status starttime="20161213 02:41:25.436" status="PASS" endtime="20161213 02:41:25.438"></status>
</kw>
<status starttime="20161213 02:41:25.432" status="PASS" endtime="20161213 02:41:25.438"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:25.438">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:24.817" status="PASS" endtime="20161213 02:41:25.438"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:25.438">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:24.815" status="PASS" endtime="20161213 02:41:25.438"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:25.439">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:41:25.438" status="PASS" endtime="20161213 02:41:25.439"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:25.439">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:41:25.439">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:41:25.439">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:41:25.439" status="PASS" endtime="20161213 02:41:25.439"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:25.440">${state} = 0</msg>
<status starttime="20161213 02:41:24.811" status="PASS" endtime="20161213 02:41:25.440"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:41:25.440">0 != 1</msg>
<status starttime="20161213 02:41:25.440" status="FAIL" endtime="20161213 02:41:25.440"></status>
</kw>
<status starttime="20161213 02:41:24.810" status="FAIL" endtime="20161213 02:41:25.440"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:35.444">@{arglist} = [ ]</msg>
<status starttime="20161213 02:41:35.443" status="PASS" endtime="20161213 02:41:35.444"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:35.445">${args} = {u'data': []}</msg>
<status starttime="20161213 02:41:35.444" status="PASS" endtime="20161213 02:41:35.445"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:35.447">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:41:35.446" status="PASS" endtime="20161213 02:41:35.447"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:35.449">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:41:35.448" status="PASS" endtime="20161213 02:41:35.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:35.449">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:41:35.449" status="PASS" endtime="20161213 02:41:35.449"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:41:35.450" status="PASS" endtime="20161213 02:41:35.450"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:35.458">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:41:35.455" status="PASS" endtime="20161213 02:41:35.458"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:35.459">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:41:35.458" status="PASS" endtime="20161213 02:41:35.459"></status>
</kw>
<status starttime="20161213 02:41:35.458" status="PASS" endtime="20161213 02:41:35.459"></status>
</kw>
<status starttime="20161213 02:41:35.455" status="PASS" endtime="20161213 02:41:35.459"></status>
</kw>
<status starttime="20161213 02:41:35.450" status="PASS" endtime="20161213 02:41:35.459"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:35.460">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:41:35.459" status="PASS" endtime="20161213 02:41:35.460"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:35.461">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:41:35.460" status="PASS" endtime="20161213 02:41:35.461"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:35.461">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:41:35.461" status="PASS" endtime="20161213 02:41:35.461"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:35.462">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:41:35.461" status="PASS" endtime="20161213 02:41:35.462"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:35.792">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:41:35.793">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:35.462" status="PASS" endtime="20161213 02:41:35.793"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:35.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:41:35.793" status="PASS" endtime="20161213 02:41:35.793"></status>
</kw>
<status starttime="20161213 02:41:35.459" status="PASS" endtime="20161213 02:41:35.793"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:36.092">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:41:36.093">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:35.794" status="PASS" endtime="20161213 02:41:36.093"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:36.097">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:41:36.096" status="PASS" endtime="20161213 02:41:36.097"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:36.098">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:41:36.098" status="PASS" endtime="20161213 02:41:36.098"></status>
</kw>
<status starttime="20161213 02:41:36.097" status="PASS" endtime="20161213 02:41:36.098"></status>
</kw>
<status starttime="20161213 02:41:36.096" status="PASS" endtime="20161213 02:41:36.098"></status>
</kw>
<status starttime="20161213 02:41:36.093" status="PASS" endtime="20161213 02:41:36.098"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:36.098">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:35.447" status="PASS" endtime="20161213 02:41:36.098"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:36.098">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:35.445" status="PASS" endtime="20161213 02:41:36.099"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:36.099">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:41:36.099" status="PASS" endtime="20161213 02:41:36.099"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:36.100">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:41:36.100">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:41:36.100">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:41:36.099" status="PASS" endtime="20161213 02:41:36.100"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:36.100">${state} = 0</msg>
<status starttime="20161213 02:41:35.442" status="PASS" endtime="20161213 02:41:36.100"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:41:36.101">0 != 1</msg>
<status starttime="20161213 02:41:36.100" status="FAIL" endtime="20161213 02:41:36.101"></status>
</kw>
<status starttime="20161213 02:41:35.441" status="FAIL" endtime="20161213 02:41:36.101"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:46.104">@{arglist} = [ ]</msg>
<status starttime="20161213 02:41:46.103" status="PASS" endtime="20161213 02:41:46.104"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:46.138">${args} = {u'data': []}</msg>
<status starttime="20161213 02:41:46.104" status="PASS" endtime="20161213 02:41:46.138"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:46.140">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:41:46.140" status="PASS" endtime="20161213 02:41:46.140"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:46.142">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:41:46.141" status="PASS" endtime="20161213 02:41:46.142"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:46.143">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:41:46.142" status="PASS" endtime="20161213 02:41:46.143"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:41:46.143" status="PASS" endtime="20161213 02:41:46.143"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:46.150">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:41:46.149" status="PASS" endtime="20161213 02:41:46.150"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:46.151">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:41:46.151" status="PASS" endtime="20161213 02:41:46.151"></status>
</kw>
<status starttime="20161213 02:41:46.150" status="PASS" endtime="20161213 02:41:46.151"></status>
</kw>
<status starttime="20161213 02:41:46.148" status="PASS" endtime="20161213 02:41:46.151"></status>
</kw>
<status starttime="20161213 02:41:46.144" status="PASS" endtime="20161213 02:41:46.152"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:46.152">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:41:46.152" status="PASS" endtime="20161213 02:41:46.153"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:46.153">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:41:46.153" status="PASS" endtime="20161213 02:41:46.153"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:46.154">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:41:46.153" status="PASS" endtime="20161213 02:41:46.154"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:46.154">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:41:46.154" status="PASS" endtime="20161213 02:41:46.155"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:46.506">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:41:46.506">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:46.155" status="PASS" endtime="20161213 02:41:46.506"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:46.507">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:41:46.507" status="PASS" endtime="20161213 02:41:46.508"></status>
</kw>
<status starttime="20161213 02:41:46.152" status="PASS" endtime="20161213 02:41:46.508"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:46.773">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:41:46.773">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:46.508" status="PASS" endtime="20161213 02:41:46.773"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:46.781">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:41:46.780" status="PASS" endtime="20161213 02:41:46.781"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:46.782">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:41:46.782" status="PASS" endtime="20161213 02:41:46.782"></status>
</kw>
<status starttime="20161213 02:41:46.781" status="PASS" endtime="20161213 02:41:46.783"></status>
</kw>
<status starttime="20161213 02:41:46.779" status="PASS" endtime="20161213 02:41:46.783"></status>
</kw>
<status starttime="20161213 02:41:46.774" status="PASS" endtime="20161213 02:41:46.783"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:46.783">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:46.140" status="PASS" endtime="20161213 02:41:46.783"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:46.784">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:46.139" status="PASS" endtime="20161213 02:41:46.784"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:46.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:41:46.784" status="PASS" endtime="20161213 02:41:46.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:46.785">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:41:46.785">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:41:46.786">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:41:46.785" status="PASS" endtime="20161213 02:41:46.786"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:46.786">${state} = 0</msg>
<status starttime="20161213 02:41:46.102" status="PASS" endtime="20161213 02:41:46.786"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:41:46.786">0 != 1</msg>
<status starttime="20161213 02:41:46.786" status="FAIL" endtime="20161213 02:41:46.787"></status>
</kw>
<status starttime="20161213 02:41:46.102" status="FAIL" endtime="20161213 02:41:46.787"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:56.790">@{arglist} = [ ]</msg>
<status starttime="20161213 02:41:56.790" status="PASS" endtime="20161213 02:41:56.790"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:56.791">${args} = {u'data': []}</msg>
<status starttime="20161213 02:41:56.790" status="PASS" endtime="20161213 02:41:56.791"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:56.793">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:41:56.793" status="PASS" endtime="20161213 02:41:56.793"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:56.795">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:41:56.795" status="PASS" endtime="20161213 02:41:56.796"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:56.796">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:41:56.796" status="PASS" endtime="20161213 02:41:56.797"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:41:56.797" status="PASS" endtime="20161213 02:41:56.797"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:56.805">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:41:56.804" status="PASS" endtime="20161213 02:41:56.805"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:56.806">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:41:56.806" status="PASS" endtime="20161213 02:41:56.806"></status>
</kw>
<status starttime="20161213 02:41:56.805" status="PASS" endtime="20161213 02:41:56.806"></status>
</kw>
<status starttime="20161213 02:41:56.803" status="PASS" endtime="20161213 02:41:56.806"></status>
</kw>
<status starttime="20161213 02:41:56.798" status="PASS" endtime="20161213 02:41:56.806"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:56.807">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:41:56.807" status="PASS" endtime="20161213 02:41:56.808"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:56.808">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:41:56.808" status="PASS" endtime="20161213 02:41:56.808"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:56.809">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:41:56.808" status="PASS" endtime="20161213 02:41:56.809"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:56.809">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:41:56.809" status="PASS" endtime="20161213 02:41:56.809"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:57.150">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:41:57.151">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:56.810" status="PASS" endtime="20161213 02:41:57.151"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:57.151">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:41:57.151" status="PASS" endtime="20161213 02:41:57.151"></status>
</kw>
<status starttime="20161213 02:41:56.807" status="PASS" endtime="20161213 02:41:57.152"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:57.413">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:41:57.414">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:57.152" status="PASS" endtime="20161213 02:41:57.414"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:57.421">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:41:57.420" status="PASS" endtime="20161213 02:41:57.421"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:57.422">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:41:57.422" status="PASS" endtime="20161213 02:41:57.423"></status>
</kw>
<status starttime="20161213 02:41:57.421" status="PASS" endtime="20161213 02:41:57.423"></status>
</kw>
<status starttime="20161213 02:41:57.420" status="PASS" endtime="20161213 02:41:57.423"></status>
</kw>
<status starttime="20161213 02:41:57.414" status="PASS" endtime="20161213 02:41:57.423"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:57.423">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:56.793" status="PASS" endtime="20161213 02:41:57.424"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:57.424">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:41:56.791" status="PASS" endtime="20161213 02:41:57.424"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:41:57.425">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:41:57.425" status="PASS" endtime="20161213 02:41:57.425"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:41:57.426">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:41:57.426">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:41:57.426">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:41:57.426" status="PASS" endtime="20161213 02:41:57.426"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:41:57.426">${state} = 0</msg>
<status starttime="20161213 02:41:56.788" status="PASS" endtime="20161213 02:41:57.426"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:41:57.427">0 != 1</msg>
<status starttime="20161213 02:41:57.426" status="FAIL" endtime="20161213 02:41:57.427"></status>
</kw>
<status starttime="20161213 02:41:56.787" status="FAIL" endtime="20161213 02:41:57.427"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:07.430">@{arglist} = [ ]</msg>
<status starttime="20161213 02:42:07.430" status="PASS" endtime="20161213 02:42:07.430"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:07.431">${args} = {u'data': []}</msg>
<status starttime="20161213 02:42:07.431" status="PASS" endtime="20161213 02:42:07.431"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:07.434">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:42:07.433" status="PASS" endtime="20161213 02:42:07.434"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:07.436">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:42:07.435" status="PASS" endtime="20161213 02:42:07.436"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:07.437">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:07.436" status="PASS" endtime="20161213 02:42:07.437"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:42:07.437" status="PASS" endtime="20161213 02:42:07.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:07.446">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:42:07.445" status="PASS" endtime="20161213 02:42:07.446"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:07.447">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:42:07.447" status="PASS" endtime="20161213 02:42:07.447"></status>
</kw>
<status starttime="20161213 02:42:07.446" status="PASS" endtime="20161213 02:42:07.447"></status>
</kw>
<status starttime="20161213 02:42:07.444" status="PASS" endtime="20161213 02:42:07.447"></status>
</kw>
<status starttime="20161213 02:42:07.438" status="PASS" endtime="20161213 02:42:07.447"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:07.448">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:42:07.448" status="PASS" endtime="20161213 02:42:07.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:07.450">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:07.450" status="PASS" endtime="20161213 02:42:07.450"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:07.451">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:42:07.451" status="PASS" endtime="20161213 02:42:07.451"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:07.452">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:42:07.452" status="PASS" endtime="20161213 02:42:07.452"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:07.787">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:07.788">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:07.453" status="PASS" endtime="20161213 02:42:07.788"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:07.789">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:07.788" status="PASS" endtime="20161213 02:42:07.789"></status>
</kw>
<status starttime="20161213 02:42:07.447" status="PASS" endtime="20161213 02:42:07.789"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:08.214">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:08.214">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:07.789" status="PASS" endtime="20161213 02:42:08.214"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:08.222">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:42:08.221" status="PASS" endtime="20161213 02:42:08.222"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:08.223">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:42:08.223" status="PASS" endtime="20161213 02:42:08.223"></status>
</kw>
<status starttime="20161213 02:42:08.222" status="PASS" endtime="20161213 02:42:08.223"></status>
</kw>
<status starttime="20161213 02:42:08.220" status="PASS" endtime="20161213 02:42:08.224"></status>
</kw>
<status starttime="20161213 02:42:08.214" status="PASS" endtime="20161213 02:42:08.224"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:08.224">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:07.434" status="PASS" endtime="20161213 02:42:08.224"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:08.224">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:07.432" status="PASS" endtime="20161213 02:42:08.225"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:08.226">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:08.225" status="PASS" endtime="20161213 02:42:08.226"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:08.226">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:42:08.227">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:42:08.227">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:42:08.226" status="PASS" endtime="20161213 02:42:08.227"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:08.227">${state} = 0</msg>
<status starttime="20161213 02:42:07.429" status="PASS" endtime="20161213 02:42:08.227"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:42:08.228">0 != 1</msg>
<status starttime="20161213 02:42:08.227" status="FAIL" endtime="20161213 02:42:08.228"></status>
</kw>
<status starttime="20161213 02:42:07.428" status="FAIL" endtime="20161213 02:42:08.228"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:18.231">@{arglist} = [ ]</msg>
<status starttime="20161213 02:42:18.231" status="PASS" endtime="20161213 02:42:18.231"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:18.232">${args} = {u'data': []}</msg>
<status starttime="20161213 02:42:18.231" status="PASS" endtime="20161213 02:42:18.232"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:18.234">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:42:18.234" status="PASS" endtime="20161213 02:42:18.234"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:18.236">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:42:18.236" status="PASS" endtime="20161213 02:42:18.236"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:18.237">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:18.237" status="PASS" endtime="20161213 02:42:18.237"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:42:18.238" status="PASS" endtime="20161213 02:42:18.238"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:18.246">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:42:18.245" status="PASS" endtime="20161213 02:42:18.246"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:18.247">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:42:18.247" status="PASS" endtime="20161213 02:42:18.247"></status>
</kw>
<status starttime="20161213 02:42:18.246" status="PASS" endtime="20161213 02:42:18.247"></status>
</kw>
<status starttime="20161213 02:42:18.244" status="PASS" endtime="20161213 02:42:18.247"></status>
</kw>
<status starttime="20161213 02:42:18.238" status="PASS" endtime="20161213 02:42:18.248"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:18.248">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:42:18.248" status="PASS" endtime="20161213 02:42:18.249"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:18.249">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:18.249" status="PASS" endtime="20161213 02:42:18.249"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:18.250">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:42:18.249" status="PASS" endtime="20161213 02:42:18.250"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:18.250">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:42:18.250" status="PASS" endtime="20161213 02:42:18.250"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:18.586">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:18.586">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:18.251" status="PASS" endtime="20161213 02:42:18.587"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:18.587">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:18.587" status="PASS" endtime="20161213 02:42:18.587"></status>
</kw>
<status starttime="20161213 02:42:18.248" status="PASS" endtime="20161213 02:42:18.587"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:18.850">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:18.851">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:18.588" status="PASS" endtime="20161213 02:42:18.851"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:18.855">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:42:18.855" status="PASS" endtime="20161213 02:42:18.855"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:18.856">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:42:18.856" status="PASS" endtime="20161213 02:42:18.856"></status>
</kw>
<status starttime="20161213 02:42:18.855" status="PASS" endtime="20161213 02:42:18.856"></status>
</kw>
<status starttime="20161213 02:42:18.854" status="PASS" endtime="20161213 02:42:18.856"></status>
</kw>
<status starttime="20161213 02:42:18.851" status="PASS" endtime="20161213 02:42:18.856"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:18.857">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:18.234" status="PASS" endtime="20161213 02:42:18.857"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:18.857">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:18.232" status="PASS" endtime="20161213 02:42:18.857"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:18.857">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:18.857" status="PASS" endtime="20161213 02:42:18.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:18.858">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:42:18.858">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:42:18.858">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:42:18.858" status="PASS" endtime="20161213 02:42:18.858"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:18.858">${state} = 0</msg>
<status starttime="20161213 02:42:18.229" status="PASS" endtime="20161213 02:42:18.858"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:42:18.859">0 != 1</msg>
<status starttime="20161213 02:42:18.859" status="FAIL" endtime="20161213 02:42:18.859"></status>
</kw>
<status starttime="20161213 02:42:18.228" status="FAIL" endtime="20161213 02:42:18.859"></status>
</kw>
<kw library="utils" name="Is Power On">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:28.862">@{arglist} = [ ]</msg>
<status starttime="20161213 02:42:28.861" status="PASS" endtime="20161213 02:42:28.862"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:28.863">${args} = {u'data': []}</msg>
<status starttime="20161213 02:42:28.862" status="PASS" endtime="20161213 02:42:28.863"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:28.865">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161213 02:42:28.864" status="PASS" endtime="20161213 02:42:28.865"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:28.867">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161213 02:42:28.867" status="PASS" endtime="20161213 02:42:28.867"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:28.868">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:28.867" status="PASS" endtime="20161213 02:42:28.868"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:42:28.868" status="PASS" endtime="20161213 02:42:28.868"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:28.875">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:42:28.874" status="PASS" endtime="20161213 02:42:28.875"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:28.876">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:42:28.876" status="PASS" endtime="20161213 02:42:28.877"></status>
</kw>
<status starttime="20161213 02:42:28.875" status="PASS" endtime="20161213 02:42:28.877"></status>
</kw>
<status starttime="20161213 02:42:28.873" status="PASS" endtime="20161213 02:42:28.877"></status>
</kw>
<status starttime="20161213 02:42:28.869" status="PASS" endtime="20161213 02:42:28.877"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:28.878">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:42:28.877" status="PASS" endtime="20161213 02:42:28.878"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:28.879">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:28.878" status="PASS" endtime="20161213 02:42:28.879"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:28.879">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:42:28.879" status="PASS" endtime="20161213 02:42:28.879"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:28.880">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:42:28.879" status="PASS" endtime="20161213 02:42:28.880"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.210">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:29.210">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:28.880" status="PASS" endtime="20161213 02:42:29.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:29.210">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:29.210" status="PASS" endtime="20161213 02:42:29.211"></status>
</kw>
<status starttime="20161213 02:42:28.877" status="PASS" endtime="20161213 02:42:29.211"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.617">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:29.617">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:29.211" status="PASS" endtime="20161213 02:42:29.617"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.622">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:42:29.621" status="PASS" endtime="20161213 02:42:29.622"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:29.622">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:42:29.622" status="PASS" endtime="20161213 02:42:29.623"></status>
</kw>
<status starttime="20161213 02:42:29.622" status="PASS" endtime="20161213 02:42:29.623"></status>
</kw>
<status starttime="20161213 02:42:29.621" status="PASS" endtime="20161213 02:42:29.623"></status>
</kw>
<status starttime="20161213 02:42:29.617" status="PASS" endtime="20161213 02:42:29.623"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:29.623">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:28.865" status="PASS" endtime="20161213 02:42:29.623"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:29.623">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:28.863" status="PASS" endtime="20161213 02:42:29.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:29.624">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:29.624" status="PASS" endtime="20161213 02:42:29.624"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.625">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:42:29.625">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:42:29.625">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:42:29.624" status="PASS" endtime="20161213 02:42:29.625"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:29.625">${state} = 0</msg>
<status starttime="20161213 02:42:28.861" status="PASS" endtime="20161213 02:42:29.626"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:42:29.627">0 != 1</msg>
<status starttime="20161213 02:42:29.626" status="FAIL" endtime="20161213 02:42:29.627"></status>
</kw>
<status starttime="20161213 02:42:28.860" status="FAIL" endtime="20161213 02:42:29.627"></status>
</kw>
<msg level="FAIL" timestamp="20161213 02:42:29.627">Keyword 'Is Power On' failed after retrying for 3 minutes. The last error was: 0 != 1</msg>
<status starttime="20161213 02:39:24.992" status="FAIL" endtime="20161213 02:42:29.627"></status>
</kw>
<status starttime="20161213 02:39:24.354" status="FAIL" endtime="20161213 02:42:29.628"></status>
</kw>
<status starttime="20161213 02:39:21.743" status="FAIL" endtime="20161213 02:42:29.628"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Log FFDC if failed and collect SOL</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="FFDC">
<doc>Main entry point to gather logs on Test case failure</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.637">${cur_time} = 2016-12-13 02:42:29:636313</msg>
<status starttime="20161213 02:42:29.636" status="PASS" endtime="20161213 02:42:29.637"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.637">${cur_time} = 20161213024229636313</msg>
<status starttime="20161213 02:42:29.637" status="PASS" endtime="20161213 02:42:29.637"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:29.637">${cur_time} = 20161213024229636313</msg>
<status starttime="20161213 02:42:29.636" status="PASS" endtime="20161213 02:42:29.637"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:29.641">${FFDC_TIME} = 20161213024229636313</msg>
<status starttime="20161213 02:42:29.638" status="PASS" endtime="20161213 02:42:29.641"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${\n}FFDC Collection Started \t: ${cur_time}</arg>
</arguments>
<status starttime="20161213 02:42:29.641" status="PASS" endtime="20161213 02:42:29.641"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<assign>
<var>${suitename}</var>
<var>${testname}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.642">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20161213 02:42:29.642" status="PASS" endtime="20161213 02:42:29.642"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.643">${suite_name} = 20161213024229636313_TestsTestBasicPoweron</msg>
<status starttime="20161213 02:42:29.643" status="PASS" endtime="20161213 02:42:29.643"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.644">${test_name} = powerontest</msg>
<status starttime="20161213 02:42:29.643" status="PASS" endtime="20161213 02:42:29.644"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.644">${test_name} = 20161213024229636313_powerontest</msg>
<status starttime="20161213 02:42:29.644" status="PASS" endtime="20161213 02:42:29.644"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:29.644">${suitename} = 20161213024229636313_TestsTestBasicPoweron</msg>
<msg level="INFO" timestamp="20161213 02:42:29.644">${testname} = 20161213024229636313_powerontest</msg>
<status starttime="20161213 02:42:29.641" status="PASS" endtime="20161213 02:42:29.644"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${FFDC_LOG_PATH}${suitename}${/}${testname}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:29.648">${FFDC_DIR_PATH} = /tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest</msg>
<status starttime="20161213 02:42:29.645" status="PASS" endtime="20161213 02:42:29.648"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_DIR_PATH}${/}</arg>
<arg>${FFDC_TIME}_</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.649">${prefix} = /tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_</msg>
<status starttime="20161213 02:42:29.648" status="PASS" endtime="20161213 02:42:29.649"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_PREFIX}</arg>
<arg>${prefix}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:29.652">${LOG_PREFIX} = /tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_</msg>
<status starttime="20161213 02:42:29.649" status="PASS" endtime="20161213 02:42:29.652"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Directory">
<doc>Creates directory and report file</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.653">Created directory '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.652" status="PASS" endtime="20161213 02:42:29.653"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Report File">
<doc>Create a generic file name for ffdc</doc>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
<arg>${FFDC_DIR_PATH}${/}${FFDC_TIME}_BMC_general.txt</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:29.657">${FFDC_FILE_PATH} = /tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt</msg>
<status starttime="20161213 02:42:29.654" status="PASS" endtime="20161213 02:42:29.657"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.658">Created file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.657" status="PASS" endtime="20161213 02:42:29.658"></status>
</kw>
<status starttime="20161213 02:42:29.653" status="PASS" endtime="20161213 02:42:29.658"></status>
</kw>
<status starttime="20161213 02:42:29.652" status="PASS" endtime="20161213 02:42:29.658"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.659">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.659" status="PASS" endtime="20161213 02:42:29.659"></status>
</kw>
<status starttime="20161213 02:42:29.658" status="PASS" endtime="20161213 02:42:29.659"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.660">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.660" status="PASS" endtime="20161213 02:42:29.661"></status>
</kw>
<status starttime="20161213 02:42:29.660" status="PASS" endtime="20161213 02:42:29.661"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.662">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.661" status="PASS" endtime="20161213 02:42:29.662"></status>
</kw>
<status starttime="20161213 02:42:29.661" status="PASS" endtime="20161213 02:42:29.662"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.663">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.663" status="PASS" endtime="20161213 02:42:29.663"></status>
</kw>
<status starttime="20161213 02:42:29.662" status="PASS" endtime="20161213 02:42:29.663"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.664">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.664" status="PASS" endtime="20161213 02:42:29.665"></status>
</kw>
<status starttime="20161213 02:42:29.664" status="PASS" endtime="20161213 02:42:29.665"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.666">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.665" status="PASS" endtime="20161213 02:42:29.666"></status>
</kw>
<status starttime="20161213 02:42:29.665" status="PASS" endtime="20161213 02:42:29.666"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.667">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.667" status="PASS" endtime="20161213 02:42:29.667"></status>
</kw>
<status starttime="20161213 02:42:29.666" status="PASS" endtime="20161213 02:42:29.667"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.668">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.668" status="PASS" endtime="20161213 02:42:29.668"></status>
</kw>
<status starttime="20161213 02:42:29.667" status="PASS" endtime="20161213 02:42:29.668"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.669">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.669" status="PASS" endtime="20161213 02:42:29.670"></status>
</kw>
<status starttime="20161213 02:42:29.669" status="PASS" endtime="20161213 02:42:29.670"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.671">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.671" status="PASS" endtime="20161213 02:42:29.671"></status>
</kw>
<status starttime="20161213 02:42:29.670" status="PASS" endtime="20161213 02:42:29.671"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.672">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.672" status="PASS" endtime="20161213 02:42:29.672"></status>
</kw>
<status starttime="20161213 02:42:29.671" status="PASS" endtime="20161213 02:42:29.672"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.673">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.673" status="PASS" endtime="20161213 02:42:29.673"></status>
</kw>
<status starttime="20161213 02:42:29.672" status="PASS" endtime="20161213 02:42:29.674"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.675">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.674" status="PASS" endtime="20161213 02:42:29.675"></status>
</kw>
<status starttime="20161213 02:42:29.674" status="PASS" endtime="20161213 02:42:29.675"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${OPENBMC_MODEL.replace('./data/','').replace('.py','')}${\n}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.676">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.676" status="PASS" endtime="20161213 02:42:29.677"></status>
</kw>
<status starttime="20161213 02:42:29.675" status="PASS" endtime="20161213 02:42:29.677"></status>
</kw>
<status starttime="20161213 02:42:29.670" status="PASS" endtime="20161213 02:42:29.677"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.678">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.677" status="PASS" endtime="20161213 02:42:29.678"></status>
</kw>
<status starttime="20161213 02:42:29.677" status="PASS" endtime="20161213 02:42:29.678"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.678">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status starttime="20161213 02:42:29.678" status="PASS" endtime="20161213 02:42:29.678"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.680">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.679" status="PASS" endtime="20161213 02:42:29.680"></status>
</kw>
<status starttime="20161213 02:42:29.679" status="PASS" endtime="20161213 02:42:29.680"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.681">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.681" status="PASS" endtime="20161213 02:42:29.681"></status>
</kw>
<status starttime="20161213 02:42:29.680" status="PASS" endtime="20161213 02:42:29.681"></status>
</kw>
<status starttime="20161213 02:42:29.679" status="PASS" endtime="20161213 02:42:29.681"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.682">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.682" status="PASS" endtime="20161213 02:42:29.682"></status>
</kw>
<status starttime="20161213 02:42:29.681" status="PASS" endtime="20161213 02:42:29.682"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.683">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.683" status="PASS" endtime="20161213 02:42:29.683"></status>
</kw>
<status starttime="20161213 02:42:29.682" status="PASS" endtime="20161213 02:42:29.683"></status>
</kw>
<status starttime="20161213 02:42:29.681" status="PASS" endtime="20161213 02:42:29.684"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.685">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.684" status="PASS" endtime="20161213 02:42:29.685"></status>
</kw>
<status starttime="20161213 02:42:29.684" status="PASS" endtime="20161213 02:42:29.685"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.686">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.686" status="PASS" endtime="20161213 02:42:29.686"></status>
</kw>
<status starttime="20161213 02:42:29.685" status="PASS" endtime="20161213 02:42:29.686"></status>
</kw>
<status starttime="20161213 02:42:29.684" status="PASS" endtime="20161213 02:42:29.686"></status>
</kw>
<status starttime="20161213 02:42:29.679" status="PASS" endtime="20161213 02:42:29.686"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:29.687">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:29.687" status="PASS" endtime="20161213 02:42:29.687"></status>
</kw>
<status starttime="20161213 02:42:29.686" status="PASS" endtime="20161213 02:42:29.687"></status>
</kw>
<status starttime="20161213 02:42:29.658" status="PASS" endtime="20161213 02:42:29.687"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.688">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20161213 02:42:29.688" status="PASS" endtime="20161213 02:42:29.688"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.689">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') ]</msg>
<status starttime="20161213 02:42:29.689" status="PASS" endtime="20161213 02:42:29.689"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:29.694">Returning from the enclosing user keyword.</msg>
<status starttime="20161213 02:42:29.691" status="PASS" endtime="20161213 02:42:29.694"></status>
</kw>
<status starttime="20161213 02:42:29.691" status="PASS" endtime="20161213 02:42:29.694"></status>
</kw>
<status starttime="20161213 02:42:29.690" status="PASS" endtime="20161213 02:42:29.695"></status>
</kw>
<status starttime="20161213 02:42:29.690" status="PASS" endtime="20161213 02:42:29.695"></status>
</kw>
<status starttime="20161213 02:42:29.690" status="PASS" endtime="20161213 02:42:29.695"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:42:29.697">Dictionary does not contain key 'host'.</msg>
<status starttime="20161213 02:42:29.697" status="FAIL" endtime="20161213 02:42:29.697"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:29.697">${has_host} = False</msg>
<status starttime="20161213 02:42:29.697" status="PASS" endtime="20161213 02:42:29.697"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161213 02:42:29.701" status="PASS" endtime="20161213 02:42:29.701"></status>
</kw>
<status starttime="20161213 02:42:29.698" status="PASS" endtime="20161213 02:42:29.701"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.705">${port_num} = 22</msg>
<status starttime="20161213 02:42:29.705" status="PASS" endtime="20161213 02:42:29.705"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.706">${SSH_PORT} = 22</msg>
<status starttime="20161213 02:42:29.706" status="PASS" endtime="20161213 02:42:29.706"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:29.706">${https_num} = 443</msg>
<status starttime="20161213 02:42:29.706" status="PASS" endtime="20161213 02:42:29.706"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:29.707">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161213 02:42:29.707" status="PASS" endtime="20161213 02:42:29.707"></status>
</kw>
<status starttime="20161213 02:42:29.705" status="PASS" endtime="20161213 02:42:29.707"></status>
</kw>
<status starttime="20161213 02:42:29.702" status="PASS" endtime="20161213 02:42:29.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:42:29.708">Dictionary does not contain key 'port'.</msg>
<status starttime="20161213 02:42:29.708" status="FAIL" endtime="20161213 02:42:29.708"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:29.708">${has_port} = False</msg>
<status starttime="20161213 02:42:29.708" status="PASS" endtime="20161213 02:42:29.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161213 02:42:29.712" status="PASS" endtime="20161213 02:42:29.713"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161213 02:42:29.713" status="PASS" endtime="20161213 02:42:29.715"></status>
</kw>
<status starttime="20161213 02:42:29.712" status="PASS" endtime="20161213 02:42:29.715"></status>
</kw>
<status starttime="20161213 02:42:29.709" status="PASS" endtime="20161213 02:42:29.715"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:29.715">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161213 02:42:31.908">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161213 02:42:29.715" status="PASS" endtime="20161213 02:42:31.909"></status>
</kw>
<status starttime="20161213 02:42:29.696" status="PASS" endtime="20161213 02:42:31.909"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:31.910">@{entries} = [ BMC FILES ]</msg>
<status starttime="20161213 02:42:31.909" status="PASS" endtime="20161213 02:42:31.910"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:31.912">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status starttime="20161213 02:42:31.912" status="PASS" endtime="20161213 02:42:31.912"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:31.914">${logpath} = /tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_procinfo.txt</msg>
<status starttime="20161213 02:42:31.913" status="PASS" endtime="20161213 02:42:31.914"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161213 02:42:31.915" status="PASS" endtime="20161213 02:42:31.919"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:31.920">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20161213 02:42:31.988">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:31.988">${stdout} = processor	: 0
model name	: ARM926EJ-S rev 5 (v5l)
BogoMIPS	: 190.87
Features	: swp half thumb fastmult edsp java 
CPU implementer	: 0x41
CPU architecture: 5TEJ
CPU variant	: 0x0
CPU part	: 0x926
CPU r...</msg>
<msg level="INFO" timestamp="20161213 02:42:31.989">${stderr} = </msg>
<status starttime="20161213 02:42:31.920" status="PASS" endtime="20161213 02:42:31.989"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:31.995">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_procinfo.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:31.994" status="PASS" endtime="20161213 02:42:31.995"></status>
</kw>
<status starttime="20161213 02:42:31.994" status="PASS" endtime="20161213 02:42:31.996"></status>
</kw>
<status starttime="20161213 02:42:31.989" status="PASS" endtime="20161213 02:42:31.996"></status>
</kw>
<status starttime="20161213 02:42:31.914" status="PASS" endtime="20161213 02:42:31.996"></status>
</kw>
<status starttime="20161213 02:42:31.912" status="PASS" endtime="20161213 02:42:31.996"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:31.997">${logpath} = /tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_journalctl.txt</msg>
<status starttime="20161213 02:42:31.996" status="PASS" endtime="20161213 02:42:31.997"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161213 02:42:31.998" status="PASS" endtime="20161213 02:42:32.002"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:32.003">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20161213 02:42:34.094">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:34.095">${stdout} = -- Logs begin at Mon 2016-11-21 06:08:12 UTC, end at Mon 2016-11-21 06:16:26 UTC. --
Nov 21 06:08:12 barreleye systemd-journald[464]: Runtime journal (/run/log/journal/) is 3.0M, max 24.3M, 21.3M free...</msg>
<msg level="INFO" timestamp="20161213 02:42:34.095">${stderr} = </msg>
<status starttime="20161213 02:42:32.003" status="PASS" endtime="20161213 02:42:34.096"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:34.105">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_journalctl.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:34.103" status="PASS" endtime="20161213 02:42:34.105"></status>
</kw>
<status starttime="20161213 02:42:34.101" status="PASS" endtime="20161213 02:42:34.105"></status>
</kw>
<status starttime="20161213 02:42:34.096" status="PASS" endtime="20161213 02:42:34.105"></status>
</kw>
<status starttime="20161213 02:42:31.997" status="PASS" endtime="20161213 02:42:34.105"></status>
</kw>
<status starttime="20161213 02:42:31.996" status="PASS" endtime="20161213 02:42:34.105"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:34.106">${logpath} = /tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_dmesg.txt</msg>
<status starttime="20161213 02:42:34.106" status="PASS" endtime="20161213 02:42:34.106"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161213 02:42:34.107" status="PASS" endtime="20161213 02:42:34.110"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:34.111">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20161213 02:42:34.346">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:34.347">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-6fcd70b7e3d37b9189c9cdbcb982cf0862f63dff (jenkins@hudson) (gcc version 5.3.0 (GCC) ) #1 Mon Nov 28 09:47:45 UTC 2016
CPU: ARM926EJ-S [41069265] r...</msg>
<msg level="INFO" timestamp="20161213 02:42:34.347">${stderr} = </msg>
<status starttime="20161213 02:42:34.110" status="PASS" endtime="20161213 02:42:34.347"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:34.354">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_dmesg.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:34.353" status="PASS" endtime="20161213 02:42:34.354"></status>
</kw>
<status starttime="20161213 02:42:34.352" status="PASS" endtime="20161213 02:42:34.354"></status>
</kw>
<status starttime="20161213 02:42:34.347" status="PASS" endtime="20161213 02:42:34.354"></status>
</kw>
<status starttime="20161213 02:42:34.107" status="PASS" endtime="20161213 02:42:34.354"></status>
</kw>
<status starttime="20161213 02:42:34.105" status="PASS" endtime="20161213 02:42:34.354"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:34.355">${logpath} = /tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_meminfo.txt</msg>
<status starttime="20161213 02:42:34.355" status="PASS" endtime="20161213 02:42:34.355"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161213 02:42:34.357" status="PASS" endtime="20161213 02:42:34.361"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:34.362">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20161213 02:42:34.541">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:34.541">${stdout} = MemTotal:         499020 kB
MemFree:          366840 kB
MemAvailable:     405960 kB
Buffers:           10396 kB
Cached:            43140 kB
SwapCached:            0 kB
Active:            90436 kB
Inac...</msg>
<msg level="INFO" timestamp="20161213 02:42:34.541">${stderr} = </msg>
<status starttime="20161213 02:42:34.362" status="PASS" endtime="20161213 02:42:34.541"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:34.549">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_meminfo.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:34.549" status="PASS" endtime="20161213 02:42:34.549"></status>
</kw>
<status starttime="20161213 02:42:34.548" status="PASS" endtime="20161213 02:42:34.550"></status>
</kw>
<status starttime="20161213 02:42:34.542" status="PASS" endtime="20161213 02:42:34.550"></status>
</kw>
<status starttime="20161213 02:42:34.356" status="PASS" endtime="20161213 02:42:34.550"></status>
</kw>
<status starttime="20161213 02:42:34.355" status="PASS" endtime="20161213 02:42:34.550"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:34.551">${logpath} = /tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_proc_list.txt</msg>
<status starttime="20161213 02:42:34.550" status="PASS" endtime="20161213 02:42:34.551"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161213 02:42:34.553" status="PASS" endtime="20161213 02:42:34.557"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:34.557">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20161213 02:42:35.029">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:35.029">${stdout} = Mem: 132180K used, 366840K free, 9148K shrd, 10396K buff, 43140K cached
CPU:  90% usr  10% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 0.28 1.71 1.30 2/111 973
  PID  PPID USER    ...</msg>
<msg level="INFO" timestamp="20161213 02:42:35.029">${stderr} = </msg>
<status starttime="20161213 02:42:34.557" status="PASS" endtime="20161213 02:42:35.029"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:35.034">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_proc_list.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:35.033" status="PASS" endtime="20161213 02:42:35.034"></status>
</kw>
<status starttime="20161213 02:42:35.033" status="PASS" endtime="20161213 02:42:35.034"></status>
</kw>
<status starttime="20161213 02:42:35.029" status="PASS" endtime="20161213 02:42:35.034"></status>
</kw>
<status starttime="20161213 02:42:34.551" status="PASS" endtime="20161213 02:42:35.034"></status>
</kw>
<status starttime="20161213 02:42:34.550" status="PASS" endtime="20161213 02:42:35.034"></status>
</kw>
<status starttime="20161213 02:42:31.912" status="PASS" endtime="20161213 02:42:35.034"></status>
</kw>
<status starttime="20161213 02:42:31.911" status="PASS" endtime="20161213 02:42:35.034"></status>
</kw>
<status starttime="20161213 02:42:31.910" status="PASS" endtime="20161213 02:42:35.034"></status>
</kw>
<status starttime="20161213 02:42:31.910" status="PASS" endtime="20161213 02:42:35.034"></status>
</kw>
<status starttime="20161213 02:42:29.696" status="PASS" endtime="20161213 02:42:35.035"></status>
</kw>
<status starttime="20161213 02:42:29.695" status="PASS" endtime="20161213 02:42:35.035"></status>
</kw>
<status starttime="20161213 02:42:29.695" status="PASS" endtime="20161213 02:42:35.035"></status>
</kw>
<status starttime="20161213 02:42:29.695" status="PASS" endtime="20161213 02:42:35.035"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:42:35.041">Dictionary does not contain key 'host'.</msg>
<status starttime="20161213 02:42:35.040" status="FAIL" endtime="20161213 02:42:35.041"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:35.041">${has_host} = False</msg>
<status starttime="20161213 02:42:35.039" status="PASS" endtime="20161213 02:42:35.041"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161213 02:42:35.046" status="PASS" endtime="20161213 02:42:35.047"></status>
</kw>
<status starttime="20161213 02:42:35.041" status="PASS" endtime="20161213 02:42:35.047"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:35.051">${port_num} = 22</msg>
<status starttime="20161213 02:42:35.050" status="PASS" endtime="20161213 02:42:35.051"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:35.051">${SSH_PORT} = 22</msg>
<status starttime="20161213 02:42:35.051" status="PASS" endtime="20161213 02:42:35.051"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:35.052">${https_num} = 443</msg>
<status starttime="20161213 02:42:35.052" status="PASS" endtime="20161213 02:42:35.052"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:35.053">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161213 02:42:35.052" status="PASS" endtime="20161213 02:42:35.053"></status>
</kw>
<status starttime="20161213 02:42:35.050" status="PASS" endtime="20161213 02:42:35.053"></status>
</kw>
<status starttime="20161213 02:42:35.047" status="PASS" endtime="20161213 02:42:35.053"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:42:35.054">Dictionary does not contain key 'port'.</msg>
<status starttime="20161213 02:42:35.053" status="FAIL" endtime="20161213 02:42:35.054"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:35.054">${has_port} = False</msg>
<status starttime="20161213 02:42:35.053" status="PASS" endtime="20161213 02:42:35.054"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161213 02:42:35.058" status="PASS" endtime="20161213 02:42:35.058"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161213 02:42:35.058" status="PASS" endtime="20161213 02:42:35.059"></status>
</kw>
<status starttime="20161213 02:42:35.057" status="PASS" endtime="20161213 02:42:35.059"></status>
</kw>
<status starttime="20161213 02:42:35.054" status="PASS" endtime="20161213 02:42:35.059"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:35.059">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161213 02:42:37.343">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161213 02:42:35.059" status="PASS" endtime="20161213 02:42:37.343"></status>
</kw>
<status starttime="20161213 02:42:35.038" status="PASS" endtime="20161213 02:42:37.343"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:37.344">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20161213 02:42:37.344" status="PASS" endtime="20161213 02:42:37.344"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:37.347">@{cmd_list} = [ ('BMC_inventory', '/org/openbmc/inventory/system/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_sensor_list', '...</msg>
<status starttime="20161213 02:42:37.346" status="PASS" endtime="20161213 02:42:37.347"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_inventory', '/org/openbmc/inventory/system/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:37.349">${logpath} = /tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_inventory.txt</msg>
<status starttime="20161213 02:42:37.347" status="PASS" endtime="20161213 02:42:37.349"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:37.351">${base_uri} = /org/openbmc/inventory/system/enumerate</msg>
<status starttime="20161213 02:42:37.350" status="PASS" endtime="20161213 02:42:37.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161213 02:42:37.351" status="PASS" endtime="20161213 02:42:37.357"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:37.357">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:42:37.357" status="PASS" endtime="20161213 02:42:37.358"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:37.358">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:37.358" status="PASS" endtime="20161213 02:42:37.358"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:37.359">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:42:37.359" status="PASS" endtime="20161213 02:42:37.359"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:37.360">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:42:37.359" status="PASS" endtime="20161213 02:42:37.360"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:37.696">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:37.696">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:37.360" status="PASS" endtime="20161213 02:42:37.696"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:37.697">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:37.696" status="PASS" endtime="20161213 02:42:37.697"></status>
</kw>
<status starttime="20161213 02:42:37.357" status="PASS" endtime="20161213 02:42:37.697"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.013">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:42:41.013">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:37.697" status="PASS" endtime="20161213 02:42:41.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161213 02:42:41.014" status="PASS" endtime="20161213 02:42:41.019"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:41.019">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:37.349" status="PASS" endtime="20161213 02:42:41.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:41.021">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:41.020" status="PASS" endtime="20161213 02:42:41.021"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:41.021">${status} = True</msg>
<status starttime="20161213 02:42:41.020" status="PASS" endtime="20161213 02:42:41.021"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161213 02:42:41.021" status="PASS" endtime="20161213 02:42:41.026"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.031">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-fda20bd", 
      "Custom Field 2": "\tskiboot-5.2.0-opdirty", 
      "Custom Field 3": "\thostboot-c223637-1d3dbf3", 
      "Custom Field 4": "\tlinux-4.4.6-openpower1-opdirty-99d283b", 
      "Custom Field 5": "\tpetitboot-72928ed-opdirty-47f54ff", 
      "Custom Field 6": "\tbarreleye-xml-1250f06-opdirty", 
      "Custom Field 7": "\tocc-1093bf9-opdir", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-v1.8", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-323-g9273940-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/351"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/353"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/353"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "ECID:019C009740140718081C000000CF0361", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "ECID:019C00974014071822200000006705C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:42:41.032">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161213 02:42:41.032">${jsondata} = {
    "data": {
        "/org/openbmc/inventory/system/bios": {
            "Asset Tag": "",
            "Custom Field 1": "\tbuildroot-fda20bd",
            "Custom Field 2": "\tskiboot-5.2.0-opdirty...</msg>
<status starttime="20161213 02:42:41.026" status="PASS" endtime="20161213 02:42:41.032"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:41.034">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_inventory.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:41.034" status="PASS" endtime="20161213 02:42:41.034"></status>
</kw>
<status starttime="20161213 02:42:41.033" status="PASS" endtime="20161213 02:42:41.034"></status>
</kw>
<status starttime="20161213 02:42:37.347" status="PASS" endtime="20161213 02:42:41.034"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.035">${logpath} = /tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_led.txt</msg>
<status starttime="20161213 02:42:41.035" status="PASS" endtime="20161213 02:42:41.035"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.036">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20161213 02:42:41.036" status="PASS" endtime="20161213 02:42:41.036"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161213 02:42:41.037" status="PASS" endtime="20161213 02:42:41.042"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:41.044">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:42:41.043" status="PASS" endtime="20161213 02:42:41.045"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.046">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:41.045" status="PASS" endtime="20161213 02:42:41.046"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.047">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:42:41.047" status="PASS" endtime="20161213 02:42:41.047"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.048">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:42:41.048" status="PASS" endtime="20161213 02:42:41.048"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.453">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:41.454">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:41.049" status="PASS" endtime="20161213 02:42:41.454"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:41.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:41.454" status="PASS" endtime="20161213 02:42:41.455"></status>
</kw>
<status starttime="20161213 02:42:41.042" status="PASS" endtime="20161213 02:42:41.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.674">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:42:41.674">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:41.455" status="PASS" endtime="20161213 02:42:41.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161213 02:42:41.674" status="PASS" endtime="20161213 02:42:41.680"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:41.680">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:41.035" status="PASS" endtime="20161213 02:42:41.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:41.682">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:41.681" status="PASS" endtime="20161213 02:42:41.682"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:41.682">${status} = True</msg>
<status starttime="20161213 02:42:41.680" status="PASS" endtime="20161213 02:42:41.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161213 02:42:41.682" status="PASS" endtime="20161213 02:42:41.687"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.688">To JSON using : content={
  "data": {
    "/org/openbmc/records/events/351": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:11:21 06:13:00"
    }, 
    "/org/openbmc/records/events/351/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/353": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:11:21 06:13:03"
    }, 
    "/org/openbmc/records/events/353/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:42:41.688">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161213 02:42:41.688">${jsondata} = {
    "data": {
        "/org/openbmc/records/events/351": {
            "associations": [
                [
                    "fru",
                    "event",
                    "/org/openbmc/i...</msg>
<status starttime="20161213 02:42:41.687" status="PASS" endtime="20161213 02:42:41.688"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:41.690">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_led.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:41.689" status="PASS" endtime="20161213 02:42:41.690"></status>
</kw>
<status starttime="20161213 02:42:41.688" status="PASS" endtime="20161213 02:42:41.690"></status>
</kw>
<status starttime="20161213 02:42:41.035" status="PASS" endtime="20161213 02:42:41.690"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.691">${logpath} = /tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_record_log.txt</msg>
<status starttime="20161213 02:42:41.690" status="PASS" endtime="20161213 02:42:41.691"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.692">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20161213 02:42:41.691" status="PASS" endtime="20161213 02:42:41.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161213 02:42:41.692" status="PASS" endtime="20161213 02:42:41.695"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:41.696">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:42:41.695" status="PASS" endtime="20161213 02:42:41.696"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.697">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:41.696" status="PASS" endtime="20161213 02:42:41.697"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.697">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:42:41.697" status="PASS" endtime="20161213 02:42:41.697"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:41.698">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:42:41.698" status="PASS" endtime="20161213 02:42:41.698"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:42.028">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:42.029">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:41.698" status="PASS" endtime="20161213 02:42:42.029"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:42.029">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:42.029" status="PASS" endtime="20161213 02:42:42.029"></status>
</kw>
<status starttime="20161213 02:42:41.695" status="PASS" endtime="20161213 02:42:42.030"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:42.220">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:42:42.220">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:42.030" status="PASS" endtime="20161213 02:42:42.220"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161213 02:42:42.221" status="PASS" endtime="20161213 02:42:42.224"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:42.224">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:41.691" status="PASS" endtime="20161213 02:42:42.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:42.225">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:42.225" status="PASS" endtime="20161213 02:42:42.225"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:42.225">${status} = True</msg>
<status starttime="20161213 02:42:42.224" status="PASS" endtime="20161213 02:42:42.225"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161213 02:42:42.225" status="PASS" endtime="20161213 02:42:42.230"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:42.232">To JSON using : content={
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:42:42.232">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161213 02:42:42.232">${jsondata} = {
    "data": {
        "/org/openbmc/control/led/beep": {},
        "/org/openbmc/control/led/heartbeat": {},
        "/org/openbmc/control/led/identify": {}
    },
    "message": "200 OK",
    "stat...</msg>
<status starttime="20161213 02:42:42.231" status="PASS" endtime="20161213 02:42:42.232"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:42.234">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_record_log.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_record_log.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:42.233" status="PASS" endtime="20161213 02:42:42.235"></status>
</kw>
<status starttime="20161213 02:42:42.232" status="PASS" endtime="20161213 02:42:42.235"></status>
</kw>
<status starttime="20161213 02:42:41.690" status="PASS" endtime="20161213 02:42:42.235"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:42.236">${logpath} = /tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_sensor_list.txt</msg>
<status starttime="20161213 02:42:42.235" status="PASS" endtime="20161213 02:42:42.236"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:42.237">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20161213 02:42:42.237" status="PASS" endtime="20161213 02:42:42.237"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161213 02:42:42.237" status="PASS" endtime="20161213 02:42:42.241"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:42.243">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:42:42.243" status="PASS" endtime="20161213 02:42:42.244"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:42.245">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:42.244" status="PASS" endtime="20161213 02:42:42.245"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:42.246">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:42:42.245" status="PASS" endtime="20161213 02:42:42.246"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:42.247">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:42:42.247" status="PASS" endtime="20161213 02:42:42.247"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:42.585">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:42.585">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:42.248" status="PASS" endtime="20161213 02:42:42.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:42.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:42.585" status="PASS" endtime="20161213 02:42:42.586"></status>
</kw>
<status starttime="20161213 02:42:42.242" status="PASS" endtime="20161213 02:42:42.586"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:45.168">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:42:45.168">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:42.586" status="PASS" endtime="20161213 02:42:45.168"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161213 02:42:45.169" status="PASS" endtime="20161213 02:42:45.175"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:45.175">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:42.236" status="PASS" endtime="20161213 02:42:45.175"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:45.177">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:45.177" status="PASS" endtime="20161213 02:42:45.177"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:45.178">${status} = True</msg>
<status starttime="20161213 02:42:45.176" status="PASS" endtime="20161213 02:42:45.178"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20161213 02:42:45.178" status="PASS" endtime="20161213 02:42:45.182"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:45.189">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 124, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 5, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 224, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 5, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 127, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 32500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 34750, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 0, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:42:45.189">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161213 02:42:45.190">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/HSCA/Iout": {
            "adjust": 0.25,
            "critical_lower": 0,
            "critical_upper": 0,
            "emergency_enabled": 0,
          ...</msg>
<status starttime="20161213 02:42:45.182" status="PASS" endtime="20161213 02:42:45.190"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:45.191">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_sensor_list.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:45.191" status="PASS" endtime="20161213 02:42:45.192"></status>
</kw>
<status starttime="20161213 02:42:45.190" status="PASS" endtime="20161213 02:42:45.192"></status>
</kw>
<status starttime="20161213 02:42:42.235" status="PASS" endtime="20161213 02:42:45.192"></status>
</kw>
<status starttime="20161213 02:42:37.347" status="PASS" endtime="20161213 02:42:45.192"></status>
</kw>
<status starttime="20161213 02:42:37.345" status="PASS" endtime="20161213 02:42:45.192"></status>
</kw>
<status starttime="20161213 02:42:37.345" status="PASS" endtime="20161213 02:42:45.192"></status>
</kw>
<status starttime="20161213 02:42:37.345" status="PASS" endtime="20161213 02:42:45.192"></status>
</kw>
<status starttime="20161213 02:42:35.038" status="PASS" endtime="20161213 02:42:45.192"></status>
</kw>
<status starttime="20161213 02:42:35.037" status="PASS" endtime="20161213 02:42:45.192"></status>
</kw>
<status starttime="20161213 02:42:35.036" status="PASS" endtime="20161213 02:42:45.192"></status>
</kw>
<status starttime="20161213 02:42:35.035" status="PASS" endtime="20161213 02:42:45.192"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:42:45.195">Dictionary does not contain key 'host'.</msg>
<status starttime="20161213 02:42:45.195" status="FAIL" endtime="20161213 02:42:45.195"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:45.195">${has_host} = False</msg>
<status starttime="20161213 02:42:45.194" status="PASS" endtime="20161213 02:42:45.195"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161213 02:42:45.199" status="PASS" endtime="20161213 02:42:45.199"></status>
</kw>
<status starttime="20161213 02:42:45.195" status="PASS" endtime="20161213 02:42:45.199"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:45.203">${port_num} = 22</msg>
<status starttime="20161213 02:42:45.203" status="PASS" endtime="20161213 02:42:45.203"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:45.204">${SSH_PORT} = 22</msg>
<status starttime="20161213 02:42:45.203" status="PASS" endtime="20161213 02:42:45.204"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:45.204">${https_num} = 443</msg>
<status starttime="20161213 02:42:45.204" status="PASS" endtime="20161213 02:42:45.204"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:45.205">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161213 02:42:45.204" status="PASS" endtime="20161213 02:42:45.205"></status>
</kw>
<status starttime="20161213 02:42:45.202" status="PASS" endtime="20161213 02:42:45.205"></status>
</kw>
<status starttime="20161213 02:42:45.199" status="PASS" endtime="20161213 02:42:45.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:42:45.206">Dictionary does not contain key 'port'.</msg>
<status starttime="20161213 02:42:45.206" status="FAIL" endtime="20161213 02:42:45.206"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:45.206">${has_port} = False</msg>
<status starttime="20161213 02:42:45.205" status="PASS" endtime="20161213 02:42:45.206"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161213 02:42:45.210" status="PASS" endtime="20161213 02:42:45.210"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161213 02:42:45.211" status="PASS" endtime="20161213 02:42:45.211"></status>
</kw>
<status starttime="20161213 02:42:45.210" status="PASS" endtime="20161213 02:42:45.211"></status>
</kw>
<status starttime="20161213 02:42:45.206" status="PASS" endtime="20161213 02:42:45.211"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:45.212">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161213 02:42:47.558">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161213 02:42:45.211" status="PASS" endtime="20161213 02:42:47.558"></status>
</kw>
<status starttime="20161213 02:42:45.194" status="PASS" endtime="20161213 02:42:47.558"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:47.559">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status starttime="20161213 02:42:47.559" status="PASS" endtime="20161213 02:42:47.559"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:47.561">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20161213 02:42:47.561" status="PASS" endtime="20161213 02:42:47.561"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:47.567">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20161213 02:42:47.562" status="PASS" endtime="20161213 02:42:47.568"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:47.580">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:47.579" status="PASS" endtime="20161213 02:42:47.580"></status>
</kw>
<status starttime="20161213 02:42:47.578" status="PASS" endtime="20161213 02:42:47.581"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:47.582">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:47.582" status="PASS" endtime="20161213 02:42:47.582"></status>
</kw>
<status starttime="20161213 02:42:47.581" status="PASS" endtime="20161213 02:42:47.582"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:47.584">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:47.583" status="PASS" endtime="20161213 02:42:47.584"></status>
</kw>
<status starttime="20161213 02:42:47.583" status="PASS" endtime="20161213 02:42:47.584"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:47.585">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:47.585" status="PASS" endtime="20161213 02:42:47.585"></status>
</kw>
<status starttime="20161213 02:42:47.584" status="PASS" endtime="20161213 02:42:47.586"></status>
</kw>
<status starttime="20161213 02:42:47.577" status="PASS" endtime="20161213 02:42:47.586"></status>
</kw>
<status starttime="20161213 02:42:47.570" status="PASS" endtime="20161213 02:42:47.586"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:47.587">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20161213 02:42:47.655">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:47.655">${stdout} = 20161213011054</msg>
<msg level="INFO" timestamp="20161213 02:42:47.655">${stderr} = </msg>
<status starttime="20161213 02:42:47.586" status="PASS" endtime="20161213 02:42:47.656"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:47.663">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:47.662" status="PASS" endtime="20161213 02:42:47.663"></status>
</kw>
<status starttime="20161213 02:42:47.661" status="PASS" endtime="20161213 02:42:47.663"></status>
</kw>
<status starttime="20161213 02:42:47.656" status="PASS" endtime="20161213 02:42:47.664"></status>
</kw>
<status starttime="20161213 02:42:47.568" status="PASS" endtime="20161213 02:42:47.664"></status>
</kw>
<status starttime="20161213 02:42:47.568" status="PASS" endtime="20161213 02:42:47.664"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:47.670">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:47.670" status="PASS" endtime="20161213 02:42:47.670"></status>
</kw>
<status starttime="20161213 02:42:47.669" status="PASS" endtime="20161213 02:42:47.671"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:47.672">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:47.672" status="PASS" endtime="20161213 02:42:47.672"></status>
</kw>
<status starttime="20161213 02:42:47.671" status="PASS" endtime="20161213 02:42:47.672"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:47.673">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:47.673" status="PASS" endtime="20161213 02:42:47.673"></status>
</kw>
<status starttime="20161213 02:42:47.672" status="PASS" endtime="20161213 02:42:47.673"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:47.674">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:47.674" status="PASS" endtime="20161213 02:42:47.674"></status>
</kw>
<status starttime="20161213 02:42:47.673" status="PASS" endtime="20161213 02:42:47.674"></status>
</kw>
<status starttime="20161213 02:42:47.669" status="PASS" endtime="20161213 02:42:47.674"></status>
</kw>
<status starttime="20161213 02:42:47.665" status="PASS" endtime="20161213 02:42:47.675"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:47.675">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20161213 02:42:47.755">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:47.755">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.0-323"
VERSION_ID="v1.99.0-323-g9273940-dirty"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC ...</msg>
<msg level="INFO" timestamp="20161213 02:42:47.755">${stderr} = </msg>
<status starttime="20161213 02:42:47.675" status="PASS" endtime="20161213 02:42:47.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:47.760">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:47.760" status="PASS" endtime="20161213 02:42:47.760"></status>
</kw>
<status starttime="20161213 02:42:47.759" status="PASS" endtime="20161213 02:42:47.760"></status>
</kw>
<status starttime="20161213 02:42:47.756" status="PASS" endtime="20161213 02:42:47.761"></status>
</kw>
<status starttime="20161213 02:42:47.664" status="PASS" endtime="20161213 02:42:47.761"></status>
</kw>
<status starttime="20161213 02:42:47.664" status="PASS" endtime="20161213 02:42:47.761"></status>
</kw>
<status starttime="20161213 02:42:47.568" status="PASS" endtime="20161213 02:42:47.761"></status>
</kw>
<status starttime="20161213 02:42:47.560" status="PASS" endtime="20161213 02:42:47.761"></status>
</kw>
<status starttime="20161213 02:42:47.560" status="PASS" endtime="20161213 02:42:47.761"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:47.762">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20161213 02:42:47.762" status="PASS" endtime="20161213 02:42:47.762"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:47.762">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20161213 02:42:47.762" status="PASS" endtime="20161213 02:42:47.763"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:47.768">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:47.768" status="PASS" endtime="20161213 02:42:47.768"></status>
</kw>
<status starttime="20161213 02:42:47.767" status="PASS" endtime="20161213 02:42:47.769"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:47.770">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:47.769" status="PASS" endtime="20161213 02:42:47.770"></status>
</kw>
<status starttime="20161213 02:42:47.769" status="PASS" endtime="20161213 02:42:47.770"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:47.771">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:47.771" status="PASS" endtime="20161213 02:42:47.771"></status>
</kw>
<status starttime="20161213 02:42:47.770" status="PASS" endtime="20161213 02:42:47.771"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:47.772">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:47.772" status="PASS" endtime="20161213 02:42:47.773"></status>
</kw>
<status starttime="20161213 02:42:47.772" status="PASS" endtime="20161213 02:42:47.773"></status>
</kw>
<status starttime="20161213 02:42:47.767" status="PASS" endtime="20161213 02:42:47.773"></status>
</kw>
<status starttime="20161213 02:42:47.764" status="PASS" endtime="20161213 02:42:47.773"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:47.773">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20161213 02:42:49.710">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:49.710">${stdout} =  = HOST_POWERING_ON</msg>
<msg level="INFO" timestamp="20161213 02:42:49.710">${stderr} = </msg>
<status starttime="20161213 02:42:47.773" status="PASS" endtime="20161213 02:42:49.710"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.721">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.720" status="PASS" endtime="20161213 02:42:49.721"></status>
</kw>
<status starttime="20161213 02:42:49.719" status="PASS" endtime="20161213 02:42:49.721"></status>
</kw>
<status starttime="20161213 02:42:49.711" status="PASS" endtime="20161213 02:42:49.721"></status>
</kw>
<status starttime="20161213 02:42:47.763" status="PASS" endtime="20161213 02:42:49.722"></status>
</kw>
<status starttime="20161213 02:42:47.763" status="PASS" endtime="20161213 02:42:49.722"></status>
</kw>
<status starttime="20161213 02:42:47.763" status="PASS" endtime="20161213 02:42:49.722"></status>
</kw>
<status starttime="20161213 02:42:47.761" status="PASS" endtime="20161213 02:42:49.722"></status>
</kw>
<status starttime="20161213 02:42:47.761" status="PASS" endtime="20161213 02:42:49.722"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:49.724">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status starttime="20161213 02:42:49.723" status="PASS" endtime="20161213 02:42:49.724"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:49.725">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20161213 02:42:49.725" status="PASS" endtime="20161213 02:42:49.726"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.734">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.733" status="PASS" endtime="20161213 02:42:49.734"></status>
</kw>
<status starttime="20161213 02:42:49.732" status="PASS" endtime="20161213 02:42:49.734"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.735">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.735" status="PASS" endtime="20161213 02:42:49.735"></status>
</kw>
<status starttime="20161213 02:42:49.734" status="PASS" endtime="20161213 02:42:49.735"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.736">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.736" status="PASS" endtime="20161213 02:42:49.736"></status>
</kw>
<status starttime="20161213 02:42:49.735" status="PASS" endtime="20161213 02:42:49.736"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.738">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.737" status="PASS" endtime="20161213 02:42:49.738"></status>
</kw>
<status starttime="20161213 02:42:49.737" status="PASS" endtime="20161213 02:42:49.738"></status>
</kw>
<status starttime="20161213 02:42:49.732" status="PASS" endtime="20161213 02:42:49.738"></status>
</kw>
<status starttime="20161213 02:42:49.727" status="PASS" endtime="20161213 02:42:49.738"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:49.739">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20161213 02:42:49.835">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:49.835">${stdout} =  06:16:44 up 8 min,  load average: 0.36, 1.65, 1.28</msg>
<msg level="INFO" timestamp="20161213 02:42:49.835">${stderr} = </msg>
<status starttime="20161213 02:42:49.738" status="PASS" endtime="20161213 02:42:49.835"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.840">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.839" status="PASS" endtime="20161213 02:42:49.840"></status>
</kw>
<status starttime="20161213 02:42:49.839" status="PASS" endtime="20161213 02:42:49.840"></status>
</kw>
<status starttime="20161213 02:42:49.835" status="PASS" endtime="20161213 02:42:49.840"></status>
</kw>
<status starttime="20161213 02:42:49.726" status="PASS" endtime="20161213 02:42:49.840"></status>
</kw>
<status starttime="20161213 02:42:49.726" status="PASS" endtime="20161213 02:42:49.840"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.846">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.845" status="PASS" endtime="20161213 02:42:49.846"></status>
</kw>
<status starttime="20161213 02:42:49.845" status="PASS" endtime="20161213 02:42:49.846"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.847">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.847" status="PASS" endtime="20161213 02:42:49.847"></status>
</kw>
<status starttime="20161213 02:42:49.846" status="PASS" endtime="20161213 02:42:49.847"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.848">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.848" status="PASS" endtime="20161213 02:42:49.848"></status>
</kw>
<status starttime="20161213 02:42:49.847" status="PASS" endtime="20161213 02:42:49.848"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.849">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.849" status="PASS" endtime="20161213 02:42:49.849"></status>
</kw>
<status starttime="20161213 02:42:49.849" status="PASS" endtime="20161213 02:42:49.850"></status>
</kw>
<status starttime="20161213 02:42:49.844" status="PASS" endtime="20161213 02:42:49.850"></status>
</kw>
<status starttime="20161213 02:42:49.841" status="PASS" endtime="20161213 02:42:49.850"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:49.850">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20161213 02:42:49.940">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:49.941">${stdout} = Linux barreleye 4.7.10-6fcd70b7e3d37b9189c9cdbcb982cf0862f63dff #1 Mon Nov 28 09:47:45 UTC 2016 armv5tejl GNU/Linux</msg>
<msg level="INFO" timestamp="20161213 02:42:49.941">${stderr} = </msg>
<status starttime="20161213 02:42:49.850" status="PASS" endtime="20161213 02:42:49.941"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.945">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.945" status="PASS" endtime="20161213 02:42:49.946"></status>
</kw>
<status starttime="20161213 02:42:49.945" status="PASS" endtime="20161213 02:42:49.946"></status>
</kw>
<status starttime="20161213 02:42:49.941" status="PASS" endtime="20161213 02:42:49.946"></status>
</kw>
<status starttime="20161213 02:42:49.840" status="PASS" endtime="20161213 02:42:49.946"></status>
</kw>
<status starttime="20161213 02:42:49.840" status="PASS" endtime="20161213 02:42:49.946"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.953">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.952" status="PASS" endtime="20161213 02:42:49.953"></status>
</kw>
<status starttime="20161213 02:42:49.950" status="PASS" endtime="20161213 02:42:49.954"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.956">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.955" status="PASS" endtime="20161213 02:42:49.956"></status>
</kw>
<status starttime="20161213 02:42:49.954" status="PASS" endtime="20161213 02:42:49.956"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.958">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.957" status="PASS" endtime="20161213 02:42:49.958"></status>
</kw>
<status starttime="20161213 02:42:49.956" status="PASS" endtime="20161213 02:42:49.958"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:49.960">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:49.959" status="PASS" endtime="20161213 02:42:49.960"></status>
</kw>
<status starttime="20161213 02:42:49.958" status="PASS" endtime="20161213 02:42:49.960"></status>
</kw>
<status starttime="20161213 02:42:49.950" status="PASS" endtime="20161213 02:42:49.960"></status>
</kw>
<status starttime="20161213 02:42:49.947" status="PASS" endtime="20161213 02:42:49.960"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:49.961">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20161213 02:42:50.051">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:50.052">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      242.4M         0    242.4M   0% /dev
tmpfs                tmpfs         243.7M      8.9...</msg>
<msg level="INFO" timestamp="20161213 02:42:50.052">${stderr} = </msg>
<status starttime="20161213 02:42:49.961" status="PASS" endtime="20161213 02:42:50.052"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:50.058">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt"&gt;/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest/20161213024229636313_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:50.057" status="PASS" endtime="20161213 02:42:50.058"></status>
</kw>
<status starttime="20161213 02:42:50.057" status="PASS" endtime="20161213 02:42:50.058"></status>
</kw>
<status starttime="20161213 02:42:50.052" status="PASS" endtime="20161213 02:42:50.058"></status>
</kw>
<status starttime="20161213 02:42:49.946" status="PASS" endtime="20161213 02:42:50.058"></status>
</kw>
<status starttime="20161213 02:42:49.946" status="PASS" endtime="20161213 02:42:50.058"></status>
</kw>
<status starttime="20161213 02:42:49.726" status="PASS" endtime="20161213 02:42:50.058"></status>
</kw>
<status starttime="20161213 02:42:49.722" status="PASS" endtime="20161213 02:42:50.059"></status>
</kw>
<status starttime="20161213 02:42:49.722" status="PASS" endtime="20161213 02:42:50.059"></status>
</kw>
<status starttime="20161213 02:42:47.559" status="PASS" endtime="20161213 02:42:50.059"></status>
</kw>
<status starttime="20161213 02:42:45.193" status="PASS" endtime="20161213 02:42:50.059"></status>
</kw>
<status starttime="20161213 02:42:45.193" status="PASS" endtime="20161213 02:42:50.059"></status>
</kw>
<status starttime="20161213 02:42:45.193" status="PASS" endtime="20161213 02:42:50.059"></status>
</kw>
<status starttime="20161213 02:42:45.192" status="PASS" endtime="20161213 02:42:50.059"></status>
</kw>
<status starttime="20161213 02:42:29.689" status="PASS" endtime="20161213 02:42:50.059"></status>
</kw>
<status starttime="20161213 02:42:29.689" status="PASS" endtime="20161213 02:42:50.059"></status>
</kw>
<status starttime="20161213 02:42:29.688" status="PASS" endtime="20161213 02:42:50.059"></status>
</kw>
<status starttime="20161213 02:42:29.688" status="PASS" endtime="20161213 02:42:50.059"></status>
</kw>
<status starttime="20161213 02:42:29.688" status="PASS" endtime="20161213 02:42:50.059"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:50.061">${cur_time} = 2016-12-13 02:42:50:060357</msg>
<status starttime="20161213 02:42:50.060" status="PASS" endtime="20161213 02:42:50.061"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:50.061">${cur_time} = 20161213024250060357</msg>
<status starttime="20161213 02:42:50.061" status="PASS" endtime="20161213 02:42:50.061"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:50.061">${cur_time} = 20161213024250060357</msg>
<status starttime="20161213 02:42:50.060" status="PASS" endtime="20161213 02:42:50.061"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FFDC Collection Completed \t: ${cur_time}</arg>
</arguments>
<status starttime="20161213 02:42:50.062" status="PASS" endtime="20161213 02:42:50.062"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${\n}${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:50.063">
/tmp/root/17055/obmc-robot/logs/20161213024229636313_TestsTestBasicPoweron/20161213024229636313_powerontest</msg>
<status starttime="20161213 02:42:50.062" status="PASS" endtime="20161213 02:42:50.063"></status>
</kw>
<status starttime="20161213 02:42:29.634" status="PASS" endtime="20161213 02:42:50.063"></status>
</kw>
<status starttime="20161213 02:42:29.630" status="PASS" endtime="20161213 02:42:50.063"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:50.064">Directory '&lt;a href="file:///tmp/root/17055/obmc-robot/logs"&gt;/tmp/root/17055/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161213 02:42:50.064" status="PASS" endtime="20161213 02:42:50.064"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:50.065">File '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17055/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161213 02:42:50.065" status="PASS" endtime="20161213 02:42:50.065"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:50.065">${exist} = True</msg>
<status starttime="20161213 02:42:50.064" status="PASS" endtime="20161213 02:42:50.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161213 02:42:50.066" status="PASS" endtime="20161213 02:42:50.069"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:50.069">${cur_time} = 2016-12-13 02:42:50:069327</msg>
<status starttime="20161213 02:42:50.069" status="PASS" endtime="20161213 02:42:50.069"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:50.070">${cur_time} = 20161213024250069327</msg>
<status starttime="20161213 02:42:50.070" status="PASS" endtime="20161213 02:42:50.070"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:50.070">${cur_time} = 20161213024250069327</msg>
<status starttime="20161213 02:42:50.069" status="PASS" endtime="20161213 02:42:50.070"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:50.071">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17055/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:50.070" status="PASS" endtime="20161213 02:42:50.071"></status>
</kw>
<status starttime="20161213 02:42:50.063" status="PASS" endtime="20161213 02:42:50.071"></status>
</kw>
<status starttime="20161213 02:42:29.629" status="PASS" endtime="20161213 02:42:50.071"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Login to BMC and Stop the obmc-console-client process.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:42:50.073">Dictionary does not contain key 'host'.</msg>
<status starttime="20161213 02:42:50.073" status="FAIL" endtime="20161213 02:42:50.073"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:50.073">${has_host} = False</msg>
<status starttime="20161213 02:42:50.072" status="PASS" endtime="20161213 02:42:50.073"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161213 02:42:50.078" status="PASS" endtime="20161213 02:42:50.079"></status>
</kw>
<status starttime="20161213 02:42:50.074" status="PASS" endtime="20161213 02:42:50.079"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:50.084">${port_num} = 22</msg>
<status starttime="20161213 02:42:50.084" status="PASS" endtime="20161213 02:42:50.084"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:50.085">${SSH_PORT} = 22</msg>
<status starttime="20161213 02:42:50.085" status="PASS" endtime="20161213 02:42:50.085"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:50.086">${https_num} = 443</msg>
<status starttime="20161213 02:42:50.085" status="PASS" endtime="20161213 02:42:50.086"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:50.087">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161213 02:42:50.086" status="PASS" endtime="20161213 02:42:50.087"></status>
</kw>
<status starttime="20161213 02:42:50.083" status="PASS" endtime="20161213 02:42:50.087"></status>
</kw>
<status starttime="20161213 02:42:50.079" status="PASS" endtime="20161213 02:42:50.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:42:50.088">Dictionary does not contain key 'port'.</msg>
<status starttime="20161213 02:42:50.088" status="FAIL" endtime="20161213 02:42:50.088"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:50.088">${has_port} = False</msg>
<status starttime="20161213 02:42:50.087" status="PASS" endtime="20161213 02:42:50.089"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161213 02:42:50.094" status="PASS" endtime="20161213 02:42:50.095"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161213 02:42:50.095" status="PASS" endtime="20161213 02:42:50.096"></status>
</kw>
<status starttime="20161213 02:42:50.094" status="PASS" endtime="20161213 02:42:50.096"></status>
</kw>
<status starttime="20161213 02:42:50.089" status="PASS" endtime="20161213 02:42:50.096"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:50.097">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161213 02:42:52.287">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161213 02:42:50.096" status="PASS" endtime="20161213 02:42:52.287"></status>
</kw>
<status starttime="20161213 02:42:50.072" status="PASS" endtime="20161213 02:42:52.287"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${file_path}-${LOG_TIME}_* | cut -d'_' -f 2</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${pid}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:52.288">Executing command 'ls /tmp/obmc-console.log-20161213023913291122_* | cut -d'_' -f 2'.</msg>
<msg level="INFO" timestamp="20161213 02:42:52.388">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:52.388">${pid} = 918</msg>
<msg level="INFO" timestamp="20161213 02:42:52.388">${stderr} = </msg>
<status starttime="20161213 02:42:52.288" status="PASS" endtime="20161213 02:42:52.389"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:52.389">Length is 0</msg>
<status starttime="20161213 02:42:52.389" status="PASS" endtime="20161213 02:42:52.389"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep ${pid} | grep -v grep</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:52.390">Executing command 'ps ax | grep 918 | grep -v grep'.</msg>
<msg level="INFO" timestamp="20161213 02:42:52.721">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:52.722">${rc} = 0</msg>
<status starttime="20161213 02:42:52.390" status="PASS" endtime="20161213 02:42:52.722"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${rc}' == '${1}'</arg>
<arg>No obmc-console-client process running</arg>
</arguments>
<status starttime="20161213 02:42:52.722" status="PASS" endtime="20161213 02:42:52.728"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:52.728">Executing command 'kill -s KILL 918'.</msg>
<msg level="INFO" timestamp="20161213 02:42:52.807">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:52.807">${console} = </msg>
<msg level="INFO" timestamp="20161213 02:42:52.807">${stderr} = </msg>
<status starttime="20161213 02:42:52.728" status="PASS" endtime="20161213 02:42:52.807"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:52.808">Length is 0</msg>
<status starttime="20161213 02:42:52.807" status="PASS" endtime="20161213 02:42:52.808"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Current Client PID:${pid}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:52.808">Current Client PID:918</msg>
<status starttime="20161213 02:42:52.808" status="PASS" endtime="20161213 02:42:52.808"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}-${LOG_TIME}_${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:52.809">Executing command 'cat /tmp/obmc-console.log-20161213023913291122_918'.</msg>
<msg level="INFO" timestamp="20161213 02:42:52.938">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161213 02:42:52.938">${console} = </msg>
<msg level="INFO" timestamp="20161213 02:42:52.938">${stderr} = </msg>
<status starttime="20161213 02:42:52.809" status="PASS" endtime="20161213 02:42:52.938"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:52.939">Length is 0</msg>
<status starttime="20161213 02:42:52.938" status="PASS" endtime="20161213 02:42:52.939"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:52.939">${sol_log} = </msg>
<status starttime="20161213 02:42:50.071" status="PASS" endtime="20161213 02:42:52.939"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:52.940"></msg>
<status starttime="20161213 02:42:52.939" status="PASS" endtime="20161213 02:42:52.940"></status>
</kw>
<status starttime="20161213 02:42:29.628" status="PASS" endtime="20161213 02:42:52.940"></status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status starttime="20161213 02:39:10.885" critical="yes" status="FAIL" endtime="20161213 02:42:52.940">Keyword 'Is Power On' failed after retrying for 3 minutes. The last error was: 0 != 1</status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status starttime="20161213 02:39:10.860" status="FAIL" endtime="20161213 02:42:52.941"></status>
</suite>
<suite name="Test Eventlog" id="s1-s4" source="/tmp/root/17055/obmc-robot/tests/test_eventlog.robot">
<kw library="connection_client" name="Open Connection And Log In" type="setup">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:42:52.986">Dictionary does not contain key 'host'.</msg>
<status starttime="20161213 02:42:52.985" status="FAIL" endtime="20161213 02:42:52.986"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:52.986">${has_host} = False</msg>
<status starttime="20161213 02:42:52.985" status="PASS" endtime="20161213 02:42:52.986"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161213 02:42:52.989" status="PASS" endtime="20161213 02:42:52.989"></status>
</kw>
<status starttime="20161213 02:42:52.986" status="PASS" endtime="20161213 02:42:52.989"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:52.993">${port_num} = 22</msg>
<status starttime="20161213 02:42:52.993" status="PASS" endtime="20161213 02:42:52.993"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:52.994">${SSH_PORT} = 22</msg>
<status starttime="20161213 02:42:52.994" status="PASS" endtime="20161213 02:42:52.994"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:52.994">${https_num} = 443</msg>
<status starttime="20161213 02:42:52.994" status="PASS" endtime="20161213 02:42:52.994"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:52.995">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161213 02:42:52.995" status="PASS" endtime="20161213 02:42:52.995"></status>
</kw>
<status starttime="20161213 02:42:52.993" status="PASS" endtime="20161213 02:42:52.995"></status>
</kw>
<status starttime="20161213 02:42:52.990" status="PASS" endtime="20161213 02:42:52.995"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161213 02:42:52.997">Dictionary does not contain key 'port'.</msg>
<status starttime="20161213 02:42:52.996" status="FAIL" endtime="20161213 02:42:52.997"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:52.997">${has_port} = False</msg>
<status starttime="20161213 02:42:52.996" status="PASS" endtime="20161213 02:42:52.997"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161213 02:42:53.002" status="PASS" endtime="20161213 02:42:53.002"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161213 02:42:53.002" status="PASS" endtime="20161213 02:42:53.003"></status>
</kw>
<status starttime="20161213 02:42:53.001" status="PASS" endtime="20161213 02:42:53.003"></status>
</kw>
<status starttime="20161213 02:42:52.997" status="PASS" endtime="20161213 02:42:53.003"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:53.004">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161213 02:42:55.533">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161213 02:42:53.003" status="PASS" endtime="20161213 02:42:55.533"></status>
</kw>
<status starttime="20161213 02:42:52.984" status="PASS" endtime="20161213 02:42:55.534"></status>
</kw>
<test name="clear any logs" id="s1-s4-t1">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:55.537">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161213 02:42:55.536" status="PASS" endtime="20161213 02:42:55.537"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:55.538">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:55.537" status="PASS" endtime="20161213 02:42:55.538"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:42:55.538" status="PASS" endtime="20161213 02:42:55.539"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:55.547">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:42:55.546" status="PASS" endtime="20161213 02:42:55.547"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:55.547">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:42:55.547" status="PASS" endtime="20161213 02:42:55.548"></status>
</kw>
<status starttime="20161213 02:42:55.547" status="PASS" endtime="20161213 02:42:55.548"></status>
</kw>
<status starttime="20161213 02:42:55.545" status="PASS" endtime="20161213 02:42:55.548"></status>
</kw>
<status starttime="20161213 02:42:55.539" status="PASS" endtime="20161213 02:42:55.548"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:55.549">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:42:55.548" status="PASS" endtime="20161213 02:42:55.549"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:55.550">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:55.550" status="PASS" endtime="20161213 02:42:55.550"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:55.550">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:42:55.550" status="PASS" endtime="20161213 02:42:55.550"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:55.551">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:42:55.551" status="PASS" endtime="20161213 02:42:55.551"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:55.883">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:55.884">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:55.551" status="PASS" endtime="20161213 02:42:55.884"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:55.884">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:55.884" status="PASS" endtime="20161213 02:42:55.884"></status>
</kw>
<status starttime="20161213 02:42:55.548" status="PASS" endtime="20161213 02:42:55.885"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.172">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:56.172">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:55.885" status="PASS" endtime="20161213 02:42:56.172"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.177">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:42:56.176" status="PASS" endtime="20161213 02:42:56.177"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:56.177">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:42:56.177" status="PASS" endtime="20161213 02:42:56.178"></status>
</kw>
<status starttime="20161213 02:42:56.177" status="PASS" endtime="20161213 02:42:56.178"></status>
</kw>
<status starttime="20161213 02:42:56.176" status="PASS" endtime="20161213 02:42:56.178"></status>
</kw>
<status starttime="20161213 02:42:56.173" status="PASS" endtime="20161213 02:42:56.178"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:56.178">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:55.535" status="PASS" endtime="20161213 02:42:56.178"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:56.179">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:56.178" status="PASS" endtime="20161213 02:42:56.179"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.180">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161213 02:42:56.179" status="PASS" endtime="20161213 02:42:56.180"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.184">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161213 02:42:56.184" status="PASS" endtime="20161213 02:42:56.184"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:56.185">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161213 02:42:56.185" status="PASS" endtime="20161213 02:42:56.185"></status>
</kw>
<status starttime="20161213 02:42:56.184" status="PASS" endtime="20161213 02:42:56.185"></status>
</kw>
<status starttime="20161213 02:42:56.183" status="PASS" endtime="20161213 02:42:56.186"></status>
</kw>
<status starttime="20161213 02:42:56.180" status="PASS" endtime="20161213 02:42:56.186"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:56.187">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:42:56.186" status="PASS" endtime="20161213 02:42:56.187"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.188">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:56.187" status="PASS" endtime="20161213 02:42:56.188"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.188">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:42:56.188" status="PASS" endtime="20161213 02:42:56.188"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.189">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:42:56.189" status="PASS" endtime="20161213 02:42:56.189"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.708">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:56.708">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:56.189" status="PASS" endtime="20161213 02:42:56.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:56.709">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:56.708" status="PASS" endtime="20161213 02:42:56.709"></status>
</kw>
<status starttime="20161213 02:42:56.186" status="PASS" endtime="20161213 02:42:56.709"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.766">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:42:56.766">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:56.710" status="PASS" endtime="20161213 02:42:56.767"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.774">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:42:56.774" status="PASS" endtime="20161213 02:42:56.775"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:56.776">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:42:56.776" status="PASS" endtime="20161213 02:42:56.776"></status>
</kw>
<status starttime="20161213 02:42:56.775" status="PASS" endtime="20161213 02:42:56.776"></status>
</kw>
<status starttime="20161213 02:42:56.773" status="PASS" endtime="20161213 02:42:56.777"></status>
</kw>
<status starttime="20161213 02:42:56.767" status="PASS" endtime="20161213 02:42:56.777"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:56.777">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:56.179" status="PASS" endtime="20161213 02:42:56.777"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.778">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:42:56.778">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:42:56.778">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:42:56.777" status="PASS" endtime="20161213 02:42:56.778"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:56.778">Length is 0</msg>
<status starttime="20161213 02:42:56.778" status="PASS" endtime="20161213 02:42:56.778"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161213 02:42:56.779" status="PASS" endtime="20161213 02:42:56.783"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:56.784">Directory '&lt;a href="file:///tmp/root/17055/obmc-robot/logs"&gt;/tmp/root/17055/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161213 02:42:56.784" status="PASS" endtime="20161213 02:42:56.784"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:56.786">File '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17055/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161213 02:42:56.785" status="PASS" endtime="20161213 02:42:56.786"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:56.786">${exist} = True</msg>
<status starttime="20161213 02:42:56.784" status="PASS" endtime="20161213 02:42:56.786"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161213 02:42:56.786" status="PASS" endtime="20161213 02:42:56.790"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.791">${cur_time} = 2016-12-13 02:42:56:791150</msg>
<status starttime="20161213 02:42:56.791" status="PASS" endtime="20161213 02:42:56.792"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.792">${cur_time} = 20161213024256791150</msg>
<status starttime="20161213 02:42:56.792" status="PASS" endtime="20161213 02:42:56.792"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:56.793">${cur_time} = 20161213024256791150</msg>
<status starttime="20161213 02:42:56.790" status="PASS" endtime="20161213 02:42:56.793"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:56.794">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17055/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:56.793" status="PASS" endtime="20161213 02:42:56.794"></status>
</kw>
<status starttime="20161213 02:42:56.783" status="PASS" endtime="20161213 02:42:56.794"></status>
</kw>
<status starttime="20161213 02:42:56.779" status="PASS" endtime="20161213 02:42:56.795"></status>
</kw>
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status starttime="20161213 02:42:55.534" critical="yes" status="PASS" endtime="20161213 02:42:56.795"></status>
</test>
<test name="write a log" id="s1-s4-t2">
<kw name="create a test log">
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.797">${data} = {u'data': []}</msg>
<status starttime="20161213 02:42:56.797" status="PASS" endtime="20161213 02:42:56.797"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.799">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161213 02:42:56.798" status="PASS" endtime="20161213 02:42:56.799"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.800">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:56.799" status="PASS" endtime="20161213 02:42:56.800"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161213 02:42:56.800" status="PASS" endtime="20161213 02:42:56.801"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.808">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:42:56.807" status="PASS" endtime="20161213 02:42:56.808"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:56.809">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161213 02:42:56.808" status="PASS" endtime="20161213 02:42:56.809"></status>
</kw>
<status starttime="20161213 02:42:56.808" status="PASS" endtime="20161213 02:42:56.809"></status>
</kw>
<status starttime="20161213 02:42:56.806" status="PASS" endtime="20161213 02:42:56.809"></status>
</kw>
<status starttime="20161213 02:42:56.801" status="PASS" endtime="20161213 02:42:56.809"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:56.810">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:42:56.809" status="PASS" endtime="20161213 02:42:56.810"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.811">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:56.810" status="PASS" endtime="20161213 02:42:56.811"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.811">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:42:56.811" status="PASS" endtime="20161213 02:42:56.811"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:56.812">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:42:56.811" status="PASS" endtime="20161213 02:42:56.812"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:57.143">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:57.143">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:56.812" status="PASS" endtime="20161213 02:42:57.143"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:57.144">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:57.144" status="PASS" endtime="20161213 02:42:57.144"></status>
</kw>
<status starttime="20161213 02:42:56.809" status="PASS" endtime="20161213 02:42:57.144"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:57.438">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:57.438">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:57.145" status="PASS" endtime="20161213 02:42:57.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:57.447">${msg} = Response code:200, Content:{
  "data": 354, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:42:57.445" status="PASS" endtime="20161213 02:42:57.447"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:57.448">Response code:200, Content:{
  "data": 354, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:42:57.448" status="PASS" endtime="20161213 02:42:57.448"></status>
</kw>
<status starttime="20161213 02:42:57.447" status="PASS" endtime="20161213 02:42:57.448"></status>
</kw>
<status starttime="20161213 02:42:57.445" status="PASS" endtime="20161213 02:42:57.448"></status>
</kw>
<status starttime="20161213 02:42:57.439" status="PASS" endtime="20161213 02:42:57.449"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:57.449">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:56.797" status="PASS" endtime="20161213 02:42:57.449"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:57.450">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:57.449" status="PASS" endtime="20161213 02:42:57.450"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:57.451">To JSON using : content={
  "data": 354, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:42:57.451">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:42:57.451">${json} = {u'data': 354, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:42:57.450" status="PASS" endtime="20161213 02:42:57.451"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:57.452">${LOGID} = 354</msg>
<status starttime="20161213 02:42:57.451" status="PASS" endtime="20161213 02:42:57.452"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:57.453">${uri} = /org/openbmc/records/events/354</msg>
<status starttime="20161213 02:42:57.452" status="PASS" endtime="20161213 02:42:57.453"></status>
</kw>
<status starttime="20161213 02:42:56.796" status="PASS" endtime="20161213 02:42:57.453"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161213 02:42:57.454" status="PASS" endtime="20161213 02:42:57.459"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:57.460">Directory '&lt;a href="file:///tmp/root/17055/obmc-robot/logs"&gt;/tmp/root/17055/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161213 02:42:57.459" status="PASS" endtime="20161213 02:42:57.460"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:57.461">File '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17055/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161213 02:42:57.460" status="PASS" endtime="20161213 02:42:57.461"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:57.461">${exist} = True</msg>
<status starttime="20161213 02:42:57.460" status="PASS" endtime="20161213 02:42:57.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161213 02:42:57.461" status="PASS" endtime="20161213 02:42:57.464"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:57.465">${cur_time} = 2016-12-13 02:42:57:464786</msg>
<status starttime="20161213 02:42:57.465" status="PASS" endtime="20161213 02:42:57.465"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:57.465">${cur_time} = 20161213024257464786</msg>
<status starttime="20161213 02:42:57.465" status="PASS" endtime="20161213 02:42:57.466"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:42:57.466">${cur_time} = 20161213024257464786</msg>
<status starttime="20161213 02:42:57.464" status="PASS" endtime="20161213 02:42:57.466"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:42:57.467">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17055/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:42:57.466" status="PASS" endtime="20161213 02:42:57.467"></status>
</kw>
<status starttime="20161213 02:42:57.459" status="PASS" endtime="20161213 02:42:57.467"></status>
</kw>
<status starttime="20161213 02:42:57.454" status="PASS" endtime="20161213 02:42:57.467"></status>
</kw>
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status starttime="20161213 02:42:56.795" critical="yes" status="PASS" endtime="20161213 02:42:57.467"></status>
</test>
<kw library="SSHLibrary" name="Close All Connections" type="teardown">
<doc>Closes all open connections.</doc>
<status starttime="20161213 02:42:57.468" status="PASS" endtime="20161213 02:42:57.815"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status starttime="20161213 02:42:52.945" status="PASS" endtime="20161213 02:42:57.815"></status>
</suite>
<suite name="Test Obmcrest" id="s1-s5" source="/tmp/root/17055/obmc-robot/tests/test_obmcrest.robot">
<test name="Get a Property" id="s1-s5-t1">
<kw library="utils" name="Get Endpoint Paths">
<doc>Returns all url paths ending with given endpoint</doc>
<arguments>
<arg>${OPENBMC_BASE_URI}inventory</arg>
<arg>cpu</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${path}/enumerate</arg>
<arg>timeout=30</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:57.849">${base_uri} = /org/openbmc/inventory/enumerate</msg>
<status starttime="20161213 02:42:57.849" status="PASS" endtime="20161213 02:42:57.849"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:57.853">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/enumerate, method:Get, args:{}</msg>
<status starttime="20161213 02:42:57.853" status="PASS" endtime="20161213 02:42:57.853"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:57.854">URI:https://9.3.23.30:443/org/openbmc/inventory/enumerate, method:Get, args:{}</msg>
<status starttime="20161213 02:42:57.854" status="PASS" endtime="20161213 02:42:57.855"></status>
</kw>
<status starttime="20161213 02:42:57.854" status="PASS" endtime="20161213 02:42:57.855"></status>
</kw>
<status starttime="20161213 02:42:57.852" status="PASS" endtime="20161213 02:42:57.855"></status>
</kw>
<status starttime="20161213 02:42:57.849" status="PASS" endtime="20161213 02:42:57.855"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:57.856">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:42:57.855" status="PASS" endtime="20161213 02:42:57.856"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:57.857">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:42:57.856" status="PASS" endtime="20161213 02:42:57.857"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:57.857">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:42:57.857" status="PASS" endtime="20161213 02:42:57.857"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:57.858">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:42:57.857" status="PASS" endtime="20161213 02:42:57.858"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:42:58.752">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:42:58.753">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:57.858" status="PASS" endtime="20161213 02:42:58.753"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:42:58.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:42:58.753" status="PASS" endtime="20161213 02:42:58.754"></status>
</kw>
<status starttime="20161213 02:42:57.855" status="PASS" endtime="20161213 02:42:58.754"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.037">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:43:02.037">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:58.755" status="PASS" endtime="20161213 02:43:02.038"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.047">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
...</msg>
<status starttime="20161213 02:43:02.045" status="PASS" endtime="20161213 02:43:02.047"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:43:02.048">Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-fda20bd", 
      "Custom Field 2": "\tskiboot-5.2.0-opdirty", 
      "Custom Field 3": "\thostboot-c223637-1d3dbf3", 
      "Custom Field 4": "\tlinux-4.4.6-openpower1-opdirty-99d283b", 
      "Custom Field 5": "\tpetitboot-72928ed-opdirty-47f54ff", 
      "Custom Field 6": "\tbarreleye-xml-1250f06-opdirty", 
      "Custom Field 7": "\tocc-1093bf9-opdir", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-v1.8", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-323-g9273940-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/354"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/354"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "ECID:019C009740140718081C000000CF0361", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "ECID:019C00974014071822200000006705C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:43:02.047" status="PASS" endtime="20161213 02:43:02.048"></status>
</kw>
<status starttime="20161213 02:43:02.047" status="PASS" endtime="20161213 02:43:02.049"></status>
</kw>
<status starttime="20161213 02:43:02.044" status="PASS" endtime="20161213 02:43:02.049"></status>
</kw>
<status starttime="20161213 02:43:02.038" status="PASS" endtime="20161213 02:43:02.049"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:43:02.049">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:42:57.848" status="PASS" endtime="20161213 02:43:02.049"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:43:02.049">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:43:02.049" status="PASS" endtime="20161213 02:43:02.050"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.051">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-fda20bd", 
      "Custom Field 2": "\tskiboot-5.2.0-opdirty", 
      "Custom Field 3": "\thostboot-c223637-1d3dbf3", 
      "Custom Field 4": "\tlinux-4.4.6-openpower1-opdirty-99d283b", 
      "Custom Field 5": "\tpetitboot-72928ed-opdirty-47f54ff", 
      "Custom Field 6": "\tbarreleye-xml-1250f06-opdirty", 
      "Custom Field 7": "\tocc-1093bf9-opdir", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-v1.8", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-323-g9273940-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/354"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/354"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "ECID:019C009740140718081C000000CF0361", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "ECID:019C00974014071822200000006705C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:43:02.052">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:43:02.053">${content} = {u'data': {u'/org/openbmc/inventory/system/chassis/io_board': {u'Serial Number': u'10010VU00X1571001', u'fru_type': u'DAUGHTER_CARD', u'Name': u'BARRELEYE IO Board', u'Manufacturer': u'INGRASYS', u've...</msg>
<status starttime="20161213 02:43:02.050" status="PASS" endtime="20161213 02:43:02.053"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:43:02.054">${resp} = {u'/org/openbmc/inventory/system/chassis/io_board': {u'Serial Number': u'10010VU00X1571001', u'fru_type': u'DAUGHTER_CARD', u'Name': u'BARRELEYE IO Board', u'Manufacturer': u'INGRASYS', u'version': u'...</msg>
<status starttime="20161213 02:42:57.847" status="PASS" endtime="20161213 02:43:02.054"></status>
</kw>
<kw library="Collections" name="Log Dictionary">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:43:02.055">Dictionary size is 96 and it contains following items:
/org/openbmc/inventory/system: {u'present': u'True', u'fru_type': u'SYSTEM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/bios: {u'Serial Number': u'', u'version': u'', u'fru_type': u'SYSTEM', u'Name': u'OpenPOWER Firmware', u'Manufacturer': u'', u'Version': u'open-power-barreleye-v1.8', u'Custom Field 7': u'\tocc-1093bf9-opdir', u'Custom Field 6': u'\tbarreleye-xml-1250f06-opdirty', u'Custom Field 5': u'\tpetitboot-72928ed-opdirty-47f54ff', u'Custom Field 4': u'\tlinux-4.4.6-openpower1-opdirty-99d283b', u'Custom Field 3': u'\thostboot-c223637-1d3dbf3', u'Custom Field 2': u'\tskiboot-5.2.0-opdirty', u'Custom Field 1': u'\tbuildroot-fda20bd', u'fault': u'False', u'present': u'True', u'Model Number': u'', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis: {u'present': u'True', u'fru_type': u'SYSTEM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/fan0: {u'present': u'False', u'fru_type': u'FAN', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/fan1: {u'present': u'False', u'fru_type': u'FAN', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/fan2: {u'present': u'False', u'fru_type': u'FAN', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/fan3: {u'present': u'False', u'fru_type': u'FAN', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/fan4: {u'present': u'False', u'fru_type': u'FAN', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/fan5: {u'present': u'False', u'fru_type': u'FAN', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/hdd_backplane: {u'Serial Number': u'1A4218000-600-G64J000AX02', u'fru_type': u'DAUGHTER_CARD', u'Name': u'BARRELEYE BPx15', u'Manufacturer': u'FOXCONN', u'version': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'Rackspace US, Inc.', u'fault': u'False', u'present': u'True', u'Part Number': u'10034HV00-600-G', u'FRU File ID': u'FRU Ver 0.01', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/io_board: {u'Serial Number': u'10010VU00X1571001', u'fru_type': u'DAUGHTER_CARD', u'Name': u'BARRELEYE IO Board', u'Manufacturer': u'INGRASYS', u'version': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'1C666D854AD0', u'Custom Field 1': u'Rackspace US, Inc.', u'fault': u'False', u'present': u'True', u'Part Number': u'10010VU00-600-G', u'FRU File ID': u'FRU Ver 0.01', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0: {u'present': u'True', u'fru_type': u'PCIE_CARD', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1: {u'present': u'True', u'fru_type': u'PCIE_CARD', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot0: {u'present': u'False', u'fru_type': u'PCIE_CARD', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser: {u'present': u'True', u'fru_type': u'PCIE_RISER', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot1: {u'present': u'False', u'fru_type': u'PCIE_CARD', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser: {u'present': u'True', u'fru_type': u'PCIE_RISER', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot2: {u'present': u'False', u'fru_type': u'PCIE_CARD', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser: {u'present': u'True', u'fru_type': u'PCIE_RISER', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard: {u'Serial Number': u'65D0008X02', u'fru_type': u'MAIN_PLANAR', u'Type': 23, u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'True', u'present': u'True', u'Part Number': u'1A21GBR00-600-G', u'version': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/apss: {u'present': u'False', u'fru_type': u'MAIN_PLANAR', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/bmc: {u'present': u'False', u'manufacturer': u'ASPEED', u'fault': u'False', u'fru_type': u'BMC', u'version': u'v1.99.0-323-g9273940-dirty', u'is_fru': 0}
/org/openbmc/inventory/system/chassis/motherboard/cpu0: {u'Serial Number': u'YA1933063160', u'fru_type': u'CPU', u'Name': u'PROCESSOR MODULE', u'Manufacturer': u'IBM', u'version': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'EC:20', u'Custom Field 2': u'ECID:019A007780242718070D0000008D35D1', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Part Number': u'00UL864', u'FRU File ID': u'0x2020', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0: {u'present': u'False', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8: {u'present': u'False', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1: {u'Serial Number': u'YA1933063136', u'fru_type': u'CPU', u'Name': u'PROCESSOR MODULE', u'Manufacturer': u'IBM', u'version': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'EC:20', u'Custom Field 2': u'ECID:019A0077C120471803070000005A3822', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Part Number': u'00UL864', u'FRU File ID': u'0x2020', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1: {u'present': u'False', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7: {u'present': u'False', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm0: {u'Serial Number': u'0x317d9f30', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm1: {u'Serial Number': u'0x317d9f54', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm10: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm11: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm12: {u'Serial Number': u'0x317d9f25', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'True', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm13: {u'Serial Number': u'0x317d9f52', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'True', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm14: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm15: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm16: {u'Serial Number': u'0x317d9f2f', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm17: {u'Serial Number': u'0x317d9f37', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm18: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm19: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm2: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm2/event: {u'endpoints': [u'/org/openbmc/records/events/354']}
/org/openbmc/inventory/system/chassis/motherboard/dimm20: {u'Serial Number': u'0x317d9f29', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm21: {u'Serial Number': u'0x317d9f33', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm22: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm23: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm24: {u'Serial Number': u'0x317da404', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm25: {u'Serial Number': u'0x317d9f93', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm26: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm27: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm28: {u'Serial Number': u'0x317d9f27', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm29: {u'Serial Number': u'0x317d9f2c', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm3: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm3/event: {u'endpoints': [u'/org/openbmc/records/events/354']}
/org/openbmc/inventory/system/chassis/motherboard/dimm30: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm31: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm4: {u'Serial Number': u'0x317d9f2b', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm5: {u'Serial Number': u'0x317d9f53', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm6: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm7: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm8: {u'Serial Number': u'0x317d9f94', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'True', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm9: {u'Serial Number': u'0x317d9f56', u'version': u'', u'fru_type': u'DIMM', u'Name': u'0x0b', u'Manufacturer': u'0xce80', u'Version': u'0x0000', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'True', u'present': u'True', u'Model Number': u'M393B2G70DB0-YK0  ', u'Asset Tag': u'', u'FRU File ID': u'', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf0: {u'Serial Number': u'64Q0004X02', u'fru_type': u'MEMORY_BUFFER', u'Name': u'BARRELEYE', u'Manufacturer': u'INGRASYS', u'version': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'ECID:019C009740140718081C000000CF0361', u'fault': u'False', u'present': u'True', u'Part Number': u'1A4218800-600-G', u'FRU File ID': u'', u'is_fru': 0, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf1: {u'Serial Number': u'64Q0004X02', u'fru_type': u'MEMORY_BUFFER', u'Name': u'BARRELEYE', u'Manufacturer': u'INGRASYS', u'version': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'ECID:019C00974014071822200000006705C1', u'fault': u'False', u'present': u'True', u'Part Number': u'1A4218800-600-G', u'FRU File ID': u'', u'is_fru': 0, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf2: {u'Serial Number': u'64Q0004X02', u'fru_type': u'MEMORY_BUFFER', u'Name': u'BARRELEYE', u'Manufacturer': u'INGRASYS', u'version': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'ECID:00000000000000000000000000000000', u'fault': u'True', u'present': u'True', u'Part Number': u'1A4218800-600-G', u'FRU File ID': u'', u'is_fru': 0, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf3: {u'Serial Number': u'64Q0004X02', u'fru_type': u'MEMORY_BUFFER', u'Name': u'BARRELEYE', u'Manufacturer': u'INGRASYS', u'version': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'ECID:00000000000000000000000000000000', u'fault': u'True', u'present': u'True', u'Part Number': u'1A4218800-600-G', u'FRU File ID': u'', u'is_fru': 0, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf4: {u'Serial Number': u'64Q0004X02', u'fru_type': u'MEMORY_BUFFER', u'Name': u'BARRELEYE', u'Manufacturer': u'INGRASYS', u'version': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Part Number': u'1A4218800-600-G', u'FRU File ID': u'', u'is_fru': 0, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf5: {u'Serial Number': u'64Q0004X02', u'fru_type': u'MEMORY_BUFFER', u'Name': u'BARRELEYE', u'Manufacturer': u'INGRASYS', u'version': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Part Number': u'1A4218800-600-G', u'FRU File ID': u'', u'is_fru': 0, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf6: {u'Serial Number': u'64Q0004X02', u'fru_type': u'MEMORY_BUFFER', u'Name': u'BARRELEYE', u'Manufacturer': u'INGRASYS', u'version': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Part Number': u'1A4218800-600-G', u'FRU File ID': u'', u'is_fru': 0, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf7: {u'Serial Number': u'64Q0004X02', u'fru_type': u'MEMORY_BUFFER', u'Name': u'BARRELEYE', u'Manufacturer': u'INGRASYS', u'version': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'False', u'present': u'True', u'Part Number': u'1A4218800-600-G', u'FRU File ID': u'', u'is_fru': 0, u'Custom Field 8': u''}
/org/openbmc/inventory/system/chassis/motherboard/pcieclock: {u'present': u'False', u'fru_type': u'MAIN_PLANAR', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/refclock: {u'present': u'False', u'fru_type': u'MAIN_PLANAR', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/todclock: {u'present': u'False', u'fru_type': u'MAIN_PLANAR', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/sas_expander: {u'Serial Number': u'1A421AR00-600-G64J0002X02', u'fru_type': u'DAUGHTER_CARD', u'Name': u'BARRELEYE PEB', u'Manufacturer': u'FOXCONN', u'version': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'Rackspace US, Inc.', u'fault': u'False', u'present': u'True', u'Part Number': u'10034HV00-600-G', u'FRU File ID': u'FRU Ver 0.01', u'is_fru': 1, u'Custom Field 8': u''}
/org/openbmc/inventory/system/misc: {u'Serial Number': u'64Q0004X02', u'fru_type': u'SYSTEM', u'Name': u'BARRELEYE', u'Manufacturer': u'INGRASYS', u'version': u'', u'Custom Field 7': u'', u'Custom Field 6': u'', u'Custom Field 5': u'', u'Custom Field 4': u'', u'Custom Field 3': u'', u'Custom Field 2': u'', u'Custom Field 1': u'', u'fault': u'True', u'present': u'True', u'Part Number': u'1A4218800-600-G', u'FRU File ID': u'', u'is_fru': 0, u'Custom Field 8': u''}
/org/openbmc/inventory/system/systemevent: {u'present': u'False', u'fru_type': u'SYSTEM_EVENT', u'version': u'', u'is_fru': 0, u'fault': u'False'}</msg>
<status starttime="20161213 02:43:02.054" status="PASS" endtime="20161213 02:43:02.056"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.057">${list} = [u'/org/openbmc/inventory/system', u'/org/openbmc/inventory/system/bios', u'/org/openbmc/inventory/system/chassis', u'/org/openbmc/inventory/system/chassis/fan0', u'/org/openbmc/inventory/system/chass...</msg>
<status starttime="20161213 02:43:02.056" status="PASS" endtime="20161213 02:43:02.057"></status>
</kw>
<kw library="Collections" name="Get Matches">
<doc>Returns a list of matches to ``pattern`` in ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>regexp=^.*[0-9a-z_].${endpoint}[0-9]*$</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.059">${resp} = [u'/org/openbmc/inventory/system/chassis/motherboard/cpu0', u'/org/openbmc/inventory/system/chassis/motherboard/cpu1']</msg>
<status starttime="20161213 02:43:02.057" status="PASS" endtime="20161213 02:43:02.059"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:43:02.060">${url_list} = [u'/org/openbmc/inventory/system/chassis/motherboard/cpu0', u'/org/openbmc/inventory/system/chassis/motherboard/cpu1']</msg>
<status starttime="20161213 02:42:57.847" status="PASS" endtime="20161213 02:43:02.060"></status>
</kw>
<kw library="Collections" name="Get From List">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${url_list}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${url}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.060">${url} = /org/openbmc/inventory/system/chassis/motherboard/cpu0</msg>
<status starttime="20161213 02:43:02.060" status="PASS" endtime="20161213 02:43:02.060"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${url}</arg>
<arg>is_fru</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.062">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru</msg>
<status starttime="20161213 02:43:02.061" status="PASS" endtime="20161213 02:43:02.062"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.066">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status starttime="20161213 02:43:02.066" status="PASS" endtime="20161213 02:43:02.066"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:43:02.067">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status starttime="20161213 02:43:02.067" status="PASS" endtime="20161213 02:43:02.067"></status>
</kw>
<status starttime="20161213 02:43:02.066" status="PASS" endtime="20161213 02:43:02.067"></status>
</kw>
<status starttime="20161213 02:43:02.065" status="PASS" endtime="20161213 02:43:02.067"></status>
</kw>
<status starttime="20161213 02:43:02.062" status="PASS" endtime="20161213 02:43:02.067"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:43:02.068">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161213 02:43:02.068" status="PASS" endtime="20161213 02:43:02.069"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.069">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161213 02:43:02.069" status="PASS" endtime="20161213 02:43:02.069"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.070">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161213 02:43:02.069" status="PASS" endtime="20161213 02:43:02.070"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.070">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161213 02:43:02.070" status="PASS" endtime="20161213 02:43:02.070"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.404">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161213 02:43:02.404">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:43:02.070" status="PASS" endtime="20161213 02:43:02.404"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:43:02.405">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161213 02:43:02.405" status="PASS" endtime="20161213 02:43:02.405"></status>
</kw>
<status starttime="20161213 02:43:02.067" status="PASS" endtime="20161213 02:43:02.406"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.494">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, headers=None </msg>
<msg level="INFO" timestamp="20161213 02:43:02.494">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:43:02.406" status="PASS" endtime="20161213 02:43:02.494"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.501">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:43:02.500" status="PASS" endtime="20161213 02:43:02.501"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161213 02:43:02.503">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161213 02:43:02.502" status="PASS" endtime="20161213 02:43:02.503"></status>
</kw>
<status starttime="20161213 02:43:02.502" status="PASS" endtime="20161213 02:43:02.503"></status>
</kw>
<status starttime="20161213 02:43:02.500" status="PASS" endtime="20161213 02:43:02.503"></status>
</kw>
<status starttime="20161213 02:43:02.494" status="PASS" endtime="20161213 02:43:02.503"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:43:02.504">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161213 02:43:02.061" status="PASS" endtime="20161213 02:43:02.504"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.504">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161213 02:43:02.505">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161213 02:43:02.505">${content} = {u'data': 1, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161213 02:43:02.504" status="PASS" endtime="20161213 02:43:02.505"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:43:02.505">${resp} = 1</msg>
<status starttime="20161213 02:43:02.060" status="PASS" endtime="20161213 02:43:02.505"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${1}</arg>
</arguments>
<status starttime="20161213 02:43:02.506" status="PASS" endtime="20161213 02:43:02.506"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161213 02:43:02.507" status="PASS" endtime="20161213 02:43:02.510"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:43:02.511">Directory '&lt;a href="file:///tmp/root/17055/obmc-robot/logs"&gt;/tmp/root/17055/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161213 02:43:02.511" status="PASS" endtime="20161213 02:43:02.511"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:43:02.512">File '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17055/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161213 02:43:02.511" status="PASS" endtime="20161213 02:43:02.512"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:43:02.512">${exist} = True</msg>
<status starttime="20161213 02:43:02.511" status="PASS" endtime="20161213 02:43:02.512"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161213 02:43:02.512" status="PASS" endtime="20161213 02:43:02.515"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.516">${cur_time} = 2016-12-13 02:43:02:515842</msg>
<status starttime="20161213 02:43:02.516" status="PASS" endtime="20161213 02:43:02.516"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161213 02:43:02.517">${cur_time} = 20161213024302515842</msg>
<status starttime="20161213 02:43:02.516" status="PASS" endtime="20161213 02:43:02.517"></status>
</kw>
<msg level="INFO" timestamp="20161213 02:43:02.517">${cur_time} = 20161213024302515842</msg>
<status starttime="20161213 02:43:02.515" status="PASS" endtime="20161213 02:43:02.517"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20161213 02:43:02.518">Appended to file '&lt;a href="file:///tmp/root/17055/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17055/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161213 02:43:02.517" status="PASS" endtime="20161213 02:43:02.518"></status>
</kw>
<status starttime="20161213 02:43:02.510" status="PASS" endtime="20161213 02:43:02.518"></status>
</kw>
<status starttime="20161213 02:43:02.507" status="PASS" endtime="20161213 02:43:02.518"></status>
</kw>
<tags>
<tag>Get_a_Property</tag>
</tags>
<status starttime="20161213 02:42:57.846" critical="yes" status="PASS" endtime="20161213 02:43:02.518"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status starttime="20161213 02:42:57.820" status="PASS" endtime="20161213 02:43:02.519"></status>
</suite>
<status starttime="20161213 02:38:58.886" status="FAIL" endtime="20161213 02:43:02.523"></status>
</suite>
<statistics>
<total>
<stat pass="6" fail="1">Critical Tests</stat>
<stat pass="6" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="2" fail="0">CI</stat>
<stat pass="1" fail="0">clear_any_logs</stat>
<stat pass="1" fail="0">Create_error_log_on_single_FRU</stat>
<stat pass="1" fail="0">Delete_error_log</stat>
<stat pass="1" fail="0">Get_a_Property</stat>
<stat pass="0" fail="1">power_on_test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
<stat pass="1" fail="0">write_a_log</stat>
</tag>
<suite>
<stat name="Tests" pass="6" fail="1" id="s1">Tests</stat>
<stat name="Security" pass="1" fail="0" id="s1-s1">Tests.Security</stat>
<stat name="Test Ssl" pass="1" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat name="Test Association" pass="2" fail="0" id="s1-s2">Tests.Test Association</stat>
<stat name="Test Basic Poweron" pass="0" fail="1" id="s1-s3">Tests.Test Basic Poweron</stat>
<stat name="Test Eventlog" pass="2" fail="0" id="s1-s4">Tests.Test Eventlog</stat>
<stat name="Test Obmcrest" pass="1" fail="0" id="s1-s5">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
