<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171002 02:48:41.063" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:48:42.224" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:48:42.224" starttime="20171002 02:48:42.223"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:48:42.225" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:48:42.225" starttime="20171002 02:48:42.225"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:48:42.226" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:48:42.226" starttime="20171002 02:48:42.226"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:48:42.227" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:48:42.227" starttime="20171002 02:48:42.226"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:48:42.448" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:48:42.448" starttime="20171002 02:48:42.228"></status>
</kw>
<msg timestamp="20171002 02:48:42.448" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:48:42.448" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:42.448" starttime="20171002 02:48:42.227"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:48:42.449" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:42.449" starttime="20171002 02:48:42.448"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:42.450" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:42.450" starttime="20171002 02:48:42.449"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:42.450" starttime="20171002 02:48:42.223"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:42.450" starttime="20171002 02:48:42.222"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:42.450" starttime="20171002 02:48:42.221"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:48:42.451" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20171002 02:48:42.451" starttime="20171002 02:48:42.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:48:42.452" starttime="20171002 02:48:42.451"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:48:42.496" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171002 02:48:42.496" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:42.496" starttime="20171002 02:48:42.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:48:42.497" starttime="20171002 02:48:42.496"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:48:42.497" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:48:42.497" starttime="20171002 02:48:42.497"></status>
</kw>
<msg timestamp="20171002 02:48:42.498" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:42.498" starttime="20171002 02:48:42.220"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171002 02:48:42.498" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171002 02:48:42.498" starttime="20171002 02:48:42.498"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:42.498" starttime="20171002 02:48:42.220"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Smart Power Off</arg>
</arguments>
<kw name="Smart Power Off" library="boot_utils">
<doc>Do a smart power off.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${quiet}</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171002 02:48:42.500" level="INFO">${loc_quiet} = 0</msg>
<status status="PASS" endtime="20171002 02:48:42.500" starttime="20171002 02:48:42.500"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>REST Power Off \ stack_mode=skip</arg>
<arg>\ \ quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:48:42.501" level="INFO">${cmd_buf} = REST Power Off  stack_mode=skip   quiet=0</msg>
<status status="PASS" endtime="20171002 02:48:42.501" starttime="20171002 02:48:42.500"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
<arg>quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="REST Power Off" library="boot_utils">
<doc>Do "REST Power Off" boot test.</doc>
<arguments>
<arg>stack_mode=skip</arg>
<arg>quiet=0</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=REST Power Off</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:48:42.503" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=REST Power Off  loc_stack_mode=skip  loc_quiet=0</msg>
<status status="PASS" endtime="20171002 02:48:42.503" starttime="20171002 02:48:42.502"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=REST Power Off</arg>
<arg>loc_stack_mode=skip</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:48:42.517" starttime="20171002 02:48:42.516"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171002 02:48:42.518" level="INFO">${boot_stack} = REST Power Off</msg>
<msg timestamp="20171002 02:48:42.519" level="INFO">${stack_mode} = skip</msg>
<msg timestamp="20171002 02:48:42.520" level="INFO">${quiet} = 0</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171002 02:48:42.682" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:48:42.683" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20171002 02:48:43.467" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171002 02:48:43.467" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171002 02:48:43.544" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171002 02:48:43.557" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171002 02:48:43.557" level="INFO">${stderr} = </msg>
<msg timestamp="20171002 02:48:43.557" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171002 02:48:43.557" starttime="20171002 02:48:42.656"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171002 02:48:43.558" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171002 02:48:43.558" starttime="20171002 02:48:43.558"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171002 02:48:43.559" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171002 02:48:43.559" starttime="20171002 02:48:43.558"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:43.559" starttime="20171002 02:48:42.654"></status>
</kw>
<msg timestamp="20171002 02:48:43.559" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20171002 02:48:43.906" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171002 02:48:43.918" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:48:43.957" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:48:43.958" starttime="20171002 02:48:43.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:48:43.959" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:48:43.959" starttime="20171002 02:48:43.959"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:48:43.960" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:48:43.960" starttime="20171002 02:48:43.959"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:48:43.961" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:48:43.961" starttime="20171002 02:48:43.960"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:48:44.197" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:48:44.197" starttime="20171002 02:48:43.961"></status>
</kw>
<msg timestamp="20171002 02:48:44.197" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:48:44.197" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.197" starttime="20171002 02:48:43.961"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:48:44.198" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.198" starttime="20171002 02:48:44.198"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:44.199" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.199" starttime="20171002 02:48:44.199"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.199" starttime="20171002 02:48:43.956"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.199" starttime="20171002 02:48:43.955"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.199" starttime="20171002 02:48:43.955"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:48:44.200" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171002 02:48:44.200" starttime="20171002 02:48:44.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:44.202" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 02:48:44.203" starttime="20171002 02:48:44.202"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:44.203" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 02:48:44.204" starttime="20171002 02:48:44.203"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.204" starttime="20171002 02:48:44.203"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.204" starttime="20171002 02:48:44.201"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.204" starttime="20171002 02:48:44.201"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:48:44.291" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171002 02:48:44.291" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.291" starttime="20171002 02:48:44.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:44.293" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:44.293" starttime="20171002 02:48:44.293"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:44.294" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:44.294" starttime="20171002 02:48:44.294"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.294" starttime="20171002 02:48:44.293"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.294" starttime="20171002 02:48:44.292"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.295" starttime="20171002 02:48:44.291"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:48:44.295" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:48:44.295" starttime="20171002 02:48:44.295"></status>
</kw>
<msg timestamp="20171002 02:48:44.296" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.296" starttime="20171002 02:48:43.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:44.296" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.296" starttime="20171002 02:48:44.296"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 02:48:44.297" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 02:48:44.297" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 02:48:44.297" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171002 02:48:44.297" starttime="20171002 02:48:44.297"></status>
</kw>
<msg timestamp="20171002 02:48:44.297" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171002 02:48:44.297" starttime="20171002 02:48:43.953"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.298" starttime="20171002 02:48:43.952"></status>
</kw>
<msg timestamp="20171002 02:48:44.322" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20171002 02:48:44.323" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20171002 02:48:44.323" starttime="20171002 02:48:43.940"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:48:44.324" starttime="20171002 02:48:44.324"></status>
</kw>
<msg timestamp="20171002 02:48:44.324" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171002 02:48:44.324" starttime="20171002 02:48:44.323"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171002 02:48:44.346" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171002 02:48:44.346" starttime="20171002 02:48:44.346"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:48:44.348" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171002 02:48:44.348" starttime="20171002 02:48:44.347"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:48:44.351" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:48:44.352" starttime="20171002 02:48:44.351"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:48:44.352" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:48:44.352" starttime="20171002 02:48:44.352"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:48:44.353" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:48:44.353" starttime="20171002 02:48:44.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:48:44.354" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:48:44.354" starttime="20171002 02:48:44.353"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:48:44.561" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:48:44.561" starttime="20171002 02:48:44.355"></status>
</kw>
<msg timestamp="20171002 02:48:44.561" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:48:44.562" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.562" starttime="20171002 02:48:44.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:48:44.562" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.562" starttime="20171002 02:48:44.562"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:44.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.563" starttime="20171002 02:48:44.563"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.563" starttime="20171002 02:48:44.350"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.563" starttime="20171002 02:48:44.350"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.564" starttime="20171002 02:48:44.349"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:48:44.564" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171002 02:48:44.564" starttime="20171002 02:48:44.564"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:48:44.565" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:48:44.565" starttime="20171002 02:48:44.565"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:48:44.565" starttime="20171002 02:48:44.565"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:44.567" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171002 02:48:44.567" starttime="20171002 02:48:44.566"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:44.568" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171002 02:48:44.568" starttime="20171002 02:48:44.568"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.568" starttime="20171002 02:48:44.567"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.568" starttime="20171002 02:48:44.566"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:48:44.700" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171002 02:48:44.700" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.700" starttime="20171002 02:48:44.569"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:44.702" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:44.702" starttime="20171002 02:48:44.701"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:44.703" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:44.703" starttime="20171002 02:48:44.703"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.703" starttime="20171002 02:48:44.702"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.703" starttime="20171002 02:48:44.701"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:48:44.704" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:48:44.704" starttime="20171002 02:48:44.704"></status>
</kw>
<msg timestamp="20171002 02:48:44.704" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.704" starttime="20171002 02:48:44.348"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:44.705" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.705" starttime="20171002 02:48:44.704"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20171002 02:48:44.705" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 02:48:44.705" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 02:48:44.706" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20171002 02:48:44.706" starttime="20171002 02:48:44.705"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.706" starttime="20171002 02:48:44.347"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.706" starttime="20171002 02:48:44.345"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.706" starttime="20171002 02:48:44.325"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171002 02:48:44.707" starttime="20171002 02:48:44.707"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:48:44.708" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171002 02:48:44.708" starttime="20171002 02:48:44.707"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:48:44.712" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:48:44.713" starttime="20171002 02:48:44.712"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:48:44.713" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:48:44.713" starttime="20171002 02:48:44.713"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:48:44.714" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:48:44.714" starttime="20171002 02:48:44.714"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:48:44.715" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:48:44.715" starttime="20171002 02:48:44.714"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:48:44.897" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:48:44.898" starttime="20171002 02:48:44.715"></status>
</kw>
<msg timestamp="20171002 02:48:44.898" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:48:44.898" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.898" starttime="20171002 02:48:44.715"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:48:44.898" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.899" starttime="20171002 02:48:44.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:44.899" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.899" starttime="20171002 02:48:44.899"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.899" starttime="20171002 02:48:44.711"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.900" starttime="20171002 02:48:44.711"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.900" starttime="20171002 02:48:44.710"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:48:44.900" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171002 02:48:44.900" starttime="20171002 02:48:44.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:44.903" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 02:48:44.903" starttime="20171002 02:48:44.902"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:44.904" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 02:48:44.904" starttime="20171002 02:48:44.903"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.904" starttime="20171002 02:48:44.903"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.904" starttime="20171002 02:48:44.901"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.904" starttime="20171002 02:48:44.901"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:48:44.966" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171002 02:48:44.966" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.966" starttime="20171002 02:48:44.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:44.968" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:44.968" starttime="20171002 02:48:44.967"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:44.969" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:44.969" starttime="20171002 02:48:44.968"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.969" starttime="20171002 02:48:44.968"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.969" starttime="20171002 02:48:44.967"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.969" starttime="20171002 02:48:44.966"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:48:44.970" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:48:44.970" starttime="20171002 02:48:44.969"></status>
</kw>
<msg timestamp="20171002 02:48:44.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.970" starttime="20171002 02:48:44.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:44.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.971" starttime="20171002 02:48:44.970"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 02:48:44.971" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 02:48:44.971" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 02:48:44.971" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171002 02:48:44.971" starttime="20171002 02:48:44.971"></status>
</kw>
<msg timestamp="20171002 02:48:44.972" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171002 02:48:44.972" starttime="20171002 02:48:44.709"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.972" starttime="20171002 02:48:44.708"></status>
</kw>
<msg timestamp="20171002 02:48:44.972" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171002 02:48:44.972" starttime="20171002 02:48:44.708"></status>
</kw>
<msg timestamp="20171002 02:48:44.972" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171002 02:48:44.972" starttime="20171002 02:48:44.706"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171002 02:48:44.973" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:44.973" starttime="20171002 02:48:44.973"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:44.973" starttime="20171002 02:48:43.938"></status>
</kw>
<msg timestamp="20171002 02:48:45.015" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171002 02:48:45.051" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171002 02:48:45.060" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171002 02:48:45.061" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${0}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:48:45.115" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:48:45.116" starttime="20171002 02:48:45.115"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:48:45.117" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:48:45.117" starttime="20171002 02:48:45.117"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:48:45.118" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:48:45.118" starttime="20171002 02:48:45.118"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:48:45.119" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:48:45.119" starttime="20171002 02:48:45.118"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:48:45.317" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:48:45.317" starttime="20171002 02:48:45.120"></status>
</kw>
<msg timestamp="20171002 02:48:45.317" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:48:45.317" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.317" starttime="20171002 02:48:45.119"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:48:45.318" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.318" starttime="20171002 02:48:45.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:45.319" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.319" starttime="20171002 02:48:45.318"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.319" starttime="20171002 02:48:45.114"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.319" starttime="20171002 02:48:45.114"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.319" starttime="20171002 02:48:45.111"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:48:45.321" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171002 02:48:45.321" starttime="20171002 02:48:45.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:45.323" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 02:48:45.323" starttime="20171002 02:48:45.322"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:45.324" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 02:48:45.324" starttime="20171002 02:48:45.324"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.324" starttime="20171002 02:48:45.323"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.324" starttime="20171002 02:48:45.322"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.325" starttime="20171002 02:48:45.321"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:48:45.423" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20171002 02:48:45.423" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.423" starttime="20171002 02:48:45.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:45.425" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:45.425" starttime="20171002 02:48:45.424"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:45.426" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:45.427" starttime="20171002 02:48:45.426"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.427" starttime="20171002 02:48:45.426"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.427" starttime="20171002 02:48:45.424"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.427" starttime="20171002 02:48:45.423"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:48:45.428" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:48:45.428" starttime="20171002 02:48:45.427"></status>
</kw>
<msg timestamp="20171002 02:48:45.428" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.428" starttime="20171002 02:48:45.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:45.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.429" starttime="20171002 02:48:45.428"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 02:48:45.429" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 02:48:45.429" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 02:48:45.429" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20171002 02:48:45.429" starttime="20171002 02:48:45.429"></status>
</kw>
<msg timestamp="20171002 02:48:45.430" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171002 02:48:45.430" starttime="20171002 02:48:45.109"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.430" starttime="20171002 02:48:45.107"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${0}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:48:45.434" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:48:45.435" starttime="20171002 02:48:45.434"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:48:45.435" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:48:45.435" starttime="20171002 02:48:45.435"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:48:45.436" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:48:45.436" starttime="20171002 02:48:45.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:48:45.437" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:48:45.437" starttime="20171002 02:48:45.436"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:48:45.658" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:48:45.659" starttime="20171002 02:48:45.437"></status>
</kw>
<msg timestamp="20171002 02:48:45.659" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:48:45.659" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.659" starttime="20171002 02:48:45.437"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:48:45.659" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.660" starttime="20171002 02:48:45.659"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:45.660" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.660" starttime="20171002 02:48:45.660"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.661" starttime="20171002 02:48:45.433"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.661" starttime="20171002 02:48:45.433"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.661" starttime="20171002 02:48:45.432"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:48:45.661" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20171002 02:48:45.661" starttime="20171002 02:48:45.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:45.664" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 02:48:45.664" starttime="20171002 02:48:45.664"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:45.665" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 02:48:45.665" starttime="20171002 02:48:45.665"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.665" starttime="20171002 02:48:45.664"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.666" starttime="20171002 02:48:45.662"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.666" starttime="20171002 02:48:45.662"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:48:45.728" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20171002 02:48:45.728" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.728" starttime="20171002 02:48:45.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:45.730" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:45.730" starttime="20171002 02:48:45.729"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:45.731" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:45.731" starttime="20171002 02:48:45.731"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.731" starttime="20171002 02:48:45.730"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.731" starttime="20171002 02:48:45.729"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.731" starttime="20171002 02:48:45.728"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:48:45.732" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:48:45.732" starttime="20171002 02:48:45.732"></status>
</kw>
<msg timestamp="20171002 02:48:45.732" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.732" starttime="20171002 02:48:45.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:45.733" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.733" starttime="20171002 02:48:45.733"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 02:48:45.734" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 02:48:45.734" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 02:48:45.734" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20171002 02:48:45.734" starttime="20171002 02:48:45.733"></status>
</kw>
<msg timestamp="20171002 02:48:45.734" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20171002 02:48:45.734" starttime="20171002 02:48:45.431"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.734" starttime="20171002 02:48:45.431"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<arguments>
<arg>quiet=${0}</arg>
</arguments>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20171002 02:48:45.736" starttime="20171002 02:48:45.736"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>New Get Boot Progress</arg>
</arguments>
<assign>
<var>${new_status}</var>
<var>${new_value}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:48:45.740" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:48:45.741" starttime="20171002 02:48:45.740"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:48:45.742" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:48:45.742" starttime="20171002 02:48:45.741"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:48:45.742" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:48:45.742" starttime="20171002 02:48:45.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:48:45.743" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:48:45.743" starttime="20171002 02:48:45.743"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:48:45.933" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:48:45.933" starttime="20171002 02:48:45.744"></status>
</kw>
<msg timestamp="20171002 02:48:45.933" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:48:45.933" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.934" starttime="20171002 02:48:45.743"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:48:45.934" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.934" starttime="20171002 02:48:45.934"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:45.935" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:45.935" starttime="20171002 02:48:45.935"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.935" starttime="20171002 02:48:45.739"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.935" starttime="20171002 02:48:45.739"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.935" starttime="20171002 02:48:45.738"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:48:45.936" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171002 02:48:45.936" starttime="20171002 02:48:45.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:45.938" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 02:48:45.938" starttime="20171002 02:48:45.937"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:45.939" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 02:48:45.939" starttime="20171002 02:48:45.939"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.939" starttime="20171002 02:48:45.938"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.940" starttime="20171002 02:48:45.937"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:45.940" starttime="20171002 02:48:45.936"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:48:46.027" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171002 02:48:46.028" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.028" starttime="20171002 02:48:45.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:46.030" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:46.030" starttime="20171002 02:48:46.029"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:46.031" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:46.031" starttime="20171002 02:48:46.031"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.031" starttime="20171002 02:48:46.030"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.031" starttime="20171002 02:48:46.028"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.031" starttime="20171002 02:48:46.028"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:48:46.032" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:48:46.032" starttime="20171002 02:48:46.032"></status>
</kw>
<msg timestamp="20171002 02:48:46.032" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.033" starttime="20171002 02:48:45.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:46.033" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.033" starttime="20171002 02:48:46.033"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 02:48:46.034" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 02:48:46.034" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 02:48:46.034" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status status="PASS" endtime="20171002 02:48:46.034" starttime="20171002 02:48:46.034"></status>
</kw>
<msg timestamp="20171002 02:48:46.034" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20171002 02:48:46.035" starttime="20171002 02:48:45.737"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.035" starttime="20171002 02:48:45.737"></status>
</kw>
<msg timestamp="20171002 02:48:46.035" level="INFO">${new_status} = PASS</msg>
<msg timestamp="20171002 02:48:46.035" level="INFO">${new_value} = Unspecified</msg>
<status status="PASS" endtime="20171002 02:48:46.035" starttime="20171002 02:48:45.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${new_status}' == 'PASS'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
</arguments>
<msg timestamp="20171002 02:48:46.037" level="INFO">${boot_prog_method} = New</msg>
<status status="PASS" endtime="20171002 02:48:46.037" starttime="20171002 02:48:46.036"></status>
</kw>
<kw name="Rqpvars" library="gen_robot_print">
<arguments>
<arg>boot_prog_method</arg>
</arguments>
<status status="PASS" endtime="20171002 02:48:46.038" starttime="20171002 02:48:46.037"></status>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20171002 02:48:46.039" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171002 02:48:46.039" starttime="20171002 02:48:46.038"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.039" starttime="20171002 02:48:46.036"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.039" starttime="20171002 02:48:46.035"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.039" starttime="20171002 02:48:45.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:48:46.043" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:48:46.044" starttime="20171002 02:48:46.043"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:48:46.044" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:48:46.044" starttime="20171002 02:48:46.044"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:48:46.045" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:48:46.045" starttime="20171002 02:48:46.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:48:46.046" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:48:46.046" starttime="20171002 02:48:46.045"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:48:46.251" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:48:46.251" starttime="20171002 02:48:46.047"></status>
</kw>
<msg timestamp="20171002 02:48:46.251" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:48:46.251" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.251" starttime="20171002 02:48:46.046"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:48:46.252" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.252" starttime="20171002 02:48:46.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:46.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.253" starttime="20171002 02:48:46.252"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.253" starttime="20171002 02:48:46.043"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.253" starttime="20171002 02:48:46.042"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.253" starttime="20171002 02:48:46.041"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:48:46.254" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171002 02:48:46.254" starttime="20171002 02:48:46.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:46.256" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 02:48:46.256" starttime="20171002 02:48:46.256"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:46.257" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 02:48:46.257" starttime="20171002 02:48:46.257"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.258" starttime="20171002 02:48:46.257"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.258" starttime="20171002 02:48:46.255"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.258" starttime="20171002 02:48:46.254"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:48:46.345" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20171002 02:48:46.345" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.346" starttime="20171002 02:48:46.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:46.347" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:46.347" starttime="20171002 02:48:46.347"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:46.348" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:46.348" starttime="20171002 02:48:46.348"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.349" starttime="20171002 02:48:46.348"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.349" starttime="20171002 02:48:46.346"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.349" starttime="20171002 02:48:46.346"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:48:46.354" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:48:46.354" starttime="20171002 02:48:46.354"></status>
</kw>
<msg timestamp="20171002 02:48:46.354" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.354" starttime="20171002 02:48:46.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:46.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.355" starttime="20171002 02:48:46.354"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 02:48:46.355" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 02:48:46.356" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 02:48:46.356" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status status="PASS" endtime="20171002 02:48:46.356" starttime="20171002 02:48:46.355"></status>
</kw>
<msg timestamp="20171002 02:48:46.356" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20171002 02:48:46.356" starttime="20171002 02:48:46.040"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.356" starttime="20171002 02:48:46.040"></status>
</kw>
<msg timestamp="20171002 02:48:46.356" level="INFO">${state} = Unspecified</msg>
<status status="PASS" endtime="20171002 02:48:46.356" starttime="20171002 02:48:46.039"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.357" starttime="20171002 02:48:45.735"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${0}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:48:46.361" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:48:46.361" starttime="20171002 02:48:46.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:48:46.362" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:48:46.362" starttime="20171002 02:48:46.361"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:48:46.362" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:48:46.362" starttime="20171002 02:48:46.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:48:46.363" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:48:46.363" starttime="20171002 02:48:46.363"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:48:46.598" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:48:46.598" starttime="20171002 02:48:46.364"></status>
</kw>
<msg timestamp="20171002 02:48:46.598" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:48:46.598" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.598" starttime="20171002 02:48:46.363"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:48:46.599" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.599" starttime="20171002 02:48:46.598"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:46.600" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.600" starttime="20171002 02:48:46.599"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.600" starttime="20171002 02:48:46.360"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.600" starttime="20171002 02:48:46.359"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.600" starttime="20171002 02:48:46.359"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:48:46.601" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171002 02:48:46.601" starttime="20171002 02:48:46.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:46.603" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 02:48:46.603" starttime="20171002 02:48:46.602"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:46.604" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171002 02:48:46.604" starttime="20171002 02:48:46.604"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.604" starttime="20171002 02:48:46.603"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.604" starttime="20171002 02:48:46.602"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.604" starttime="20171002 02:48:46.601"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:48:46.715" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20171002 02:48:46.715" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.715" starttime="20171002 02:48:46.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171002 02:48:46.717" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:46.717" starttime="20171002 02:48:46.717"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171002 02:48:46.718" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171002 02:48:46.718" starttime="20171002 02:48:46.718"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.719" starttime="20171002 02:48:46.718"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.719" starttime="20171002 02:48:46.716"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.719" starttime="20171002 02:48:46.716"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:48:46.721" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:48:46.721" starttime="20171002 02:48:46.721"></status>
</kw>
<msg timestamp="20171002 02:48:46.721" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.722" starttime="20171002 02:48:46.358"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:48:46.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:48:46.722" starttime="20171002 02:48:46.722"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171002 02:48:46.723" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 02:48:46.723" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171002 02:48:46.723" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20171002 02:48:46.723" starttime="20171002 02:48:46.723"></status>
</kw>
<msg timestamp="20171002 02:48:46.723" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20171002 02:48:46.724" starttime="20171002 02:48:46.357"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.724" starttime="20171002 02:48:46.357"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.806" starttime="20171002 02:48:42.517"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171002 02:48:46.813" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171002 02:48:46.826" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171002 02:48:46.827" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171002 02:48:46.827" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171002 02:48:46.827" starttime="20171002 02:48:46.807"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.827" starttime="20171002 02:48:42.515"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.827" starttime="20171002 02:48:42.503"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.827" starttime="20171002 02:48:42.502"></status>
</kw>
<msg timestamp="20171002 02:48:46.828" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:48:46.828" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171002 02:48:46.828" starttime="20171002 02:48:42.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'PASS'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20171002 02:48:46.829" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171002 02:48:46.829" starttime="20171002 02:48:46.829"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.829" starttime="20171002 02:48:46.828"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.829" starttime="20171002 02:48:42.499"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.829" starttime="20171002 02:48:42.499"></status>
</kw>
<status status="PASS" endtime="20171002 02:48:46.829" starttime="20171002 02:48:42.220"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20171002 02:48:46.831" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20171002 02:48:46.831" starttime="20171002 02:48:46.830"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20171002 02:48:46.852" level="INFO">${image_version} = v1.99.10-78-gb2c8eae</msg>
<status status="PASS" endtime="20171002 02:48:46.852" starttime="20171002 02:48:46.831"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20171002 02:48:46.853" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20171002 02:48:59.843" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20171002 02:48:59.843" starttime="20171002 02:48:46.853"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:48:59.848" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:48:59.848" starttime="20171002 02:48:59.847"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:48:59.849" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:48:59.849" starttime="20171002 02:48:59.849"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:48:59.850" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:48:59.850" starttime="20171002 02:48:59.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:48:59.851" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:48:59.851" starttime="20171002 02:48:59.851"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:49:00.041" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:49:00.041" starttime="20171002 02:48:59.852"></status>
</kw>
<msg timestamp="20171002 02:49:00.041" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:00.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:00.041" starttime="20171002 02:48:59.852"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:49:00.042" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:00.042" starttime="20171002 02:49:00.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:00.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:00.043" starttime="20171002 02:49:00.042"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:00.043" starttime="20171002 02:48:59.846"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:00.043" starttime="20171002 02:48:59.845"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:00.043" starttime="20171002 02:48:59.844"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:49:00.044" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20171002 02:49:00.044" starttime="20171002 02:49:00.043"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:49:00.044" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20171002 02:49:00.044" starttime="20171002 02:49:00.044"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:00.045" starttime="20171002 02:49:00.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:00.046" starttime="20171002 02:49:00.045"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:49:10.062" level="FAIL">SSLError: ('The write operation timed out',)</msg>
<status status="FAIL" endtime="20171002 02:49:10.062" starttime="20171002 02:49:00.046"></status>
</kw>
<status status="FAIL" endtime="20171002 02:49:10.062" starttime="20171002 02:48:59.843"></status>
</kw>
<status status="FAIL" endtime="20171002 02:49:10.062" starttime="20171002 02:48:46.830"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171002 02:49:10.079" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20171002 02:49:10.079" starttime="20171002 02:49:10.079"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171002 02:49:10.088" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20171002 02:49:13.086" level="INFO">${RC} = 0</msg>
<msg timestamp="20171002 02:49:13.086" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.728 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.598 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20171002 02:49:13.087" starttime="20171002 02:49:10.079"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.090" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.728 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.598 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.550 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.544 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.544/0.605/0.728/0.074 ms</msg>
<status status="PASS" endtime="20171002 02:49:13.090" starttime="20171002 02:49:13.089"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:13.091" starttime="20171002 02:49:13.090"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.091" starttime="20171002 02:49:10.078"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171002 02:49:13.106" level="INFO">${cur_time} = 2017-10-02 02:49:13:105329</msg>
<status status="PASS" endtime="20171002 02:49:13.106" starttime="20171002 02:49:13.105"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171002 02:49:13.106" level="INFO">${cur_time} = 20171002024913105329</msg>
<status status="PASS" endtime="20171002 02:49:13.106" starttime="20171002 02:49:13.106"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.106" starttime="20171002 02:49:13.104"></status>
</kw>
<msg timestamp="20171002 02:49:13.113" level="INFO">${FFDC_TIME} = 20171002024913105329</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171002 02:49:13.115" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20171002 02:49:13.115" starttime="20171002 02:49:13.115"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171002 02:49:13.116" level="INFO">${suite_name} = 20171002024913105329_BmcCodeUpdate</msg>
<status status="PASS" endtime="20171002 02:49:13.116" starttime="20171002 02:49:13.115"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171002 02:49:13.117" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171002 02:49:13.117" starttime="20171002 02:49:13.116"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171002 02:49:13.118" level="INFO">${test_name} = 20171002024913105329_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171002 02:49:13.118" starttime="20171002 02:49:13.117"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.118" starttime="20171002 02:49:13.114"></status>
</kw>
<msg timestamp="20171002 02:49:13.118" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/</msg>
<msg timestamp="20171002 02:49:13.118" level="INFO">${FFDC_PREFIX} = 20171002024913105329_</msg>
<msg timestamp="20171002 02:49:13.140" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20171002 02:49:13.142" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.142" starttime="20171002 02:49:13.141"></status>
</kw>
<msg timestamp="20171002 02:49:13.149" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.162" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.162" starttime="20171002 02:49:13.161"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.162" starttime="20171002 02:49:13.160"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.163" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.163" starttime="20171002 02:49:13.163"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.163" starttime="20171002 02:49:13.162"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.165" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.165" starttime="20171002 02:49:13.164"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.165" starttime="20171002 02:49:13.163"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.166" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.166" starttime="20171002 02:49:13.166"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.166" starttime="20171002 02:49:13.165"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.167" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.168" starttime="20171002 02:49:13.167"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.168" starttime="20171002 02:49:13.166"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.169" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.169" starttime="20171002 02:49:13.169"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.169" starttime="20171002 02:49:13.168"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.170" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.170" starttime="20171002 02:49:13.170"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.170" starttime="20171002 02:49:13.169"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.174" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.174" starttime="20171002 02:49:13.173"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.174" starttime="20171002 02:49:13.171"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.175" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.175" starttime="20171002 02:49:13.175"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.176" starttime="20171002 02:49:13.174"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.177" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.177" starttime="20171002 02:49:13.177"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.177" starttime="20171002 02:49:13.176"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.179" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.179" starttime="20171002 02:49:13.178"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.179" starttime="20171002 02:49:13.177"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.180" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.180" starttime="20171002 02:49:13.180"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.180" starttime="20171002 02:49:13.179"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.181" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.182" starttime="20171002 02:49:13.181"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.182" starttime="20171002 02:49:13.180"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171002 02:49:13.202" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:13.203" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171002 02:49:13.300" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171002 02:49:13.311" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171002 02:49:13.311" level="INFO">${stderr} = </msg>
<msg timestamp="20171002 02:49:13.311" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171002 02:49:13.311" starttime="20171002 02:49:13.182"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.311" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171002 02:49:13.311" starttime="20171002 02:49:13.311"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.312" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171002 02:49:13.312" starttime="20171002 02:49:13.312"></status>
</kw>
<msg timestamp="20171002 02:49:13.312" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20171002 02:49:13.312" starttime="20171002 02:49:13.182"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.314" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.314" starttime="20171002 02:49:13.313"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.314" starttime="20171002 02:49:13.313"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.314" starttime="20171002 02:49:13.176"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.315" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.315" starttime="20171002 02:49:13.315"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.315" starttime="20171002 02:49:13.314"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171002 02:49:13.316" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171002 02:49:13.316" starttime="20171002 02:49:13.316"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.318" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.318" starttime="20171002 02:49:13.318"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.318" starttime="20171002 02:49:13.316"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.319" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.319" starttime="20171002 02:49:13.319"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.319" starttime="20171002 02:49:13.318"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.319" starttime="20171002 02:49:13.316"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.321" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.321" starttime="20171002 02:49:13.320"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.321" starttime="20171002 02:49:13.320"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.322" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.322" starttime="20171002 02:49:13.322"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.322" starttime="20171002 02:49:13.321"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.322" starttime="20171002 02:49:13.320"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.324" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.324" starttime="20171002 02:49:13.323"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.324" starttime="20171002 02:49:13.323"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.326" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.326" starttime="20171002 02:49:13.326"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.326" starttime="20171002 02:49:13.324"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.326" starttime="20171002 02:49:13.322"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.326" starttime="20171002 02:49:13.316"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.327" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.327" starttime="20171002 02:49:13.327"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.328" starttime="20171002 02:49:13.326"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.328" starttime="20171002 02:49:13.160"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171002 02:49:13.335" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20171002 02:49:13.335" starttime="20171002 02:49:13.334"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20171002 02:49:13.336" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20171002 02:49:13.336" starttime="20171002 02:49:13.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:13.337" starttime="20171002 02:49:13.337"></status>
</kw>
<msg timestamp="20171002 02:49:13.338" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20171002 02:49:13.338" starttime="20171002 02:49:13.336"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:13.340" starttime="20171002 02:49:13.339"></status>
</kw>
<msg timestamp="20171002 02:49:13.340" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:13.340" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171002 02:49:13.340" starttime="20171002 02:49:13.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:13.341" starttime="20171002 02:49:13.341"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171002 02:49:13.360" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171002 02:49:13.360" starttime="20171002 02:49:13.359"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171002 02:49:13.361" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20171002 02:49:13.361" starttime="20171002 02:49:13.361"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.367" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20171002 02:49:13.367" starttime="20171002 02:49:13.361"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.373" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.373" starttime="20171002 02:49:13.373"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.374" starttime="20171002 02:49:13.372"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.375" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.375" starttime="20171002 02:49:13.374"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.375" starttime="20171002 02:49:13.374"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.376" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.376" starttime="20171002 02:49:13.376"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.376" starttime="20171002 02:49:13.375"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:13.378" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:13.378" starttime="20171002 02:49:13.377"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.378" starttime="20171002 02:49:13.377"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.378" starttime="20171002 02:49:13.372"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:13.378" starttime="20171002 02:49:13.371"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:49:13.379" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20171002 02:49:13.379" starttime="20171002 02:49:13.379"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171002 02:49:13.439" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:13.439" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20171002 02:49:14.800" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171002 02:49:14.800" starttime="20171002 02:49:13.404"></status>
</kw>
<msg timestamp="20171002 02:49:14.800" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:14.800" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20171002 02:49:14.800" starttime="20171002 02:49:13.380"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171002 02:49:14.801" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20171002 02:49:14.801" starttime="20171002 02:49:14.801"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 02:49:14.802" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 02:49:14.802" starttime="20171002 02:49:14.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:14.810" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:14.810" starttime="20171002 02:49:14.809"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.810" starttime="20171002 02:49:14.808"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.810" starttime="20171002 02:49:14.802"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.810" starttime="20171002 02:49:13.368"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.810" starttime="20171002 02:49:13.368"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.810" starttime="20171002 02:49:13.368"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.810" starttime="20171002 02:49:13.360"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.810" starttime="20171002 02:49:13.360"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171002 02:49:14.811" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20171002 02:49:14.811" starttime="20171002 02:49:14.811"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171002 02:49:14.812" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20171002 02:49:14.812" starttime="20171002 02:49:14.812"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:14.816" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:14.816" starttime="20171002 02:49:14.815"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.816" starttime="20171002 02:49:14.815"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:14.817" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:14.817" starttime="20171002 02:49:14.817"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.817" starttime="20171002 02:49:14.816"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:14.818" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:14.819" starttime="20171002 02:49:14.818"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.819" starttime="20171002 02:49:14.818"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:14.820" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:14.820" starttime="20171002 02:49:14.820"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.820" starttime="20171002 02:49:14.819"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.820" starttime="20171002 02:49:14.814"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.821" starttime="20171002 02:49:14.814"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:49:14.821" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20171002 02:49:14.821" starttime="20171002 02:49:14.821"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171002 02:49:14.880" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:14.882" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20171002 02:49:14.961" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171002 02:49:14.961" starttime="20171002 02:49:14.845"></status>
</kw>
<msg timestamp="20171002 02:49:14.961" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:14.961" level="INFO">${ret_values} = (u'20171002021847', u'', 0)</msg>
<status status="PASS" endtime="20171002 02:49:14.961" starttime="20171002 02:49:14.822"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171002 02:49:14.962" level="INFO">${stdout} = 20171002021847</msg>
<status status="PASS" endtime="20171002 02:49:14.962" starttime="20171002 02:49:14.961"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 02:49:14.962" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 02:49:14.962" starttime="20171002 02:49:14.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:14.970" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:14.970" starttime="20171002 02:49:14.970"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.971" starttime="20171002 02:49:14.969"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.971" starttime="20171002 02:49:14.963"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.971" starttime="20171002 02:49:14.813"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.971" starttime="20171002 02:49:14.813"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:14.974" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:14.974" starttime="20171002 02:49:14.974"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.974" starttime="20171002 02:49:14.973"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:14.975" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:14.975" starttime="20171002 02:49:14.975"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.976" starttime="20171002 02:49:14.974"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:14.977" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:14.977" starttime="20171002 02:49:14.976"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.977" starttime="20171002 02:49:14.976"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:14.978" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:14.978" starttime="20171002 02:49:14.978"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.978" starttime="20171002 02:49:14.977"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.979" starttime="20171002 02:49:14.972"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:14.979" starttime="20171002 02:49:14.972"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:49:14.979" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20171002 02:49:14.979" starttime="20171002 02:49:14.979"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171002 02:49:15.039" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:15.039" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20171002 02:49:15.096" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171002 02:49:15.096" starttime="20171002 02:49:15.004"></status>
</kw>
<msg timestamp="20171002 02:49:15.096" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:15.096" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-78"\nVERSION_ID="v1.99.10-78-gb9bae30"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20171002 02:49:15.096" starttime="20171002 02:49:14.980"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171002 02:49:15.097" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-78"
VERSION_ID="v1.99.10-78-gb9bae30"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20171002 02:49:15.097" starttime="20171002 02:49:15.097"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 02:49:15.098" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 02:49:15.098" starttime="20171002 02:49:15.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.106" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.106" starttime="20171002 02:49:15.105"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.106" starttime="20171002 02:49:15.105"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.106" starttime="20171002 02:49:15.098"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.106" starttime="20171002 02:49:14.971"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.106" starttime="20171002 02:49:14.971"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.106" starttime="20171002 02:49:14.813"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.106" starttime="20171002 02:49:14.810"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.106" starttime="20171002 02:49:14.810"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171002 02:49:15.108" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20171002 02:49:15.108" starttime="20171002 02:49:15.107"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.108" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20171002 02:49:15.108" starttime="20171002 02:49:15.108"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.112" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.112" starttime="20171002 02:49:15.111"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.112" starttime="20171002 02:49:15.111"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.113" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.113" starttime="20171002 02:49:15.113"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.113" starttime="20171002 02:49:15.112"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.114" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.115" starttime="20171002 02:49:15.114"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.115" starttime="20171002 02:49:15.113"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.116" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.116" starttime="20171002 02:49:15.115"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.116" starttime="20171002 02:49:15.115"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.116" starttime="20171002 02:49:15.110"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.116" starttime="20171002 02:49:15.110"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:49:15.117" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20171002 02:49:15.117" starttime="20171002 02:49:15.116"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171002 02:49:15.178" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:15.179" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20171002 02:49:15.226" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171002 02:49:15.226" starttime="20171002 02:49:15.144"></status>
</kw>
<msg timestamp="20171002 02:49:15.227" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:15.227" level="INFO">${ret_values} = (u' 02:49:29 up 18 min,  load average: 0.24, 0.95, 1.23', u'', 0)</msg>
<status status="PASS" endtime="20171002 02:49:15.227" starttime="20171002 02:49:15.117"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171002 02:49:15.227" level="INFO">${stdout} =  02:49:29 up 18 min,  load average: 0.24, 0.95, 1.23</msg>
<status status="PASS" endtime="20171002 02:49:15.228" starttime="20171002 02:49:15.227"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 02:49:15.228" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 02:49:15.228" starttime="20171002 02:49:15.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.236" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.236" starttime="20171002 02:49:15.236"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.236" starttime="20171002 02:49:15.235"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.236" starttime="20171002 02:49:15.228"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.237" starttime="20171002 02:49:15.109"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.237" starttime="20171002 02:49:15.109"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.240" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.240" starttime="20171002 02:49:15.239"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.240" starttime="20171002 02:49:15.239"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.241" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.241" starttime="20171002 02:49:15.241"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.241" starttime="20171002 02:49:15.240"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.243" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.243" starttime="20171002 02:49:15.242"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.243" starttime="20171002 02:49:15.242"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.244" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.245" starttime="20171002 02:49:15.244"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.245" starttime="20171002 02:49:15.243"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.245" starttime="20171002 02:49:15.238"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.245" starttime="20171002 02:49:15.238"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:49:15.246" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20171002 02:49:15.246" starttime="20171002 02:49:15.245"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171002 02:49:15.304" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:15.306" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20171002 02:49:15.363" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171002 02:49:15.364" starttime="20171002 02:49:15.271"></status>
</kw>
<msg timestamp="20171002 02:49:15.364" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:15.364" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.3M     14.3M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20171002 02:49:15.364" starttime="20171002 02:49:15.246"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171002 02:49:15.365" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.3M     14.3M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20171002 02:49:15.365" starttime="20171002 02:49:15.365"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 02:49:15.366" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 02:49:15.366" starttime="20171002 02:49:15.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.378" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.378" starttime="20171002 02:49:15.378"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.378" starttime="20171002 02:49:15.377"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.378" starttime="20171002 02:49:15.367"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.379" starttime="20171002 02:49:15.237"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.379" starttime="20171002 02:49:15.237"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.382" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.382" starttime="20171002 02:49:15.381"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.382" starttime="20171002 02:49:15.381"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.383" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.383" starttime="20171002 02:49:15.383"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.384" starttime="20171002 02:49:15.382"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.385" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.385" starttime="20171002 02:49:15.384"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.385" starttime="20171002 02:49:15.384"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.386" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.386" starttime="20171002 02:49:15.386"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.386" starttime="20171002 02:49:15.385"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.386" starttime="20171002 02:49:15.380"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.386" starttime="20171002 02:49:15.380"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:49:15.387" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20171002 02:49:15.387" starttime="20171002 02:49:15.387"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171002 02:49:15.446" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:15.447" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20171002 02:49:15.494" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171002 02:49:15.494" starttime="20171002 02:49:15.411"></status>
</kw>
<msg timestamp="20171002 02:49:15.494" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:15.494" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20171002 02:49:15.494" starttime="20171002 02:49:15.387"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171002 02:49:15.495" level="INFO">${stdout} = Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20171002 02:49:15.495" starttime="20171002 02:49:15.495"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 02:49:15.495" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 02:49:15.496" starttime="20171002 02:49:15.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.504" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:15.504" starttime="20171002 02:49:15.503"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.504" starttime="20171002 02:49:15.502"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.504" starttime="20171002 02:49:15.496"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.504" starttime="20171002 02:49:15.379"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.504" starttime="20171002 02:49:15.379"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.504" starttime="20171002 02:49:15.108"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.504" starttime="20171002 02:49:15.107"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.504" starttime="20171002 02:49:15.106"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.504" starttime="20171002 02:49:13.360"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.505" starttime="20171002 02:49:13.359"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.505" starttime="20171002 02:49:13.341"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.505" starttime="20171002 02:49:13.338"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.505" starttime="20171002 02:49:13.338"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:15.507" starttime="20171002 02:49:15.506"></status>
</kw>
<msg timestamp="20171002 02:49:15.507" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:15.507" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171002 02:49:15.507" starttime="20171002 02:49:15.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:15.508" starttime="20171002 02:49:15.507"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171002 02:49:15.526" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20171002 02:49:15.526" starttime="20171002 02:49:15.526"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171002 02:49:15.528" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20171002 02:49:15.528" starttime="20171002 02:49:15.527"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171002 02:49:15.529" level="INFO">${logpath} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20171002 02:49:15.529" starttime="20171002 02:49:15.528"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:49:15.532" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:49:15.534" starttime="20171002 02:49:15.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:49:15.535" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:49:15.535" starttime="20171002 02:49:15.534"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:49:15.535" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:49:15.535" starttime="20171002 02:49:15.535"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:49:15.536" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:49:15.536" starttime="20171002 02:49:15.536"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.748" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:49:15.749" starttime="20171002 02:49:15.537"></status>
</kw>
<msg timestamp="20171002 02:49:15.749" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:15.749" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:15.749" starttime="20171002 02:49:15.536"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.749" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:15.750" starttime="20171002 02:49:15.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:15.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:15.750" starttime="20171002 02:49:15.750"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.750" starttime="20171002 02:49:15.531"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.751" starttime="20171002 02:49:15.530"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:15.751" starttime="20171002 02:49:15.530"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:49:15.751" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20171002 02:49:15.751" starttime="20171002 02:49:15.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:15.752" starttime="20171002 02:49:15.752"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:49:16.352" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20171002 02:49:16.352" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:16.352" starttime="20171002 02:49:15.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:16.353" starttime="20171002 02:49:16.353"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:49:16.353" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:49:16.354" starttime="20171002 02:49:16.353"></status>
</kw>
<msg timestamp="20171002 02:49:16.354" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:16.354" starttime="20171002 02:49:15.529"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:16.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:16.355" starttime="20171002 02:49:16.355"></status>
</kw>
<msg timestamp="20171002 02:49:16.355" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171002 02:49:16.355" starttime="20171002 02:49:16.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:16.356" starttime="20171002 02:49:16.356"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171002 02:49:16.357" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 25630
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 207500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 312
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 02:49:16.357" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171002 02:49:16.357" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20171002 02:49:16.358" starttime="20171002 02:49:16.356"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:16.359" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:16.359" starttime="20171002 02:49:16.359"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:16.359" starttime="20171002 02:49:16.358"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:16.359" starttime="20171002 02:49:15.528"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171002 02:49:16.360" level="INFO">${logpath} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_OCC_state.txt</msg>
<status status="PASS" endtime="20171002 02:49:16.360" starttime="20171002 02:49:16.360"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:49:16.364" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:49:16.366" starttime="20171002 02:49:16.364"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:49:16.367" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:49:16.367" starttime="20171002 02:49:16.366"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:49:16.367" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:49:16.367" starttime="20171002 02:49:16.367"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:49:16.368" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:49:16.368" starttime="20171002 02:49:16.368"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:49:16.552" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:49:16.552" starttime="20171002 02:49:16.369"></status>
</kw>
<msg timestamp="20171002 02:49:16.553" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:16.553" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:16.553" starttime="20171002 02:49:16.368"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:49:16.553" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:16.553" starttime="20171002 02:49:16.553"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:16.554" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:16.554" starttime="20171002 02:49:16.554"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:16.554" starttime="20171002 02:49:16.363"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:16.554" starttime="20171002 02:49:16.363"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:16.554" starttime="20171002 02:49:16.362"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:49:16.555" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20171002 02:49:16.555" starttime="20171002 02:49:16.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:16.556" starttime="20171002 02:49:16.555"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:49:16.700" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171002 02:49:16.700" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:16.700" starttime="20171002 02:49:16.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:16.701" starttime="20171002 02:49:16.700"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:49:16.701" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:49:16.701" starttime="20171002 02:49:16.701"></status>
</kw>
<msg timestamp="20171002 02:49:16.702" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:16.702" starttime="20171002 02:49:16.361"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:16.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:16.703" starttime="20171002 02:49:16.703"></status>
</kw>
<msg timestamp="20171002 02:49:16.703" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171002 02:49:16.703" starttime="20171002 02:49:16.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:16.704" starttime="20171002 02:49:16.703"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171002 02:49:16.704" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 02:49:16.704" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171002 02:49:16.705" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20171002 02:49:16.705" starttime="20171002 02:49:16.704"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:16.706" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_OCC_state.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:16.706" starttime="20171002 02:49:16.705"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:16.706" starttime="20171002 02:49:16.705"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:16.706" starttime="20171002 02:49:16.360"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171002 02:49:16.707" level="INFO">${logpath} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_control_list.txt</msg>
<status status="PASS" endtime="20171002 02:49:16.707" starttime="20171002 02:49:16.707"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:49:16.711" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:49:16.712" starttime="20171002 02:49:16.711"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:49:16.712" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:49:16.712" starttime="20171002 02:49:16.712"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:49:16.713" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:49:16.713" starttime="20171002 02:49:16.713"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:49:16.714" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:49:16.714" starttime="20171002 02:49:16.714"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:49:16.893" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:49:16.893" starttime="20171002 02:49:16.715"></status>
</kw>
<msg timestamp="20171002 02:49:16.893" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:16.893" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:16.893" starttime="20171002 02:49:16.714"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:49:16.894" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:16.894" starttime="20171002 02:49:16.894"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:16.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:16.895" starttime="20171002 02:49:16.894"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:16.895" starttime="20171002 02:49:16.709"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:16.895" starttime="20171002 02:49:16.709"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:16.895" starttime="20171002 02:49:16.708"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:49:16.896" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20171002 02:49:16.896" starttime="20171002 02:49:16.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:16.897" starttime="20171002 02:49:16.896"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:49:17.181" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171002 02:49:17.181" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:17.181" starttime="20171002 02:49:16.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:17.182" starttime="20171002 02:49:17.182"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:49:17.182" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:49:17.182" starttime="20171002 02:49:17.182"></status>
</kw>
<msg timestamp="20171002 02:49:17.183" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:17.183" starttime="20171002 02:49:16.707"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:17.184" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:17.184" starttime="20171002 02:49:17.183"></status>
</kw>
<msg timestamp="20171002 02:49:17.184" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171002 02:49:17.184" starttime="20171002 02:49:17.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:17.185" starttime="20171002 02:49:17.184"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171002 02:49:17.186" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 02:49:17.186" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171002 02:49:17.186" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20171002 02:49:17.186" starttime="20171002 02:49:17.186"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:17.188" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_control_list.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:17.188" starttime="20171002 02:49:17.187"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:17.188" starttime="20171002 02:49:17.187"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:17.188" starttime="20171002 02:49:16.706"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171002 02:49:17.189" level="INFO">${logpath} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_led.txt</msg>
<status status="PASS" endtime="20171002 02:49:17.189" starttime="20171002 02:49:17.188"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:49:17.192" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:49:17.192" starttime="20171002 02:49:17.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:49:17.193" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:49:17.193" starttime="20171002 02:49:17.193"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:49:17.194" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:49:17.194" starttime="20171002 02:49:17.193"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:49:17.195" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:49:17.195" starttime="20171002 02:49:17.195"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:49:17.442" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:49:17.442" starttime="20171002 02:49:17.196"></status>
</kw>
<msg timestamp="20171002 02:49:17.442" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:17.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:17.442" starttime="20171002 02:49:17.195"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:49:17.443" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:17.443" starttime="20171002 02:49:17.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:17.444" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:17.444" starttime="20171002 02:49:17.443"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:17.444" starttime="20171002 02:49:17.191"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:17.444" starttime="20171002 02:49:17.190"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:17.444" starttime="20171002 02:49:17.190"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:49:17.445" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20171002 02:49:17.445" starttime="20171002 02:49:17.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:17.445" starttime="20171002 02:49:17.445"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:49:19.038" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20171002 02:49:19.038" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:19.038" starttime="20171002 02:49:17.446"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:19.039" starttime="20171002 02:49:19.039"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:49:19.039" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:49:19.039" starttime="20171002 02:49:19.039"></status>
</kw>
<msg timestamp="20171002 02:49:19.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:19.040" starttime="20171002 02:49:17.189"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:19.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:19.041" starttime="20171002 02:49:19.041"></status>
</kw>
<msg timestamp="20171002 02:49:19.041" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171002 02:49:19.041" starttime="20171002 02:49:19.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:19.042" starttime="20171002 02:49:19.042"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171002 02:49:19.044" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 02:49:19.044" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171002 02:49:19.044" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20171002 02:49:19.045" starttime="20171002 02:49:19.042"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:19.046" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_led.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:19.046" starttime="20171002 02:49:19.046"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:19.046" starttime="20171002 02:49:19.045"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:19.046" starttime="20171002 02:49:17.188"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171002 02:49:19.047" level="INFO">${logpath} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20171002 02:49:19.047" starttime="20171002 02:49:19.047"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:49:19.050" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:49:19.051" starttime="20171002 02:49:19.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:49:19.051" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:49:19.052" starttime="20171002 02:49:19.051"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:49:19.052" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:49:19.052" starttime="20171002 02:49:19.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:49:19.053" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:49:19.053" starttime="20171002 02:49:19.053"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:49:19.253" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:49:19.253" starttime="20171002 02:49:19.054"></status>
</kw>
<msg timestamp="20171002 02:49:19.253" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:19.253" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:19.253" starttime="20171002 02:49:19.053"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:49:19.254" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:19.254" starttime="20171002 02:49:19.254"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:19.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:19.255" starttime="20171002 02:49:19.254"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:19.255" starttime="20171002 02:49:19.049"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:19.255" starttime="20171002 02:49:19.049"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:19.255" starttime="20171002 02:49:19.048"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:49:19.256" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20171002 02:49:19.256" starttime="20171002 02:49:19.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:19.256" starttime="20171002 02:49:19.256"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:49:19.691" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20171002 02:49:19.691" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:19.691" starttime="20171002 02:49:19.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:19.692" starttime="20171002 02:49:19.692"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:49:19.693" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:49:19.693" starttime="20171002 02:49:19.693"></status>
</kw>
<msg timestamp="20171002 02:49:19.693" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:19.693" starttime="20171002 02:49:19.047"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:19.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:19.694" starttime="20171002 02:49:19.694"></status>
</kw>
<msg timestamp="20171002 02:49:19.694" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171002 02:49:19.694" starttime="20171002 02:49:19.693"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:19.695" starttime="20171002 02:49:19.695"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171002 02:49:19.696" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/9f8a416": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-78-gb9bae30", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/9f8a416/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/9f8a416/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/aca3ebd6": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-78-gadcf931", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/aca3ebd6/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/aca3ebd6/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c", 
        "/xyz/openbmc_project/software/9f8a416", 
        "/xyz/openbmc_project/software/aca3ebd6"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/9f8a416"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 02:49:19.696" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171002 02:49:19.696" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/7a9ef57c": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-57a...</msg>
<status status="PASS" endtime="20171002 02:49:19.697" starttime="20171002 02:49:19.695"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:19.698" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:19.698" starttime="20171002 02:49:19.698"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:19.698" starttime="20171002 02:49:19.697"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:19.698" starttime="20171002 02:49:19.047"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171002 02:49:19.699" level="INFO">${logpath} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_elog.txt</msg>
<status status="PASS" endtime="20171002 02:49:19.699" starttime="20171002 02:49:19.699"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:49:19.703" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:49:19.704" starttime="20171002 02:49:19.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:49:19.705" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:49:19.705" starttime="20171002 02:49:19.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:49:19.706" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:49:19.706" starttime="20171002 02:49:19.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:49:19.707" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:49:19.707" starttime="20171002 02:49:19.706"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:49:19.908" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:49:19.908" starttime="20171002 02:49:19.708"></status>
</kw>
<msg timestamp="20171002 02:49:19.909" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:19.909" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:19.909" starttime="20171002 02:49:19.707"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:49:19.910" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:19.910" starttime="20171002 02:49:19.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:19.911" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:19.911" starttime="20171002 02:49:19.910"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:19.911" starttime="20171002 02:49:19.701"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:19.911" starttime="20171002 02:49:19.701"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:19.911" starttime="20171002 02:49:19.700"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:49:19.912" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20171002 02:49:19.912" starttime="20171002 02:49:19.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:19.913" starttime="20171002 02:49:19.913"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:49:19.955" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20171002 02:49:19.956" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:19.956" starttime="20171002 02:49:19.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:19.956" starttime="20171002 02:49:19.956"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:49:19.957" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:49:19.957" starttime="20171002 02:49:19.957"></status>
</kw>
<msg timestamp="20171002 02:49:19.957" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:19.957" starttime="20171002 02:49:19.699"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:19.958" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171002 02:49:19.958" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171002 02:49:19.958" starttime="20171002 02:49:19.958"></status>
</kw>
<msg timestamp="20171002 02:49:19.959" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171002 02:49:19.959" starttime="20171002 02:49:19.957"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20171002 02:49:19.960" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171002 02:49:19.960" starttime="20171002 02:49:19.959"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:19.960" starttime="20171002 02:49:19.959"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:19.960" starttime="20171002 02:49:19.698"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171002 02:49:19.961" level="INFO">${logpath} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_inventory.txt</msg>
<status status="PASS" endtime="20171002 02:49:19.961" starttime="20171002 02:49:19.960"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:49:19.964" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:49:19.964" starttime="20171002 02:49:19.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:49:19.965" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:49:19.965" starttime="20171002 02:49:19.965"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:49:19.966" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:49:19.966" starttime="20171002 02:49:19.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:49:19.966" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:49:19.966" starttime="20171002 02:49:19.966"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:49:20.147" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:49:20.148" starttime="20171002 02:49:19.967"></status>
</kw>
<msg timestamp="20171002 02:49:20.148" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:20.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:20.148" starttime="20171002 02:49:19.967"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:49:20.149" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:20.149" starttime="20171002 02:49:20.148"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:20.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:20.149" starttime="20171002 02:49:20.149"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:20.149" starttime="20171002 02:49:19.963"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:20.150" starttime="20171002 02:49:19.962"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:20.150" starttime="20171002 02:49:19.962"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:49:20.150" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20171002 02:49:20.150" starttime="20171002 02:49:20.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:20.151" starttime="20171002 02:49:20.151"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:49:22.346" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20171002 02:49:22.346" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:22.346" starttime="20171002 02:49:20.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:22.347" starttime="20171002 02:49:22.347"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:49:22.348" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:49:22.348" starttime="20171002 02:49:22.348"></status>
</kw>
<msg timestamp="20171002 02:49:22.348" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:22.348" starttime="20171002 02:49:19.961"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:22.349" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:22.349" starttime="20171002 02:49:22.349"></status>
</kw>
<msg timestamp="20171002 02:49:22.349" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171002 02:49:22.350" starttime="20171002 02:49:22.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:22.350" starttime="20171002 02:49:22.350"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171002 02:49:22.353" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/9f8a416", 
        "/xyz/openbmc_project/software/aca3ebd6"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171002 02:49:22.354" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171002 02:49:22.354" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20171002 02:49:22.354" starttime="20171002 02:49:22.350"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:22.356" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_inventory.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:22.356" starttime="20171002 02:49:22.356"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:22.356" starttime="20171002 02:49:22.355"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:22.356" starttime="20171002 02:49:19.960"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:22.356" starttime="20171002 02:49:15.528"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:22.356" starttime="20171002 02:49:15.527"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:22.357" starttime="20171002 02:49:15.527"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:22.357" starttime="20171002 02:49:15.527"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:22.357" starttime="20171002 02:49:15.525"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:22.357" starttime="20171002 02:49:15.508"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:22.357" starttime="20171002 02:49:15.505"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:22.357" starttime="20171002 02:49:15.505"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:22.359" starttime="20171002 02:49:22.359"></status>
</kw>
<msg timestamp="20171002 02:49:22.359" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:22.359" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171002 02:49:22.359" starttime="20171002 02:49:22.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:22.360" starttime="20171002 02:49:22.360"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:22.384" starttime="20171002 02:49:22.378"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20171002 02:49:22.385" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20171002 02:49:22.385" starttime="20171002 02:49:22.384"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:22.385" starttime="20171002 02:49:22.377"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:22.385" starttime="20171002 02:49:22.360"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:22.385" starttime="20171002 02:49:22.357"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:22.385" starttime="20171002 02:49:22.357"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:22.387" starttime="20171002 02:49:22.387"></status>
</kw>
<msg timestamp="20171002 02:49:22.387" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:22.387" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171002 02:49:22.387" starttime="20171002 02:49:22.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:22.388" starttime="20171002 02:49:22.388"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171002 02:49:22.442" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:22.446" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20171002 02:49:22.505" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20171002 02:49:22.518" level="INFO">${core_files} = None</msg>
<msg timestamp="20171002 02:49:22.518" level="INFO">${stderr} = None</msg>
<msg timestamp="20171002 02:49:22.518" level="INFO">${rc} = None</msg>
<msg timestamp="20171002 02:49:22.518" level="FAIL">#(UTC) 2017/10/02 02:49:22.516889 -    0.075646 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20171002 02:49:22.518" starttime="20171002 02:49:22.414"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20171002 02:49:22.519" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20171002 02:49:22.519" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20171002 02:49:22.519" starttime="20171002 02:49:22.519"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:22.541" starttime="20171002 02:49:22.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:23.240" starttime="20171002 02:49:22.542"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:23.240" starttime="20171002 02:49:22.541"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:23.241" starttime="20171002 02:49:22.530"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:23.241" starttime="20171002 02:49:22.520"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20171002 02:49:23.241" starttime="20171002 02:49:23.241"></status>
</kw>
<status status="FAIL" endtime="20171002 02:49:23.241" starttime="20171002 02:49:22.413"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:23.241" starttime="20171002 02:49:22.390"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:23.241" starttime="20171002 02:49:22.385"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:23.241" starttime="20171002 02:49:22.385"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:23.244" starttime="20171002 02:49:23.243"></status>
</kw>
<msg timestamp="20171002 02:49:23.244" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:23.244" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171002 02:49:23.244" starttime="20171002 02:49:23.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:23.245" starttime="20171002 02:49:23.244"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171002 02:49:23.264" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20171002 02:49:23.264" starttime="20171002 02:49:23.263"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171002 02:49:23.265" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20171002 02:49:23.265" starttime="20171002 02:49:23.265"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171002 02:49:23.266" level="INFO">${logpath} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20171002 02:49:23.266" starttime="20171002 02:49:23.266"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:23.267" starttime="20171002 02:49:23.267"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:49:23.268" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20171002 02:49:23.268" starttime="20171002 02:49:23.268"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171002 02:49:23.332" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:23.333" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20171002 02:49:23.400" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171002 02:49:23.400" starttime="20171002 02:49:23.297"></status>
</kw>
<msg timestamp="20171002 02:49:23.401" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:23.401" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20171002 02:49:23.401" starttime="20171002 02:49:23.269"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171002 02:49:23.402" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20171002 02:49:23.402" starttime="20171002 02:49:23.401"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 02:49:23.403" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 02:49:23.403" starttime="20171002 02:49:23.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:23.411" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:23.411" starttime="20171002 02:49:23.411"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:23.411" starttime="20171002 02:49:23.410"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:23.412" starttime="20171002 02:49:23.403"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:23.412" starttime="20171002 02:49:23.266"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:23.412" starttime="20171002 02:49:23.265"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171002 02:49:23.413" level="INFO">${logpath} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20171002 02:49:23.413" starttime="20171002 02:49:23.412"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:23.414" starttime="20171002 02:49:23.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:49:23.415" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20171002 02:49:23.415" starttime="20171002 02:49:23.414"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171002 02:49:23.472" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:23.475" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20171002 02:49:23.995" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171002 02:49:23.996" starttime="20171002 02:49:23.441"></status>
</kw>
<msg timestamp="20171002 02:49:23.996" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:23.997" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct  2 02:49 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct  2 02:49 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20171002 02:49:23.997" starttime="20171002 02:49:23.415"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171002 02:49:23.998" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct  2 02:49 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct  2 02:49 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20171002 02:49:23.998" starttime="20171002 02:49:23.997"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 02:49:23.998" level="INFO">${stderr} = ls: /proc/2574/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20171002 02:49:23.998" starttime="20171002 02:49:23.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:24.007" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:24.007" starttime="20171002 02:49:24.007"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:24.007" starttime="20171002 02:49:24.005"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:24.007" starttime="20171002 02:49:23.999"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:24.008" starttime="20171002 02:49:23.413"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:24.008" starttime="20171002 02:49:23.412"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171002 02:49:24.008" level="INFO">${logpath} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20171002 02:49:24.008" starttime="20171002 02:49:24.008"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:24.010" starttime="20171002 02:49:24.009"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:49:24.011" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20171002 02:49:24.011" starttime="20171002 02:49:24.010"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171002 02:49:24.070" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:24.071" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20171002 02:49:27.036" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171002 02:49:27.036" starttime="20171002 02:49:24.035"></status>
</kw>
<msg timestamp="20171002 02:49:27.037" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:27.041" level="INFO">${ret_values} = (u'-- Logs begin at Mon 2017-10-02 02:31:26 UTC, end at Mon 2017-10-02 02:49:37 UTC. --\nOct 02 02:31:26 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 02 02:31:26 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20171002 02:49:27.041" starttime="20171002 02:49:24.011"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171002 02:49:27.043" level="INFO">${stdout} = -- Logs begin at Mon 2017-10-02 02:31:26 UTC, end at Mon 2017-10-02 02:49:37 UTC. --
Oct 02 02:31:26 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 02 02:31:26 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20171002 02:49:27.043" starttime="20171002 02:49:27.041"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 02:49:27.043" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 02:49:27.043" starttime="20171002 02:49:27.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:27.053" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:27.053" starttime="20171002 02:49:27.052"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:27.053" starttime="20171002 02:49:27.050"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:27.053" starttime="20171002 02:49:27.044"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:27.054" starttime="20171002 02:49:24.009"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:27.054" starttime="20171002 02:49:24.008"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171002 02:49:27.054" level="INFO">${logpath} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20171002 02:49:27.055" starttime="20171002 02:49:27.054"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:27.056" starttime="20171002 02:49:27.056"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:49:27.057" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20171002 02:49:27.057" starttime="20171002 02:49:27.056"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171002 02:49:27.115" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:27.116" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20171002 02:49:36.353" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171002 02:49:36.358" starttime="20171002 02:49:27.080"></status>
</kw>
<msg timestamp="20171002 02:49:36.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:36.406" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=ba0aba8d5031417f9bcf5169bf53eeac;i=1;b=75889e9326234437b2e35a30adfe01ef;m=c691be;t=55a872bddc4e0;x=94bac2984a5a0f0e",\n\t"__REALTIME_TIMESTAMP" : "1506911486592224",\n\t"__MONO...</msg>
<status status="PASS" endtime="20171002 02:49:36.406" starttime="20171002 02:49:27.057"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171002 02:49:36.419" level="INFO">${stdout} = {
	"__CURSOR" : "s=ba0aba8d5031417f9bcf5169bf53eeac;i=1;b=75889e9326234437b2e35a30adfe01ef;m=c691be;t=55a872bddc4e0;x=94bac2984a5a0f0e",
	"__REALTIME_TIMESTAMP" : "1506911486592224",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" endtime="20171002 02:49:36.419" starttime="20171002 02:49:36.408"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 02:49:36.420" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 02:49:36.420" starttime="20171002 02:49:36.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:36.449" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:36.449" starttime="20171002 02:49:36.442"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:36.450" starttime="20171002 02:49:36.430"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:36.450" starttime="20171002 02:49:36.420"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:36.450" starttime="20171002 02:49:27.055"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:36.450" starttime="20171002 02:49:27.054"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171002 02:49:36.451" level="INFO">${logpath} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20171002 02:49:36.451" starttime="20171002 02:49:36.450"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:36.452" starttime="20171002 02:49:36.452"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:49:36.453" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20171002 02:49:36.453" starttime="20171002 02:49:36.453"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171002 02:49:36.514" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:36.515" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20171002 02:49:36.586" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171002 02:49:36.586" starttime="20171002 02:49:36.479"></status>
</kw>
<msg timestamp="20171002 02:49:36.586" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:36.586" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          221352 kB\nMemAvailable:     323564 kB\nBuffers:           31740 kB\nCached:            81068 kB\nSwapCached:            0 kB\nActive:           15832...</msg>
<status status="PASS" endtime="20171002 02:49:36.586" starttime="20171002 02:49:36.453"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171002 02:49:36.587" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          221352 kB
MemAvailable:     323564 kB
Buffers:           31740 kB
Cached:            81068 kB
SwapCached:            0 kB
Active:           158320 kB
Inac...</msg>
<status status="PASS" endtime="20171002 02:49:36.587" starttime="20171002 02:49:36.587"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 02:49:36.588" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 02:49:36.588" starttime="20171002 02:49:36.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:36.595" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:36.596" starttime="20171002 02:49:36.595"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:36.596" starttime="20171002 02:49:36.594"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:36.596" starttime="20171002 02:49:36.588"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:36.596" starttime="20171002 02:49:36.451"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:36.596" starttime="20171002 02:49:36.450"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171002 02:49:36.597" level="INFO">${logpath} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20171002 02:49:36.597" starttime="20171002 02:49:36.596"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:36.598" starttime="20171002 02:49:36.598"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:49:36.599" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20171002 02:49:36.599" starttime="20171002 02:49:36.598"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171002 02:49:36.660" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:36.660" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20171002 02:49:36.970" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171002 02:49:36.970" starttime="20171002 02:49:36.624"></status>
</kw>
<msg timestamp="20171002 02:49:36.970" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:36.971" level="INFO">${ret_values} = (u'Mem: 211016K used, 221228K free, 8944K shrd, 31740K buff, 81072K cached\nCPU:  16% usr   8% sys   0% nic  75% idle   0% io   0% irq   0% sirq\nLoad average: 0.73 1.01 1.24 1/155 2578\n  PID  PPID U...</msg>
<status status="PASS" endtime="20171002 02:49:36.971" starttime="20171002 02:49:36.599"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171002 02:49:36.971" level="INFO">${stdout} = Mem: 211016K used, 221228K free, 8944K shrd, 31740K buff, 81072K cached
CPU:  16% usr   8% sys   0% nic  75% idle   0% io   0% irq   0% sirq
Load average: 0.73 1.01 1.24 1/155 2578
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20171002 02:49:36.971" starttime="20171002 02:49:36.971"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 02:49:36.972" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 02:49:36.972" starttime="20171002 02:49:36.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:36.980" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:36.980" starttime="20171002 02:49:36.980"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:36.980" starttime="20171002 02:49:36.979"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:36.980" starttime="20171002 02:49:36.972"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:36.981" starttime="20171002 02:49:36.597"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:36.981" starttime="20171002 02:49:36.596"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171002 02:49:36.981" level="INFO">${logpath} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20171002 02:49:36.981" starttime="20171002 02:49:36.981"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:36.983" starttime="20171002 02:49:36.983"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171002 02:49:36.984" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20171002 02:49:36.984" starttime="20171002 02:49:36.983"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171002 02:49:37.042" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171002 02:49:37.042" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20171002 02:49:37.135" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171002 02:49:37.135" starttime="20171002 02:49:37.008"></status>
</kw>
<msg timestamp="20171002 02:49:37.135" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:37.136" level="INFO">${ret_values} = (u'[    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A\n[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16...</msg>
<status status="PASS" endtime="20171002 02:49:37.136" starttime="20171002 02:49:36.984"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171002 02:49:37.137" level="INFO">${stdout} = [    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A
[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16550A...</msg>
<status status="PASS" endtime="20171002 02:49:37.137" starttime="20171002 02:49:37.136"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171002 02:49:37.137" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171002 02:49:37.137" starttime="20171002 02:49:37.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.146" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/20171002024913105329_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:37.146" starttime="20171002 02:49:37.145"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.146" starttime="20171002 02:49:37.144"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.146" starttime="20171002 02:49:37.138"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.146" starttime="20171002 02:49:36.982"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.146" starttime="20171002 02:49:36.981"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.146" starttime="20171002 02:49:23.265"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.146" starttime="20171002 02:49:23.264"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.146" starttime="20171002 02:49:23.264"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.146" starttime="20171002 02:49:23.264"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.146" starttime="20171002 02:49:23.263"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.147" starttime="20171002 02:49:23.245"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.147" starttime="20171002 02:49:23.242"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.147" starttime="20171002 02:49:23.242"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:37.149" starttime="20171002 02:49:37.148"></status>
</kw>
<msg timestamp="20171002 02:49:37.149" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:37.149" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171002 02:49:37.149" starttime="20171002 02:49:37.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:37.149" starttime="20171002 02:49:37.149"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:49:37.172" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:49:37.173" starttime="20171002 02:49:37.171"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:49:37.173" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:49:37.173" starttime="20171002 02:49:37.173"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:49:37.174" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:49:37.174" starttime="20171002 02:49:37.174"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:49:37.175" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:49:37.175" starttime="20171002 02:49:37.174"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.362" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:49:37.362" starttime="20171002 02:49:37.175"></status>
</kw>
<msg timestamp="20171002 02:49:37.362" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:37.362" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:37.362" starttime="20171002 02:49:37.175"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.363" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:37.363" starttime="20171002 02:49:37.363"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.364" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:37.364" starttime="20171002 02:49:37.364"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.364" starttime="20171002 02:49:37.171"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.364" starttime="20171002 02:49:37.170"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.364" starttime="20171002 02:49:37.170"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:49:37.365" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20171002 02:49:37.365" starttime="20171002 02:49:37.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:37.366" starttime="20171002 02:49:37.365"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:49:37.415" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20171002 02:49:37.415" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:37.415" starttime="20171002 02:49:37.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:37.416" starttime="20171002 02:49:37.416"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:49:37.416" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:49:37.416" starttime="20171002 02:49:37.416"></status>
</kw>
<msg timestamp="20171002 02:49:37.417" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:37.417" starttime="20171002 02:49:37.169"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.418" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171002 02:49:37.418" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171002 02:49:37.418" starttime="20171002 02:49:37.418"></status>
</kw>
<msg timestamp="20171002 02:49:37.418" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171002 02:49:37.418" starttime="20171002 02:49:37.417"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20171002 02:49:37.419" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171002 02:49:37.419" starttime="20171002 02:49:37.419"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.419" starttime="20171002 02:49:37.168"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.419" starttime="20171002 02:49:37.150"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.419" starttime="20171002 02:49:37.147"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.419" starttime="20171002 02:49:37.147"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:37.421" starttime="20171002 02:49:37.421"></status>
</kw>
<msg timestamp="20171002 02:49:37.421" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:37.421" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171002 02:49:37.421" starttime="20171002 02:49:37.421"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:37.422" starttime="20171002 02:49:37.422"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20171002 02:49:37.442" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171002 02:49:37.442" starttime="20171002 02:49:37.442"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.443" starttime="20171002 02:49:37.441"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.443" starttime="20171002 02:49:37.422"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.443" starttime="20171002 02:49:37.420"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.443" starttime="20171002 02:49:37.419"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.443" starttime="20171002 02:49:13.338"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.443" starttime="20171002 02:49:13.335"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.443" starttime="20171002 02:49:13.335"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.443" starttime="20171002 02:49:13.335"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171002 02:49:37.454" starttime="20171002 02:49:37.453"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.454" starttime="20171002 02:49:37.443"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.454" starttime="20171002 02:49:13.334"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.454" starttime="20171002 02:49:10.065"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.455" starttime="20171002 02:49:10.064"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171002 02:49:37.456" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20171002 02:49:37.456" starttime="20171002 02:49:37.455"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171002 02:49:37.458" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171002024913105329_BmcCodeUpdate/20171002024913105329_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20171002 02:49:37.458" starttime="20171002 02:49:37.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:37.460" starttime="20171002 02:49:37.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:37.461" starttime="20171002 02:49:37.460"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.461" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20171002 02:49:37.462" starttime="20171002 02:49:37.461"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.463" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20171002 02:49:37.463" starttime="20171002 02:49:37.462"></status>
</kw>
<msg timestamp="20171002 02:49:37.463" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20171002 02:49:37.463" starttime="20171002 02:49:37.462"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.464" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:37.464" starttime="20171002 02:49:37.464"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.464" starttime="20171002 02:49:37.463"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:37.465" starttime="20171002 02:49:37.465"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171002 02:49:37.466" level="INFO">${cur_time} = 2017-10-02 02:49:37:466253</msg>
<status status="PASS" endtime="20171002 02:49:37.466" starttime="20171002 02:49:37.466"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171002 02:49:37.467" level="INFO">${cur_time} = 20171002024937466253</msg>
<status status="PASS" endtime="20171002 02:49:37.467" starttime="20171002 02:49:37.467"></status>
</kw>
<msg timestamp="20171002 02:49:37.467" level="INFO">${cur_time} = 20171002024937466253</msg>
<status status="PASS" endtime="20171002 02:49:37.467" starttime="20171002 02:49:37.465"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.470" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171002 02:49:37.470" starttime="20171002 02:49:37.468"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.470" starttime="20171002 02:49:37.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:49:37.475" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:49:37.475" starttime="20171002 02:49:37.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:49:37.476" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:49:37.476" starttime="20171002 02:49:37.476"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:49:37.477" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:49:37.477" starttime="20171002 02:49:37.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:49:37.478" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:49:37.478" starttime="20171002 02:49:37.478"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.686" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:49:37.686" starttime="20171002 02:49:37.479"></status>
</kw>
<msg timestamp="20171002 02:49:37.687" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:37.687" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:37.687" starttime="20171002 02:49:37.478"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.687" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:37.687" starttime="20171002 02:49:37.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:37.688" starttime="20171002 02:49:37.688"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.688" starttime="20171002 02:49:37.474"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.688" starttime="20171002 02:49:37.474"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.689" starttime="20171002 02:49:37.472"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:49:37.689" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171002 02:49:37.689" starttime="20171002 02:49:37.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:37.690" starttime="20171002 02:49:37.689"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:49:37.752" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171002 02:49:37.752" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:37.752" starttime="20171002 02:49:37.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:37.753" starttime="20171002 02:49:37.752"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:49:37.753" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:49:37.753" starttime="20171002 02:49:37.753"></status>
</kw>
<msg timestamp="20171002 02:49:37.753" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:37.753" starttime="20171002 02:49:37.472"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.754" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171002 02:49:37.754" starttime="20171002 02:49:37.754"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.754" starttime="20171002 02:49:37.471"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171002 02:49:37.758" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171002 02:49:37.758" starttime="20171002 02:49:37.757"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171002 02:49:37.759" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171002 02:49:37.759" starttime="20171002 02:49:37.759"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171002 02:49:37.760" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171002 02:49:37.760" starttime="20171002 02:49:37.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171002 02:49:37.760" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171002 02:49:37.760" starttime="20171002 02:49:37.760"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.984" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171002 02:49:37.984" starttime="20171002 02:49:37.761"></status>
</kw>
<msg timestamp="20171002 02:49:37.984" level="INFO">${status} = PASS</msg>
<msg timestamp="20171002 02:49:37.984" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:37.984" starttime="20171002 02:49:37.761"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.985" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:37.985" starttime="20171002 02:49:37.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171002 02:49:37.986" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171002 02:49:37.986" starttime="20171002 02:49:37.985"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.986" starttime="20171002 02:49:37.757"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.986" starttime="20171002 02:49:37.756"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:37.986" starttime="20171002 02:49:37.756"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171002 02:49:37.987" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20171002 02:49:37.987" starttime="20171002 02:49:37.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:37.988" starttime="20171002 02:49:37.987"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171002 02:49:38.030" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171002 02:49:38.030" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:38.030" starttime="20171002 02:49:37.988"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:38.031" starttime="20171002 02:49:38.030"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171002 02:49:38.031" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171002 02:49:38.031" starttime="20171002 02:49:38.031"></status>
</kw>
<msg timestamp="20171002 02:49:38.031" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171002 02:49:38.031" starttime="20171002 02:49:37.755"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171002 02:49:38.032" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171002 02:49:38.032" starttime="20171002 02:49:38.032"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:38.032" starttime="20171002 02:49:37.755"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:38.032" starttime="20171002 02:49:37.471"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:38.032" starttime="20171002 02:49:37.470"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:38.033" starttime="20171002 02:49:10.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20171002 02:49:38.033" starttime="20171002 02:49:38.033"></status>
</kw>
<status status="PASS" endtime="20171002 02:49:38.033" starttime="20171002 02:49:10.063"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20171002 02:49:38.033" critical="yes" starttime="20171002 02:48:42.219">SSLError: ('The write operation timed out',)</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20171002 02:49:38.034" starttime="20171002 02:48:41.065"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
