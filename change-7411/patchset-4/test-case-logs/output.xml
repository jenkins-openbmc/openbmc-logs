<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20171026 13:22:31.097">
<suite id="s1" name="Tests" source="/tmp/fspcibld/18314/obmc-robot/tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Clear System Entry From Knownhosts</arg>
</arguments>
<kw library="connection_client" name="Clear System Entry From Knownhosts">
<doc>Delete OPENBMC_HOST entry from known_hosts file.</doc>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>sed '/${OPENBMC_HOST}/d' -i ~/.ssh/known_hosts</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:32.347">${cmd} = sed '/9.5.180.47/d' -i ~/.ssh/known_hosts</msg>
<status starttime="20171026 13:22:32.347" endtime="20171026 13:22:32.347" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:32.351">Running command 'sed '/9.5.180.47/d' -i ~/.ssh/known_hosts 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171026 13:22:32.354">${rc} = 2</msg>
<msg level="INFO" timestamp="20171026 13:22:32.354">${output} = sed: can't read /home/fspcibld/.ssh/known_hosts: No such file or directory</msg>
<status starttime="20171026 13:22:32.348" endtime="20171026 13:22:32.354" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:32.346" endtime="20171026 13:22:32.354" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:32.346" endtime="20171026 13:22:32.355" status="PASS"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:22:32.359">Dictionary does not contain key 'host'.</msg>
<status starttime="20171026 13:22:32.359" endtime="20171026 13:22:32.359" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:32.360">${has_host} = False</msg>
<status starttime="20171026 13:22:32.358" endtime="20171026 13:22:32.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20171026 13:22:32.361" endtime="20171026 13:22:32.361" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:32.360" endtime="20171026 13:22:32.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:32.363">${port_num} = 22</msg>
<status starttime="20171026 13:22:32.362" endtime="20171026 13:22:32.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:32.363">${SSH_PORT} = 22</msg>
<status starttime="20171026 13:22:32.363" endtime="20171026 13:22:32.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:32.364">${https_num} = 443</msg>
<status starttime="20171026 13:22:32.364" endtime="20171026 13:22:32.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:32.365">${AUTH_URI} = https://9.5.180.47:443</msg>
<status starttime="20171026 13:22:32.364" endtime="20171026 13:22:32.365" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:32.362" endtime="20171026 13:22:32.365" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:32.361" endtime="20171026 13:22:32.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:22:32.366">Dictionary does not contain key 'port'.</msg>
<status starttime="20171026 13:22:32.366" endtime="20171026 13:22:32.366" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:32.367">${has_port} = False</msg>
<status starttime="20171026 13:22:32.366" endtime="20171026 13:22:32.367" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20171026 13:22:32.368" endtime="20171026 13:22:32.369" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20171026 13:22:32.369" endtime="20171026 13:22:32.370" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:32.368" endtime="20171026 13:22:32.370" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:32.367" endtime="20171026 13:22:32.370" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:32.371">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171026 13:22:34.452">Read output: root@witherspoon:~#</msg>
<status starttime="20171026 13:22:32.371" endtime="20171026 13:22:34.452" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:32.356" endtime="20171026 13:22:34.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:34.454">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20171026 13:22:34.633">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171026 13:22:34.633">${output} = VERSION_ID="v1.99.10-217-gc29ad1c"</msg>
<msg level="INFO" timestamp="20171026 13:22:34.633">${stderr} = </msg>
<status starttime="20171026 13:22:34.454" endtime="20171026 13:22:34.633" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:34.634">Length is 0</msg>
<status starttime="20171026 13:22:34.634" endtime="20171026 13:22:34.634" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:34.634">VERSION_ID="v1.99.10-217-gc29ad1c"</msg>
<status starttime="20171026 13:22:34.634" endtime="20171026 13:22:34.635" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:34.454" endtime="20171026 13:22:34.635" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:34.453" endtime="20171026 13:22:34.635" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="code_update_utils" name="Get Host Software Objects Details">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:34.636">${software} = []</msg>
<status starttime="20171026 13:22:34.636" endtime="20171026 13:22:34.636" status="PASS"></status>
</kw>
<kw library="code_update_utils" name="Get Software Objects">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:34.638">${host_list} = []</msg>
<status starttime="20171026 13:22:34.637" endtime="20171026 13:22:34.638" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:34.641">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:34.641" endtime="20171026 13:22:34.642" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:34.642">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:34.642" endtime="20171026 13:22:34.642" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:34.643">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:34.643" endtime="20171026 13:22:34.643" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:34.644">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:34.643" endtime="20171026 13:22:34.644" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.013">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:34.644" endtime="20171026 13:22:35.013" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:35.013">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:35.013">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:34.644" endtime="20171026 13:22:35.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.014">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:35.014" endtime="20171026 13:22:35.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.015">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:35.015" endtime="20171026 13:22:35.015" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:34.640" endtime="20171026 13:22:35.015" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:34.640" endtime="20171026 13:22:35.015" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:34.639" endtime="20171026 13:22:35.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:35.016">${base_uri} = /xyz/openbmc_project/software/</msg>
<status starttime="20171026 13:22:35.016" endtime="20171026 13:22:35.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:35.018">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status starttime="20171026 13:22:35.018" endtime="20171026 13:22:35.018" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.019">URI:https://9.5.180.47:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status starttime="20171026 13:22:35.019" endtime="20171026 13:22:35.020" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.019" endtime="20171026 13:22:35.020" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.017" endtime="20171026 13:22:35.020" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.017" endtime="20171026 13:22:35.020" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:35.120">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:22:35.121">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:35.020" endtime="20171026 13:22:35.121" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:35.122">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/390e9d0f", 
    "/xyz/openbmc_project/software/functional", 
    "/xyz/openbmc_...</msg>
<status starttime="20171026 13:22:35.122" endtime="20171026 13:22:35.123" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.123">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/390e9d0f", 
    "/xyz/openbmc_project/software/functional", 
    "/xyz/openbmc_project/software/7413b9c5", 
    "/xyz/openbmc_project/software/aca07270"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:22:35.123" endtime="20171026 13:22:35.124" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.123" endtime="20171026 13:22:35.124" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.121" endtime="20171026 13:22:35.124" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.121" endtime="20171026 13:22:35.124" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:22:35.124">Delete All Sessions</msg>
<status starttime="20171026 13:22:35.124" endtime="20171026 13:22:35.124" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:35.125">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:34.638" endtime="20171026 13:22:35.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.125">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:35.125" endtime="20171026 13:22:35.125" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:35.126">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/390e9d0f", 
    "/xyz/openbmc_project/software/functional", 
    "/xyz/openbmc_project/software/7413b9c5", 
    "/xyz/openbmc_project/software/aca07270"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:22:35.126">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:22:35.126">${content} = {u'data': [u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/390e9d0f', u'/xyz/openbmc_project/software/functional', u'/xyz/openbmc_project/software/7413b9c5', u'/xyz/openbmc_pr...</msg>
<status starttime="20171026 13:22:35.126" endtime="20171026 13:22:35.126" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:35.127">${sw_list} = [u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/390e9d0f', u'/xyz/openbmc_project/software/functional', u'/xyz/openbmc_project/software/7413b9c5', u'/xyz/openbmc_project/soft...</msg>
<status starttime="20171026 13:22:34.638" endtime="20171026 13:22:35.127" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{sw_list} ]">
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/active">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.130">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:35.130" endtime="20171026 13:22:35.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:35.131">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:35.131" endtime="20171026 13:22:35.131" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:35.132">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:35.132" endtime="20171026 13:22:35.132" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:35.133">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:35.133" endtime="20171026 13:22:35.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.442">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:35.134" endtime="20171026 13:22:35.442" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:35.443">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:35.443">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:35.133" endtime="20171026 13:22:35.443" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.443">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:35.443" endtime="20171026 13:22:35.444" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.444">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:35.444" endtime="20171026 13:22:35.444" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.130" endtime="20171026 13:22:35.444" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.129" endtime="20171026 13:22:35.444" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.129" endtime="20171026 13:22:35.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:35.445">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status starttime="20171026 13:22:35.445" endtime="20171026 13:22:35.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:22:35.446" endtime="20171026 13:22:35.446" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:35.542">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:22:35.542">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20171026 13:22:35.446" endtime="20171026 13:22:35.542" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:22:35.543" endtime="20171026 13:22:35.543" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:22:35.543">Delete All Sessions</msg>
<status starttime="20171026 13:22:35.543" endtime="20171026 13:22:35.544" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:35.544">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20171026 13:22:35.128" endtime="20171026 13:22:35.544" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.544">Returning from the enclosing user keyword.</msg>
<status starttime="20171026 13:22:35.544" endtime="20171026 13:22:35.545" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:35.545">${attr_purpose} = None</msg>
<status starttime="20171026 13:22:35.127" endtime="20171026 13:22:35.545" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.546">Continuing for loop from the next iteration.</msg>
<status starttime="20171026 13:22:35.545" endtime="20171026 13:22:35.546" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.127" endtime="20171026 13:22:35.546" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/390e9d0f">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.549">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:35.549" endtime="20171026 13:22:35.549" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:35.550">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:35.550" endtime="20171026 13:22:35.550" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:35.551">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:35.550" endtime="20171026 13:22:35.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:35.552">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:35.551" endtime="20171026 13:22:35.552" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.901">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:35.552" endtime="20171026 13:22:35.901" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:35.901">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:35.901">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:35.552" endtime="20171026 13:22:35.901" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.902">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:35.902" endtime="20171026 13:22:35.902" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:35.903">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:35.903" endtime="20171026 13:22:35.903" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.548" endtime="20171026 13:22:35.903" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.548" endtime="20171026 13:22:35.903" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.547" endtime="20171026 13:22:35.903" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:35.904">${base_uri} = /xyz/openbmc_project/software/390e9d0f/attr/Purpose</msg>
<status starttime="20171026 13:22:35.904" endtime="20171026 13:22:35.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:22:35.904" endtime="20171026 13:22:35.905" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:36.077">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/390e9d0f/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:22:36.078">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:35.905" endtime="20171026 13:22:36.078" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:22:36.078" endtime="20171026 13:22:36.079" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:22:36.079">Delete All Sessions</msg>
<status starttime="20171026 13:22:36.079" endtime="20171026 13:22:36.079" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:36.079">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:35.546" endtime="20171026 13:22:36.079" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status starttime="20171026 13:22:36.080" endtime="20171026 13:22:36.080" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:36.081">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:22:36.081">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:22:36.081">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:22:36.081" endtime="20171026 13:22:36.081" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:36.081">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status starttime="20171026 13:22:35.546" endtime="20171026 13:22:36.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status starttime="20171026 13:22:36.082" endtime="20171026 13:22:36.082" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status starttime="20171026 13:22:36.082" endtime="20171026 13:22:36.083" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.546" endtime="20171026 13:22:36.083" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/functional">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:36.088">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:36.088" endtime="20171026 13:22:36.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:36.089">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:36.089" endtime="20171026 13:22:36.089" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:36.090">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:36.090" endtime="20171026 13:22:36.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:36.091">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:36.091" endtime="20171026 13:22:36.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:36.402">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:36.092" endtime="20171026 13:22:36.402" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:36.402">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:36.402">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:36.091" endtime="20171026 13:22:36.402" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:36.403">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:36.403" endtime="20171026 13:22:36.403" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:36.404">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:36.403" endtime="20171026 13:22:36.404" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:36.088" endtime="20171026 13:22:36.404" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:36.087" endtime="20171026 13:22:36.404" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:36.086" endtime="20171026 13:22:36.404" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:36.405">${base_uri} = /xyz/openbmc_project/software/functional/attr/Purpose</msg>
<status starttime="20171026 13:22:36.405" endtime="20171026 13:22:36.405" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:22:36.405" endtime="20171026 13:22:36.406" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:36.504">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/functional/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:22:36.505">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20171026 13:22:36.406" endtime="20171026 13:22:36.505" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:22:36.505" endtime="20171026 13:22:36.505" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:22:36.506">Delete All Sessions</msg>
<status starttime="20171026 13:22:36.506" endtime="20171026 13:22:36.506" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:36.506">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20171026 13:22:36.083" endtime="20171026 13:22:36.506" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:36.507">Returning from the enclosing user keyword.</msg>
<status starttime="20171026 13:22:36.506" endtime="20171026 13:22:36.507" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:36.507">${attr_purpose} = None</msg>
<status starttime="20171026 13:22:36.083" endtime="20171026 13:22:36.507" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:36.508">Continuing for loop from the next iteration.</msg>
<status starttime="20171026 13:22:36.507" endtime="20171026 13:22:36.508" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:36.083" endtime="20171026 13:22:36.508" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/7413b9c5">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:36.512">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:36.511" endtime="20171026 13:22:36.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:36.513">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:36.512" endtime="20171026 13:22:36.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:36.513">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:36.513" endtime="20171026 13:22:36.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:36.514">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:36.514" endtime="20171026 13:22:36.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:36.837">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:36.515" endtime="20171026 13:22:36.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:36.837">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:36.837">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:36.514" endtime="20171026 13:22:36.837" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:36.838">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:36.837" endtime="20171026 13:22:36.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:36.838">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:36.838" endtime="20171026 13:22:36.839" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:36.511" endtime="20171026 13:22:36.839" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:36.510" endtime="20171026 13:22:36.839" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:36.509" endtime="20171026 13:22:36.839" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:36.839">${base_uri} = /xyz/openbmc_project/software/7413b9c5/attr/Purpose</msg>
<status starttime="20171026 13:22:36.839" endtime="20171026 13:22:36.839" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:22:36.840" endtime="20171026 13:22:36.841" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:37.017">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7413b9c5/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:22:37.017">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:36.841" endtime="20171026 13:22:37.017" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:22:37.017" endtime="20171026 13:22:37.018" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:22:37.018">Delete All Sessions</msg>
<status starttime="20171026 13:22:37.018" endtime="20171026 13:22:37.018" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:37.018">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:36.509" endtime="20171026 13:22:37.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status starttime="20171026 13:22:37.019" endtime="20171026 13:22:37.019" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:37.020">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:22:37.020">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:22:37.020">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:22:37.019" endtime="20171026 13:22:37.020" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:37.020">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status starttime="20171026 13:22:36.508" endtime="20171026 13:22:37.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:37.021">Continuing for loop from the next iteration.</msg>
<status starttime="20171026 13:22:37.021" endtime="20171026 13:22:37.021" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:36.508" endtime="20171026 13:22:37.021" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/aca07270">
<kw library="code_update_utils" name="Read Software Attribute">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:37.025">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:37.024" endtime="20171026 13:22:37.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:37.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:37.025" endtime="20171026 13:22:37.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:37.026">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:37.026" endtime="20171026 13:22:37.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:37.027">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:37.027" endtime="20171026 13:22:37.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:37.358">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:37.028" endtime="20171026 13:22:37.358" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:37.358">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:37.358">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:37.028" endtime="20171026 13:22:37.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:37.359">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:37.359" endtime="20171026 13:22:37.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:37.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:37.360" endtime="20171026 13:22:37.360" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:37.023" endtime="20171026 13:22:37.360" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:37.023" endtime="20171026 13:22:37.360" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:37.022" endtime="20171026 13:22:37.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:37.361">${base_uri} = /xyz/openbmc_project/software/aca07270/attr/Purpose</msg>
<status starttime="20171026 13:22:37.361" endtime="20171026 13:22:37.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:22:37.362" endtime="20171026 13:22:37.362" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:37.506">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/aca07270/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:22:37.506">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:37.362" endtime="20171026 13:22:37.506" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:22:37.506" endtime="20171026 13:22:37.506" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:22:37.507">Delete All Sessions</msg>
<status starttime="20171026 13:22:37.507" endtime="20171026 13:22:37.507" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:37.507">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:37.022" endtime="20171026 13:22:37.507" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status starttime="20171026 13:22:37.507" endtime="20171026 13:22:37.508" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:37.508">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:22:37.508">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:22:37.509">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:22:37.508" endtime="20171026 13:22:37.509" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:37.509">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status starttime="20171026 13:22:37.021" endtime="20171026 13:22:37.509" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:37.510">Continuing for loop from the next iteration.</msg>
<status starttime="20171026 13:22:37.509" endtime="20171026 13:22:37.510" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:37.021" endtime="20171026 13:22:37.510" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:35.127" endtime="20171026 13:22:37.510" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:37.511">${pnor_details} = [u'/xyz/openbmc_project/software/390e9d0f']</msg>
<status starttime="20171026 13:22:34.637" endtime="20171026 13:22:37.511" status="PASS"></status>
</kw>
<kw type="for" name="${pnor} IN [ @{pnor_details} ]">
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/390e9d0f">
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:37.514">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:37.513" endtime="20171026 13:22:37.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:37.515">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:37.515" endtime="20171026 13:22:37.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:37.516">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:37.516" endtime="20171026 13:22:37.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:37.517">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:37.517" endtime="20171026 13:22:37.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:37.830">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:37.518" endtime="20171026 13:22:37.830" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:37.830">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:37.830">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:37.517" endtime="20171026 13:22:37.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:37.831">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:37.831" endtime="20171026 13:22:37.831" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:37.832">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:37.832" endtime="20171026 13:22:37.833" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:37.513" endtime="20171026 13:22:37.833" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:37.512" endtime="20171026 13:22:37.833" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:37.512" endtime="20171026 13:22:37.833" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:37.834">${base_uri} = /xyz/openbmc_project/software/390e9d0f</msg>
<status starttime="20171026 13:22:37.833" endtime="20171026 13:22:37.834" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:22:37.834" endtime="20171026 13:22:37.835" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:38.005">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/390e9d0f, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:22:38.005">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:37.835" endtime="20171026 13:22:38.005" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:22:38.005" endtime="20171026 13:22:38.006" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:22:38.006">Delete All Sessions</msg>
<status starttime="20171026 13:22:38.006" endtime="20171026 13:22:38.006" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:38.006">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:37.511" endtime="20171026 13:22:38.007" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:38.007">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1471-g8043efb,buildroot-2017.08-8-g5e23247,skiboot-v5.8-150-gabb1d4e81f33-p74eca7d,hostboot-b01e6bb,linux-4.13.5-openpower1-pd2c0bbb,petitboot-v1.6.0-p3dc37e1,machine-xml-389c56f,occ-ba4e81e,hostboot-binaries-0886586,capp-ucode-p9-dd2-v2,sbe-374add4", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-ibm-OP9_v1.19_1.62", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:22:38.007">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:22:38.007">${json} = {u'data': {u'Path': u'', u'ExtendedVersion': u'op-build-v1.7-1471-g8043efb,buildroot-2017.08-8-g5e23247,skiboot-v5.8-150-gabb1d4e81f33-p74eca7d,hostboot-b01e6bb,linux-4.13.5-openpower1-pd2c0bbb,petitb...</msg>
<status starttime="20171026 13:22:38.007" endtime="20171026 13:22:38.007" status="PASS"></status>
</kw>
<kw library="Collections" name="Append To List">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status starttime="20171026 13:22:38.008" endtime="20171026 13:22:38.008" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:37.511" endtime="20171026 13:22:38.008" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:37.511" endtime="20171026 13:22:38.008" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:38.008">${software} = [{u'Path': u'', u'ExtendedVersion': u'op-build-v1.7-1471-g8043efb,buildroot-2017.08-8-g5e23247,skiboot-v5.8-150-gabb1d4e81f33-p74eca7d,hostboot-b01e6bb,linux-4.13.5-openpower1-pd2c0bbb,petitboot-v1.6....</msg>
<status starttime="20171026 13:22:34.636" endtime="20171026 13:22:38.009" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:38.009">[{u'Path': u'', u'ExtendedVersion': u'op-build-v1.7-1471-g8043efb,buildroot-2017.08-8-g5e23247,skiboot-v5.8-150-gabb1d4e81f33-p74eca7d,hostboot-b01e6bb,linux-4.13.5-openpower1-pd2c0bbb,petitboot-v1.6.0-p3dc37e1,machine-xml-389c56f,occ-ba4e81e,hostboot-binaries-0886586,capp-ucode-p9-dd2-v2,sbe-374add4', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'Priority': 0, u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Version': u'IBM-witherspoon-ibm-OP9_v1.19_1.62'}]</msg>
<status starttime="20171026 13:22:38.009" endtime="20171026 13:22:38.009" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:34.635" endtime="20171026 13:22:38.009" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:34.635" endtime="20171026 13:22:38.009" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:38.020">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:22:38.021">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171026 13:22:39.116">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20171026 13:22:39.117">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20171026 13:22:39.297">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171026 13:22:39.305">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20171026 13:22:39.305">${stderr} = </msg>
<msg level="INFO" timestamp="20171026 13:22:39.305">${rc} = 0</msg>
<status starttime="20171026 13:22:38.011" endtime="20171026 13:22:39.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:39.306">Length is 0</msg>
<status starttime="20171026 13:22:39.305" endtime="20171026 13:22:39.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:39.306">Length is 11</msg>
<status starttime="20171026 13:22:39.306" endtime="20171026 13:22:39.306" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:39.307">${bmc_model} = Witherspoon</msg>
<status starttime="20171026 13:22:38.010" endtime="20171026 13:22:39.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:39.307">BMC Model=Witherspoon</msg>
<status starttime="20171026 13:22:39.307" endtime="20171026 13:22:39.307" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:38.010" endtime="20171026 13:22:39.307" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:38.010" endtime="20171026 13:22:39.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:22:39.310">Dictionary does not contain key 'host'.</msg>
<status starttime="20171026 13:22:39.310" endtime="20171026 13:22:39.310" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:39.310">${has_host} = False</msg>
<status starttime="20171026 13:22:39.309" endtime="20171026 13:22:39.310" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20171026 13:22:39.311" endtime="20171026 13:22:39.312" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:39.311" endtime="20171026 13:22:39.312" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:39.313">${port_num} = 22</msg>
<status starttime="20171026 13:22:39.313" endtime="20171026 13:22:39.313" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:39.314">${SSH_PORT} = 22</msg>
<status starttime="20171026 13:22:39.314" endtime="20171026 13:22:39.314" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:39.315">${https_num} = 443</msg>
<status starttime="20171026 13:22:39.314" endtime="20171026 13:22:39.315" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:39.315">${AUTH_URI} = https://9.5.180.47:443</msg>
<status starttime="20171026 13:22:39.315" endtime="20171026 13:22:39.316" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:39.313" endtime="20171026 13:22:39.316" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:39.312" endtime="20171026 13:22:39.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:22:39.317">Dictionary does not contain key 'port'.</msg>
<status starttime="20171026 13:22:39.316" endtime="20171026 13:22:39.317" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:39.317">${has_port} = False</msg>
<status starttime="20171026 13:22:39.316" endtime="20171026 13:22:39.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20171026 13:22:39.319" endtime="20171026 13:22:39.319" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20171026 13:22:39.319" endtime="20171026 13:22:39.320" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:39.318" endtime="20171026 13:22:39.320" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:39.317" endtime="20171026 13:22:39.320" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:39.320">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171026 13:22:41.334">Read output: root@witherspoon:~#</msg>
<status starttime="20171026 13:22:39.320" endtime="20171026 13:22:41.334" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:39.309" endtime="20171026 13:22:41.334" status="PASS"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:41.336">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20171026 13:22:41.516">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171026 13:22:41.516">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20171026 13:22:41.516">${stderr} = </msg>
<status starttime="20171026 13:22:41.335" endtime="20171026 13:22:41.516" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:41.517">Length is 0</msg>
<status starttime="20171026 13:22:41.517" endtime="20171026 13:22:41.517" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:41.517">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20171026 13:22:41.335" endtime="20171026 13:22:41.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20171026 13:22:41.517" endtime="20171026 13:22:41.518" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:39.308" endtime="20171026 13:22:41.518" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:39.308" endtime="20171026 13:22:41.518" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Set Boot Defaults</arg>
</arguments>
<kw name="Set Boot Defaults">
<kw library="utils" name="Set Control Boot Mode">
<doc>Set given boot mode on the boot object path attribute.</doc>
<arguments>
<arg>${CONTROL_HOST_URI}/boot</arg>
<arg>${BOOT_MODE_REGULAR}</arg>
</arguments>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${boot_mode}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:41.520">${valueDict} = {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}</msg>
<status starttime="20171026 13:22:41.519" endtime="20171026 13:22:41.520" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${boot_path}</arg>
<arg>BootMode</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:41.521">${base_uri} = /xyz/openbmc_project/control/host0//boot</msg>
<status starttime="20171026 13:22:41.521" endtime="20171026 13:22:41.521" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:41.524">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:41.524" endtime="20171026 13:22:41.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:41.525">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:41.525" endtime="20171026 13:22:41.525" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:41.526">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:41.526" endtime="20171026 13:22:41.526" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:41.527">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:41.526" endtime="20171026 13:22:41.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:41.838">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:41.528" endtime="20171026 13:22:41.838" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:41.838">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:41.838">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:41.527" endtime="20171026 13:22:41.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:41.839">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:41.839" endtime="20171026 13:22:41.839" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:41.840">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:41.839" endtime="20171026 13:22:41.840" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:41.523" endtime="20171026 13:22:41.840" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:41.523" endtime="20171026 13:22:41.840" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:41.522" endtime="20171026 13:22:41.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:41.841">${base_uri} = /xyz/openbmc_project/control/host0//boot/attr/BootMode</msg>
<status starttime="20171026 13:22:41.840" endtime="20171026 13:22:41.841" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:41.841">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:41.841" endtime="20171026 13:22:41.841" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20171026 13:22:41.842" endtime="20171026 13:22:41.842" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:41.845">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/control/host0//boot/attr/BootMode, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}, u'headers': {u'Content-Ty...</msg>
<status starttime="20171026 13:22:41.844" endtime="20171026 13:22:41.845" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:41.846">URI:https://9.5.180.47:443/xyz/openbmc_project/control/host0//boot/attr/BootMode, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20171026 13:22:41.846" endtime="20171026 13:22:41.846" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:41.845" endtime="20171026 13:22:41.846" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:41.843" endtime="20171026 13:22:41.847" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.109">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0//boot/attr/BootMode, data={"data": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171026 13:22:42.109">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:41.847" endtime="20171026 13:22:42.109" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.111">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:22:42.111" endtime="20171026 13:22:42.111" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:42.112">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:22:42.112" endtime="20171026 13:22:42.113" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:42.112" endtime="20171026 13:22:42.113" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:42.110" endtime="20171026 13:22:42.113" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:22:42.113">Delete All Sessions</msg>
<status starttime="20171026 13:22:42.113" endtime="20171026 13:22:42.113" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:42.114">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:41.521" endtime="20171026 13:22:42.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:42.114">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:42.114" endtime="20171026 13:22:42.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:42.115">Returning from the enclosing user keyword.</msg>
<status starttime="20171026 13:22:42.115" endtime="20171026 13:22:42.115" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:41.520" endtime="20171026 13:22:42.115" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:41.519" endtime="20171026 13:22:42.115" status="PASS"></status>
</kw>
<kw library="utils" name="Set Control Boot Mode">
<doc>Set given boot mode on the boot object path attribute.</doc>
<arguments>
<arg>${CONTROL_HOST_URI}/boot/one_time</arg>
<arg>${BOOT_MODE_REGULAR}</arg>
</arguments>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${boot_mode}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.117">${valueDict} = {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}</msg>
<status starttime="20171026 13:22:42.116" endtime="20171026 13:22:42.117" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${boot_path}</arg>
<arg>BootMode</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.118">${base_uri} = /xyz/openbmc_project/control/host0//boot/one_time</msg>
<status starttime="20171026 13:22:42.118" endtime="20171026 13:22:42.118" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:42.121">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:42.121" endtime="20171026 13:22:42.121" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.122">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:42.122" endtime="20171026 13:22:42.122" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.123">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:42.122" endtime="20171026 13:22:42.123" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.123">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:42.123" endtime="20171026 13:22:42.123" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:42.432">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:42.124" endtime="20171026 13:22:42.433" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:42.433">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:42.433">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:42.124" endtime="20171026 13:22:42.433" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:42.433">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:42.433" endtime="20171026 13:22:42.434" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:42.434">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:42.434" endtime="20171026 13:22:42.434" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:42.120" endtime="20171026 13:22:42.434" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:42.120" endtime="20171026 13:22:42.435" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:42.119" endtime="20171026 13:22:42.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.435">${base_uri} = /xyz/openbmc_project/control/host0//boot/one_time/attr/BootMode</msg>
<status starttime="20171026 13:22:42.435" endtime="20171026 13:22:42.435" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.436">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:42.436" endtime="20171026 13:22:42.436" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20171026 13:22:42.436" endtime="20171026 13:22:42.437" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.438">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/control/host0//boot/one_time/attr/BootMode, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}, u'headers': {u'C...</msg>
<status starttime="20171026 13:22:42.438" endtime="20171026 13:22:42.438" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:42.440">URI:https://9.5.180.47:443/xyz/openbmc_project/control/host0//boot/one_time/attr/BootMode, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Control.Boot.Mode.Modes.Regular'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20171026 13:22:42.439" endtime="20171026 13:22:42.440" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:42.439" endtime="20171026 13:22:42.440" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:42.437" endtime="20171026 13:22:42.440" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.639">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0//boot/one_time/attr/BootMode, data={"data": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171026 13:22:42.639">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:42.440" endtime="20171026 13:22:42.639" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.640">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:22:42.640" endtime="20171026 13:22:42.640" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:42.641">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:22:42.641" endtime="20171026 13:22:42.641" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:42.641" endtime="20171026 13:22:42.642" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:42.639" endtime="20171026 13:22:42.642" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:22:42.642">Delete All Sessions</msg>
<status starttime="20171026 13:22:42.642" endtime="20171026 13:22:42.642" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:42.642">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:42.118" endtime="20171026 13:22:42.642" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:42.643">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:42.643" endtime="20171026 13:22:42.643" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:42.644">Returning from the enclosing user keyword.</msg>
<status starttime="20171026 13:22:42.643" endtime="20171026 13:22:42.644" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:42.117" endtime="20171026 13:22:42.644" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:42.116" endtime="20171026 13:22:42.644" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:41.518" endtime="20171026 13:22:42.644" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:41.518" endtime="20171026 13:22:42.644" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:32.345" endtime="20171026 13:22:42.644" status="PASS"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/18314/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/18314/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:42.687">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:42.686" endtime="20171026 13:22:42.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.723">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:42.722" endtime="20171026 13:22:42.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.724">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:42.723" endtime="20171026 13:22:42.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:42.724">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:42.724" endtime="20171026 13:22:42.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:43.068">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:42.725" endtime="20171026 13:22:43.068" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:43.068">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:43.068">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:42.725" endtime="20171026 13:22:43.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:43.069">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:43.069" endtime="20171026 13:22:43.069" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:43.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:43.070" endtime="20171026 13:22:43.070" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:42.686" endtime="20171026 13:22:43.070" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:42.685" endtime="20171026 13:22:43.070" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:42.685" endtime="20171026 13:22:43.070" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20171026 13:22:43.071" endtime="20171026 13:22:43.071" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.082">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20171026 13:22:43.072" endtime="20171026 13:22:43.082" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.092">${FFDC_DIR_PATH} = </msg>
<status starttime="20171026 13:22:43.082" endtime="20171026 13:22:43.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.094">${cur_time} = 2017-10-26 13:22:43:094142</msg>
<status starttime="20171026 13:22:43.094" endtime="20171026 13:22:43.094" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.095">${cur_time} = 20171026132243094142</msg>
<status starttime="20171026 13:22:43.095" endtime="20171026 13:22:43.095" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:43.094" endtime="20171026 13:22:43.095" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:43.100">${FFDC_TIME} = 20171026132243094142</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.101">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20171026 13:22:43.101" endtime="20171026 13:22:43.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.102">${suite_name} = 20171026132243094142_TestsSecurityTestSsl</msg>
<status starttime="20171026 13:22:43.102" endtime="20171026 13:22:43.102" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.102">${test_name} = TestSSLConnection</msg>
<status starttime="20171026 13:22:43.102" endtime="20171026 13:22:43.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.103">${test_name} = 20171026132243094142_TestSSLConnection</msg>
<status starttime="20171026 13:22:43.103" endtime="20171026 13:22:43.103" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:43.101" endtime="20171026 13:22:43.103" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:43.104">${FFDC_DIR_PATH} = /tmp/fspcibld/18314/obmc-robot/logs/20171026132243094142_TestsSecurityTestSsl/20171026132243094142_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20171026 13:22:43.109">${FFDC_PREFIX} = 20171026132243094142_</msg>
<status starttime="20171026 13:22:43.093" endtime="20171026 13:22:43.109" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:43.093" endtime="20171026 13:22:43.109" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20171026 13:22:43.109" endtime="20171026 13:22:43.110" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:22:43.110">Created directory '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs"&gt;/tmp/fspcibld/18314/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20171026 13:22:43.110" endtime="20171026 13:22:43.110" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:22:43.112">File '/tmp/fspcibld/18314/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20171026 13:22:43.111" endtime="20171026 13:22:43.112" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:43.112">${exist} = False</msg>
<status starttime="20171026 13:22:43.111" endtime="20171026 13:22:43.112" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:22:43.113">Created file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:22:43.113" endtime="20171026 13:22:43.113" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:43.112" endtime="20171026 13:22:43.113" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20171026 13:22:43.113" endtime="20171026 13:22:43.114" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.115">${cur_time} = 2017-10-26 13:22:43:114373</msg>
<status starttime="20171026 13:22:43.114" endtime="20171026 13:22:43.115" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.115">${cur_time} = 20171026132243114373</msg>
<status starttime="20171026 13:22:43.115" endtime="20171026 13:22:43.115" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:43.115">${cur_time} = 20171026132243114373</msg>
<status starttime="20171026 13:22:43.114" endtime="20171026 13:22:43.115" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:22:43.116">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:22:43.116" endtime="20171026 13:22:43.116" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:43.072" endtime="20171026 13:22:43.116" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status starttime="20171026 13:22:43.117" endtime="20171026 13:22:43.117" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:43.071" endtime="20171026 13:22:43.117" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20171026 13:22:42.684" endtime="20171026 13:22:43.117" status="PASS" critical="yes"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" type="teardown" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:22:43.118">Delete All Sessions</msg>
<status starttime="20171026 13:22:43.118" endtime="20171026 13:22:43.118" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20171026 13:22:42.647" endtime="20171026 13:22:43.118" status="PASS"></status>
</suite>
<status starttime="20171026 13:22:42.644" endtime="20171026 13:22:43.120" status="PASS"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/18314/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.160">${default_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:22:43.160" endtime="20171026 13:22:43.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.161">${log_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:22:43.161" endtime="20171026 13:22:43.161" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:43.161">${log_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:22:43.159" endtime="20171026 13:22:43.161" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.163">${default_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:22:43.163" endtime="20171026 13:22:43.163" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.164">${log_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:22:43.163" endtime="20171026 13:22:43.164" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:43.164">${log_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:22:43.162" endtime="20171026 13:22:43.164" status="PASS"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.165">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw'</msg>
<status starttime="20171026 13:22:43.165" endtime="20171026 13:22:43.165" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:22:43.165" endtime="20171026 13:22:43.166" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.170">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw''.</msg>
<msg level="INFO" timestamp="20171026 13:22:43.173">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:22:43.174">${output} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:22:43.166" endtime="20171026 13:22:43.174" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171026 13:22:43.176" endtime="20171026 13:22:43.177" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:43.178">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status starttime="20171026 13:22:43.178" endtime="20171026 13:22:43.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.179">${ssh_pw_file_path} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:22:43.179" endtime="20171026 13:22:43.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.180">${cmd_buf} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:22:43.179" endtime="20171026 13:22:43.180" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:43.181">${search_string} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:22:43.164" endtime="20171026 13:22:43.181" status="PASS"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.181">${search_string} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47</msg>
<status starttime="20171026 13:22:43.181" endtime="20171026 13:22:43.182" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.182">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20171026 13:22:43.182" endtime="20171026 13:22:43.182" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:22:43.183" endtime="20171026 13:22:43.183" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.187">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171026 13:22:43.196">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:22:43.196">${os_con_pid} = </msg>
<status starttime="20171026 13:22:43.183" endtime="20171026 13:22:43.196" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20171026 13:22:43.198" endtime="20171026 13:22:43.199" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:43.200">${os_con_pid} = </msg>
<status starttime="20171026 13:22:43.164" endtime="20171026 13:22:43.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.201">${cmd_buf} = kill -9 </msg>
<status starttime="20171026 13:22:43.200" endtime="20171026 13:22:43.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:22:43.201" endtime="20171026 13:22:43.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.205">${rc} = None</msg>
<msg level="INFO" timestamp="20171026 13:22:43.205">${output} = None</msg>
<status starttime="20171026 13:22:43.205" endtime="20171026 13:22:43.205" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171026 13:22:43.206" endtime="20171026 13:22:43.206" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:22:43.208">Source file '/tmp/9.5.180.47_os_console.txt' does not exist.</msg>
<status starttime="20171026 13:22:43.207" endtime="20171026 13:22:43.208" status="FAIL"></status>
</kw>
<status starttime="20171026 13:22:43.207" endtime="20171026 13:22:43.208" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:43.206" endtime="20171026 13:22:43.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.209">${output} = </msg>
<status starttime="20171026 13:22:43.209" endtime="20171026 13:22:43.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.209">${loc_quiet} = 1</msg>
<status starttime="20171026 13:22:43.209" endtime="20171026 13:22:43.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<status starttime="20171026 13:22:43.211" endtime="20171026 13:22:43.264" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:43.271">${rc} = 1</msg>
<msg level="INFO" timestamp="20171026 13:22:43.273">${output} = </msg>
<status starttime="20171026 13:22:43.210" endtime="20171026 13:22:43.273" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:43.274">${log_output} = </msg>
<status starttime="20171026 13:22:43.161" endtime="20171026 13:22:43.274" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:22:43.284">Created file '&lt;a href="file:///tmp/9.5.180.47_os_console.txt"&gt;/tmp/9.5.180.47_os_console.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:22:43.282" endtime="20171026 13:22:43.284" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.288">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw'</msg>
<status starttime="20171026 13:22:43.288" endtime="20171026 13:22:43.288" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:22:43.288" endtime="20171026 13:22:43.290" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.305">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw''.</msg>
<msg level="INFO" timestamp="20171026 13:22:43.327">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:22:43.327">${output} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:22:43.290" endtime="20171026 13:22:43.328" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171026 13:22:43.331" endtime="20171026 13:22:43.332" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:43.333">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status starttime="20171026 13:22:43.332" endtime="20171026 13:22:43.333" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.334">${ssh_pw_file_path} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:22:43.334" endtime="20171026 13:22:43.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.336">${cmd_buf} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:22:43.334" endtime="20171026 13:22:43.336" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:43.336">${sub_cmd_buf} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:22:43.285" endtime="20171026 13:22:43.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.337">${cmd_buf} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47 &gt; /tmp/9.5.180.47_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status starttime="20171026 13:22:43.337" endtime="20171026 13:22:43.337" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:22:43.338" endtime="20171026 13:22:43.338" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:43.347">Running command '/tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47 &gt; /tmp/9.5.180.47_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20171026 13:22:43.357">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:22:43.357">${output} = </msg>
<status starttime="20171026 13:22:43.338" endtime="20171026 13:22:43.358" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20171026 13:22:43.360" endtime="20171026 13:22:43.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:44.362">Slept 1 second</msg>
<status starttime="20171026 13:22:43.361" endtime="20171026 13:22:44.362" status="PASS"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.364">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw'</msg>
<status starttime="20171026 13:22:44.364" endtime="20171026 13:22:44.364" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:22:44.365" endtime="20171026 13:22:44.367" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.371">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw''.</msg>
<msg level="INFO" timestamp="20171026 13:22:44.375">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:22:44.375">${output} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:22:44.367" endtime="20171026 13:22:44.375" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171026 13:22:44.377" endtime="20171026 13:22:44.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:44.379">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status starttime="20171026 13:22:44.378" endtime="20171026 13:22:44.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.380">${ssh_pw_file_path} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:22:44.380" endtime="20171026 13:22:44.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.381">${cmd_buf} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:22:44.380" endtime="20171026 13:22:44.381" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:44.381">${search_string} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:22:44.363" endtime="20171026 13:22:44.381" status="PASS"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.382">${search_string} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47</msg>
<status starttime="20171026 13:22:44.382" endtime="20171026 13:22:44.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.383">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20171026 13:22:44.383" endtime="20171026 13:22:44.383" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:22:44.383" endtime="20171026 13:22:44.384" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.389">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171026 13:22:44.394">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:22:44.394">${os_con_pid} = 202</msg>
<status starttime="20171026 13:22:44.384" endtime="20171026 13:22:44.394" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20171026 13:22:44.396" endtime="20171026 13:22:44.397" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:44.398">${os_con_pid} = 202</msg>
<status starttime="20171026 13:22:44.362" endtime="20171026 13:22:44.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:44.398">Length is 3</msg>
<status starttime="20171026 13:22:44.398" endtime="20171026 13:22:44.399" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:43.159" endtime="20171026 13:22:44.399" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:44.400">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.402">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20171026 13:22:44.401" endtime="20171026 13:22:44.402" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.403">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20171026 13:22:44.403" endtime="20171026 13:22:44.403" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:44.407">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:44.406" endtime="20171026 13:22:44.408" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.409">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:44.408" endtime="20171026 13:22:44.409" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.409">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:44.409" endtime="20171026 13:22:44.409" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.410">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:44.410" endtime="20171026 13:22:44.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:44.720">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:44.411" endtime="20171026 13:22:44.720" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:44.720">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:44.720">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:44.410" endtime="20171026 13:22:44.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:44.721">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:44.721" endtime="20171026 13:22:44.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:44.722">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:44.722" endtime="20171026 13:22:44.722" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:44.406" endtime="20171026 13:22:44.722" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:44.405" endtime="20171026 13:22:44.722" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:44.405" endtime="20171026 13:22:44.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.723">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20171026 13:22:44.723" endtime="20171026 13:22:44.723" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.724">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:44.723" endtime="20171026 13:22:44.724" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20171026 13:22:44.724" endtime="20171026 13:22:44.724" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:44.726">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status starttime="20171026 13:22:44.725" endtime="20171026 13:22:44.726" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:44.727">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20171026 13:22:44.727" endtime="20171026 13:22:44.727" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:44.726" endtime="20171026 13:22:44.727" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:44.724" endtime="20171026 13:22:44.727" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:45.079">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171026 13:22:45.079">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:44.727" endtime="20171026 13:22:45.079" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:45.081">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:22:45.080" endtime="20171026 13:22:45.081" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:45.082">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:22:45.081" endtime="20171026 13:22:45.082" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:45.081" endtime="20171026 13:22:45.082" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:45.079" endtime="20171026 13:22:45.082" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:22:45.082">Delete All Sessions</msg>
<status starttime="20171026 13:22:45.082" endtime="20171026 13:22:45.083" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:45.083">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:44.404" endtime="20171026 13:22:45.083" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:45.083">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:45.083" endtime="20171026 13:22:45.083" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:45.084">Returning from the enclosing user keyword.</msg>
<status starttime="20171026 13:22:45.084" endtime="20171026 13:22:45.084" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:44.402" endtime="20171026 13:22:45.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20171026 13:22:45.085" endtime="20171026 13:22:45.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:45.091">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:45.091" endtime="20171026 13:22:45.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:45.092">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:45.092" endtime="20171026 13:22:45.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:45.093">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:45.093" endtime="20171026 13:22:45.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:45.094">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:45.093" endtime="20171026 13:22:45.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:45.815">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:45.094" endtime="20171026 13:22:45.815" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:45.815">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:45.815">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:45.094" endtime="20171026 13:22:45.815" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:45.816">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:45.816" endtime="20171026 13:22:45.816" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:45.817">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:45.816" endtime="20171026 13:22:45.817" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:45.090" endtime="20171026 13:22:45.817" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:45.090" endtime="20171026 13:22:45.817" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:45.089" endtime="20171026 13:22:45.817" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:45.818">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:22:45.817" endtime="20171026 13:22:45.818" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:45.820">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:22:45.819" endtime="20171026 13:22:45.820" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:45.821">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:22:45.821" endtime="20171026 13:22:45.821" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:45.820" endtime="20171026 13:22:45.821" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:45.819" endtime="20171026 13:22:45.821" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:45.818" endtime="20171026 13:22:45.821" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.151">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:22:46.151">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:45.822" endtime="20171026 13:22:46.151" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.153">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:22:46.152" endtime="20171026 13:22:46.153" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:46.154">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:22:46.154" endtime="20171026 13:22:46.154" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.153" endtime="20171026 13:22:46.154" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.152" endtime="20171026 13:22:46.155" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.151" endtime="20171026 13:22:46.155" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:22:46.155">Delete All Sessions</msg>
<status starttime="20171026 13:22:46.155" endtime="20171026 13:22:46.155" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:46.155">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:45.089" endtime="20171026 13:22:46.155" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:46.156">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:46.156" endtime="20171026 13:22:46.156" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.157">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:22:46.157">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:22:46.157">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:22:46.156" endtime="20171026 13:22:46.157" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:46.157">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171026 13:22:45.088" endtime="20171026 13:22:46.157" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:46.157">${power_state} = Off</msg>
<status starttime="20171026 13:22:45.088" endtime="20171026 13:22:46.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:22:46.158" endtime="20171026 13:22:46.158" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:45.087" endtime="20171026 13:22:46.158" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:46.164">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:46.162" endtime="20171026 13:22:46.165" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.166">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:46.165" endtime="20171026 13:22:46.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.166">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:46.166" endtime="20171026 13:22:46.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.167">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:46.167" endtime="20171026 13:22:46.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:46.727">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:46.168" endtime="20171026 13:22:46.727" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:46.728">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:46.728">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:46.167" endtime="20171026 13:22:46.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:46.728">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:46.728" endtime="20171026 13:22:46.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:46.729">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:46.729" endtime="20171026 13:22:46.729" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.161" endtime="20171026 13:22:46.729" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.161" endtime="20171026 13:22:46.729" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.160" endtime="20171026 13:22:46.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.730">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:22:46.730" endtime="20171026 13:22:46.730" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.732">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:22:46.732" endtime="20171026 13:22:46.733" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:46.733">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:22:46.733" endtime="20171026 13:22:46.734" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.733" endtime="20171026 13:22:46.734" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.731" endtime="20171026 13:22:46.734" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.731" endtime="20171026 13:22:46.734" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.881">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:22:46.882">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:46.734" endtime="20171026 13:22:46.882" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.883">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:22:46.883" endtime="20171026 13:22:46.883" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:46.884">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:22:46.884" endtime="20171026 13:22:46.885" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.884" endtime="20171026 13:22:46.885" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.882" endtime="20171026 13:22:46.885" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.882" endtime="20171026 13:22:46.885" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:22:46.885">Delete All Sessions</msg>
<status starttime="20171026 13:22:46.885" endtime="20171026 13:22:46.885" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:46.886">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:46.159" endtime="20171026 13:22:46.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:46.886">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:46.886" endtime="20171026 13:22:46.886" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.887">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:22:46.887">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:22:46.887">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:22:46.887" endtime="20171026 13:22:46.887" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:46.887">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20171026 13:22:46.159" endtime="20171026 13:22:46.887" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:46.888">${host_state} = Off</msg>
<status starttime="20171026 13:22:46.158" endtime="20171026 13:22:46.888" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:22:46.888" endtime="20171026 13:22:46.888" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:45.087" endtime="20171026 13:22:46.888" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:45.086" endtime="20171026 13:22:46.889" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:45.086" endtime="20171026 13:22:46.889" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:46.889">${status} = True</msg>
<status starttime="20171026 13:22:45.085" endtime="20171026 13:22:46.889" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status starttime="20171026 13:22:46.889" endtime="20171026 13:22:46.889" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:44.401" endtime="20171026 13:22:46.889" status="PASS"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.891">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20171026 13:22:46.890" endtime="20171026 13:22:46.891" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.892">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20171026 13:22:46.892" endtime="20171026 13:22:46.892" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:46.895">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:46.895" endtime="20171026 13:22:46.895" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.896">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:46.896" endtime="20171026 13:22:46.896" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.897">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:46.896" endtime="20171026 13:22:46.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:46.897">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:46.897" endtime="20171026 13:22:46.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:47.247">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:46.898" endtime="20171026 13:22:47.247" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:47.247">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:47.247">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:46.898" endtime="20171026 13:22:47.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:47.248">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:47.248" endtime="20171026 13:22:47.248" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:47.249">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:47.249" endtime="20171026 13:22:47.249" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.894" endtime="20171026 13:22:47.249" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.894" endtime="20171026 13:22:47.249" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.893" endtime="20171026 13:22:47.249" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:47.250">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20171026 13:22:47.250" endtime="20171026 13:22:47.250" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:47.251">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:47.250" endtime="20171026 13:22:47.251" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20171026 13:22:47.251" endtime="20171026 13:22:47.251" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:47.253">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status starttime="20171026 13:22:47.252" endtime="20171026 13:22:47.253" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:47.254">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20171026 13:22:47.254" endtime="20171026 13:22:47.254" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:47.253" endtime="20171026 13:22:47.254" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:47.251" endtime="20171026 13:22:47.254" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:47.688">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171026 13:22:47.688">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:47.255" endtime="20171026 13:22:47.688" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:47.689">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:22:47.689" endtime="20171026 13:22:47.689" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:47.690">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:22:47.690" endtime="20171026 13:22:47.690" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:47.689" endtime="20171026 13:22:47.690" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:47.688" endtime="20171026 13:22:47.690" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:22:47.691">Delete All Sessions</msg>
<status starttime="20171026 13:22:47.691" endtime="20171026 13:22:47.691" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:47.691">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:46.892" endtime="20171026 13:22:47.691" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:47.692">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:47.691" endtime="20171026 13:22:47.692" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:47.693">Returning from the enclosing user keyword.</msg>
<status starttime="20171026 13:22:47.692" endtime="20171026 13:22:47.693" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.891" endtime="20171026 13:22:47.693" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20171026 13:22:47.693" endtime="20171026 13:22:47.693" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:47.698">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:22:47.698" endtime="20171026 13:22:47.699" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:47.699">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:22:47.699" endtime="20171026 13:22:47.699" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:47.700">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:22:47.700" endtime="20171026 13:22:47.700" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:47.701">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:22:47.700" endtime="20171026 13:22:47.701" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:49.083">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:22:47.701" endtime="20171026 13:22:49.083" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:22:49.083">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:22:49.083">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:47.701" endtime="20171026 13:22:49.083" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:49.084">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:49.083" endtime="20171026 13:22:49.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:49.085">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:22:49.084" endtime="20171026 13:22:49.085" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:47.697" endtime="20171026 13:22:49.085" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:47.697" endtime="20171026 13:22:49.085" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:47.696" endtime="20171026 13:22:49.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:49.086">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:22:49.085" endtime="20171026 13:22:49.086" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:22:49.088">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:22:49.087" endtime="20171026 13:22:49.088" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:22:49.089">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:22:49.089" endtime="20171026 13:22:49.089" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:49.088" endtime="20171026 13:22:49.089" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:49.087" endtime="20171026 13:22:49.089" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:49.086" endtime="20171026 13:22:49.089" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="WARN" timestamp="20171026 13:22:59.093">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="INFO" timestamp="20171026 13:23:03.851">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:23:03.851">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:49.090" endtime="20171026 13:23:03.851" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:03.853">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:03.853" endtime="20171026 13:23:03.853" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:03.854">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:03.854" endtime="20171026 13:23:03.854" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:03.853" endtime="20171026 13:23:03.854" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:03.852" endtime="20171026 13:23:03.854" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:03.851" endtime="20171026 13:23:03.854" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:23:03.855">Delete All Sessions</msg>
<status starttime="20171026 13:23:03.855" endtime="20171026 13:23:03.855" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:03.855">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:22:47.696" endtime="20171026 13:23:03.855" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:03.856">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:03.855" endtime="20171026 13:23:03.856" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:03.856">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:23:03.857">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:23:03.857">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:23:03.856" endtime="20171026 13:23:03.857" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:03.857">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171026 13:22:47.695" endtime="20171026 13:23:03.857" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:03.857">${power_state} = Off</msg>
<status starttime="20171026 13:22:47.695" endtime="20171026 13:23:03.857" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:23:03.858">On != Off</msg>
<status starttime="20171026 13:23:03.858" endtime="20171026 13:23:03.858" status="FAIL"></status>
</kw>
<status starttime="20171026 13:22:47.694" endtime="20171026 13:23:03.858" status="FAIL"></status>
</kw>
<status starttime="20171026 13:22:47.694" endtime="20171026 13:23:03.859" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:13.864">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:23:13.864" endtime="20171026 13:23:13.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:13.865">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:23:13.865" endtime="20171026 13:23:13.865" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:13.866">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:23:13.866" endtime="20171026 13:23:13.866" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:13.867">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:23:13.866" endtime="20171026 13:23:13.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:14.174">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:23:13.867" endtime="20171026 13:23:14.174" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:14.174">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:23:14.174">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:13.867" endtime="20171026 13:23:14.174" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:14.175">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:14.175" endtime="20171026 13:23:14.175" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:14.176">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:14.176" endtime="20171026 13:23:14.176" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:13.863" endtime="20171026 13:23:14.176" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:13.863" endtime="20171026 13:23:14.176" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:13.862" endtime="20171026 13:23:14.176" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:14.177">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:23:14.177" endtime="20171026 13:23:14.177" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:14.180">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:14.179" endtime="20171026 13:23:14.180" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:14.181">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:14.180" endtime="20171026 13:23:14.181" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:14.180" endtime="20171026 13:23:14.181" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:14.178" endtime="20171026 13:23:14.181" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:14.178" endtime="20171026 13:23:14.181" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:14.757">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:23:14.757">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:14.182" endtime="20171026 13:23:14.757" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:14.760">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:14.759" endtime="20171026 13:23:14.760" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:14.761">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:14.761" endtime="20171026 13:23:14.761" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:14.760" endtime="20171026 13:23:14.761" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:14.759" endtime="20171026 13:23:14.761" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:14.758" endtime="20171026 13:23:14.762" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:23:14.762">Delete All Sessions</msg>
<status starttime="20171026 13:23:14.762" endtime="20171026 13:23:14.762" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:14.762">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:13.861" endtime="20171026 13:23:14.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:14.763">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:14.763" endtime="20171026 13:23:14.763" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:14.763">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:23:14.764">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:23:14.764">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:23:14.763" endtime="20171026 13:23:14.764" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:14.764">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:23:13.861" endtime="20171026 13:23:14.764" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:14.764">${power_state} = On</msg>
<status starttime="20171026 13:23:13.860" endtime="20171026 13:23:14.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:23:14.765" endtime="20171026 13:23:14.765" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:13.860" endtime="20171026 13:23:14.765" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:14.769">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:23:14.768" endtime="20171026 13:23:14.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:14.770">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:23:14.769" endtime="20171026 13:23:14.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:14.770">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:23:14.770" endtime="20171026 13:23:14.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:14.771">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:23:14.771" endtime="20171026 13:23:14.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:15.478">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:23:14.772" endtime="20171026 13:23:15.478" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:15.478">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:23:15.478">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:14.771" endtime="20171026 13:23:15.478" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:15.479">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:15.478" endtime="20171026 13:23:15.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:15.480">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:15.479" endtime="20171026 13:23:15.480" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:14.768" endtime="20171026 13:23:15.480" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:14.767" endtime="20171026 13:23:15.480" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:14.767" endtime="20171026 13:23:15.480" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:15.481">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:23:15.480" endtime="20171026 13:23:15.481" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:15.483">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:15.483" endtime="20171026 13:23:15.483" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:15.484">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:15.484" endtime="20171026 13:23:15.484" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:15.483" endtime="20171026 13:23:15.484" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:15.481" endtime="20171026 13:23:15.485" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:15.481" endtime="20171026 13:23:15.485" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:15.616">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:23:15.617">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:15.485" endtime="20171026 13:23:15.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:15.618">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:15.618" endtime="20171026 13:23:15.619" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:15.619">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:15.619" endtime="20171026 13:23:15.620" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:15.619" endtime="20171026 13:23:15.620" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:15.617" endtime="20171026 13:23:15.620" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:15.617" endtime="20171026 13:23:15.620" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:23:15.620">Delete All Sessions</msg>
<status starttime="20171026 13:23:15.620" endtime="20171026 13:23:15.621" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:15.621">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:14.766" endtime="20171026 13:23:15.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:15.621">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:15.621" endtime="20171026 13:23:15.622" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:15.622">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:23:15.622">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:23:15.622">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:23:15.622" endtime="20171026 13:23:15.622" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:15.623">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:23:14.766" endtime="20171026 13:23:15.623" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:15.623">${host_state} = Running</msg>
<status starttime="20171026 13:23:14.765" endtime="20171026 13:23:15.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:23:15.623" endtime="20171026 13:23:15.623" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:15.628">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:23:15.627" endtime="20171026 13:23:15.628" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:15.628">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:23:15.628" endtime="20171026 13:23:15.629" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:15.629">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:23:15.629" endtime="20171026 13:23:15.630" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:15.630">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:23:15.630" endtime="20171026 13:23:15.630" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:15.998">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:23:15.631" endtime="20171026 13:23:15.998" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:15.998">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:23:15.998">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:15.630" endtime="20171026 13:23:15.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:15.999">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:15.998" endtime="20171026 13:23:15.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:15.999">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:15.999" endtime="20171026 13:23:16.000" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:15.627" endtime="20171026 13:23:16.000" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:15.626" endtime="20171026 13:23:16.000" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:15.626" endtime="20171026 13:23:16.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:16.001">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:23:16.000" endtime="20171026 13:23:16.001" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:16.003">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:23:16.002" endtime="20171026 13:23:16.003" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:16.004">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:23:16.004" endtime="20171026 13:23:16.004" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:16.003" endtime="20171026 13:23:16.004" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:16.001" endtime="20171026 13:23:16.004" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:16.001" endtime="20171026 13:23:16.004" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:16.152">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:23:16.153">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:16.005" endtime="20171026 13:23:16.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:16.154">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:16.154" endtime="20171026 13:23:16.154" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:16.155">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:16.155" endtime="20171026 13:23:16.155" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:16.155" endtime="20171026 13:23:16.156" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:16.153" endtime="20171026 13:23:16.156" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:16.153" endtime="20171026 13:23:16.156" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:23:16.156">Delete All Sessions</msg>
<status starttime="20171026 13:23:16.156" endtime="20171026 13:23:16.156" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:16.156">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:15.625" endtime="20171026 13:23:16.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:16.157">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:16.157" endtime="20171026 13:23:16.157" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:16.158">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:23:16.158">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:23:16.158">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:23:16.157" endtime="20171026 13:23:16.158" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:16.158">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20171026 13:23:15.624" endtime="20171026 13:23:16.158" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:16.158">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20171026 13:23:15.624" endtime="20171026 13:23:16.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:16.159">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:23:16.159">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20171026 13:23:16.159" endtime="20171026 13:23:16.159" status="FAIL"></status>
</kw>
<status starttime="20171026 13:23:15.624" endtime="20171026 13:23:16.159" status="FAIL"></status>
</kw>
<status starttime="20171026 13:23:13.859" endtime="20171026 13:23:16.160" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:26.166">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:23:26.165" endtime="20171026 13:23:26.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:26.167">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:23:26.166" endtime="20171026 13:23:26.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:26.167">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:23:26.167" endtime="20171026 13:23:26.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:26.168">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:23:26.168" endtime="20171026 13:23:26.168" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:26.618">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:23:26.169" endtime="20171026 13:23:26.618" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:26.619">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:23:26.619">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:26.168" endtime="20171026 13:23:26.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:26.619">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:26.619" endtime="20171026 13:23:26.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:26.620">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:26.620" endtime="20171026 13:23:26.620" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:26.165" endtime="20171026 13:23:26.620" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:26.164" endtime="20171026 13:23:26.620" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:26.164" endtime="20171026 13:23:26.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:26.621">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:23:26.621" endtime="20171026 13:23:26.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:26.623">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:26.623" endtime="20171026 13:23:26.623" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:26.624">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:26.624" endtime="20171026 13:23:26.624" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:26.624" endtime="20171026 13:23:26.625" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:26.622" endtime="20171026 13:23:26.625" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:26.622" endtime="20171026 13:23:26.625" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:26.759">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:23:26.759">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:26.625" endtime="20171026 13:23:26.759" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:26.761">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:26.760" endtime="20171026 13:23:26.761" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:26.762">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:26.762" endtime="20171026 13:23:26.762" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:26.761" endtime="20171026 13:23:26.762" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:26.760" endtime="20171026 13:23:26.762" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:26.759" endtime="20171026 13:23:26.762" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:23:26.763">Delete All Sessions</msg>
<status starttime="20171026 13:23:26.763" endtime="20171026 13:23:26.763" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:26.763">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:26.162" endtime="20171026 13:23:26.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:26.764">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:26.763" endtime="20171026 13:23:26.764" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:26.764">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:23:26.765">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:23:26.765">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:23:26.764" endtime="20171026 13:23:26.765" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:26.765">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:23:26.162" endtime="20171026 13:23:26.765" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:26.765">${power_state} = On</msg>
<status starttime="20171026 13:23:26.161" endtime="20171026 13:23:26.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:23:26.766" endtime="20171026 13:23:26.766" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:26.161" endtime="20171026 13:23:26.766" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:26.770">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:23:26.769" endtime="20171026 13:23:26.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:26.771">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:23:26.770" endtime="20171026 13:23:26.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:26.771">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:23:26.771" endtime="20171026 13:23:26.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:26.772">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:23:26.772" endtime="20171026 13:23:26.772" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:27.228">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:23:26.773" endtime="20171026 13:23:27.228" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:27.228">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:23:27.228">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:26.772" endtime="20171026 13:23:27.228" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:27.229">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:27.229" endtime="20171026 13:23:27.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:27.230">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:27.229" endtime="20171026 13:23:27.230" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:26.769" endtime="20171026 13:23:27.230" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:26.768" endtime="20171026 13:23:27.230" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:26.768" endtime="20171026 13:23:27.230" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:27.231">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:23:27.230" endtime="20171026 13:23:27.231" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:27.233">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:27.232" endtime="20171026 13:23:27.233" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:27.234">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:27.234" endtime="20171026 13:23:27.234" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:27.233" endtime="20171026 13:23:27.234" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:27.232" endtime="20171026 13:23:27.234" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:27.231" endtime="20171026 13:23:27.234" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:27.442">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:23:27.442">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:27.235" endtime="20171026 13:23:27.442" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:27.444">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:27.444" endtime="20171026 13:23:27.444" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:27.445">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:27.445" endtime="20171026 13:23:27.445" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:27.444" endtime="20171026 13:23:27.445" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:27.443" endtime="20171026 13:23:27.446" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:27.443" endtime="20171026 13:23:27.446" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:23:27.446">Delete All Sessions</msg>
<status starttime="20171026 13:23:27.446" endtime="20171026 13:23:27.446" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:27.446">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:26.767" endtime="20171026 13:23:27.446" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:27.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:27.447" endtime="20171026 13:23:27.447" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:27.448">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:23:27.448">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:23:27.448">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:23:27.447" endtime="20171026 13:23:27.448" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:27.448">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:23:26.766" endtime="20171026 13:23:27.448" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:27.449">${host_state} = Running</msg>
<status starttime="20171026 13:23:26.766" endtime="20171026 13:23:27.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:23:27.449" endtime="20171026 13:23:27.449" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:27.454">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:23:27.453" endtime="20171026 13:23:27.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:27.454">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:23:27.454" endtime="20171026 13:23:27.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:27.455">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:23:27.455" endtime="20171026 13:23:27.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:27.456">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:23:27.455" endtime="20171026 13:23:27.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:27.973">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:23:27.457" endtime="20171026 13:23:27.974" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:27.974">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:23:27.974">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:27.456" endtime="20171026 13:23:27.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:27.975">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:27.974" endtime="20171026 13:23:27.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:27.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:27.975" endtime="20171026 13:23:27.975" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:27.452" endtime="20171026 13:23:27.976" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:27.452" endtime="20171026 13:23:27.976" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:27.451" endtime="20171026 13:23:27.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:27.976">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:23:27.976" endtime="20171026 13:23:27.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:27.979">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:23:27.978" endtime="20171026 13:23:27.979" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:27.980">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:23:27.980" endtime="20171026 13:23:27.980" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:27.979" endtime="20171026 13:23:27.980" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:27.977" endtime="20171026 13:23:27.980" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:27.977" endtime="20171026 13:23:27.980" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:28.180">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:23:28.180">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:27.981" endtime="20171026 13:23:28.180" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:28.182">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:28.181" endtime="20171026 13:23:28.182" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:28.185">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:28.182" endtime="20171026 13:23:28.185" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:28.182" endtime="20171026 13:23:28.186" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:28.181" endtime="20171026 13:23:28.186" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:28.180" endtime="20171026 13:23:28.186" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:23:28.186">Delete All Sessions</msg>
<status starttime="20171026 13:23:28.186" endtime="20171026 13:23:28.186" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:28.187">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:27.451" endtime="20171026 13:23:28.187" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:28.187">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:28.187" endtime="20171026 13:23:28.187" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:28.188">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:23:28.188">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:23:28.188">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:23:28.188" endtime="20171026 13:23:28.188" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:28.188">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:23:27.450" endtime="20171026 13:23:28.188" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:28.189">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:23:27.450" endtime="20171026 13:23:28.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:28.189">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:23:28.189">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:23:28.189" endtime="20171026 13:23:28.189" status="FAIL"></status>
</kw>
<status starttime="20171026 13:23:27.449" endtime="20171026 13:23:28.190" status="FAIL"></status>
</kw>
<status starttime="20171026 13:23:26.160" endtime="20171026 13:23:28.190" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:38.195">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:23:38.195" endtime="20171026 13:23:38.196" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:38.196">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:23:38.196" endtime="20171026 13:23:38.196" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:38.197">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:23:38.197" endtime="20171026 13:23:38.197" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:38.198">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:23:38.197" endtime="20171026 13:23:38.198" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:38.610">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:23:38.199" endtime="20171026 13:23:38.610" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:38.610">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:23:38.610">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:38.198" endtime="20171026 13:23:38.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:38.611">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:38.611" endtime="20171026 13:23:38.611" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:38.612">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:38.611" endtime="20171026 13:23:38.612" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:38.194" endtime="20171026 13:23:38.612" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:38.194" endtime="20171026 13:23:38.612" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:38.193" endtime="20171026 13:23:38.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:38.613">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:23:38.612" endtime="20171026 13:23:38.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:38.616">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:38.615" endtime="20171026 13:23:38.616" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:38.618">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:38.617" endtime="20171026 13:23:38.618" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:38.616" endtime="20171026 13:23:38.618" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:38.614" endtime="20171026 13:23:38.618" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:38.613" endtime="20171026 13:23:38.618" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:38.715">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:23:38.715">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:38.618" endtime="20171026 13:23:38.715" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:38.717">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:38.717" endtime="20171026 13:23:38.717" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:38.718">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:38.718" endtime="20171026 13:23:38.719" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:38.717" endtime="20171026 13:23:38.719" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:38.716" endtime="20171026 13:23:38.719" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:38.716" endtime="20171026 13:23:38.719" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:23:38.719">Delete All Sessions</msg>
<status starttime="20171026 13:23:38.719" endtime="20171026 13:23:38.719" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:38.720">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:38.193" endtime="20171026 13:23:38.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:38.720">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:38.720" endtime="20171026 13:23:38.720" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:38.721">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:23:38.721">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:23:38.721">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:23:38.721" endtime="20171026 13:23:38.721" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:38.721">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:23:38.192" endtime="20171026 13:23:38.722" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:38.722">${power_state} = On</msg>
<status starttime="20171026 13:23:38.191" endtime="20171026 13:23:38.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:23:38.722" endtime="20171026 13:23:38.723" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:38.191" endtime="20171026 13:23:38.723" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:38.728">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:23:38.728" endtime="20171026 13:23:38.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:38.730">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:23:38.729" endtime="20171026 13:23:38.730" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:38.731">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:23:38.730" endtime="20171026 13:23:38.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:38.732">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:23:38.731" endtime="20171026 13:23:38.732" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:39.049">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:23:38.733" endtime="20171026 13:23:39.049" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:39.050">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:23:39.050">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:38.732" endtime="20171026 13:23:39.050" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:39.050">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:39.050" endtime="20171026 13:23:39.050" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:39.051">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:39.051" endtime="20171026 13:23:39.051" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:38.727" endtime="20171026 13:23:39.051" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:38.726" endtime="20171026 13:23:39.051" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:38.725" endtime="20171026 13:23:39.052" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:39.052">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:23:39.052" endtime="20171026 13:23:39.052" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:39.054">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:39.054" endtime="20171026 13:23:39.055" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:39.055">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:39.055" endtime="20171026 13:23:39.056" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.055" endtime="20171026 13:23:39.056" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.053" endtime="20171026 13:23:39.056" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.053" endtime="20171026 13:23:39.056" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:39.189">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:23:39.189">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:39.056" endtime="20171026 13:23:39.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:39.191">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:39.190" endtime="20171026 13:23:39.191" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:39.192">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:39.191" endtime="20171026 13:23:39.192" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.191" endtime="20171026 13:23:39.192" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.190" endtime="20171026 13:23:39.192" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.189" endtime="20171026 13:23:39.192" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:23:39.193">Delete All Sessions</msg>
<status starttime="20171026 13:23:39.192" endtime="20171026 13:23:39.193" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:39.193">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:38.724" endtime="20171026 13:23:39.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:39.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:39.193" endtime="20171026 13:23:39.194" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:39.194">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:23:39.194">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:23:39.194">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:23:39.194" endtime="20171026 13:23:39.194" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:39.195">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:23:38.724" endtime="20171026 13:23:39.195" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:39.195">${host_state} = Running</msg>
<status starttime="20171026 13:23:38.723" endtime="20171026 13:23:39.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:23:39.195" endtime="20171026 13:23:39.195" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:39.200">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:23:39.200" endtime="20171026 13:23:39.200" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:39.201">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:23:39.201" endtime="20171026 13:23:39.201" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:39.202">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:23:39.201" endtime="20171026 13:23:39.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:39.202">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:23:39.202" endtime="20171026 13:23:39.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:39.578">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:23:39.203" endtime="20171026 13:23:39.578" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:39.578">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:23:39.578">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:39.203" endtime="20171026 13:23:39.578" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:39.579">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:39.578" endtime="20171026 13:23:39.579" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:39.580">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:39.579" endtime="20171026 13:23:39.580" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.199" endtime="20171026 13:23:39.580" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.199" endtime="20171026 13:23:39.580" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.198" endtime="20171026 13:23:39.580" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:39.581">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:23:39.580" endtime="20171026 13:23:39.581" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:39.583">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:23:39.582" endtime="20171026 13:23:39.583" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:39.584">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:23:39.583" endtime="20171026 13:23:39.584" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.583" endtime="20171026 13:23:39.584" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.581" endtime="20171026 13:23:39.584" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.581" endtime="20171026 13:23:39.584" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:39.762">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:23:39.762">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:39.584" endtime="20171026 13:23:39.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:39.764">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:39.763" endtime="20171026 13:23:39.764" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:39.765">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:39.764" endtime="20171026 13:23:39.765" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.764" endtime="20171026 13:23:39.765" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.763" endtime="20171026 13:23:39.765" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:39.762" endtime="20171026 13:23:39.765" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:23:39.766">Delete All Sessions</msg>
<status starttime="20171026 13:23:39.765" endtime="20171026 13:23:39.766" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:39.766">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:39.197" endtime="20171026 13:23:39.766" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:39.766">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:39.766" endtime="20171026 13:23:39.767" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:39.767">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:23:39.767">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:23:39.767">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:23:39.767" endtime="20171026 13:23:39.767" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:39.768">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:23:39.196" endtime="20171026 13:23:39.768" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:39.768">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:23:39.196" endtime="20171026 13:23:39.768" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:39.768">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:23:39.769">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:23:39.768" endtime="20171026 13:23:39.769" status="FAIL"></status>
</kw>
<status starttime="20171026 13:23:39.196" endtime="20171026 13:23:39.769" status="FAIL"></status>
</kw>
<status starttime="20171026 13:23:38.190" endtime="20171026 13:23:39.769" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:49.775">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:23:49.774" endtime="20171026 13:23:49.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:49.776">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:23:49.775" endtime="20171026 13:23:49.776" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:49.776">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:23:49.776" endtime="20171026 13:23:49.776" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:49.777">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:23:49.777" endtime="20171026 13:23:49.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:50.152">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:23:49.778" endtime="20171026 13:23:50.152" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:50.152">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:23:50.152">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:49.778" endtime="20171026 13:23:50.152" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:50.153">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:50.152" endtime="20171026 13:23:50.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:50.154">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:50.153" endtime="20171026 13:23:50.154" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:49.774" endtime="20171026 13:23:50.154" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:49.773" endtime="20171026 13:23:50.154" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:49.773" endtime="20171026 13:23:50.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.155">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:23:50.154" endtime="20171026 13:23:50.155" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.157">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:50.156" endtime="20171026 13:23:50.157" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:50.158">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:50.158" endtime="20171026 13:23:50.158" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.157" endtime="20171026 13:23:50.158" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.155" endtime="20171026 13:23:50.158" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.155" endtime="20171026 13:23:50.158" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.254">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:23:50.254">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:50.158" endtime="20171026 13:23:50.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.256">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:50.255" endtime="20171026 13:23:50.256" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:50.257">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:50.257" endtime="20171026 13:23:50.257" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.256" endtime="20171026 13:23:50.257" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.255" endtime="20171026 13:23:50.257" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.255" endtime="20171026 13:23:50.257" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:23:50.258">Delete All Sessions</msg>
<status starttime="20171026 13:23:50.258" endtime="20171026 13:23:50.258" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:50.258">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:49.772" endtime="20171026 13:23:50.258" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:50.259">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:50.258" endtime="20171026 13:23:50.259" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.259">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:23:50.259">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:23:50.259">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:23:50.259" endtime="20171026 13:23:50.260" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:50.260">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:23:49.771" endtime="20171026 13:23:50.260" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:50.260">${power_state} = On</msg>
<status starttime="20171026 13:23:49.771" endtime="20171026 13:23:50.260" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:23:50.260" endtime="20171026 13:23:50.261" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:49.770" endtime="20171026 13:23:50.261" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:50.265">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:23:50.264" endtime="20171026 13:23:50.265" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.266">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:23:50.266" endtime="20171026 13:23:50.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.267">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:23:50.266" endtime="20171026 13:23:50.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.267">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:23:50.267" endtime="20171026 13:23:50.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:50.587">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:23:50.268" endtime="20171026 13:23:50.587" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:50.587">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:23:50.587">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:50.268" endtime="20171026 13:23:50.587" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:50.588">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:50.587" endtime="20171026 13:23:50.588" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:50.588">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:50.588" endtime="20171026 13:23:50.588" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.264" endtime="20171026 13:23:50.589" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.263" endtime="20171026 13:23:50.589" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.263" endtime="20171026 13:23:50.589" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.589">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:23:50.589" endtime="20171026 13:23:50.589" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.592">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:50.591" endtime="20171026 13:23:50.592" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:50.592">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:23:50.592" endtime="20171026 13:23:50.593" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.592" endtime="20171026 13:23:50.593" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.590" endtime="20171026 13:23:50.593" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.590" endtime="20171026 13:23:50.593" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.746">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:23:50.746">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:50.593" endtime="20171026 13:23:50.746" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.748">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:50.748" endtime="20171026 13:23:50.748" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:50.749">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:50.749" endtime="20171026 13:23:50.749" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.748" endtime="20171026 13:23:50.749" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.747" endtime="20171026 13:23:50.750" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.747" endtime="20171026 13:23:50.750" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:23:50.750">Delete All Sessions</msg>
<status starttime="20171026 13:23:50.750" endtime="20171026 13:23:50.750" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:50.751">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:50.262" endtime="20171026 13:23:50.751" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:50.752">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:50.751" endtime="20171026 13:23:50.752" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.753">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:23:50.753">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:23:50.753">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:23:50.752" endtime="20171026 13:23:50.753" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:50.753">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:23:50.261" endtime="20171026 13:23:50.753" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:50.754">${host_state} = Running</msg>
<status starttime="20171026 13:23:50.261" endtime="20171026 13:23:50.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:23:50.754" endtime="20171026 13:23:50.755" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:50.761">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:23:50.761" endtime="20171026 13:23:50.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.762">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:23:50.762" endtime="20171026 13:23:50.763" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.763">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:23:50.763" endtime="20171026 13:23:50.764" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:50.764">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:23:50.764" endtime="20171026 13:23:50.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:51.125">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:23:50.766" endtime="20171026 13:23:51.125" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:51.125">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:23:51.125">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:50.765" endtime="20171026 13:23:51.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:51.126">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:51.125" endtime="20171026 13:23:51.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:51.126">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:51.126" endtime="20171026 13:23:51.127" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.760" endtime="20171026 13:23:51.127" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.759" endtime="20171026 13:23:51.127" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:50.758" endtime="20171026 13:23:51.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:51.127">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:23:51.127" endtime="20171026 13:23:51.127" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:51.130">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:23:51.129" endtime="20171026 13:23:51.130" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:51.130">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:23:51.130" endtime="20171026 13:23:51.131" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:51.130" endtime="20171026 13:23:51.131" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:51.128" endtime="20171026 13:23:51.131" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:51.128" endtime="20171026 13:23:51.131" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:51.253">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:23:51.253">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:51.131" endtime="20171026 13:23:51.253" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:51.255">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:51.254" endtime="20171026 13:23:51.255" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:51.256">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:23:51.255" endtime="20171026 13:23:51.256" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:51.255" endtime="20171026 13:23:51.256" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:51.254" endtime="20171026 13:23:51.256" status="PASS"></status>
</kw>
<status starttime="20171026 13:23:51.253" endtime="20171026 13:23:51.256" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:23:51.256">Delete All Sessions</msg>
<status starttime="20171026 13:23:51.256" endtime="20171026 13:23:51.256" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:51.257">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:23:50.757" endtime="20171026 13:23:51.257" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:51.257">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:23:51.257" endtime="20171026 13:23:51.257" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:23:51.258">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:23:51.258">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:23:51.258">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:23:51.258" endtime="20171026 13:23:51.258" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:51.258">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:23:50.756" endtime="20171026 13:23:51.258" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:23:51.259">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:23:50.755" endtime="20171026 13:23:51.259" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:23:51.259">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:23:51.260">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:23:51.259" endtime="20171026 13:23:51.260" status="FAIL"></status>
</kw>
<status starttime="20171026 13:23:50.755" endtime="20171026 13:23:51.260" status="FAIL"></status>
</kw>
<status starttime="20171026 13:23:49.770" endtime="20171026 13:23:51.260" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:01.265">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:24:01.265" endtime="20171026 13:24:01.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:01.266">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:24:01.266" endtime="20171026 13:24:01.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:01.267">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:24:01.267" endtime="20171026 13:24:01.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:01.268">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:24:01.267" endtime="20171026 13:24:01.268" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:01.702">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:24:01.268" endtime="20171026 13:24:01.702" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:01.702">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:24:01.703">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:01.268" endtime="20171026 13:24:01.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:01.703">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:01.703" endtime="20171026 13:24:01.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:01.704">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:01.704" endtime="20171026 13:24:01.704" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:01.264" endtime="20171026 13:24:01.704" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:01.264" endtime="20171026 13:24:01.704" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:01.263" endtime="20171026 13:24:01.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:01.705">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:24:01.705" endtime="20171026 13:24:01.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:01.707">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:01.707" endtime="20171026 13:24:01.707" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:01.708">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:01.708" endtime="20171026 13:24:01.708" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:01.707" endtime="20171026 13:24:01.709" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:01.706" endtime="20171026 13:24:01.709" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:01.705" endtime="20171026 13:24:01.709" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:01.823">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:24:01.823">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:01.709" endtime="20171026 13:24:01.823" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:01.825">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:01.824" endtime="20171026 13:24:01.825" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:01.826">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:01.825" endtime="20171026 13:24:01.826" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:01.825" endtime="20171026 13:24:01.826" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:01.824" endtime="20171026 13:24:01.826" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:01.823" endtime="20171026 13:24:01.826" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:24:01.826">Delete All Sessions</msg>
<status starttime="20171026 13:24:01.826" endtime="20171026 13:24:01.827" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:01.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:01.263" endtime="20171026 13:24:01.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:01.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:01.827" endtime="20171026 13:24:01.828" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:01.828">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:24:01.828">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:24:01.828">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:24:01.828" endtime="20171026 13:24:01.828" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:01.829">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:24:01.262" endtime="20171026 13:24:01.829" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:01.829">${power_state} = On</msg>
<status starttime="20171026 13:24:01.262" endtime="20171026 13:24:01.829" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:24:01.829" endtime="20171026 13:24:01.830" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:01.261" endtime="20171026 13:24:01.830" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:01.833">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:24:01.833" endtime="20171026 13:24:01.834" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:01.835">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:24:01.834" endtime="20171026 13:24:01.835" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:01.835">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:24:01.835" endtime="20171026 13:24:01.836" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:01.836">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:24:01.836" endtime="20171026 13:24:01.836" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:02.153">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:24:01.837" endtime="20171026 13:24:02.153" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:02.153">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:24:02.153">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:01.837" endtime="20171026 13:24:02.153" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:02.154">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:02.154" endtime="20171026 13:24:02.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:02.155">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:02.154" endtime="20171026 13:24:02.155" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:01.832" endtime="20171026 13:24:02.155" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:01.832" endtime="20171026 13:24:02.155" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:01.831" endtime="20171026 13:24:02.155" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:02.156">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:24:02.155" endtime="20171026 13:24:02.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:02.158">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:02.157" endtime="20171026 13:24:02.158" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:02.159">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:02.159" endtime="20171026 13:24:02.159" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.158" endtime="20171026 13:24:02.159" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.157" endtime="20171026 13:24:02.159" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.156" endtime="20171026 13:24:02.160" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:02.294">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:24:02.294">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:02.160" endtime="20171026 13:24:02.294" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:02.296">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:02.295" endtime="20171026 13:24:02.296" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:02.297">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:02.296" endtime="20171026 13:24:02.297" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.296" endtime="20171026 13:24:02.297" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.295" endtime="20171026 13:24:02.297" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.294" endtime="20171026 13:24:02.297" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:24:02.297">Delete All Sessions</msg>
<status starttime="20171026 13:24:02.297" endtime="20171026 13:24:02.298" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:02.298">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:01.831" endtime="20171026 13:24:02.298" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:02.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:02.298" endtime="20171026 13:24:02.299" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:02.299">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:24:02.299">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:24:02.299">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:24:02.299" endtime="20171026 13:24:02.299" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:02.300">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:24:01.830" endtime="20171026 13:24:02.300" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:02.300">${host_state} = Running</msg>
<status starttime="20171026 13:24:01.830" endtime="20171026 13:24:02.300" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:24:02.300" endtime="20171026 13:24:02.300" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:02.305">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:24:02.305" endtime="20171026 13:24:02.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:02.306">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:24:02.306" endtime="20171026 13:24:02.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:02.306">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:24:02.306" endtime="20171026 13:24:02.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:02.307">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:24:02.307" endtime="20171026 13:24:02.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:02.749">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:24:02.308" endtime="20171026 13:24:02.749" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:02.749">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:24:02.749">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:02.307" endtime="20171026 13:24:02.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:02.750">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:02.750" endtime="20171026 13:24:02.750" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:02.751">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:02.750" endtime="20171026 13:24:02.751" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.304" endtime="20171026 13:24:02.751" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.304" endtime="20171026 13:24:02.751" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.303" endtime="20171026 13:24:02.751" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:02.753">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:24:02.752" endtime="20171026 13:24:02.753" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:02.756">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:24:02.755" endtime="20171026 13:24:02.756" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:02.761">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:24:02.760" endtime="20171026 13:24:02.761" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.756" endtime="20171026 13:24:02.761" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.754" endtime="20171026 13:24:02.761" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.753" endtime="20171026 13:24:02.761" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:02.963">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:24:02.963">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:02.762" endtime="20171026 13:24:02.963" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:02.965">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:02.965" endtime="20171026 13:24:02.965" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:02.966">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:02.966" endtime="20171026 13:24:02.966" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.965" endtime="20171026 13:24:02.966" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.964" endtime="20171026 13:24:02.966" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:02.964" endtime="20171026 13:24:02.966" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:24:02.967">Delete All Sessions</msg>
<status starttime="20171026 13:24:02.967" endtime="20171026 13:24:02.967" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:02.967">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:02.302" endtime="20171026 13:24:02.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:02.968">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:02.967" endtime="20171026 13:24:02.968" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:02.968">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:24:02.969">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:24:02.969">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:24:02.968" endtime="20171026 13:24:02.969" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:02.969">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:24:02.301" endtime="20171026 13:24:02.969" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:02.969">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:24:02.301" endtime="20171026 13:24:02.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:02.970">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:24:02.970">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:24:02.969" endtime="20171026 13:24:02.970" status="FAIL"></status>
</kw>
<status starttime="20171026 13:24:02.301" endtime="20171026 13:24:02.970" status="FAIL"></status>
</kw>
<status starttime="20171026 13:24:01.261" endtime="20171026 13:24:02.970" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:12.976">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:24:12.976" endtime="20171026 13:24:12.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:12.977">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:24:12.977" endtime="20171026 13:24:12.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:12.978">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:24:12.977" endtime="20171026 13:24:12.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:12.978">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:24:12.978" endtime="20171026 13:24:12.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:13.325">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:24:12.979" endtime="20171026 13:24:13.325" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:13.325">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:24:13.325">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:12.979" endtime="20171026 13:24:13.325" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:13.326">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:13.326" endtime="20171026 13:24:13.326" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:13.327">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:13.326" endtime="20171026 13:24:13.327" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:12.975" endtime="20171026 13:24:13.327" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:12.974" endtime="20171026 13:24:13.327" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:12.974" endtime="20171026 13:24:13.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:13.328">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:24:13.327" endtime="20171026 13:24:13.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:13.330">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:13.329" endtime="20171026 13:24:13.330" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:13.331">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:13.331" endtime="20171026 13:24:13.331" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:13.330" endtime="20171026 13:24:13.331" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:13.329" endtime="20171026 13:24:13.331" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:13.328" endtime="20171026 13:24:13.331" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:13.436">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:24:13.436">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:13.332" endtime="20171026 13:24:13.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:13.438">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:13.438" endtime="20171026 13:24:13.438" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:13.439">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:13.439" endtime="20171026 13:24:13.439" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:13.438" endtime="20171026 13:24:13.439" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:13.437" endtime="20171026 13:24:13.439" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:13.437" endtime="20171026 13:24:13.439" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:24:13.440">Delete All Sessions</msg>
<status starttime="20171026 13:24:13.440" endtime="20171026 13:24:13.440" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:13.440">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:12.973" endtime="20171026 13:24:13.440" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:13.441">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:13.440" endtime="20171026 13:24:13.441" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:13.441">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:24:13.442">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:24:13.442">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:24:13.441" endtime="20171026 13:24:13.442" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:13.442">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:24:12.973" endtime="20171026 13:24:13.442" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:13.442">${power_state} = On</msg>
<status starttime="20171026 13:24:12.972" endtime="20171026 13:24:13.442" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:24:13.443" endtime="20171026 13:24:13.443" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:12.972" endtime="20171026 13:24:13.443" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:13.447">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:24:13.446" endtime="20171026 13:24:13.447" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:13.448">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:24:13.448" endtime="20171026 13:24:13.448" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:13.449">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:24:13.448" endtime="20171026 13:24:13.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:13.449">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:24:13.449" endtime="20171026 13:24:13.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:13.793">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:24:13.450" endtime="20171026 13:24:13.793" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:13.793">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:24:13.793">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:13.450" endtime="20171026 13:24:13.793" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:13.794">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:13.794" endtime="20171026 13:24:13.794" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:13.795">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:13.794" endtime="20171026 13:24:13.795" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:13.446" endtime="20171026 13:24:13.795" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:13.445" endtime="20171026 13:24:13.795" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:13.445" endtime="20171026 13:24:13.795" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:13.796">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:24:13.795" endtime="20171026 13:24:13.796" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:13.798">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:13.797" endtime="20171026 13:24:13.798" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:13.799">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:13.799" endtime="20171026 13:24:13.800" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:13.798" endtime="20171026 13:24:13.800" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:13.797" endtime="20171026 13:24:13.800" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:13.796" endtime="20171026 13:24:13.800" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.011">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:24:14.011">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:13.800" endtime="20171026 13:24:14.011" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.013">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:14.013" endtime="20171026 13:24:14.013" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.014">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:14.014" endtime="20171026 13:24:14.014" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.013" endtime="20171026 13:24:14.014" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.012" endtime="20171026 13:24:14.014" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.012" endtime="20171026 13:24:14.015" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:24:14.015">Delete All Sessions</msg>
<status starttime="20171026 13:24:14.015" endtime="20171026 13:24:14.015" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:14.015">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:13.444" endtime="20171026 13:24:14.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.016">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:14.016" endtime="20171026 13:24:14.016" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.016">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:24:14.017">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:24:14.017">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:24:14.016" endtime="20171026 13:24:14.017" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:14.017">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:24:13.444" endtime="20171026 13:24:14.017" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:14.017">${host_state} = Running</msg>
<status starttime="20171026 13:24:13.443" endtime="20171026 13:24:14.017" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:24:14.018" endtime="20171026 13:24:14.018" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.022">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:24:14.022" endtime="20171026 13:24:14.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.023">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:24:14.023" endtime="20171026 13:24:14.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.024">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:24:14.024" endtime="20171026 13:24:14.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.025">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:24:14.024" endtime="20171026 13:24:14.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.352">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:24:14.025" endtime="20171026 13:24:14.352" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:14.352">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:24:14.352">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:14.025" endtime="20171026 13:24:14.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.353">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:14.353" endtime="20171026 13:24:14.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:14.353" endtime="20171026 13:24:14.354" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.021" endtime="20171026 13:24:14.354" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.021" endtime="20171026 13:24:14.354" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.020" endtime="20171026 13:24:14.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.355">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:24:14.354" endtime="20171026 13:24:14.355" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.357">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:24:14.356" endtime="20171026 13:24:14.357" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.358">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:24:14.358" endtime="20171026 13:24:14.358" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.357" endtime="20171026 13:24:14.358" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.356" endtime="20171026 13:24:14.358" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.355" endtime="20171026 13:24:14.359" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.493">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:24:14.493">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:14.359" endtime="20171026 13:24:14.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.495">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:14.494" endtime="20171026 13:24:14.495" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.496">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:14.496" endtime="20171026 13:24:14.496" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.495" endtime="20171026 13:24:14.496" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.494" endtime="20171026 13:24:14.496" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.493" endtime="20171026 13:24:14.496" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:24:14.497">Delete All Sessions</msg>
<status starttime="20171026 13:24:14.496" endtime="20171026 13:24:14.497" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:14.497">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:14.020" endtime="20171026 13:24:14.497" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:14.497" endtime="20171026 13:24:14.498" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.498">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:24:14.498">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:24:14.498">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:24:14.498" endtime="20171026 13:24:14.498" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:14.499">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:24:14.019" endtime="20171026 13:24:14.499" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:14.499">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:24:14.018" endtime="20171026 13:24:14.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.499">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:14.499" endtime="20171026 13:24:14.500" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.505">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:24:14.504" endtime="20171026 13:24:14.505" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.506">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:24:14.506" endtime="20171026 13:24:14.506" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.507">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:24:14.506" endtime="20171026 13:24:14.507" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.508">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:24:14.507" endtime="20171026 13:24:14.508" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.844">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:24:14.509" endtime="20171026 13:24:14.844" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:14.844">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:24:14.844">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:14.508" endtime="20171026 13:24:14.844" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.845">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:14.845" endtime="20171026 13:24:14.845" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:14.845" endtime="20171026 13:24:14.846" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.503" endtime="20171026 13:24:14.846" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.503" endtime="20171026 13:24:14.846" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.502" endtime="20171026 13:24:14.846" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.847">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:24:14.846" endtime="20171026 13:24:14.847" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.849">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:14.848" endtime="20171026 13:24:14.849" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:14.850">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:14.850" endtime="20171026 13:24:14.850" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.849" endtime="20171026 13:24:14.850" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.848" endtime="20171026 13:24:14.850" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:14.847" endtime="20171026 13:24:14.850" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:14.999">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:24:14.999">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:14.851" endtime="20171026 13:24:14.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:15.001">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:15.001" endtime="20171026 13:24:15.001" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:15.002">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:15.002" endtime="20171026 13:24:15.002" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:15.002" endtime="20171026 13:24:15.003" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:15.000" endtime="20171026 13:24:15.003" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:15.000" endtime="20171026 13:24:15.003" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:24:15.003">Delete All Sessions</msg>
<status starttime="20171026 13:24:15.003" endtime="20171026 13:24:15.003" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:15.003">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:14.501" endtime="20171026 13:24:15.003" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:15.004">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:15.004" endtime="20171026 13:24:15.004" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:15.005">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:24:15.005">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:24:15.005">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:24:15.004" endtime="20171026 13:24:15.005" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:15.005">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:24:14.500" endtime="20171026 13:24:15.005" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:15.006">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:24:14.500" endtime="20171026 13:24:15.006" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:15.006">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:24:15.006">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:24:15.006" endtime="20171026 13:24:15.006" status="FAIL"></status>
</kw>
<status starttime="20171026 13:24:14.018" endtime="20171026 13:24:15.007" status="FAIL"></status>
</kw>
<status starttime="20171026 13:24:12.971" endtime="20171026 13:24:15.007" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:25.013">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:24:25.012" endtime="20171026 13:24:25.013" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:25.014">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:24:25.013" endtime="20171026 13:24:25.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:25.014">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:24:25.014" endtime="20171026 13:24:25.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:25.015">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:24:25.014" endtime="20171026 13:24:25.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:26.215">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:24:25.016" endtime="20171026 13:24:26.215" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:26.216">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:24:26.216">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:25.015" endtime="20171026 13:24:26.216" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:26.216">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:26.216" endtime="20171026 13:24:26.217" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:26.217">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:26.217" endtime="20171026 13:24:26.217" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:25.011" endtime="20171026 13:24:26.217" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:25.011" endtime="20171026 13:24:26.217" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:25.010" endtime="20171026 13:24:26.218" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:26.218">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:24:26.218" endtime="20171026 13:24:26.218" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:26.220">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:26.220" endtime="20171026 13:24:26.221" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:26.222">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:26.221" endtime="20171026 13:24:26.222" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:26.221" endtime="20171026 13:24:26.222" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:26.219" endtime="20171026 13:24:26.222" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:26.219" endtime="20171026 13:24:26.222" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:29.524">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:24:29.524">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:26.222" endtime="20171026 13:24:29.524" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:29.526">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:29.526" endtime="20171026 13:24:29.526" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:29.528">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:29.527" endtime="20171026 13:24:29.528" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:29.527" endtime="20171026 13:24:29.528" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:29.525" endtime="20171026 13:24:29.528" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:29.525" endtime="20171026 13:24:29.528" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:24:29.529">Delete All Sessions</msg>
<status starttime="20171026 13:24:29.528" endtime="20171026 13:24:29.529" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:29.529">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:25.009" endtime="20171026 13:24:29.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:29.529">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:29.529" endtime="20171026 13:24:29.530" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:29.530">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:24:29.530">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:24:29.530">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:24:29.530" endtime="20171026 13:24:29.530" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:29.531">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:24:25.009" endtime="20171026 13:24:29.531" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:29.531">${power_state} = On</msg>
<status starttime="20171026 13:24:25.008" endtime="20171026 13:24:29.531" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:24:29.531" endtime="20171026 13:24:29.532" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:25.008" endtime="20171026 13:24:29.532" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:29.537">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:24:29.537" endtime="20171026 13:24:29.538" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:29.539">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:24:29.538" endtime="20171026 13:24:29.539" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:29.540">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:24:29.539" endtime="20171026 13:24:29.540" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:29.540">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:24:29.540" endtime="20171026 13:24:29.541" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:30.372">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:24:29.541" endtime="20171026 13:24:30.372" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:30.373">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:24:30.373">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:29.541" endtime="20171026 13:24:30.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:30.373">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:30.373" endtime="20171026 13:24:30.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:30.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:30.374" endtime="20171026 13:24:30.374" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:29.536" endtime="20171026 13:24:30.374" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:29.535" endtime="20171026 13:24:30.374" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:29.535" endtime="20171026 13:24:30.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:30.375">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:24:30.375" endtime="20171026 13:24:30.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:30.378">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:30.377" endtime="20171026 13:24:30.378" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:30.379">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:30.379" endtime="20171026 13:24:30.379" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:30.378" endtime="20171026 13:24:30.379" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:30.376" endtime="20171026 13:24:30.379" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:30.376" endtime="20171026 13:24:30.379" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:33.848">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:24:33.848">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:30.380" endtime="20171026 13:24:33.848" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:33.850">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:33.849" endtime="20171026 13:24:33.850" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:33.851">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:33.851" endtime="20171026 13:24:33.851" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:33.850" endtime="20171026 13:24:33.851" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:33.849" endtime="20171026 13:24:33.851" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:33.848" endtime="20171026 13:24:33.851" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:24:33.852">Delete All Sessions</msg>
<status starttime="20171026 13:24:33.851" endtime="20171026 13:24:33.852" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:33.852">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:29.534" endtime="20171026 13:24:33.852" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:33.853">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:33.852" endtime="20171026 13:24:33.853" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:33.853">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:24:33.853">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:24:33.854">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:24:33.853" endtime="20171026 13:24:33.854" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:33.854">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:24:29.533" endtime="20171026 13:24:33.854" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:33.854">${host_state} = Running</msg>
<status starttime="20171026 13:24:29.532" endtime="20171026 13:24:33.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:24:33.854" endtime="20171026 13:24:33.855" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:33.859">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:24:33.858" endtime="20171026 13:24:33.859" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:33.860">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:24:33.859" endtime="20171026 13:24:33.860" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:33.860">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:24:33.860" endtime="20171026 13:24:33.860" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:33.861">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:24:33.861" endtime="20171026 13:24:33.861" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:34.176">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:24:33.862" endtime="20171026 13:24:34.176" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:34.176">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:24:34.176">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:33.861" endtime="20171026 13:24:34.176" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:34.177">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:34.177" endtime="20171026 13:24:34.177" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:34.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:34.178" endtime="20171026 13:24:34.178" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:33.858" endtime="20171026 13:24:34.178" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:33.857" endtime="20171026 13:24:34.178" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:33.857" endtime="20171026 13:24:34.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:34.179">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:24:34.179" endtime="20171026 13:24:34.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:34.181">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:24:34.180" endtime="20171026 13:24:34.181" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:34.182">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:24:34.182" endtime="20171026 13:24:34.182" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:34.181" endtime="20171026 13:24:34.182" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:34.180" endtime="20171026 13:24:34.183" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:34.179" endtime="20171026 13:24:34.183" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:35.439">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:24:35.440">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:34.183" endtime="20171026 13:24:35.440" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:35.442">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:35.441" endtime="20171026 13:24:35.442" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:35.443">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:35.443" endtime="20171026 13:24:35.443" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:35.442" endtime="20171026 13:24:35.443" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:35.441" endtime="20171026 13:24:35.443" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:35.440" endtime="20171026 13:24:35.443" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:24:35.444">Delete All Sessions</msg>
<status starttime="20171026 13:24:35.443" endtime="20171026 13:24:35.444" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:35.444">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:33.856" endtime="20171026 13:24:35.444" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:35.444">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:35.444" endtime="20171026 13:24:35.445" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:35.445">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:24:35.445">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:24:35.445">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:24:35.445" endtime="20171026 13:24:35.445" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:35.446">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:24:33.856" endtime="20171026 13:24:35.446" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:35.446">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:24:33.855" endtime="20171026 13:24:35.446" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:35.446">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:35.446" endtime="20171026 13:24:35.446" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:35.452">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:24:35.452" endtime="20171026 13:24:35.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:35.453">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:24:35.453" endtime="20171026 13:24:35.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:35.454">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:24:35.454" endtime="20171026 13:24:35.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:35.455">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:24:35.454" endtime="20171026 13:24:35.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:35.813">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:24:35.455" endtime="20171026 13:24:35.813" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:35.813">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:24:35.813">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:35.455" endtime="20171026 13:24:35.813" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:35.814">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:35.814" endtime="20171026 13:24:35.814" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:35.815">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:35.814" endtime="20171026 13:24:35.815" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:35.450" endtime="20171026 13:24:35.815" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:35.450" endtime="20171026 13:24:35.815" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:35.449" endtime="20171026 13:24:35.815" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:35.816">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:24:35.815" endtime="20171026 13:24:35.816" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:35.818">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:35.817" endtime="20171026 13:24:35.818" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:35.819">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:35.818" endtime="20171026 13:24:35.819" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:35.818" endtime="20171026 13:24:35.819" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:35.816" endtime="20171026 13:24:35.819" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:35.816" endtime="20171026 13:24:35.819" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:36.119">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:24:36.119">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:35.819" endtime="20171026 13:24:36.119" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:36.121">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:36.121" endtime="20171026 13:24:36.121" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:36.123">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:36.122" endtime="20171026 13:24:36.123" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:36.121" endtime="20171026 13:24:36.123" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:36.120" endtime="20171026 13:24:36.123" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:36.120" endtime="20171026 13:24:36.123" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:24:36.123">Delete All Sessions</msg>
<status starttime="20171026 13:24:36.123" endtime="20171026 13:24:36.124" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:36.124">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:35.448" endtime="20171026 13:24:36.124" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:36.125">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:36.124" endtime="20171026 13:24:36.125" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:36.125">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:24:36.125">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:24:36.125">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:24:36.125" endtime="20171026 13:24:36.125" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:36.126">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:24:35.447" endtime="20171026 13:24:36.126" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:36.126">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:24:35.447" endtime="20171026 13:24:36.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:36.126">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:24:36.127">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:24:36.126" endtime="20171026 13:24:36.127" status="FAIL"></status>
</kw>
<status starttime="20171026 13:24:33.855" endtime="20171026 13:24:36.127" status="FAIL"></status>
</kw>
<status starttime="20171026 13:24:25.007" endtime="20171026 13:24:36.127" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:46.132">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:24:46.132" endtime="20171026 13:24:46.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:46.134">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:24:46.133" endtime="20171026 13:24:46.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:46.134">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:24:46.134" endtime="20171026 13:24:46.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:46.135">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:24:46.135" endtime="20171026 13:24:46.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:48.084">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:24:46.136" endtime="20171026 13:24:48.085" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:48.085">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:24:48.085">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:46.135" endtime="20171026 13:24:48.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:48.085">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:48.085" endtime="20171026 13:24:48.086" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:48.086">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:48.086" endtime="20171026 13:24:48.086" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:46.132" endtime="20171026 13:24:48.087" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:46.131" endtime="20171026 13:24:48.087" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:46.130" endtime="20171026 13:24:48.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:48.087">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:24:48.087" endtime="20171026 13:24:48.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:48.089">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:48.089" endtime="20171026 13:24:48.089" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:48.090">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:48.090" endtime="20171026 13:24:48.090" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:48.090" endtime="20171026 13:24:48.091" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:48.088" endtime="20171026 13:24:48.091" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:48.088" endtime="20171026 13:24:48.091" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:54.313">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:24:54.314">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:48.091" endtime="20171026 13:24:54.314" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:54.316">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:54.315" endtime="20171026 13:24:54.316" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:54.317">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:54.317" endtime="20171026 13:24:54.317" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:54.316" endtime="20171026 13:24:54.317" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:54.315" endtime="20171026 13:24:54.317" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:54.314" endtime="20171026 13:24:54.317" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:24:54.318">Delete All Sessions</msg>
<status starttime="20171026 13:24:54.318" endtime="20171026 13:24:54.318" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:54.318">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:46.130" endtime="20171026 13:24:54.318" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:54.319">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:54.319" endtime="20171026 13:24:54.319" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:54.319">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:24:54.320">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:24:54.320">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:24:54.319" endtime="20171026 13:24:54.320" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:54.320">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:24:46.129" endtime="20171026 13:24:54.320" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:54.320">${power_state} = On</msg>
<status starttime="20171026 13:24:46.129" endtime="20171026 13:24:54.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:24:54.321" endtime="20171026 13:24:54.321" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:46.128" endtime="20171026 13:24:54.321" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:54.326">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:24:54.326" endtime="20171026 13:24:54.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:54.328">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:24:54.327" endtime="20171026 13:24:54.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:54.329">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:24:54.328" endtime="20171026 13:24:54.329" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:54.330">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:24:54.329" endtime="20171026 13:24:54.330" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:55.133">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:24:54.330" endtime="20171026 13:24:55.133" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:55.133">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:24:55.133">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:54.330" endtime="20171026 13:24:55.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:55.134">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:55.134" endtime="20171026 13:24:55.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:55.135">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:55.134" endtime="20171026 13:24:55.135" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:54.325" endtime="20171026 13:24:55.135" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:54.325" endtime="20171026 13:24:55.135" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:54.323" endtime="20171026 13:24:55.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:55.136">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:24:55.135" endtime="20171026 13:24:55.136" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:55.138">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:55.137" endtime="20171026 13:24:55.138" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:55.139">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:24:55.139" endtime="20171026 13:24:55.139" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:55.138" endtime="20171026 13:24:55.139" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:55.137" endtime="20171026 13:24:55.139" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:55.136" endtime="20171026 13:24:55.139" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:56.488">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:24:56.488">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:55.140" endtime="20171026 13:24:56.488" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:56.491">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:56.490" endtime="20171026 13:24:56.491" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:56.492">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:56.491" endtime="20171026 13:24:56.492" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:56.491" endtime="20171026 13:24:56.492" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:56.490" endtime="20171026 13:24:56.492" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:56.489" endtime="20171026 13:24:56.492" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:24:56.492">Delete All Sessions</msg>
<status starttime="20171026 13:24:56.492" endtime="20171026 13:24:56.492" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:56.493">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:54.322" endtime="20171026 13:24:56.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:56.493">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:56.493" endtime="20171026 13:24:56.494" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:56.494">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:24:56.494">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:24:56.494">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:24:56.494" endtime="20171026 13:24:56.494" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:56.495">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:24:54.322" endtime="20171026 13:24:56.495" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:56.495">${host_state} = Running</msg>
<status starttime="20171026 13:24:54.321" endtime="20171026 13:24:56.495" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:24:56.495" endtime="20171026 13:24:56.495" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:56.500">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:24:56.499" endtime="20171026 13:24:56.500" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:56.501">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:24:56.500" endtime="20171026 13:24:56.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:56.501">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:24:56.501" endtime="20171026 13:24:56.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:56.502">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:24:56.502" endtime="20171026 13:24:56.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:57.144">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:24:56.503" endtime="20171026 13:24:57.145" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:57.145">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:24:57.145">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:56.502" endtime="20171026 13:24:57.145" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:57.146">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:57.145" endtime="20171026 13:24:57.146" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:57.146">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:57.146" endtime="20171026 13:24:57.146" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:56.499" endtime="20171026 13:24:57.147" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:56.499" endtime="20171026 13:24:57.147" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:56.498" endtime="20171026 13:24:57.147" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:57.147">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:24:57.147" endtime="20171026 13:24:57.147" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:57.149">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:24:57.149" endtime="20171026 13:24:57.149" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:57.150">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:24:57.150" endtime="20171026 13:24:57.150" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:57.150" endtime="20171026 13:24:57.151" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:57.148" endtime="20171026 13:24:57.151" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:57.148" endtime="20171026 13:24:57.151" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:57.362">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:24:57.362">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:57.151" endtime="20171026 13:24:57.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:57.364">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:57.364" endtime="20171026 13:24:57.364" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:57.365">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:24:57.365" endtime="20171026 13:24:57.365" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:57.365" endtime="20171026 13:24:57.366" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:57.363" endtime="20171026 13:24:57.366" status="PASS"></status>
</kw>
<status starttime="20171026 13:24:57.363" endtime="20171026 13:24:57.366" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:24:57.366">Delete All Sessions</msg>
<status starttime="20171026 13:24:57.366" endtime="20171026 13:24:57.366" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:57.366">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:24:56.497" endtime="20171026 13:24:57.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:57.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:24:57.367" endtime="20171026 13:24:57.367" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:24:57.368">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:24:57.368">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:24:57.368">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:24:57.367" endtime="20171026 13:24:57.368" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:57.368">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status starttime="20171026 13:24:56.496" endtime="20171026 13:24:57.368" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:24:57.369">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status starttime="20171026 13:24:56.496" endtime="20171026 13:24:57.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:24:57.369">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:24:57.369">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status starttime="20171026 13:24:57.369" endtime="20171026 13:24:57.369" status="FAIL"></status>
</kw>
<status starttime="20171026 13:24:56.496" endtime="20171026 13:24:57.370" status="FAIL"></status>
</kw>
<status starttime="20171026 13:24:46.128" endtime="20171026 13:24:57.370" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:07.375">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:25:07.375" endtime="20171026 13:25:07.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:07.376">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:25:07.376" endtime="20171026 13:25:07.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:07.377">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:25:07.377" endtime="20171026 13:25:07.377" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:07.378">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:25:07.377" endtime="20171026 13:25:07.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:07.709">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:25:07.378" endtime="20171026 13:25:07.709" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:07.709">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:25:07.709">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:07.378" endtime="20171026 13:25:07.709" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:07.710">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:07.709" endtime="20171026 13:25:07.710" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:07.710">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:07.710" endtime="20171026 13:25:07.710" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:07.374" endtime="20171026 13:25:07.711" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:07.374" endtime="20171026 13:25:07.711" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:07.373" endtime="20171026 13:25:07.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:07.711">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:25:07.711" endtime="20171026 13:25:07.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:07.714">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:07.713" endtime="20171026 13:25:07.714" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:07.715">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:07.715" endtime="20171026 13:25:07.715" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:07.714" endtime="20171026 13:25:07.715" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:07.712" endtime="20171026 13:25:07.715" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:07.712" endtime="20171026 13:25:07.715" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:09.077">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:25:09.078">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:07.716" endtime="20171026 13:25:09.078" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:09.080">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:09.079" endtime="20171026 13:25:09.080" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:09.081">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:09.081" endtime="20171026 13:25:09.081" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.080" endtime="20171026 13:25:09.081" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.079" endtime="20171026 13:25:09.081" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.078" endtime="20171026 13:25:09.081" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:25:09.082">Delete All Sessions</msg>
<status starttime="20171026 13:25:09.082" endtime="20171026 13:25:09.082" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:09.082">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:07.372" endtime="20171026 13:25:09.082" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:09.083">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:09.082" endtime="20171026 13:25:09.083" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:09.083">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:25:09.083">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:25:09.084">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:25:09.083" endtime="20171026 13:25:09.084" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:09.084">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:25:07.372" endtime="20171026 13:25:09.084" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:09.084">${power_state} = On</msg>
<status starttime="20171026 13:25:07.371" endtime="20171026 13:25:09.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:25:09.085" endtime="20171026 13:25:09.085" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:07.371" endtime="20171026 13:25:09.085" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:09.089">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:25:09.088" endtime="20171026 13:25:09.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:09.090">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:25:09.090" endtime="20171026 13:25:09.090" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:09.091">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:25:09.091" endtime="20171026 13:25:09.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:09.092">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:25:09.091" endtime="20171026 13:25:09.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:09.407">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:25:09.093" endtime="20171026 13:25:09.407" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:09.408">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:25:09.408">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:09.092" endtime="20171026 13:25:09.408" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:09.408">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:09.408" endtime="20171026 13:25:09.408" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:09.409">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:09.409" endtime="20171026 13:25:09.409" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.088" endtime="20171026 13:25:09.409" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.087" endtime="20171026 13:25:09.409" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.087" endtime="20171026 13:25:09.409" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:09.410">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:25:09.410" endtime="20171026 13:25:09.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:09.412">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:09.412" endtime="20171026 13:25:09.412" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:09.413">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:09.413" endtime="20171026 13:25:09.413" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.412" endtime="20171026 13:25:09.413" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.411" endtime="20171026 13:25:09.414" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.410" endtime="20171026 13:25:09.414" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:09.682">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:25:09.682">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:09.414" endtime="20171026 13:25:09.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:09.684">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:09.684" endtime="20171026 13:25:09.684" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:09.685">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:09.685" endtime="20171026 13:25:09.685" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.684" endtime="20171026 13:25:09.685" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.683" endtime="20171026 13:25:09.685" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.682" endtime="20171026 13:25:09.685" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:25:09.686">Delete All Sessions</msg>
<status starttime="20171026 13:25:09.686" endtime="20171026 13:25:09.686" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:09.686">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:09.086" endtime="20171026 13:25:09.686" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:09.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:09.686" endtime="20171026 13:25:09.687" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:09.687">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:25:09.688">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:25:09.688">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:25:09.687" endtime="20171026 13:25:09.688" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:09.688">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:25:09.086" endtime="20171026 13:25:09.688" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:09.688">${host_state} = Running</msg>
<status starttime="20171026 13:25:09.085" endtime="20171026 13:25:09.688" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:25:09.689" endtime="20171026 13:25:09.689" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:09.693">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:25:09.693" endtime="20171026 13:25:09.694" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:09.694">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:25:09.694" endtime="20171026 13:25:09.694" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:09.695">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:25:09.695" endtime="20171026 13:25:09.695" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:09.696">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:25:09.695" endtime="20171026 13:25:09.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:10.021">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:25:09.696" endtime="20171026 13:25:10.021" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:10.021">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:25:10.021">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:09.696" endtime="20171026 13:25:10.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:10.022">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:10.021" endtime="20171026 13:25:10.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:10.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:10.022" endtime="20171026 13:25:10.023" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.693" endtime="20171026 13:25:10.023" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.692" endtime="20171026 13:25:10.023" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:09.691" endtime="20171026 13:25:10.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:10.024">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:25:10.023" endtime="20171026 13:25:10.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:10.026">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:25:10.025" endtime="20171026 13:25:10.026" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:10.027">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:25:10.027" endtime="20171026 13:25:10.027" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:10.026" endtime="20171026 13:25:10.027" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:10.024" endtime="20171026 13:25:10.027" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:10.024" endtime="20171026 13:25:10.027" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:12.122">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:25:12.122">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:10.027" endtime="20171026 13:25:12.122" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:12.124">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:12.124" endtime="20171026 13:25:12.124" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:12.125">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:12.125" endtime="20171026 13:25:12.125" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:12.124" endtime="20171026 13:25:12.125" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:12.123" endtime="20171026 13:25:12.125" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:12.122" endtime="20171026 13:25:12.125" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:25:12.126">Delete All Sessions</msg>
<status starttime="20171026 13:25:12.126" endtime="20171026 13:25:12.126" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:12.126">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:09.690" endtime="20171026 13:25:12.126" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:12.127">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:12.126" endtime="20171026 13:25:12.127" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:12.127">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:25:12.127">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:25:12.128">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:25:12.127" endtime="20171026 13:25:12.128" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:12.128">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:25:09.690" endtime="20171026 13:25:12.128" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:12.128">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:25:09.689" endtime="20171026 13:25:12.128" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:12.129">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:12.128" endtime="20171026 13:25:12.129" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:12.132">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:25:12.132" endtime="20171026 13:25:12.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:12.134">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:25:12.133" endtime="20171026 13:25:12.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:12.134">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:25:12.134" endtime="20171026 13:25:12.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:12.135">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:25:12.134" endtime="20171026 13:25:12.135" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:12.663">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:25:12.136" endtime="20171026 13:25:12.664" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:12.664">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:25:12.664">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:12.135" endtime="20171026 13:25:12.664" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:12.665">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:12.664" endtime="20171026 13:25:12.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:12.665">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:12.665" endtime="20171026 13:25:12.665" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:12.132" endtime="20171026 13:25:12.665" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:12.131" endtime="20171026 13:25:12.666" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:12.131" endtime="20171026 13:25:12.666" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:12.666">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:25:12.666" endtime="20171026 13:25:12.666" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:12.668">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:12.668" endtime="20171026 13:25:12.668" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:12.669">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:12.669" endtime="20171026 13:25:12.669" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:12.669" endtime="20171026 13:25:12.670" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:12.667" endtime="20171026 13:25:12.670" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:12.667" endtime="20171026 13:25:12.670" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:14.288">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:25:14.288">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:12.670" endtime="20171026 13:25:14.288" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:14.290">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:14.290" endtime="20171026 13:25:14.290" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:14.291">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:14.291" endtime="20171026 13:25:14.291" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:14.290" endtime="20171026 13:25:14.291" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:14.289" endtime="20171026 13:25:14.292" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:14.288" endtime="20171026 13:25:14.292" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:25:14.292">Delete All Sessions</msg>
<status starttime="20171026 13:25:14.292" endtime="20171026 13:25:14.292" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:14.292">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:12.130" endtime="20171026 13:25:14.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:14.293">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:14.293" endtime="20171026 13:25:14.293" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:14.294">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:25:14.294">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:25:14.294">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:25:14.294" endtime="20171026 13:25:14.294" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:14.294">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:25:12.129" endtime="20171026 13:25:14.294" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:14.295">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:25:12.129" endtime="20171026 13:25:14.295" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:14.295">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:25:14.295">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:25:14.295" endtime="20171026 13:25:14.295" status="FAIL"></status>
</kw>
<status starttime="20171026 13:25:09.689" endtime="20171026 13:25:14.296" status="FAIL"></status>
</kw>
<status starttime="20171026 13:25:07.370" endtime="20171026 13:25:14.296" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:24.302">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:25:24.301" endtime="20171026 13:25:24.302" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:24.303">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:25:24.302" endtime="20171026 13:25:24.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:24.303">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:25:24.303" endtime="20171026 13:25:24.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:24.304">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:25:24.304" endtime="20171026 13:25:24.304" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:24.668">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:25:24.305" endtime="20171026 13:25:24.668" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:24.669">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:25:24.669">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:24.304" endtime="20171026 13:25:24.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:24.669">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:24.669" endtime="20171026 13:25:24.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:24.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:24.670" endtime="20171026 13:25:24.670" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:24.300" endtime="20171026 13:25:24.671" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:24.300" endtime="20171026 13:25:24.671" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:24.299" endtime="20171026 13:25:24.671" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:24.671">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:25:24.671" endtime="20171026 13:25:24.671" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:24.674">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:24.673" endtime="20171026 13:25:24.674" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:24.675">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:24.675" endtime="20171026 13:25:24.676" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:24.674" endtime="20171026 13:25:24.676" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:24.672" endtime="20171026 13:25:24.676" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:24.672" endtime="20171026 13:25:24.676" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:24.820">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:25:24.820">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:24.676" endtime="20171026 13:25:24.820" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:24.822">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:24.821" endtime="20171026 13:25:24.822" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:24.823">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:24.822" endtime="20171026 13:25:24.823" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:24.822" endtime="20171026 13:25:24.823" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:24.821" endtime="20171026 13:25:24.823" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:24.820" endtime="20171026 13:25:24.823" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:25:24.824">Delete All Sessions</msg>
<status starttime="20171026 13:25:24.824" endtime="20171026 13:25:24.824" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:24.824">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:24.298" endtime="20171026 13:25:24.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:24.825">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:24.825" endtime="20171026 13:25:24.826" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:24.826">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:25:24.826">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:25:24.827">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:25:24.826" endtime="20171026 13:25:24.827" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:24.827">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:25:24.298" endtime="20171026 13:25:24.827" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:24.827">${power_state} = On</msg>
<status starttime="20171026 13:25:24.297" endtime="20171026 13:25:24.828" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:25:24.828" endtime="20171026 13:25:24.828" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:24.297" endtime="20171026 13:25:24.828" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:24.832">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:25:24.832" endtime="20171026 13:25:24.833" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:24.833">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:25:24.833" endtime="20171026 13:25:24.833" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:24.834">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:25:24.834" endtime="20171026 13:25:24.834" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:24.835">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:25:24.834" endtime="20171026 13:25:24.835" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:25.373">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:25:24.835" endtime="20171026 13:25:25.373" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:25.373">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:25:25.373">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:24.835" endtime="20171026 13:25:25.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:25.374">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:25.374" endtime="20171026 13:25:25.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:25.375">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:25.374" endtime="20171026 13:25:25.375" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:24.832" endtime="20171026 13:25:25.375" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:24.831" endtime="20171026 13:25:25.375" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:24.831" endtime="20171026 13:25:25.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:25.376">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:25:25.375" endtime="20171026 13:25:25.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:25.379">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:25.378" endtime="20171026 13:25:25.379" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:25.380">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:25.380" endtime="20171026 13:25:25.381" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:25.379" endtime="20171026 13:25:25.381" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:25.377" endtime="20171026 13:25:25.381" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:25.376" endtime="20171026 13:25:25.381" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:25.508">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:25:25.508">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:25.381" endtime="20171026 13:25:25.508" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:25.510">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:25.509" endtime="20171026 13:25:25.510" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:25.511">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:25.511" endtime="20171026 13:25:25.511" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:25.510" endtime="20171026 13:25:25.511" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:25.509" endtime="20171026 13:25:25.511" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:25.508" endtime="20171026 13:25:25.511" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:25:25.512">Delete All Sessions</msg>
<status starttime="20171026 13:25:25.511" endtime="20171026 13:25:25.512" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:25.512">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:24.830" endtime="20171026 13:25:25.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:25.513">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:25.512" endtime="20171026 13:25:25.513" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:25.513">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:25:25.514">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:25:25.514">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:25:25.513" endtime="20171026 13:25:25.514" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:25.514">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:25:24.829" endtime="20171026 13:25:25.514" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:25.514">${host_state} = Running</msg>
<status starttime="20171026 13:25:24.829" endtime="20171026 13:25:25.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:25:25.515" endtime="20171026 13:25:25.515" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:25.519">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:25:25.519" endtime="20171026 13:25:25.519" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:25.520">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:25:25.519" endtime="20171026 13:25:25.520" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:25.520">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:25:25.520" endtime="20171026 13:25:25.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:25.521">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:25:25.521" endtime="20171026 13:25:25.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:25.894">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:25:25.525" endtime="20171026 13:25:25.894" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:25.894">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:25:25.895">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:25.521" endtime="20171026 13:25:25.895" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:25.895">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:25.895" endtime="20171026 13:25:25.895" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:25.896">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:25.896" endtime="20171026 13:25:25.896" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:25.518" endtime="20171026 13:25:25.896" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:25.518" endtime="20171026 13:25:25.896" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:25.517" endtime="20171026 13:25:25.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:25.897">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:25:25.897" endtime="20171026 13:25:25.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:25.899">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:25:25.899" endtime="20171026 13:25:25.899" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:25.900">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:25:25.900" endtime="20171026 13:25:25.900" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:25.899" endtime="20171026 13:25:25.900" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:25.898" endtime="20171026 13:25:25.901" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:25.897" endtime="20171026 13:25:25.901" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:26.028">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:25:26.028">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:25.901" endtime="20171026 13:25:26.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:26.030">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:26.029" endtime="20171026 13:25:26.030" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:26.031">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:26.030" endtime="20171026 13:25:26.031" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:26.030" endtime="20171026 13:25:26.031" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:26.029" endtime="20171026 13:25:26.031" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:26.028" endtime="20171026 13:25:26.031" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:25:26.032">Delete All Sessions</msg>
<status starttime="20171026 13:25:26.032" endtime="20171026 13:25:26.032" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:26.032">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:25.516" endtime="20171026 13:25:26.032" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:26.033">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:26.033" endtime="20171026 13:25:26.033" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:26.034">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:25:26.034">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:25:26.034">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:25:26.034" endtime="20171026 13:25:26.035" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:26.035">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:25:25.516" endtime="20171026 13:25:26.035" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:26.035">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:25:25.515" endtime="20171026 13:25:26.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:26.036">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:26.036" endtime="20171026 13:25:26.036" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:26.040">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:25:26.040" endtime="20171026 13:25:26.040" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:26.041">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:25:26.041" endtime="20171026 13:25:26.041" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:26.042">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:25:26.041" endtime="20171026 13:25:26.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:26.042">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:25:26.042" endtime="20171026 13:25:26.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:26.633">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:25:26.043" endtime="20171026 13:25:26.634" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:26.634">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:25:26.634">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:26.043" endtime="20171026 13:25:26.634" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:26.635">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:26.634" endtime="20171026 13:25:26.635" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:26.635">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:26.635" endtime="20171026 13:25:26.636" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:26.039" endtime="20171026 13:25:26.636" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:26.038" endtime="20171026 13:25:26.636" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:26.038" endtime="20171026 13:25:26.636" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:26.637">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:25:26.636" endtime="20171026 13:25:26.637" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:26.640">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:26.639" endtime="20171026 13:25:26.640" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:26.641">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:26.641" endtime="20171026 13:25:26.642" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:26.640" endtime="20171026 13:25:26.642" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:26.638" endtime="20171026 13:25:26.642" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:26.637" endtime="20171026 13:25:26.642" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:26.768">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:25:26.768">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:26.642" endtime="20171026 13:25:26.768" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:26.770">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:26.770" endtime="20171026 13:25:26.770" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:26.772">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:26.771" endtime="20171026 13:25:26.772" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:26.770" endtime="20171026 13:25:26.772" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:26.769" endtime="20171026 13:25:26.772" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:26.768" endtime="20171026 13:25:26.772" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:25:26.772">Delete All Sessions</msg>
<status starttime="20171026 13:25:26.772" endtime="20171026 13:25:26.772" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:26.773">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:26.037" endtime="20171026 13:25:26.773" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:26.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:26.773" endtime="20171026 13:25:26.773" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:26.774">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:25:26.774">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:25:26.774">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:25:26.774" endtime="20171026 13:25:26.774" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:26.774">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:25:26.037" endtime="20171026 13:25:26.775" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:26.775">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:25:26.036" endtime="20171026 13:25:26.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:26.775">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:25:26.775">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:25:26.775" endtime="20171026 13:25:26.776" status="FAIL"></status>
</kw>
<status starttime="20171026 13:25:25.515" endtime="20171026 13:25:26.776" status="FAIL"></status>
</kw>
<status starttime="20171026 13:25:24.296" endtime="20171026 13:25:26.776" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:36.781">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:25:36.781" endtime="20171026 13:25:36.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:36.782">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:25:36.782" endtime="20171026 13:25:36.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:36.783">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:25:36.783" endtime="20171026 13:25:36.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:36.784">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:25:36.783" endtime="20171026 13:25:36.784" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:37.372">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:25:36.785" endtime="20171026 13:25:37.373" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:37.373">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:25:37.373">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:36.784" endtime="20171026 13:25:37.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:37.373">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:37.373" endtime="20171026 13:25:37.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:37.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:37.374" endtime="20171026 13:25:37.374" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:36.780" endtime="20171026 13:25:37.375" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:36.780" endtime="20171026 13:25:37.375" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:36.779" endtime="20171026 13:25:37.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:37.375">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:25:37.375" endtime="20171026 13:25:37.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:37.377">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:37.377" endtime="20171026 13:25:37.377" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:37.378">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:37.378" endtime="20171026 13:25:37.378" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:37.378" endtime="20171026 13:25:37.379" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:37.376" endtime="20171026 13:25:37.379" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:37.376" endtime="20171026 13:25:37.379" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:37.505">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:25:37.505">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:37.379" endtime="20171026 13:25:37.505" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:37.507">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:37.507" endtime="20171026 13:25:37.507" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:37.508">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:37.508" endtime="20171026 13:25:37.508" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:37.507" endtime="20171026 13:25:37.508" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:37.506" endtime="20171026 13:25:37.508" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:37.506" endtime="20171026 13:25:37.508" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:25:37.509">Delete All Sessions</msg>
<status starttime="20171026 13:25:37.509" endtime="20171026 13:25:37.509" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:37.509">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:36.779" endtime="20171026 13:25:37.509" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:37.510">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:37.510" endtime="20171026 13:25:37.510" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:37.511">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:25:37.511">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:25:37.511">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:25:37.510" endtime="20171026 13:25:37.511" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:37.511">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:25:36.778" endtime="20171026 13:25:37.511" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:37.511">${power_state} = On</msg>
<status starttime="20171026 13:25:36.778" endtime="20171026 13:25:37.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:25:37.512" endtime="20171026 13:25:37.512" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:36.777" endtime="20171026 13:25:37.512" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:37.516">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:25:37.516" endtime="20171026 13:25:37.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:37.517">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:25:37.517" endtime="20171026 13:25:37.517" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:37.518">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:25:37.518" endtime="20171026 13:25:37.518" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:37.519">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:25:37.518" endtime="20171026 13:25:37.519" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:37.888">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:25:37.519" endtime="20171026 13:25:37.888" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:37.888">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:25:37.888">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:37.519" endtime="20171026 13:25:37.888" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:37.889">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:37.889" endtime="20171026 13:25:37.889" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:37.890">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:37.889" endtime="20171026 13:25:37.890" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:37.515" endtime="20171026 13:25:37.890" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:37.515" endtime="20171026 13:25:37.890" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:37.514" endtime="20171026 13:25:37.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:37.891">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:25:37.890" endtime="20171026 13:25:37.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:37.893">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:37.892" endtime="20171026 13:25:37.893" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:37.894">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:37.894" endtime="20171026 13:25:37.894" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:37.893" endtime="20171026 13:25:37.894" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:37.891" endtime="20171026 13:25:37.894" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:37.891" endtime="20171026 13:25:37.894" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:38.021">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:25:38.022">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:37.895" endtime="20171026 13:25:38.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:38.023">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:38.023" endtime="20171026 13:25:38.024" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:38.025">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:38.024" endtime="20171026 13:25:38.025" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.024" endtime="20171026 13:25:38.025" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.022" endtime="20171026 13:25:38.025" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.022" endtime="20171026 13:25:38.025" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:25:38.025">Delete All Sessions</msg>
<status starttime="20171026 13:25:38.025" endtime="20171026 13:25:38.025" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:38.026">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:37.513" endtime="20171026 13:25:38.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:38.026">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:38.026" endtime="20171026 13:25:38.026" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:38.027">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:25:38.027">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:25:38.027">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:25:38.027" endtime="20171026 13:25:38.027" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:38.027">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:25:37.513" endtime="20171026 13:25:38.027" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:38.028">${host_state} = Running</msg>
<status starttime="20171026 13:25:37.512" endtime="20171026 13:25:38.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:25:38.028" endtime="20171026 13:25:38.028" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:38.033">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:25:38.032" endtime="20171026 13:25:38.033" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:38.034">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:25:38.033" endtime="20171026 13:25:38.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:38.034">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:25:38.034" endtime="20171026 13:25:38.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:38.035">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:25:38.035" endtime="20171026 13:25:38.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:38.349">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:25:38.036" endtime="20171026 13:25:38.349" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:38.349">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:25:38.349">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:38.035" endtime="20171026 13:25:38.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:38.350">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:38.350" endtime="20171026 13:25:38.350" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:38.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:38.350" endtime="20171026 13:25:38.351" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.032" endtime="20171026 13:25:38.351" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.031" endtime="20171026 13:25:38.351" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.031" endtime="20171026 13:25:38.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:38.352">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:25:38.351" endtime="20171026 13:25:38.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:38.354">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:25:38.353" endtime="20171026 13:25:38.354" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:38.355">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:25:38.354" endtime="20171026 13:25:38.355" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.354" endtime="20171026 13:25:38.355" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.352" endtime="20171026 13:25:38.355" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.352" endtime="20171026 13:25:38.355" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:38.606">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:25:38.606">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:38.355" endtime="20171026 13:25:38.606" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:38.608">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:38.608" endtime="20171026 13:25:38.608" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:38.609">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:38.609" endtime="20171026 13:25:38.609" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.608" endtime="20171026 13:25:38.609" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.607" endtime="20171026 13:25:38.609" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.607" endtime="20171026 13:25:38.610" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:25:38.610">Delete All Sessions</msg>
<status starttime="20171026 13:25:38.610" endtime="20171026 13:25:38.610" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:38.610">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:38.030" endtime="20171026 13:25:38.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:38.611">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:38.611" endtime="20171026 13:25:38.611" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:38.611">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:25:38.612">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:25:38.612">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:25:38.611" endtime="20171026 13:25:38.612" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:38.612">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:25:38.029" endtime="20171026 13:25:38.612" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:38.612">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:25:38.029" endtime="20171026 13:25:38.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:38.613">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:38.612" endtime="20171026 13:25:38.613" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:38.617">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:25:38.616" endtime="20171026 13:25:38.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:38.617">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:25:38.617" endtime="20171026 13:25:38.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:38.618">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:25:38.618" endtime="20171026 13:25:38.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:38.619">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:25:38.618" endtime="20171026 13:25:38.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:39.107">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:25:38.620" endtime="20171026 13:25:39.107" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:39.107">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:25:39.107">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:38.619" endtime="20171026 13:25:39.107" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:39.108">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:39.107" endtime="20171026 13:25:39.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:39.109">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:39.109" endtime="20171026 13:25:39.109" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.616" endtime="20171026 13:25:39.109" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.615" endtime="20171026 13:25:39.109" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.615" endtime="20171026 13:25:39.109" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:39.110">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:25:39.110" endtime="20171026 13:25:39.110" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:39.112">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:39.112" endtime="20171026 13:25:39.112" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:39.113">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:25:39.113" endtime="20171026 13:25:39.113" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:39.112" endtime="20171026 13:25:39.114" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:39.111" endtime="20171026 13:25:39.114" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:39.110" endtime="20171026 13:25:39.114" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:39.321">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:25:39.321">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:39.114" endtime="20171026 13:25:39.321" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:39.323">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:39.323" endtime="20171026 13:25:39.323" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:39.324">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:25:39.324" endtime="20171026 13:25:39.324" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:39.323" endtime="20171026 13:25:39.324" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:39.322" endtime="20171026 13:25:39.325" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:39.322" endtime="20171026 13:25:39.325" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:25:39.325">Delete All Sessions</msg>
<status starttime="20171026 13:25:39.325" endtime="20171026 13:25:39.325" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:39.325">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:25:38.614" endtime="20171026 13:25:39.325" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:39.326">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:39.326" endtime="20171026 13:25:39.326" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:25:39.327">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:25:39.327">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:25:39.327">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:25:39.326" endtime="20171026 13:25:39.327" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:39.327">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete</msg>
<status starttime="20171026 13:25:38.613" endtime="20171026 13:25:39.327" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:25:39.327">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete</msg>
<status starttime="20171026 13:25:38.613" endtime="20171026 13:25:39.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:25:39.328">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:25:39.328" endtime="20171026 13:25:39.328" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:38.028" endtime="20171026 13:25:39.328" status="PASS"></status>
</kw>
<status starttime="20171026 13:25:36.776" endtime="20171026 13:25:39.328" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:47.694" endtime="20171026 13:25:39.328" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:46.890" endtime="20171026 13:25:39.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:09.329">Slept 30 seconds</msg>
<status starttime="20171026 13:25:39.329" endtime="20171026 13:26:09.330" status="PASS"></status>
</kw>
<status starttime="20171026 13:22:44.400" endtime="20171026 13:26:09.330" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:09.330">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:09.332">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20171026 13:26:09.331" endtime="20171026 13:26:09.332" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:09.333">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20171026 13:26:09.333" endtime="20171026 13:26:09.333" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:09.336">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:26:09.336" endtime="20171026 13:26:09.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:09.337">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:26:09.337" endtime="20171026 13:26:09.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:09.338">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:26:09.338" endtime="20171026 13:26:09.338" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:09.339">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:26:09.338" endtime="20171026 13:26:09.339" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:09.656">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:26:09.339" endtime="20171026 13:26:09.656" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:09.656">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:26:09.656">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:09.339" endtime="20171026 13:26:09.656" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:09.657">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:09.657" endtime="20171026 13:26:09.657" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:09.658">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:09.658" endtime="20171026 13:26:09.658" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:09.335" endtime="20171026 13:26:09.658" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:09.335" endtime="20171026 13:26:09.658" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:09.334" endtime="20171026 13:26:09.658" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:09.659">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20171026 13:26:09.659" endtime="20171026 13:26:09.659" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:09.659">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:26:09.659" endtime="20171026 13:26:09.660" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20171026 13:26:09.660" endtime="20171026 13:26:09.660" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:09.662">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status starttime="20171026 13:26:09.661" endtime="20171026 13:26:09.662" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:09.663">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20171026 13:26:09.662" endtime="20171026 13:26:09.663" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:09.662" endtime="20171026 13:26:09.663" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:09.660" endtime="20171026 13:26:09.663" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:11.080">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171026 13:26:11.080">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:09.663" endtime="20171026 13:26:11.080" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:11.081">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:26:11.081" endtime="20171026 13:26:11.081" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:11.082">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:26:11.082" endtime="20171026 13:26:11.082" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:11.081" endtime="20171026 13:26:11.082" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:11.080" endtime="20171026 13:26:11.082" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:26:11.083">Delete All Sessions</msg>
<status starttime="20171026 13:26:11.083" endtime="20171026 13:26:11.083" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:11.083">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:09.333" endtime="20171026 13:26:11.083" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:11.084">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:11.083" endtime="20171026 13:26:11.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:11.085">Returning from the enclosing user keyword.</msg>
<status starttime="20171026 13:26:11.084" endtime="20171026 13:26:11.085" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:09.332" endtime="20171026 13:26:11.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20171026 13:26:11.085" endtime="20171026 13:26:11.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Wait For PowerOff">
<doc>Wait for power off state.</doc>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:11.092">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:26:11.092" endtime="20171026 13:26:11.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:11.093">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:26:11.093" endtime="20171026 13:26:11.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:11.094">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:26:11.094" endtime="20171026 13:26:11.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:11.095">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:26:11.095" endtime="20171026 13:26:11.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:11.561">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:26:11.096" endtime="20171026 13:26:11.561" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:11.561">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:26:11.561">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:11.095" endtime="20171026 13:26:11.561" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:11.562">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:11.562" endtime="20171026 13:26:11.562" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:11.563">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:11.562" endtime="20171026 13:26:11.563" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:11.091" endtime="20171026 13:26:11.563" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:11.090" endtime="20171026 13:26:11.563" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:11.089" endtime="20171026 13:26:11.563" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:11.564">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:26:11.563" endtime="20171026 13:26:11.564" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:11.566">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:26:11.565" endtime="20171026 13:26:11.566" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:11.567">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:26:11.567" endtime="20171026 13:26:11.567" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:11.566" endtime="20171026 13:26:11.567" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:11.564" endtime="20171026 13:26:11.567" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:11.564" endtime="20171026 13:26:11.567" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:15.698">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:26:15.698">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:11.567" endtime="20171026 13:26:15.698" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:15.701">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:26:15.700" endtime="20171026 13:26:15.701" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:15.702">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:26:15.702" endtime="20171026 13:26:15.703" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:15.701" endtime="20171026 13:26:15.703" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:15.700" endtime="20171026 13:26:15.703" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:15.699" endtime="20171026 13:26:15.703" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:26:15.703">Delete All Sessions</msg>
<status starttime="20171026 13:26:15.703" endtime="20171026 13:26:15.703" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:15.704">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:11.089" endtime="20171026 13:26:15.704" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:15.704">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:15.704" endtime="20171026 13:26:15.704" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:15.705">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:26:15.705">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:26:15.705">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:26:15.705" endtime="20171026 13:26:15.705" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:15.705">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:26:11.088" endtime="20171026 13:26:15.705" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:15.706">${power_state} = On</msg>
<status starttime="20171026 13:26:11.088" endtime="20171026 13:26:15.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:26:15.706">Off != On</msg>
<status starttime="20171026 13:26:15.706" endtime="20171026 13:26:15.707" status="FAIL"></status>
</kw>
<status starttime="20171026 13:26:11.087" endtime="20171026 13:26:15.707" status="FAIL"></status>
</kw>
<status starttime="20171026 13:26:11.087" endtime="20171026 13:26:15.707" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:25.713">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:26:25.712" endtime="20171026 13:26:25.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:25.714">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:26:25.713" endtime="20171026 13:26:25.714" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:25.715">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:26:25.714" endtime="20171026 13:26:25.715" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:25.715">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:26:25.715" endtime="20171026 13:26:25.715" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:26.042">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:26:25.716" endtime="20171026 13:26:26.042" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:26.042">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:26:26.042">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:25.716" endtime="20171026 13:26:26.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:26.043">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:26.042" endtime="20171026 13:26:26.043" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:26.043">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:26.043" endtime="20171026 13:26:26.044" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:25.711" endtime="20171026 13:26:26.044" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:25.711" endtime="20171026 13:26:26.044" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:25.710" endtime="20171026 13:26:26.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:26.045">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:26:26.044" endtime="20171026 13:26:26.045" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:26.047">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:26:26.046" endtime="20171026 13:26:26.047" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:26.048">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:26:26.047" endtime="20171026 13:26:26.048" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:26.047" endtime="20171026 13:26:26.048" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:26.045" endtime="20171026 13:26:26.048" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:26.045" endtime="20171026 13:26:26.048" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:26.157">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:26:26.157">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:26.048" endtime="20171026 13:26:26.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:26.159">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:26:26.159" endtime="20171026 13:26:26.159" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:26.163">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:26:26.163" endtime="20171026 13:26:26.164" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:26.159" endtime="20171026 13:26:26.164" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:26.158" endtime="20171026 13:26:26.164" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:26.158" endtime="20171026 13:26:26.164" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:26:26.164">Delete All Sessions</msg>
<status starttime="20171026 13:26:26.164" endtime="20171026 13:26:26.164" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:26.165">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:25.709" endtime="20171026 13:26:26.165" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:26.165">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:26.165" endtime="20171026 13:26:26.166" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:26.166">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:26:26.166">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:26:26.166">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:26:26.166" endtime="20171026 13:26:26.166" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:26.167">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:26:25.709" endtime="20171026 13:26:26.167" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:26.167">${power_state} = On</msg>
<status starttime="20171026 13:26:25.708" endtime="20171026 13:26:26.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:26:26.168">Off != On</msg>
<status starttime="20171026 13:26:26.168" endtime="20171026 13:26:26.169" status="FAIL"></status>
</kw>
<status starttime="20171026 13:26:25.708" endtime="20171026 13:26:26.169" status="FAIL"></status>
</kw>
<status starttime="20171026 13:26:25.707" endtime="20171026 13:26:26.169" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:36.175">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:26:36.174" endtime="20171026 13:26:36.175" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:36.176">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:26:36.175" endtime="20171026 13:26:36.176" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:36.176">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:26:36.176" endtime="20171026 13:26:36.177" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:36.177">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:26:36.177" endtime="20171026 13:26:36.177" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:36.499">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:26:36.178" endtime="20171026 13:26:36.500" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:36.500">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:26:36.500">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:36.177" endtime="20171026 13:26:36.500" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:36.501">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:36.500" endtime="20171026 13:26:36.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:36.501">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:36.501" endtime="20171026 13:26:36.501" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:36.174" endtime="20171026 13:26:36.502" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:36.173" endtime="20171026 13:26:36.502" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:36.173" endtime="20171026 13:26:36.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:36.502">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:26:36.502" endtime="20171026 13:26:36.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:36.504">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:26:36.504" endtime="20171026 13:26:36.505" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:36.506">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:26:36.505" endtime="20171026 13:26:36.506" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:36.505" endtime="20171026 13:26:36.506" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:36.503" endtime="20171026 13:26:36.506" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:36.503" endtime="20171026 13:26:36.506" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:36.664">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:26:36.664">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:36.506" endtime="20171026 13:26:36.664" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:36.666">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:26:36.665" endtime="20171026 13:26:36.666" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:36.667">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:26:36.667" endtime="20171026 13:26:36.667" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:36.666" endtime="20171026 13:26:36.667" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:36.665" endtime="20171026 13:26:36.667" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:36.664" endtime="20171026 13:26:36.667" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:26:36.668">Delete All Sessions</msg>
<status starttime="20171026 13:26:36.668" endtime="20171026 13:26:36.668" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:36.668">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:36.172" endtime="20171026 13:26:36.668" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:36.669">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:36.669" endtime="20171026 13:26:36.669" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:36.669">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:26:36.670">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:26:36.670">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:26:36.669" endtime="20171026 13:26:36.670" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:36.670">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:26:36.171" endtime="20171026 13:26:36.670" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:36.670">${power_state} = On</msg>
<status starttime="20171026 13:26:36.171" endtime="20171026 13:26:36.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:26:36.671">Off != On</msg>
<status starttime="20171026 13:26:36.671" endtime="20171026 13:26:36.671" status="FAIL"></status>
</kw>
<status starttime="20171026 13:26:36.170" endtime="20171026 13:26:36.671" status="FAIL"></status>
</kw>
<status starttime="20171026 13:26:36.170" endtime="20171026 13:26:36.671" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:46.677">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:26:46.677" endtime="20171026 13:26:46.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:46.678">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:26:46.678" endtime="20171026 13:26:46.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:46.679">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:26:46.679" endtime="20171026 13:26:46.679" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:46.680">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:26:46.679" endtime="20171026 13:26:46.680" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:47.424">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:26:46.680" endtime="20171026 13:26:47.424" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:47.425">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:26:47.425">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:46.680" endtime="20171026 13:26:47.425" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:47.426">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:47.425" endtime="20171026 13:26:47.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:47.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:47.426" endtime="20171026 13:26:47.426" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:46.676" endtime="20171026 13:26:47.427" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:46.675" endtime="20171026 13:26:47.427" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:46.675" endtime="20171026 13:26:47.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:47.428">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:26:47.427" endtime="20171026 13:26:47.428" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:47.430">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:26:47.429" endtime="20171026 13:26:47.430" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:47.431">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:26:47.430" endtime="20171026 13:26:47.431" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:47.430" endtime="20171026 13:26:47.431" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:47.428" endtime="20171026 13:26:47.431" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:47.428" endtime="20171026 13:26:47.431" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:48.706">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:26:48.706">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:47.431" endtime="20171026 13:26:48.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:48.708">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:26:48.708" endtime="20171026 13:26:48.708" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:48.709">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:26:48.709" endtime="20171026 13:26:48.710" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:48.708" endtime="20171026 13:26:48.710" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:48.707" endtime="20171026 13:26:48.710" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:48.707" endtime="20171026 13:26:48.710" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:26:48.710">Delete All Sessions</msg>
<status starttime="20171026 13:26:48.710" endtime="20171026 13:26:48.710" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:48.711">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:46.674" endtime="20171026 13:26:48.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:48.711">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:48.711" endtime="20171026 13:26:48.711" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:48.712">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:26:48.712">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:26:48.712">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:26:48.712" endtime="20171026 13:26:48.712" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:48.712">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:26:46.673" endtime="20171026 13:26:48.712" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:48.713">${power_state} = On</msg>
<status starttime="20171026 13:26:46.673" endtime="20171026 13:26:48.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:26:48.713">Off != On</msg>
<status starttime="20171026 13:26:48.713" endtime="20171026 13:26:48.714" status="FAIL"></status>
</kw>
<status starttime="20171026 13:26:46.673" endtime="20171026 13:26:48.714" status="FAIL"></status>
</kw>
<status starttime="20171026 13:26:46.672" endtime="20171026 13:26:48.714" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:58.719">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:26:58.719" endtime="20171026 13:26:58.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:58.720">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:26:58.720" endtime="20171026 13:26:58.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:58.721">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:26:58.721" endtime="20171026 13:26:58.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:58.722">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:26:58.721" endtime="20171026 13:26:58.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:59.206">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:26:58.723" endtime="20171026 13:26:59.206" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:59.206">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:26:59.206">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:58.722" endtime="20171026 13:26:59.206" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:59.207">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:59.207" endtime="20171026 13:26:59.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:59.208">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:59.207" endtime="20171026 13:26:59.208" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:58.719" endtime="20171026 13:26:59.208" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:58.718" endtime="20171026 13:26:59.208" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:58.717" endtime="20171026 13:26:59.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.209">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:26:59.208" endtime="20171026 13:26:59.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.211">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:26:59.210" endtime="20171026 13:26:59.211" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:59.212">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:26:59.212" endtime="20171026 13:26:59.212" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.211" endtime="20171026 13:26:59.212" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.209" endtime="20171026 13:26:59.212" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.209" endtime="20171026 13:26:59.212" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.316">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:26:59.316">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:59.213" endtime="20171026 13:26:59.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.318">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:26:59.317" endtime="20171026 13:26:59.318" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:59.319">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:26:59.318" endtime="20171026 13:26:59.319" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.318" endtime="20171026 13:26:59.319" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.317" endtime="20171026 13:26:59.319" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.316" endtime="20171026 13:26:59.319" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:26:59.319">Delete All Sessions</msg>
<status starttime="20171026 13:26:59.319" endtime="20171026 13:26:59.319" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:59.320">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:58.717" endtime="20171026 13:26:59.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:59.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:59.320" endtime="20171026 13:26:59.320" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.321">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:26:59.321">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:26:59.321">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:26:59.321" endtime="20171026 13:26:59.321" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:59.321">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171026 13:26:58.716" endtime="20171026 13:26:59.321" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:59.322">${power_state} = Off</msg>
<status starttime="20171026 13:26:58.716" endtime="20171026 13:26:59.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:26:59.322" endtime="20171026 13:26:59.322" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:58.715" endtime="20171026 13:26:59.322" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:59.326">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:26:59.326" endtime="20171026 13:26:59.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.327">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:26:59.327" endtime="20171026 13:26:59.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.328">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:26:59.328" endtime="20171026 13:26:59.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.329">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:26:59.328" endtime="20171026 13:26:59.329" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:59.663">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:26:59.330" endtime="20171026 13:26:59.663" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:59.664">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:26:59.664">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:59.329" endtime="20171026 13:26:59.664" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:59.665">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:59.664" endtime="20171026 13:26:59.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:59.665">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:59.665" endtime="20171026 13:26:59.665" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.325" endtime="20171026 13:26:59.666" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.325" endtime="20171026 13:26:59.666" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.324" endtime="20171026 13:26:59.666" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.667">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:26:59.666" endtime="20171026 13:26:59.667" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.670">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:26:59.669" endtime="20171026 13:26:59.670" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:59.671">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:26:59.671" endtime="20171026 13:26:59.671" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.670" endtime="20171026 13:26:59.672" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.668" endtime="20171026 13:26:59.672" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.667" endtime="20171026 13:26:59.672" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.817">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:26:59.818">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:59.672" endtime="20171026 13:26:59.818" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.819">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:26:59.819" endtime="20171026 13:26:59.819" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:59.820">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:26:59.820" endtime="20171026 13:26:59.820" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.820" endtime="20171026 13:26:59.821" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.818" endtime="20171026 13:26:59.821" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.818" endtime="20171026 13:26:59.821" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:26:59.821">Delete All Sessions</msg>
<status starttime="20171026 13:26:59.821" endtime="20171026 13:26:59.821" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:59.821">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:59.323" endtime="20171026 13:26:59.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:59.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:26:59.822" endtime="20171026 13:26:59.822" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.823">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:26:59.823">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:26:59.823">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:26:59.822" endtime="20171026 13:26:59.823" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:59.823">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20171026 13:26:59.323" endtime="20171026 13:26:59.823" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:59.824">${host_state} = Off</msg>
<status starttime="20171026 13:26:59.323" endtime="20171026 13:26:59.824" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:26:59.824" endtime="20171026 13:26:59.824" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:58.714" endtime="20171026 13:26:59.824" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:11.086" endtime="20171026 13:26:59.824" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:11.086" endtime="20171026 13:26:59.825" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:26:59.825">${status} = True</msg>
<status starttime="20171026 13:26:11.086" endtime="20171026 13:26:59.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status starttime="20171026 13:26:59.825" endtime="20171026 13:26:59.825" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:09.331" endtime="20171026 13:26:59.825" status="PASS"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.826">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20171026 13:26:59.826" endtime="20171026 13:26:59.827" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.828">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20171026 13:26:59.827" endtime="20171026 13:26:59.828" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:26:59.831">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:26:59.831" endtime="20171026 13:26:59.831" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.832">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:26:59.832" endtime="20171026 13:26:59.832" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.833">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:26:59.832" endtime="20171026 13:26:59.833" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:26:59.833">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:26:59.833" endtime="20171026 13:26:59.833" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:00.177">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:26:59.834" endtime="20171026 13:27:00.177" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:00.177">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:27:00.177">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:59.834" endtime="20171026 13:27:00.177" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:00.178">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:00.177" endtime="20171026 13:27:00.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:00.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:00.178" endtime="20171026 13:27:00.179" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.830" endtime="20171026 13:27:00.179" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.830" endtime="20171026 13:27:00.179" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.829" endtime="20171026 13:27:00.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:00.180">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20171026 13:27:00.179" endtime="20171026 13:27:00.180" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:00.180">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:27:00.180" endtime="20171026 13:27:00.180" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20171026 13:27:00.181" endtime="20171026 13:27:00.181" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:00.182">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status starttime="20171026 13:27:00.182" endtime="20171026 13:27:00.182" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:00.183">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20171026 13:27:00.183" endtime="20171026 13:27:00.183" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:00.183" endtime="20171026 13:27:00.184" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:00.181" endtime="20171026 13:27:00.184" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:00.507">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171026 13:27:00.507">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:00.184" endtime="20171026 13:27:00.507" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:00.508">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:00.508" endtime="20171026 13:27:00.508" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:00.509">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:00.509" endtime="20171026 13:27:00.510" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:00.508" endtime="20171026 13:27:00.510" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:00.507" endtime="20171026 13:27:00.510" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:27:00.510">Delete All Sessions</msg>
<status starttime="20171026 13:27:00.510" endtime="20171026 13:27:00.510" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:00.510">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:26:59.828" endtime="20171026 13:27:00.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:00.511">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:00.511" endtime="20171026 13:27:00.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:00.512">Returning from the enclosing user keyword.</msg>
<status starttime="20171026 13:27:00.511" endtime="20171026 13:27:00.512" status="PASS"></status>
</kw>
<status starttime="20171026 13:26:59.827" endtime="20171026 13:27:00.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20171026 13:27:00.512" endtime="20171026 13:27:00.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:00.518">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:27:00.518" endtime="20171026 13:27:00.519" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:00.520">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:27:00.519" endtime="20171026 13:27:00.520" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:00.521">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:27:00.520" endtime="20171026 13:27:00.521" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:00.522">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:27:00.521" endtime="20171026 13:27:00.522" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:01.651">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:27:00.523" endtime="20171026 13:27:01.651" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:01.652">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:27:01.652">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:00.522" endtime="20171026 13:27:01.652" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:01.652">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:01.652" endtime="20171026 13:27:01.653" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:01.653">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:01.653" endtime="20171026 13:27:01.653" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:00.517" endtime="20171026 13:27:01.653" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:00.517" endtime="20171026 13:27:01.653" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:00.516" endtime="20171026 13:27:01.654" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:01.654">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:27:01.654" endtime="20171026 13:27:01.654" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:01.656">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:01.656" endtime="20171026 13:27:01.656" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:01.657">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:01.657" endtime="20171026 13:27:01.657" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:01.657" endtime="20171026 13:27:01.658" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:01.655" endtime="20171026 13:27:01.658" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:01.655" endtime="20171026 13:27:01.658" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:04.806">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:27:04.807">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:01.658" endtime="20171026 13:27:04.807" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:04.809">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:04.808" endtime="20171026 13:27:04.809" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:04.810">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:04.810" endtime="20171026 13:27:04.810" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:04.809" endtime="20171026 13:27:04.810" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:04.808" endtime="20171026 13:27:04.810" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:04.807" endtime="20171026 13:27:04.810" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:27:04.811">Delete All Sessions</msg>
<status starttime="20171026 13:27:04.811" endtime="20171026 13:27:04.811" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:04.811">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:00.515" endtime="20171026 13:27:04.811" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:04.812">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:04.811" endtime="20171026 13:27:04.812" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:04.812">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:27:04.812">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:27:04.813">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:27:04.812" endtime="20171026 13:27:04.813" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:04.813">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171026 13:27:00.514" endtime="20171026 13:27:04.813" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:04.813">${power_state} = Off</msg>
<status starttime="20171026 13:27:00.514" endtime="20171026 13:27:04.813" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:27:04.814">On != Off</msg>
<status starttime="20171026 13:27:04.813" endtime="20171026 13:27:04.814" status="FAIL"></status>
</kw>
<status starttime="20171026 13:27:00.514" endtime="20171026 13:27:04.814" status="FAIL"></status>
</kw>
<status starttime="20171026 13:27:00.513" endtime="20171026 13:27:04.814" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:14.820">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:27:14.820" endtime="20171026 13:27:14.820" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:14.821">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:27:14.821" endtime="20171026 13:27:14.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:14.822">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:27:14.821" endtime="20171026 13:27:14.822" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:14.822">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:27:14.822" endtime="20171026 13:27:14.822" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:15.359">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:27:14.823" endtime="20171026 13:27:15.359" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:15.359">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:27:15.360">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:14.823" endtime="20171026 13:27:15.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:15.360">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:15.360" endtime="20171026 13:27:15.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:15.361">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:15.361" endtime="20171026 13:27:15.361" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:14.819" endtime="20171026 13:27:15.361" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:14.818" endtime="20171026 13:27:15.361" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:14.817" endtime="20171026 13:27:15.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:15.362">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:27:15.362" endtime="20171026 13:27:15.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:15.364">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:15.364" endtime="20171026 13:27:15.364" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:15.365">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:15.365" endtime="20171026 13:27:15.365" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:15.364" endtime="20171026 13:27:15.365" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:15.363" endtime="20171026 13:27:15.366" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:15.362" endtime="20171026 13:27:15.366" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:18.054">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:27:18.054">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:15.366" endtime="20171026 13:27:18.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:18.057">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:18.056" endtime="20171026 13:27:18.057" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:18.058">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:18.058" endtime="20171026 13:27:18.058" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:18.057" endtime="20171026 13:27:18.058" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:18.055" endtime="20171026 13:27:18.058" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:18.055" endtime="20171026 13:27:18.058" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:27:18.060">Delete All Sessions</msg>
<status starttime="20171026 13:27:18.059" endtime="20171026 13:27:18.060" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:18.060">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:14.817" endtime="20171026 13:27:18.060" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:18.061">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:18.061" endtime="20171026 13:27:18.061" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:18.062">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:27:18.062">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:27:18.062">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:27:18.061" endtime="20171026 13:27:18.062" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:18.062">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171026 13:27:14.816" endtime="20171026 13:27:18.062" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:18.063">${power_state} = Off</msg>
<status starttime="20171026 13:27:14.816" endtime="20171026 13:27:18.063" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:27:18.063">On != Off</msg>
<status starttime="20171026 13:27:18.063" endtime="20171026 13:27:18.063" status="FAIL"></status>
</kw>
<status starttime="20171026 13:27:14.815" endtime="20171026 13:27:18.064" status="FAIL"></status>
</kw>
<status starttime="20171026 13:27:14.815" endtime="20171026 13:27:18.064" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:28.069">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:27:28.069" endtime="20171026 13:27:28.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:28.070">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:27:28.070" endtime="20171026 13:27:28.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:28.071">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:27:28.071" endtime="20171026 13:27:28.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:28.072">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:27:28.071" endtime="20171026 13:27:28.072" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:28.445">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:27:28.072" endtime="20171026 13:27:28.445" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:28.445">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:27:28.445">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:28.072" endtime="20171026 13:27:28.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:28.446">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:28.446" endtime="20171026 13:27:28.446" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:28.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:28.447" endtime="20171026 13:27:28.447" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.068" endtime="20171026 13:27:28.447" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.068" endtime="20171026 13:27:28.447" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.067" endtime="20171026 13:27:28.447" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:28.448">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:27:28.448" endtime="20171026 13:27:28.448" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:28.450">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:28.449" endtime="20171026 13:27:28.450" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:28.451">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:28.451" endtime="20171026 13:27:28.451" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.450" endtime="20171026 13:27:28.451" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.449" endtime="20171026 13:27:28.452" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.448" endtime="20171026 13:27:28.452" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:28.582">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:27:28.582">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:28.452" endtime="20171026 13:27:28.582" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:28.584">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:28.583" endtime="20171026 13:27:28.584" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:28.585">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:28.585" endtime="20171026 13:27:28.585" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.584" endtime="20171026 13:27:28.585" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.583" endtime="20171026 13:27:28.585" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.582" endtime="20171026 13:27:28.585" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:27:28.586">Delete All Sessions</msg>
<status starttime="20171026 13:27:28.586" endtime="20171026 13:27:28.586" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:28.586">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:28.066" endtime="20171026 13:27:28.586" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:28.587">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:28.586" endtime="20171026 13:27:28.587" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:28.587">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:27:28.587">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:27:28.588">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:27:28.587" endtime="20171026 13:27:28.588" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:28.588">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:27:28.066" endtime="20171026 13:27:28.588" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:28.588">${power_state} = On</msg>
<status starttime="20171026 13:27:28.065" endtime="20171026 13:27:28.588" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:27:28.589" endtime="20171026 13:27:28.589" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.065" endtime="20171026 13:27:28.589" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:28.593">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:27:28.592" endtime="20171026 13:27:28.597" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:28.597">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:27:28.597" endtime="20171026 13:27:28.597" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:28.598">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:27:28.598" endtime="20171026 13:27:28.598" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:28.599">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:27:28.598" endtime="20171026 13:27:28.599" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:28.959">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:27:28.600" endtime="20171026 13:27:28.959" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:28.960">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:27:28.960">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:28.599" endtime="20171026 13:27:28.960" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:28.960">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:28.960" endtime="20171026 13:27:28.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:28.961">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:28.961" endtime="20171026 13:27:28.961" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.592" endtime="20171026 13:27:28.961" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.591" endtime="20171026 13:27:28.961" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.591" endtime="20171026 13:27:28.962" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:28.962">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:27:28.962" endtime="20171026 13:27:28.962" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:28.965">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:28.964" endtime="20171026 13:27:28.965" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:28.966">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:28.966" endtime="20171026 13:27:28.967" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.965" endtime="20171026 13:27:28.967" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.963" endtime="20171026 13:27:28.967" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:28.962" endtime="20171026 13:27:28.967" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:29.106">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:27:29.107">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:28.967" endtime="20171026 13:27:29.107" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:29.109">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:29.108" endtime="20171026 13:27:29.109" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:29.110">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:29.110" endtime="20171026 13:27:29.110" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:29.109" endtime="20171026 13:27:29.110" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:29.108" endtime="20171026 13:27:29.110" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:29.107" endtime="20171026 13:27:29.110" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:27:29.111">Delete All Sessions</msg>
<status starttime="20171026 13:27:29.111" endtime="20171026 13:27:29.111" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:29.111">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:28.590" endtime="20171026 13:27:29.111" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:29.112">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:29.111" endtime="20171026 13:27:29.112" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:29.112">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:27:29.112">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:27:29.112">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:27:29.112" endtime="20171026 13:27:29.113" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:29.113">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:27:28.589" endtime="20171026 13:27:29.113" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:29.113">${host_state} = Running</msg>
<status starttime="20171026 13:27:28.589" endtime="20171026 13:27:29.113" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:27:29.113" endtime="20171026 13:27:29.114" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:29.118">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:27:29.118" endtime="20171026 13:27:29.119" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:29.119">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:27:29.119" endtime="20171026 13:27:29.119" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:29.120">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:27:29.120" endtime="20171026 13:27:29.120" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:29.121">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:27:29.120" endtime="20171026 13:27:29.121" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:29.501">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:27:29.121" endtime="20171026 13:27:29.501" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:29.501">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:27:29.501">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:29.121" endtime="20171026 13:27:29.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:29.502">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:29.501" endtime="20171026 13:27:29.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:29.503">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:29.502" endtime="20171026 13:27:29.503" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:29.117" endtime="20171026 13:27:29.503" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:29.117" endtime="20171026 13:27:29.503" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:29.116" endtime="20171026 13:27:29.503" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:29.504">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:27:29.503" endtime="20171026 13:27:29.504" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:29.506">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:27:29.505" endtime="20171026 13:27:29.506" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:29.507">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:27:29.507" endtime="20171026 13:27:29.507" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:29.506" endtime="20171026 13:27:29.507" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:29.504" endtime="20171026 13:27:29.507" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:29.504" endtime="20171026 13:27:29.507" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:29.631">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:27:29.632">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:29.508" endtime="20171026 13:27:29.632" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:29.634">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:29.633" endtime="20171026 13:27:29.634" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:29.634">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:29.634" endtime="20171026 13:27:29.635" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:29.634" endtime="20171026 13:27:29.635" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:29.633" endtime="20171026 13:27:29.635" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:29.632" endtime="20171026 13:27:29.635" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:27:29.635">Delete All Sessions</msg>
<status starttime="20171026 13:27:29.635" endtime="20171026 13:27:29.635" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:29.636">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:29.116" endtime="20171026 13:27:29.636" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:29.636">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:29.636" endtime="20171026 13:27:29.636" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:29.637">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:27:29.637">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:27:29.637">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:27:29.637" endtime="20171026 13:27:29.637" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:29.637">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20171026 13:27:29.115" endtime="20171026 13:27:29.637" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:29.638">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20171026 13:27:29.114" endtime="20171026 13:27:29.638" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:29.638">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:27:29.638">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20171026 13:27:29.638" endtime="20171026 13:27:29.638" status="FAIL"></status>
</kw>
<status starttime="20171026 13:27:29.114" endtime="20171026 13:27:29.639" status="FAIL"></status>
</kw>
<status starttime="20171026 13:27:28.064" endtime="20171026 13:27:29.639" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:39.644">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:27:39.644" endtime="20171026 13:27:39.645" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:39.645">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:27:39.645" endtime="20171026 13:27:39.645" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:39.646">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:27:39.646" endtime="20171026 13:27:39.646" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:39.647">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:27:39.646" endtime="20171026 13:27:39.647" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:40.262">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:27:39.648" endtime="20171026 13:27:40.262" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:40.262">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:27:40.262">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:39.647" endtime="20171026 13:27:40.262" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:40.263">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:40.263" endtime="20171026 13:27:40.263" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:40.264">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:40.263" endtime="20171026 13:27:40.264" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:39.643" endtime="20171026 13:27:40.264" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:39.643" endtime="20171026 13:27:40.264" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:39.642" endtime="20171026 13:27:40.264" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:40.265">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:27:40.264" endtime="20171026 13:27:40.265" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:40.267">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:40.266" endtime="20171026 13:27:40.267" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:40.268">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:40.268" endtime="20171026 13:27:40.268" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:40.267" endtime="20171026 13:27:40.268" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:40.266" endtime="20171026 13:27:40.268" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:40.265" endtime="20171026 13:27:40.268" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:40.534">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:27:40.535">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:40.269" endtime="20171026 13:27:40.535" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:40.537">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:40.536" endtime="20171026 13:27:40.537" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:40.538">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:40.537" endtime="20171026 13:27:40.538" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:40.537" endtime="20171026 13:27:40.538" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:40.536" endtime="20171026 13:27:40.538" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:40.535" endtime="20171026 13:27:40.538" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:27:40.538">Delete All Sessions</msg>
<status starttime="20171026 13:27:40.538" endtime="20171026 13:27:40.539" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:40.539">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:39.642" endtime="20171026 13:27:40.539" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:40.539">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:40.539" endtime="20171026 13:27:40.540" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:40.540">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:27:40.540">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:27:40.540">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:27:40.540" endtime="20171026 13:27:40.540" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:40.541">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:27:39.641" endtime="20171026 13:27:40.541" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:40.541">${power_state} = On</msg>
<status starttime="20171026 13:27:39.640" endtime="20171026 13:27:40.541" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:27:40.541" endtime="20171026 13:27:40.541" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:39.640" endtime="20171026 13:27:40.542" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:40.545">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:27:40.545" endtime="20171026 13:27:40.546" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:40.547">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:27:40.546" endtime="20171026 13:27:40.547" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:40.547">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:27:40.547" endtime="20171026 13:27:40.548" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:40.548">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:27:40.548" endtime="20171026 13:27:40.548" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:41.498">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:27:40.549" endtime="20171026 13:27:41.499" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:41.499">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:27:41.499">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:40.548" endtime="20171026 13:27:41.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:41.500">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:41.499" endtime="20171026 13:27:41.500" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:41.500">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:41.500" endtime="20171026 13:27:41.500" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:40.544" endtime="20171026 13:27:41.501" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:40.544" endtime="20171026 13:27:41.501" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:40.543" endtime="20171026 13:27:41.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:41.501">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:27:41.501" endtime="20171026 13:27:41.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:41.504">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:41.503" endtime="20171026 13:27:41.504" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:41.504">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:41.504" endtime="20171026 13:27:41.505" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:41.504" endtime="20171026 13:27:41.505" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:41.502" endtime="20171026 13:27:41.505" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:41.502" endtime="20171026 13:27:41.505" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:42.369">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:27:42.369">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:41.505" endtime="20171026 13:27:42.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:42.371">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:42.371" endtime="20171026 13:27:42.371" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:42.372">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:42.372" endtime="20171026 13:27:42.372" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:42.371" endtime="20171026 13:27:42.372" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:42.370" endtime="20171026 13:27:42.373" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:42.370" endtime="20171026 13:27:42.373" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:27:42.373">Delete All Sessions</msg>
<status starttime="20171026 13:27:42.373" endtime="20171026 13:27:42.373" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:42.373">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:40.543" endtime="20171026 13:27:42.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:42.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:42.374" endtime="20171026 13:27:42.374" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:42.375">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:27:42.375">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:27:42.375">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:27:42.374" endtime="20171026 13:27:42.375" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:42.375">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:27:40.542" endtime="20171026 13:27:42.375" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:42.375">${host_state} = Running</msg>
<status starttime="20171026 13:27:40.542" endtime="20171026 13:27:42.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:27:42.376" endtime="20171026 13:27:42.376" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:42.381">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:27:42.380" endtime="20171026 13:27:42.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:42.382">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:27:42.381" endtime="20171026 13:27:42.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:42.382">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:27:42.382" endtime="20171026 13:27:42.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:42.383">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:27:42.383" endtime="20171026 13:27:42.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:43.092">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:27:42.384" endtime="20171026 13:27:43.092" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:43.092">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:27:43.092">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:42.383" endtime="20171026 13:27:43.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:43.093">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:43.093" endtime="20171026 13:27:43.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:43.094">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:43.094" endtime="20171026 13:27:43.094" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:42.380" endtime="20171026 13:27:43.094" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:42.379" endtime="20171026 13:27:43.094" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:42.379" endtime="20171026 13:27:43.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:43.095">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:27:43.095" endtime="20171026 13:27:43.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:43.097">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:27:43.097" endtime="20171026 13:27:43.097" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:43.098">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:27:43.098" endtime="20171026 13:27:43.098" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:43.097" endtime="20171026 13:27:43.098" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:43.096" endtime="20171026 13:27:43.098" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:43.095" endtime="20171026 13:27:43.099" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:43.362">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:27:43.363">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:43.099" endtime="20171026 13:27:43.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:43.364">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:43.364" endtime="20171026 13:27:43.365" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:43.366">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:43.365" endtime="20171026 13:27:43.366" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:43.365" endtime="20171026 13:27:43.366" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:43.363" endtime="20171026 13:27:43.366" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:43.363" endtime="20171026 13:27:43.366" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:27:43.366">Delete All Sessions</msg>
<status starttime="20171026 13:27:43.366" endtime="20171026 13:27:43.367" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:43.367">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:42.377" endtime="20171026 13:27:43.367" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:43.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:43.367" endtime="20171026 13:27:43.368" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:43.368">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:27:43.368">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:27:43.368">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:27:43.368" endtime="20171026 13:27:43.368" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:43.369">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:27:42.377" endtime="20171026 13:27:43.369" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:43.369">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:27:42.376" endtime="20171026 13:27:43.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:43.369">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:27:43.370">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:27:43.369" endtime="20171026 13:27:43.370" status="FAIL"></status>
</kw>
<status starttime="20171026 13:27:42.376" endtime="20171026 13:27:43.370" status="FAIL"></status>
</kw>
<status starttime="20171026 13:27:39.639" endtime="20171026 13:27:43.370" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:53.375">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:27:53.375" endtime="20171026 13:27:53.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:53.376">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:27:53.376" endtime="20171026 13:27:53.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:53.377">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:27:53.377" endtime="20171026 13:27:53.377" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:53.378">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:27:53.377" endtime="20171026 13:27:53.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:53.848">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:27:53.378" endtime="20171026 13:27:53.848" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:53.848">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:27:53.848">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:53.378" endtime="20171026 13:27:53.848" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:53.849">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:53.849" endtime="20171026 13:27:53.849" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:53.850">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:53.849" endtime="20171026 13:27:53.850" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:53.374" endtime="20171026 13:27:53.850" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:53.374" endtime="20171026 13:27:53.850" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:53.373" endtime="20171026 13:27:53.850" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:53.851">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:27:53.850" endtime="20171026 13:27:53.851" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:53.854">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:53.853" endtime="20171026 13:27:53.854" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:53.855">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:53.855" endtime="20171026 13:27:53.855" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:53.854" endtime="20171026 13:27:53.855" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:53.852" endtime="20171026 13:27:53.855" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:53.851" endtime="20171026 13:27:53.855" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.009">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:27:54.010">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:53.856" endtime="20171026 13:27:54.010" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.011">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:54.011" endtime="20171026 13:27:54.012" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:54.012">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:54.012" endtime="20171026 13:27:54.013" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.012" endtime="20171026 13:27:54.013" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.010" endtime="20171026 13:27:54.013" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.010" endtime="20171026 13:27:54.013" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:27:54.013">Delete All Sessions</msg>
<status starttime="20171026 13:27:54.013" endtime="20171026 13:27:54.013" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:54.014">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:53.372" endtime="20171026 13:27:54.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:54.014">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:54.014" endtime="20171026 13:27:54.014" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.015">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:27:54.015">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:27:54.015">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:27:54.015" endtime="20171026 13:27:54.015" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:54.015">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:27:53.372" endtime="20171026 13:27:54.015" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:54.016">${power_state} = On</msg>
<status starttime="20171026 13:27:53.371" endtime="20171026 13:27:54.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:27:54.016" endtime="20171026 13:27:54.016" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:53.371" endtime="20171026 13:27:54.017" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:54.020">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:27:54.020" endtime="20171026 13:27:54.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.021">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:27:54.021" endtime="20171026 13:27:54.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.022">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:27:54.022" endtime="20171026 13:27:54.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.023">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:27:54.022" endtime="20171026 13:27:54.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:54.360">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:27:54.024" endtime="20171026 13:27:54.361" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:54.361">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:27:54.361">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:54.023" endtime="20171026 13:27:54.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:54.361">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:54.361" endtime="20171026 13:27:54.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:54.362">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:54.362" endtime="20171026 13:27:54.362" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.019" endtime="20171026 13:27:54.362" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.019" endtime="20171026 13:27:54.362" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.018" endtime="20171026 13:27:54.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.363">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:27:54.363" endtime="20171026 13:27:54.363" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.365">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:54.365" endtime="20171026 13:27:54.365" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:54.366">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:27:54.366" endtime="20171026 13:27:54.366" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.365" endtime="20171026 13:27:54.367" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.364" endtime="20171026 13:27:54.367" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.364" endtime="20171026 13:27:54.367" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.581">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:27:54.581">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:54.367" endtime="20171026 13:27:54.581" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.583">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:54.583" endtime="20171026 13:27:54.583" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:54.584">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:54.584" endtime="20171026 13:27:54.584" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.583" endtime="20171026 13:27:54.584" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.582" endtime="20171026 13:27:54.584" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.581" endtime="20171026 13:27:54.584" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:27:54.585">Delete All Sessions</msg>
<status starttime="20171026 13:27:54.585" endtime="20171026 13:27:54.585" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:54.585">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:54.018" endtime="20171026 13:27:54.585" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:54.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:54.585" endtime="20171026 13:27:54.586" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.586">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:27:54.586">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:27:54.587">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:27:54.586" endtime="20171026 13:27:54.587" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:54.587">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:27:54.017" endtime="20171026 13:27:54.587" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:54.587">${host_state} = Running</msg>
<status starttime="20171026 13:27:54.017" endtime="20171026 13:27:54.587" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:27:54.588" endtime="20171026 13:27:54.588" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:54.592">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:27:54.592" endtime="20171026 13:27:54.593" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.593">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:27:54.593" endtime="20171026 13:27:54.593" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.594">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:27:54.593" endtime="20171026 13:27:54.594" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.594">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:27:54.594" endtime="20171026 13:27:54.595" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:54.939">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:27:54.595" endtime="20171026 13:27:54.939" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:54.939">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:27:54.939">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:54.595" endtime="20171026 13:27:54.939" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:54.940">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:54.939" endtime="20171026 13:27:54.940" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:54.940">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:54.940" endtime="20171026 13:27:54.941" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.591" endtime="20171026 13:27:54.941" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.591" endtime="20171026 13:27:54.941" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.590" endtime="20171026 13:27:54.941" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.941">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:27:54.941" endtime="20171026 13:27:54.941" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:54.944">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:27:54.943" endtime="20171026 13:27:54.944" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:54.945">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:27:54.944" endtime="20171026 13:27:54.945" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.944" endtime="20171026 13:27:54.945" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.942" endtime="20171026 13:27:54.945" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:54.942" endtime="20171026 13:27:54.945" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:55.092">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:27:55.092">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:54.945" endtime="20171026 13:27:55.092" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:55.094">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:55.094" endtime="20171026 13:27:55.094" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:55.095">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:27:55.095" endtime="20171026 13:27:55.095" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:55.094" endtime="20171026 13:27:55.095" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:55.093" endtime="20171026 13:27:55.095" status="PASS"></status>
</kw>
<status starttime="20171026 13:27:55.093" endtime="20171026 13:27:55.095" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:27:55.096">Delete All Sessions</msg>
<status starttime="20171026 13:27:55.096" endtime="20171026 13:27:55.096" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:55.096">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:27:54.589" endtime="20171026 13:27:55.096" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:55.097">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:27:55.097" endtime="20171026 13:27:55.097" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:27:55.097">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:27:55.098">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:27:55.098">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:27:55.097" endtime="20171026 13:27:55.098" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:55.098">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:27:54.589" endtime="20171026 13:27:55.098" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:27:55.098">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:27:54.588" endtime="20171026 13:27:55.098" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:27:55.099">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:27:55.099">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:27:55.099" endtime="20171026 13:27:55.099" status="FAIL"></status>
</kw>
<status starttime="20171026 13:27:54.588" endtime="20171026 13:27:55.099" status="FAIL"></status>
</kw>
<status starttime="20171026 13:27:53.370" endtime="20171026 13:27:55.099" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:05.105">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:05.104" endtime="20171026 13:28:05.105" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:05.106">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:05.105" endtime="20171026 13:28:05.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:05.106">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:05.106" endtime="20171026 13:28:05.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:05.107">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:05.107" endtime="20171026 13:28:05.107" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:05.471">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:05.108" endtime="20171026 13:28:05.472" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:05.472">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:28:05.472">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:05.107" endtime="20171026 13:28:05.472" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:05.473">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:05.472" endtime="20171026 13:28:05.473" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:05.473">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:05.473" endtime="20171026 13:28:05.473" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.104" endtime="20171026 13:28:05.473" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.103" endtime="20171026 13:28:05.474" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.103" endtime="20171026 13:28:05.474" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:05.474">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:28:05.474" endtime="20171026 13:28:05.474" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:05.477">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:05.476" endtime="20171026 13:28:05.477" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:05.478">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:05.477" endtime="20171026 13:28:05.478" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.477" endtime="20171026 13:28:05.478" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.475" endtime="20171026 13:28:05.478" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.475" endtime="20171026 13:28:05.478" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:05.650">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:28:05.650">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:05.478" endtime="20171026 13:28:05.650" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:05.652">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:05.651" endtime="20171026 13:28:05.652" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:05.653">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:05.653" endtime="20171026 13:28:05.653" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.652" endtime="20171026 13:28:05.653" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.651" endtime="20171026 13:28:05.653" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.650" endtime="20171026 13:28:05.653" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:28:05.654">Delete All Sessions</msg>
<status starttime="20171026 13:28:05.653" endtime="20171026 13:28:05.654" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:05.654">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:05.102" endtime="20171026 13:28:05.654" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:05.654">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:05.654" endtime="20171026 13:28:05.655" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:05.655">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:28:05.655">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:28:05.655">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:28:05.655" endtime="20171026 13:28:05.655" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:05.656">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:28:05.101" endtime="20171026 13:28:05.656" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:05.656">${power_state} = On</msg>
<status starttime="20171026 13:28:05.101" endtime="20171026 13:28:05.656" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:28:05.656" endtime="20171026 13:28:05.657" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.101" endtime="20171026 13:28:05.657" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:05.660">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:05.660" endtime="20171026 13:28:05.664" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:05.665">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:05.664" endtime="20171026 13:28:05.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:05.665">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:05.665" endtime="20171026 13:28:05.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:05.666">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:05.666" endtime="20171026 13:28:05.666" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:05.994">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:05.667" endtime="20171026 13:28:05.995" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:05.995">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:28:05.995">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:05.666" endtime="20171026 13:28:05.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:05.996">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:05.995" endtime="20171026 13:28:05.996" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:05.996">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:05.996" endtime="20171026 13:28:05.996" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.660" endtime="20171026 13:28:05.996" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.659" endtime="20171026 13:28:05.997" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.659" endtime="20171026 13:28:05.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:05.997">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:28:05.997" endtime="20171026 13:28:05.997" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:06.000">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:05.999" endtime="20171026 13:28:06.000" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:06.001">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:06.000" endtime="20171026 13:28:06.001" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:06.000" endtime="20171026 13:28:06.001" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.998" endtime="20171026 13:28:06.001" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:05.998" endtime="20171026 13:28:06.001" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:06.128">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:28:06.128">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:06.001" endtime="20171026 13:28:06.128" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:06.130">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:06.130" endtime="20171026 13:28:06.130" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:06.131">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:06.131" endtime="20171026 13:28:06.131" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:06.130" endtime="20171026 13:28:06.131" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:06.129" endtime="20171026 13:28:06.131" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:06.129" endtime="20171026 13:28:06.131" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:28:06.132">Delete All Sessions</msg>
<status starttime="20171026 13:28:06.132" endtime="20171026 13:28:06.132" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:06.132">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:05.658" endtime="20171026 13:28:06.132" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:06.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:06.132" endtime="20171026 13:28:06.133" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:06.133">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:28:06.134">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:28:06.134">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:28:06.133" endtime="20171026 13:28:06.134" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:06.134">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:28:05.657" endtime="20171026 13:28:06.134" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:06.134">${host_state} = Running</msg>
<status starttime="20171026 13:28:05.657" endtime="20171026 13:28:06.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:28:06.135" endtime="20171026 13:28:06.135" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:06.139">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:06.139" endtime="20171026 13:28:06.140" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:06.140">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:06.140" endtime="20171026 13:28:06.140" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:06.141">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:06.140" endtime="20171026 13:28:06.141" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:06.141">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:06.141" endtime="20171026 13:28:06.142" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:06.457">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:06.142" endtime="20171026 13:28:06.457" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:06.457">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:28:06.458">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:06.142" endtime="20171026 13:28:06.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:06.458">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:06.458" endtime="20171026 13:28:06.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:06.459">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:06.459" endtime="20171026 13:28:06.459" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:06.138" endtime="20171026 13:28:06.459" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:06.138" endtime="20171026 13:28:06.459" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:06.137" endtime="20171026 13:28:06.459" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:06.460">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:28:06.460" endtime="20171026 13:28:06.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:06.462">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:28:06.462" endtime="20171026 13:28:06.462" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:06.463">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:28:06.463" endtime="20171026 13:28:06.464" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:06.463" endtime="20171026 13:28:06.464" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:06.461" endtime="20171026 13:28:06.464" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:06.460" endtime="20171026 13:28:06.464" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:06.600">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:28:06.600">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:06.464" endtime="20171026 13:28:06.600" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:06.602">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:06.601" endtime="20171026 13:28:06.602" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:06.602">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:06.602" endtime="20171026 13:28:06.603" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:06.602" endtime="20171026 13:28:06.603" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:06.601" endtime="20171026 13:28:06.603" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:06.600" endtime="20171026 13:28:06.603" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:28:06.603">Delete All Sessions</msg>
<status starttime="20171026 13:28:06.603" endtime="20171026 13:28:06.603" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:06.604">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:06.137" endtime="20171026 13:28:06.604" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:06.604">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:06.604" endtime="20171026 13:28:06.604" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:06.605">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:28:06.605">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:28:06.605">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:28:06.605" endtime="20171026 13:28:06.605" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:06.605">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:28:06.136" endtime="20171026 13:28:06.605" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:06.606">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:28:06.135" endtime="20171026 13:28:06.606" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:06.606">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:28:06.606">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:28:06.606" endtime="20171026 13:28:06.606" status="FAIL"></status>
</kw>
<status starttime="20171026 13:28:06.135" endtime="20171026 13:28:06.607" status="FAIL"></status>
</kw>
<status starttime="20171026 13:28:05.100" endtime="20171026 13:28:06.607" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:16.612">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:16.612" endtime="20171026 13:28:16.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:16.613">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:16.613" endtime="20171026 13:28:16.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:16.614">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:16.613" endtime="20171026 13:28:16.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:16.614">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:16.614" endtime="20171026 13:28:16.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:17.059">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:16.615" endtime="20171026 13:28:17.059" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:17.059">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:28:17.059">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:16.615" endtime="20171026 13:28:17.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:17.060">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:17.059" endtime="20171026 13:28:17.060" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:17.060">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:17.060" endtime="20171026 13:28:17.061" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:16.611" endtime="20171026 13:28:17.061" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:16.611" endtime="20171026 13:28:17.061" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:16.610" endtime="20171026 13:28:17.061" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.061">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:28:17.061" endtime="20171026 13:28:17.061" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.064">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:17.063" endtime="20171026 13:28:17.064" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:17.065">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:17.064" endtime="20171026 13:28:17.065" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.064" endtime="20171026 13:28:17.065" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.062" endtime="20171026 13:28:17.065" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.062" endtime="20171026 13:28:17.065" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.210">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:28:17.210">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:17.065" endtime="20171026 13:28:17.210" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.212">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:17.211" endtime="20171026 13:28:17.212" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:17.213">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:17.213" endtime="20171026 13:28:17.213" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.212" endtime="20171026 13:28:17.213" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.211" endtime="20171026 13:28:17.213" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.210" endtime="20171026 13:28:17.213" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:28:17.214">Delete All Sessions</msg>
<status starttime="20171026 13:28:17.213" endtime="20171026 13:28:17.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:17.214">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:16.609" endtime="20171026 13:28:17.214" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:17.215">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:17.214" endtime="20171026 13:28:17.215" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.215">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:28:17.215">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:28:17.215">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:28:17.215" endtime="20171026 13:28:17.215" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:17.216">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:28:16.609" endtime="20171026 13:28:17.216" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:17.216">${power_state} = On</msg>
<status starttime="20171026 13:28:16.608" endtime="20171026 13:28:17.216" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:28:17.216" endtime="20171026 13:28:17.217" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:16.608" endtime="20171026 13:28:17.217" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:17.220">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:17.220" endtime="20171026 13:28:17.221" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.222">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:17.221" endtime="20171026 13:28:17.222" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.222">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:17.222" endtime="20171026 13:28:17.223" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.223">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:17.223" endtime="20171026 13:28:17.223" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:17.674">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:17.224" endtime="20171026 13:28:17.674" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:17.674">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:28:17.674">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:17.223" endtime="20171026 13:28:17.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:17.675">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:17.675" endtime="20171026 13:28:17.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:17.676">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:17.675" endtime="20171026 13:28:17.676" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.219" endtime="20171026 13:28:17.676" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.219" endtime="20171026 13:28:17.676" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.218" endtime="20171026 13:28:17.676" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.677">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:28:17.677" endtime="20171026 13:28:17.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.679">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:17.678" endtime="20171026 13:28:17.679" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:17.680">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:17.680" endtime="20171026 13:28:17.680" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.679" endtime="20171026 13:28:17.680" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.678" endtime="20171026 13:28:17.680" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.677" endtime="20171026 13:28:17.680" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.890">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:28:17.890">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:17.681" endtime="20171026 13:28:17.890" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.892">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:17.892" endtime="20171026 13:28:17.892" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:17.893">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:17.893" endtime="20171026 13:28:17.893" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.892" endtime="20171026 13:28:17.893" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.891" endtime="20171026 13:28:17.893" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.891" endtime="20171026 13:28:17.893" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:28:17.894">Delete All Sessions</msg>
<status starttime="20171026 13:28:17.894" endtime="20171026 13:28:17.894" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:17.894">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:17.218" endtime="20171026 13:28:17.894" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:17.895">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:17.894" endtime="20171026 13:28:17.895" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.895">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:28:17.895">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:28:17.896">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:28:17.895" endtime="20171026 13:28:17.896" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:17.896">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:28:17.217" endtime="20171026 13:28:17.896" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:17.896">${host_state} = Running</msg>
<status starttime="20171026 13:28:17.217" endtime="20171026 13:28:17.896" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:28:17.896" endtime="20171026 13:28:17.897" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:17.901">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:17.901" endtime="20171026 13:28:17.902" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.902">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:17.902" endtime="20171026 13:28:17.902" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.903">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:17.903" endtime="20171026 13:28:17.903" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:17.904">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:17.903" endtime="20171026 13:28:17.904" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:18.386">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:17.904" endtime="20171026 13:28:18.386" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:18.386">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:28:18.386">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:17.904" endtime="20171026 13:28:18.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:18.387">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:18.387" endtime="20171026 13:28:18.387" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:18.388">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:18.388" endtime="20171026 13:28:18.388" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.900" endtime="20171026 13:28:18.388" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.900" endtime="20171026 13:28:18.388" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:17.899" endtime="20171026 13:28:18.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:18.389">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:28:18.389" endtime="20171026 13:28:18.389" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:18.392">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:28:18.391" endtime="20171026 13:28:18.392" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:18.393">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:28:18.393" endtime="20171026 13:28:18.394" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:18.392" endtime="20171026 13:28:18.394" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:18.390" endtime="20171026 13:28:18.394" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:18.389" endtime="20171026 13:28:18.394" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:18.553">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:28:18.553">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:18.394" endtime="20171026 13:28:18.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:18.555">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:18.554" endtime="20171026 13:28:18.555" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:18.556">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:18.555" endtime="20171026 13:28:18.556" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:18.555" endtime="20171026 13:28:18.556" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:18.554" endtime="20171026 13:28:18.556" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:18.553" endtime="20171026 13:28:18.556" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:28:18.556">Delete All Sessions</msg>
<status starttime="20171026 13:28:18.556" endtime="20171026 13:28:18.557" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:18.557">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:17.898" endtime="20171026 13:28:18.557" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:18.557">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:18.557" endtime="20171026 13:28:18.558" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:18.558">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:28:18.558">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:28:18.558">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:28:18.558" endtime="20171026 13:28:18.558" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:18.559">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:28:17.898" endtime="20171026 13:28:18.559" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:18.559">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:28:17.897" endtime="20171026 13:28:18.559" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:18.559">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:28:18.560">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:28:18.559" endtime="20171026 13:28:18.560" status="FAIL"></status>
</kw>
<status starttime="20171026 13:28:17.897" endtime="20171026 13:28:18.560" status="FAIL"></status>
</kw>
<status starttime="20171026 13:28:16.607" endtime="20171026 13:28:18.560" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:28.565">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:28.565" endtime="20171026 13:28:28.566" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:28.566">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:28.566" endtime="20171026 13:28:28.566" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:28.567">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:28.567" endtime="20171026 13:28:28.567" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:28.568">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:28.567" endtime="20171026 13:28:28.568" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:28.941">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:28.569" endtime="20171026 13:28:28.941" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:28.941">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:28:28.941">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:28.568" endtime="20171026 13:28:28.941" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:28.942">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:28.942" endtime="20171026 13:28:28.942" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:28.943">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:28.942" endtime="20171026 13:28:28.943" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:28.564" endtime="20171026 13:28:28.943" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:28.564" endtime="20171026 13:28:28.943" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:28.563" endtime="20171026 13:28:28.943" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:28.944">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:28:28.943" endtime="20171026 13:28:28.944" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:28.947">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:28.946" endtime="20171026 13:28:28.947" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:28.948">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:28.948" endtime="20171026 13:28:28.948" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:28.947" endtime="20171026 13:28:28.948" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:28.945" endtime="20171026 13:28:28.948" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:28.944" endtime="20171026 13:28:28.949" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:29.066">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:28:29.066">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:28.949" endtime="20171026 13:28:29.067" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:29.068">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:29.068" endtime="20171026 13:28:29.068" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:29.069">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:29.069" endtime="20171026 13:28:29.069" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.069" endtime="20171026 13:28:29.070" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.067" endtime="20171026 13:28:29.070" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.067" endtime="20171026 13:28:29.070" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:28:29.070">Delete All Sessions</msg>
<status starttime="20171026 13:28:29.070" endtime="20171026 13:28:29.070" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:29.070">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:28.563" endtime="20171026 13:28:29.070" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:29.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:29.071" endtime="20171026 13:28:29.071" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:29.072">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:28:29.072">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:28:29.072">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:28:29.072" endtime="20171026 13:28:29.072" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:29.072">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:28:28.562" endtime="20171026 13:28:29.072" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:29.073">${power_state} = On</msg>
<status starttime="20171026 13:28:28.562" endtime="20171026 13:28:29.073" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:28:29.073" endtime="20171026 13:28:29.073" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:28.561" endtime="20171026 13:28:29.073" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:29.077">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:29.077" endtime="20171026 13:28:29.078" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:29.078">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:29.078" endtime="20171026 13:28:29.078" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:29.079">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:29.079" endtime="20171026 13:28:29.079" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:29.080">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:29.079" endtime="20171026 13:28:29.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:29.509">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:29.080" endtime="20171026 13:28:29.509" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:29.509">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:28:29.509">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:29.080" endtime="20171026 13:28:29.509" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:29.510">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:29.510" endtime="20171026 13:28:29.510" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:29.511">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:29.511" endtime="20171026 13:28:29.511" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.076" endtime="20171026 13:28:29.511" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.076" endtime="20171026 13:28:29.512" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.075" endtime="20171026 13:28:29.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:29.513">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:28:29.512" endtime="20171026 13:28:29.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:29.516">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:29.515" endtime="20171026 13:28:29.516" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:29.517">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:29.516" endtime="20171026 13:28:29.517" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.516" endtime="20171026 13:28:29.517" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.514" endtime="20171026 13:28:29.517" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.513" endtime="20171026 13:28:29.517" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:29.640">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:28:29.640">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:29.518" endtime="20171026 13:28:29.640" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:29.642">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:29.641" endtime="20171026 13:28:29.642" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:29.643">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:29.642" endtime="20171026 13:28:29.643" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.642" endtime="20171026 13:28:29.643" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.641" endtime="20171026 13:28:29.643" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.640" endtime="20171026 13:28:29.643" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:28:29.643">Delete All Sessions</msg>
<status starttime="20171026 13:28:29.643" endtime="20171026 13:28:29.643" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:29.644">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:29.074" endtime="20171026 13:28:29.644" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:29.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:29.644" endtime="20171026 13:28:29.644" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:29.645">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:28:29.645">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:28:29.645">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:28:29.645" endtime="20171026 13:28:29.645" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:29.645">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:28:29.074" endtime="20171026 13:28:29.645" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:29.646">${host_state} = Running</msg>
<status starttime="20171026 13:28:29.073" endtime="20171026 13:28:29.646" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:28:29.646" endtime="20171026 13:28:29.646" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:29.652">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:29.651" endtime="20171026 13:28:29.652" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:29.653">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:29.652" endtime="20171026 13:28:29.653" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:29.653">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:29.653" endtime="20171026 13:28:29.653" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:29.654">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:29.654" endtime="20171026 13:28:29.654" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.031">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:29.655" endtime="20171026 13:28:30.032" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:30.032">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:28:30.032">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:29.654" endtime="20171026 13:28:30.032" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.033">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:30.032" endtime="20171026 13:28:30.033" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.033">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:30.033" endtime="20171026 13:28:30.033" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.650" endtime="20171026 13:28:30.033" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.650" endtime="20171026 13:28:30.034" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:29.649" endtime="20171026 13:28:30.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:30.034">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:28:30.034" endtime="20171026 13:28:30.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:30.036">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:28:30.036" endtime="20171026 13:28:30.037" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.037">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:28:30.037" endtime="20171026 13:28:30.038" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.037" endtime="20171026 13:28:30.038" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.035" endtime="20171026 13:28:30.038" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.035" endtime="20171026 13:28:30.038" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:30.182">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:28:30.182">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:30.038" endtime="20171026 13:28:30.182" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:30.184">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:30.183" endtime="20171026 13:28:30.184" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.185">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:30.185" endtime="20171026 13:28:30.185" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.184" endtime="20171026 13:28:30.185" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.183" endtime="20171026 13:28:30.185" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.182" endtime="20171026 13:28:30.185" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:28:30.186">Delete All Sessions</msg>
<status starttime="20171026 13:28:30.185" endtime="20171026 13:28:30.186" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:30.186">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:29.648" endtime="20171026 13:28:30.186" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.187">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:30.186" endtime="20171026 13:28:30.187" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:30.187">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:28:30.187">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:28:30.188">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:28:30.187" endtime="20171026 13:28:30.188" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:30.188">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:28:29.647" endtime="20171026 13:28:30.188" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:30.188">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:28:29.647" endtime="20171026 13:28:30.188" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.189">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:30.188" endtime="20171026 13:28:30.189" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.192">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:30.192" endtime="20171026 13:28:30.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:30.193">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:30.193" endtime="20171026 13:28:30.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:30.194">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:30.194" endtime="20171026 13:28:30.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:30.195">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:30.194" endtime="20171026 13:28:30.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.550">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:30.195" endtime="20171026 13:28:30.550" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:30.550">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:28:30.550">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:30.195" endtime="20171026 13:28:30.550" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.551">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:30.551" endtime="20171026 13:28:30.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.552">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:30.552" endtime="20171026 13:28:30.552" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.192" endtime="20171026 13:28:30.552" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.191" endtime="20171026 13:28:30.552" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.191" endtime="20171026 13:28:30.552" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:30.553">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:28:30.553" endtime="20171026 13:28:30.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:30.555">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:30.554" endtime="20171026 13:28:30.555" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.556">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:30.556" endtime="20171026 13:28:30.556" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.555" endtime="20171026 13:28:30.556" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.554" endtime="20171026 13:28:30.556" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.553" endtime="20171026 13:28:30.556" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:30.678">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:28:30.679">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:30.557" endtime="20171026 13:28:30.679" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:30.680">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:30.680" endtime="20171026 13:28:30.681" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.681">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:30.681" endtime="20171026 13:28:30.682" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.681" endtime="20171026 13:28:30.682" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.679" endtime="20171026 13:28:30.682" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:30.679" endtime="20171026 13:28:30.682" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:28:30.682">Delete All Sessions</msg>
<status starttime="20171026 13:28:30.682" endtime="20171026 13:28:30.682" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:30.682">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:30.190" endtime="20171026 13:28:30.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.683">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:30.683" endtime="20171026 13:28:30.683" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:30.684">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:28:30.684">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:28:30.684">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:28:30.683" endtime="20171026 13:28:30.684" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:30.684">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:28:30.189" endtime="20171026 13:28:30.684" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:30.684">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:28:30.189" endtime="20171026 13:28:30.685" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:30.685">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:28:30.685">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:28:30.685" endtime="20171026 13:28:30.685" status="FAIL"></status>
</kw>
<status starttime="20171026 13:28:29.646" endtime="20171026 13:28:30.685" status="FAIL"></status>
</kw>
<status starttime="20171026 13:28:28.560" endtime="20171026 13:28:30.686" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:40.695">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:40.694" endtime="20171026 13:28:40.695" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:40.696">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:40.695" endtime="20171026 13:28:40.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:40.696">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:40.696" endtime="20171026 13:28:40.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:40.697">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:40.697" endtime="20171026 13:28:40.697" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:42.509">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:40.698" endtime="20171026 13:28:42.509" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:42.509">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:28:42.509">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:40.697" endtime="20171026 13:28:42.509" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:42.510">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:42.510" endtime="20171026 13:28:42.510" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:42.511">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:42.510" endtime="20171026 13:28:42.511" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:40.690" endtime="20171026 13:28:42.511" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:40.690" endtime="20171026 13:28:42.511" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:40.689" endtime="20171026 13:28:42.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:42.512">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:28:42.512" endtime="20171026 13:28:42.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:42.514">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:42.513" endtime="20171026 13:28:42.514" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:42.515">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:42.515" endtime="20171026 13:28:42.515" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:42.514" endtime="20171026 13:28:42.515" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:42.513" endtime="20171026 13:28:42.515" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:42.512" endtime="20171026 13:28:42.515" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:44.253">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:28:44.253">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:42.516" endtime="20171026 13:28:44.253" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:44.255">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:44.255" endtime="20171026 13:28:44.255" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:44.257">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:44.256" endtime="20171026 13:28:44.257" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:44.255" endtime="20171026 13:28:44.257" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:44.254" endtime="20171026 13:28:44.257" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:44.254" endtime="20171026 13:28:44.257" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:28:44.257">Delete All Sessions</msg>
<status starttime="20171026 13:28:44.257" endtime="20171026 13:28:44.258" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:44.258">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:40.689" endtime="20171026 13:28:44.258" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:44.258">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:44.258" endtime="20171026 13:28:44.259" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:44.259">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:28:44.259">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:28:44.260">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:28:44.259" endtime="20171026 13:28:44.260" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:44.260">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:28:40.688" endtime="20171026 13:28:44.260" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:44.260">${power_state} = On</msg>
<status starttime="20171026 13:28:40.687" endtime="20171026 13:28:44.260" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:28:44.261" endtime="20171026 13:28:44.261" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:40.687" endtime="20171026 13:28:44.261" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:44.265">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:44.264" endtime="20171026 13:28:44.265" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:44.266">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:44.265" endtime="20171026 13:28:44.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:44.266">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:44.266" endtime="20171026 13:28:44.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:44.267">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:44.267" endtime="20171026 13:28:44.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:45.266">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:44.268" endtime="20171026 13:28:45.266" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:45.266">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:28:45.266">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:44.267" endtime="20171026 13:28:45.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:45.267">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:45.267" endtime="20171026 13:28:45.267" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:45.268">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:45.268" endtime="20171026 13:28:45.268" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:44.264" endtime="20171026 13:28:45.268" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:44.263" endtime="20171026 13:28:45.268" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:44.263" endtime="20171026 13:28:45.268" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:45.269">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:28:45.269" endtime="20171026 13:28:45.269" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:45.274">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:45.273" endtime="20171026 13:28:45.274" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:45.276">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:45.275" endtime="20171026 13:28:45.276" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:45.275" endtime="20171026 13:28:45.276" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:45.270" endtime="20171026 13:28:45.276" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:45.269" endtime="20171026 13:28:45.276" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:45.965">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:28:45.965">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:45.277" endtime="20171026 13:28:45.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:45.967">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:45.966" endtime="20171026 13:28:45.967" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:45.968">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:45.968" endtime="20171026 13:28:45.968" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:45.967" endtime="20171026 13:28:45.968" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:45.966" endtime="20171026 13:28:45.968" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:45.965" endtime="20171026 13:28:45.968" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:28:45.969">Delete All Sessions</msg>
<status starttime="20171026 13:28:45.969" endtime="20171026 13:28:45.969" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:45.969">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:44.262" endtime="20171026 13:28:45.969" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:45.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:45.969" endtime="20171026 13:28:45.970" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:45.970">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:28:45.970">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:28:45.971">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:28:45.970" endtime="20171026 13:28:45.971" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:45.971">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:28:44.262" endtime="20171026 13:28:45.971" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:45.971">${host_state} = Running</msg>
<status starttime="20171026 13:28:44.261" endtime="20171026 13:28:45.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:28:45.972" endtime="20171026 13:28:45.972" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:45.976">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:45.976" endtime="20171026 13:28:45.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:45.977">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:45.977" endtime="20171026 13:28:45.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:45.978">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:45.977" endtime="20171026 13:28:45.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:45.979">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:45.978" endtime="20171026 13:28:45.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:46.737">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:45.980" endtime="20171026 13:28:46.737" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:46.737">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:28:46.737">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:45.979" endtime="20171026 13:28:46.737" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:46.738">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:46.738" endtime="20171026 13:28:46.738" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:46.739">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:46.738" endtime="20171026 13:28:46.739" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:45.975" endtime="20171026 13:28:46.739" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:45.975" endtime="20171026 13:28:46.739" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:45.974" endtime="20171026 13:28:46.739" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:46.740">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:28:46.739" endtime="20171026 13:28:46.740" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:46.742">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:28:46.741" endtime="20171026 13:28:46.742" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:46.744">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:28:46.743" endtime="20171026 13:28:46.744" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:46.743" endtime="20171026 13:28:46.744" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:46.741" endtime="20171026 13:28:46.744" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:46.740" endtime="20171026 13:28:46.744" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:47.014">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:28:47.015">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:46.745" endtime="20171026 13:28:47.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:47.017">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:47.016" endtime="20171026 13:28:47.017" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:47.018">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:47.018" endtime="20171026 13:28:47.018" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:47.017" endtime="20171026 13:28:47.018" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:47.016" endtime="20171026 13:28:47.018" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:47.015" endtime="20171026 13:28:47.018" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:28:47.019">Delete All Sessions</msg>
<status starttime="20171026 13:28:47.019" endtime="20171026 13:28:47.019" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:47.019">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:45.973" endtime="20171026 13:28:47.019" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:47.020">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:47.019" endtime="20171026 13:28:47.020" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:47.020">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:28:47.020">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:28:47.020">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:28:47.020" endtime="20171026 13:28:47.021" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:47.021">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:28:45.973" endtime="20171026 13:28:47.021" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:47.021">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:28:45.972" endtime="20171026 13:28:47.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:47.022">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:47.021" endtime="20171026 13:28:47.022" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:47.026">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:47.025" endtime="20171026 13:28:47.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:47.027">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:47.026" endtime="20171026 13:28:47.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:47.027">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:47.027" endtime="20171026 13:28:47.027" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:47.028">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:47.028" endtime="20171026 13:28:47.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:47.453">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:47.029" endtime="20171026 13:28:47.454" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:47.454">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:28:47.454">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:47.028" endtime="20171026 13:28:47.454" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:47.455">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:47.454" endtime="20171026 13:28:47.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:47.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:47.455" endtime="20171026 13:28:47.455" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:47.024" endtime="20171026 13:28:47.455" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:47.024" endtime="20171026 13:28:47.456" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:47.023" endtime="20171026 13:28:47.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:47.456">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:28:47.456" endtime="20171026 13:28:47.456" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:47.459">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:47.458" endtime="20171026 13:28:47.459" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:47.460">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:28:47.459" endtime="20171026 13:28:47.460" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:47.459" endtime="20171026 13:28:47.460" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:47.457" endtime="20171026 13:28:47.460" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:47.457" endtime="20171026 13:28:47.461" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:47.983">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:28:47.984">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:47.461" endtime="20171026 13:28:47.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:47.987">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:47.986" endtime="20171026 13:28:47.987" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:47.989">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:28:47.988" endtime="20171026 13:28:47.989" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:47.987" endtime="20171026 13:28:47.989" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:47.985" endtime="20171026 13:28:47.989" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:47.984" endtime="20171026 13:28:47.989" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:28:47.989">Delete All Sessions</msg>
<status starttime="20171026 13:28:47.989" endtime="20171026 13:28:47.990" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:47.990">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:47.023" endtime="20171026 13:28:47.990" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:47.990">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:28:47.990" endtime="20171026 13:28:47.990" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:47.991">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:28:47.991">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:28:47.991">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:28:47.991" endtime="20171026 13:28:47.991" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:47.992">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:28:47.022" endtime="20171026 13:28:47.992" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:28:47.992">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:28:47.022" endtime="20171026 13:28:47.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:47.992">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:28:47.993">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:28:47.992" endtime="20171026 13:28:47.993" status="FAIL"></status>
</kw>
<status starttime="20171026 13:28:45.972" endtime="20171026 13:28:47.993" status="FAIL"></status>
</kw>
<status starttime="20171026 13:28:40.686" endtime="20171026 13:28:47.993" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:28:57.998">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:28:57.998" endtime="20171026 13:28:57.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:57.999">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:28:57.999" endtime="20171026 13:28:57.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:58.000">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:28:58.000" endtime="20171026 13:28:58.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:28:58.001">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:28:58.000" endtime="20171026 13:28:58.001" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:00.326">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:28:58.002" endtime="20171026 13:29:00.326" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:00.326">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:00.326">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:58.001" endtime="20171026 13:29:00.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:00.327">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:00.327" endtime="20171026 13:29:00.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:00.328">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:00.328" endtime="20171026 13:29:00.328" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:57.997" endtime="20171026 13:29:00.328" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:57.997" endtime="20171026 13:29:00.328" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:57.996" endtime="20171026 13:29:00.329" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:00.329">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:29:00.329" endtime="20171026 13:29:00.329" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:00.331">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:00.331" endtime="20171026 13:29:00.331" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:00.332">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:00.332" endtime="20171026 13:29:00.332" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:00.332" endtime="20171026 13:29:00.333" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:00.330" endtime="20171026 13:29:00.333" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:00.329" endtime="20171026 13:29:00.333" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:10.059">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:10.059">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:00.333" endtime="20171026 13:29:10.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:10.061">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:10.061" endtime="20171026 13:29:10.061" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:10.062">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:10.062" endtime="20171026 13:29:10.062" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:10.061" endtime="20171026 13:29:10.062" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:10.060" endtime="20171026 13:29:10.062" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:10.059" endtime="20171026 13:29:10.062" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:10.063">Delete All Sessions</msg>
<status starttime="20171026 13:29:10.063" endtime="20171026 13:29:10.063" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:10.063">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:28:57.996" endtime="20171026 13:29:10.063" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:10.064">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:10.064" endtime="20171026 13:29:10.064" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:10.065">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:10.065">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:10.065">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:10.064" endtime="20171026 13:29:10.065" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:10.065">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:28:57.995" endtime="20171026 13:29:10.065" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:10.065">${power_state} = On</msg>
<status starttime="20171026 13:28:57.995" endtime="20171026 13:29:10.065" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:29:10.066" endtime="20171026 13:29:10.066" status="PASS"></status>
</kw>
<status starttime="20171026 13:28:57.994" endtime="20171026 13:29:10.066" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:10.070">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:29:10.069" endtime="20171026 13:29:10.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:10.071">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:29:10.071" endtime="20171026 13:29:10.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:10.072">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:29:10.072" endtime="20171026 13:29:10.072" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:10.073">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:29:10.072" endtime="20171026 13:29:10.073" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:10.615">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:29:10.073" endtime="20171026 13:29:10.615" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:10.615">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:10.615">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:10.073" endtime="20171026 13:29:10.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:10.616">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:10.616" endtime="20171026 13:29:10.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:10.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:10.616" endtime="20171026 13:29:10.617" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:10.069" endtime="20171026 13:29:10.617" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:10.068" endtime="20171026 13:29:10.617" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:10.068" endtime="20171026 13:29:10.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:10.618">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:29:10.617" endtime="20171026 13:29:10.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:10.620">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:10.619" endtime="20171026 13:29:10.620" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:10.622">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:10.621" endtime="20171026 13:29:10.622" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:10.620" endtime="20171026 13:29:10.622" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:10.619" endtime="20171026 13:29:10.622" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:10.618" endtime="20171026 13:29:10.622" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:12.856">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:12.857">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:10.622" endtime="20171026 13:29:12.857" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:12.859">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:12.859" endtime="20171026 13:29:12.859" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:12.860">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:12.860" endtime="20171026 13:29:12.860" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:12.859" endtime="20171026 13:29:12.861" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:12.858" endtime="20171026 13:29:12.861" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:12.857" endtime="20171026 13:29:12.861" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:12.861">Delete All Sessions</msg>
<status starttime="20171026 13:29:12.861" endtime="20171026 13:29:12.861" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:12.861">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:10.067" endtime="20171026 13:29:12.861" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:12.862">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:12.862" endtime="20171026 13:29:12.862" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:12.863">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:12.863">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:12.863">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:12.862" endtime="20171026 13:29:12.863" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:12.863">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:29:10.067" endtime="20171026 13:29:12.863" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:12.864">${host_state} = Running</msg>
<status starttime="20171026 13:29:10.066" endtime="20171026 13:29:12.864" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:29:12.864" endtime="20171026 13:29:12.864" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:12.869">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:29:12.868" endtime="20171026 13:29:12.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:12.870">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:29:12.869" endtime="20171026 13:29:12.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:12.870">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:29:12.870" endtime="20171026 13:29:12.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:12.871">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:29:12.870" endtime="20171026 13:29:12.871" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:13.621">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:29:12.872" endtime="20171026 13:29:13.621" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:13.622">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:13.622">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:12.871" endtime="20171026 13:29:13.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:13.622">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:13.622" endtime="20171026 13:29:13.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:13.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:13.623" endtime="20171026 13:29:13.623" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:12.868" endtime="20171026 13:29:13.623" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:12.867" endtime="20171026 13:29:13.623" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:12.867" endtime="20171026 13:29:13.624" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:13.624">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:29:13.624" endtime="20171026 13:29:13.624" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:13.627">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:29:13.626" endtime="20171026 13:29:13.627" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:13.628">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:29:13.628" endtime="20171026 13:29:13.629" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:13.627" endtime="20171026 13:29:13.629" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:13.625" endtime="20171026 13:29:13.629" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:13.625" endtime="20171026 13:29:13.629" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:15.310">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:15.311">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:13.629" endtime="20171026 13:29:15.311" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:15.313">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:15.312" endtime="20171026 13:29:15.313" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:15.314">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:15.313" endtime="20171026 13:29:15.314" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:15.313" endtime="20171026 13:29:15.314" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:15.312" endtime="20171026 13:29:15.314" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:15.311" endtime="20171026 13:29:15.314" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:15.314">Delete All Sessions</msg>
<status starttime="20171026 13:29:15.314" endtime="20171026 13:29:15.314" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:15.315">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:12.866" endtime="20171026 13:29:15.315" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:15.315">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:15.315" endtime="20171026 13:29:15.315" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:15.316">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:15.316">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:15.316">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:15.316" endtime="20171026 13:29:15.316" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:15.316">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status starttime="20171026 13:29:12.865" endtime="20171026 13:29:15.316" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:15.317">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status starttime="20171026 13:29:12.865" endtime="20171026 13:29:15.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:15.317">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:29:15.317">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.PCIInit</msg>
<status starttime="20171026 13:29:15.317" endtime="20171026 13:29:15.318" status="FAIL"></status>
</kw>
<status starttime="20171026 13:29:12.864" endtime="20171026 13:29:15.318" status="FAIL"></status>
</kw>
<status starttime="20171026 13:28:57.994" endtime="20171026 13:29:15.318" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:25.323">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:29:25.323" endtime="20171026 13:29:25.324" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:25.324">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:29:25.324" endtime="20171026 13:29:25.324" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:25.325">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:29:25.325" endtime="20171026 13:29:25.325" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:25.326">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:29:25.325" endtime="20171026 13:29:25.326" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:25.924">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:29:25.327" endtime="20171026 13:29:25.924" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:25.924">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:25.924">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:25.326" endtime="20171026 13:29:25.924" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:25.925">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:25.925" endtime="20171026 13:29:25.925" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:25.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:25.925" endtime="20171026 13:29:25.926" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:25.322" endtime="20171026 13:29:25.926" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:25.322" endtime="20171026 13:29:25.926" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:25.321" endtime="20171026 13:29:25.926" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:25.927">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:29:25.926" endtime="20171026 13:29:25.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:25.929">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:25.928" endtime="20171026 13:29:25.929" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:25.930">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:25.930" endtime="20171026 13:29:25.930" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:25.929" endtime="20171026 13:29:25.930" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:25.927" endtime="20171026 13:29:25.930" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:25.927" endtime="20171026 13:29:25.930" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:27.125">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:27.125">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:25.930" endtime="20171026 13:29:27.125" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:27.127">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:27.127" endtime="20171026 13:29:27.127" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:27.128">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:27.128" endtime="20171026 13:29:27.128" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:27.127" endtime="20171026 13:29:27.129" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:27.126" endtime="20171026 13:29:27.129" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:27.126" endtime="20171026 13:29:27.129" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:27.129">Delete All Sessions</msg>
<status starttime="20171026 13:29:27.129" endtime="20171026 13:29:27.129" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:27.129">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:25.321" endtime="20171026 13:29:27.129" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:27.130">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:27.130" endtime="20171026 13:29:27.130" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:27.131">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:27.131">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:27.131">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:27.131" endtime="20171026 13:29:27.131" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:27.131">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:29:25.320" endtime="20171026 13:29:27.131" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:27.132">${power_state} = On</msg>
<status starttime="20171026 13:29:25.320" endtime="20171026 13:29:27.132" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:29:27.132" endtime="20171026 13:29:27.132" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:25.319" endtime="20171026 13:29:27.132" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:27.136">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:29:27.136" endtime="20171026 13:29:27.137" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:27.137">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:29:27.137" endtime="20171026 13:29:27.137" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:27.138">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:29:27.138" endtime="20171026 13:29:27.138" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:27.139">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:29:27.138" endtime="20171026 13:29:27.139" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:27.826">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:29:27.139" endtime="20171026 13:29:27.826" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:27.826">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:27.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:27.139" endtime="20171026 13:29:27.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:27.827">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:27.827" endtime="20171026 13:29:27.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:27.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:27.828" endtime="20171026 13:29:27.828" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:27.135" endtime="20171026 13:29:27.828" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:27.135" endtime="20171026 13:29:27.828" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:27.134" endtime="20171026 13:29:27.829" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:27.829">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:29:27.829" endtime="20171026 13:29:27.829" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:27.831">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:27.831" endtime="20171026 13:29:27.831" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:27.832">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:27.832" endtime="20171026 13:29:27.832" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:27.832" endtime="20171026 13:29:27.833" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:27.830" endtime="20171026 13:29:27.833" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:27.830" endtime="20171026 13:29:27.833" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:29.344">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:29.344">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:27.833" endtime="20171026 13:29:29.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:29.346">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:29.346" endtime="20171026 13:29:29.346" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:29.347">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:29.347" endtime="20171026 13:29:29.347" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:29.347" endtime="20171026 13:29:29.348" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:29.345" endtime="20171026 13:29:29.348" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:29.345" endtime="20171026 13:29:29.348" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:29.348">Delete All Sessions</msg>
<status starttime="20171026 13:29:29.348" endtime="20171026 13:29:29.348" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:29.348">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:27.133" endtime="20171026 13:29:29.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:29.349">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:29.349" endtime="20171026 13:29:29.349" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:29.350">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:29.350">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:29.350">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:29.350" endtime="20171026 13:29:29.350" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:29.351">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:29:27.133" endtime="20171026 13:29:29.351" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:29.351">${host_state} = Running</msg>
<status starttime="20171026 13:29:27.132" endtime="20171026 13:29:29.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:29:29.351" endtime="20171026 13:29:29.352" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:29.360">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:29:29.359" endtime="20171026 13:29:29.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:29.361">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:29:29.360" endtime="20171026 13:29:29.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:29.361">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:29:29.361" endtime="20171026 13:29:29.361" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:29.362">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:29:29.362" endtime="20171026 13:29:29.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:30.220">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:29:29.363" endtime="20171026 13:29:30.220" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:30.221">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:30.221">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:29.362" endtime="20171026 13:29:30.221" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:30.221">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:30.221" endtime="20171026 13:29:30.221" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:30.222">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:30.222" endtime="20171026 13:29:30.222" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:29.359" endtime="20171026 13:29:30.222" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:29.358" endtime="20171026 13:29:30.222" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:29.358" endtime="20171026 13:29:30.223" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:30.223">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:29:30.223" endtime="20171026 13:29:30.223" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:30.225">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:29:30.225" endtime="20171026 13:29:30.225" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:30.226">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:29:30.226" endtime="20171026 13:29:30.226" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:30.225" endtime="20171026 13:29:30.226" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:30.224" endtime="20171026 13:29:30.227" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:30.223" endtime="20171026 13:29:30.227" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:31.217">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:31.217">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:30.227" endtime="20171026 13:29:31.218" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:31.219">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:31.219" endtime="20171026 13:29:31.220" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:31.220">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:31.220" endtime="20171026 13:29:31.221" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:31.220" endtime="20171026 13:29:31.221" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:31.218" endtime="20171026 13:29:31.221" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:31.218" endtime="20171026 13:29:31.221" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:31.221">Delete All Sessions</msg>
<status starttime="20171026 13:29:31.221" endtime="20171026 13:29:31.221" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:31.222">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:29.357" endtime="20171026 13:29:31.222" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:31.222">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:31.222" endtime="20171026 13:29:31.222" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:31.223">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:31.223">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:31.223">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:31.223" endtime="20171026 13:29:31.223" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:31.223">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:29:29.353" endtime="20171026 13:29:31.223" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:31.224">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:29:29.352" endtime="20171026 13:29:31.224" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:31.224">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:31.224" endtime="20171026 13:29:31.224" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:31.228">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:29:31.228" endtime="20171026 13:29:31.228" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:31.229">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:29:31.229" endtime="20171026 13:29:31.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:31.229">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:29:31.229" endtime="20171026 13:29:31.230" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:31.230">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:29:31.230" endtime="20171026 13:29:31.230" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:31.905">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:29:31.231" endtime="20171026 13:29:31.905" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:31.905">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:31.905">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:31.231" endtime="20171026 13:29:31.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:31.906">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:31.906" endtime="20171026 13:29:31.906" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:31.907">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:31.907" endtime="20171026 13:29:31.907" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:31.227" endtime="20171026 13:29:31.907" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:31.227" endtime="20171026 13:29:31.907" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:31.226" endtime="20171026 13:29:31.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:31.908">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:29:31.908" endtime="20171026 13:29:31.908" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:31.911">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:31.910" endtime="20171026 13:29:31.911" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:31.912">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:31.912" endtime="20171026 13:29:31.912" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:31.911" endtime="20171026 13:29:31.912" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:31.909" endtime="20171026 13:29:31.913" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:31.908" endtime="20171026 13:29:31.913" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:32.721">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:32.721">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:31.913" endtime="20171026 13:29:32.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:32.723">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:32.723" endtime="20171026 13:29:32.724" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:32.724">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:32.724" endtime="20171026 13:29:32.725" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:32.724" endtime="20171026 13:29:32.725" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:32.722" endtime="20171026 13:29:32.725" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:32.722" endtime="20171026 13:29:32.725" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:32.725">Delete All Sessions</msg>
<status starttime="20171026 13:29:32.725" endtime="20171026 13:29:32.725" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:32.726">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:31.225" endtime="20171026 13:29:32.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:32.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:32.726" endtime="20171026 13:29:32.726" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:32.727">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:32.727">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:32.727">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:32.727" endtime="20171026 13:29:32.727" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:32.727">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:29:31.225" endtime="20171026 13:29:32.727" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:32.728">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:29:31.224" endtime="20171026 13:29:32.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:32.728">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:29:32.728">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:29:32.728" endtime="20171026 13:29:32.729" status="FAIL"></status>
</kw>
<status starttime="20171026 13:29:29.352" endtime="20171026 13:29:32.729" status="FAIL"></status>
</kw>
<status starttime="20171026 13:29:25.319" endtime="20171026 13:29:32.729" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:42.735">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:29:42.734" endtime="20171026 13:29:42.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:42.736">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:29:42.735" endtime="20171026 13:29:42.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:42.736">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:29:42.736" endtime="20171026 13:29:42.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:42.737">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:29:42.737" endtime="20171026 13:29:42.737" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:43.189">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:29:42.738" endtime="20171026 13:29:43.189" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:43.189">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:43.189">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:42.737" endtime="20171026 13:29:43.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:43.190">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:43.189" endtime="20171026 13:29:43.190" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:43.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:43.190" endtime="20171026 13:29:43.191" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:42.733" endtime="20171026 13:29:43.191" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:42.733" endtime="20171026 13:29:43.191" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:42.732" endtime="20171026 13:29:43.191" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.191">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:29:43.191" endtime="20171026 13:29:43.192" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.194">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:43.193" endtime="20171026 13:29:43.194" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:43.195">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:43.194" endtime="20171026 13:29:43.195" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.194" endtime="20171026 13:29:43.195" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.192" endtime="20171026 13:29:43.195" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.192" endtime="20171026 13:29:43.195" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.397">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:43.397">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:43.195" endtime="20171026 13:29:43.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.399">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:43.398" endtime="20171026 13:29:43.399" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:43.400">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:43.400" endtime="20171026 13:29:43.400" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.399" endtime="20171026 13:29:43.401" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.398" endtime="20171026 13:29:43.401" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.397" endtime="20171026 13:29:43.401" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:43.401">Delete All Sessions</msg>
<status starttime="20171026 13:29:43.401" endtime="20171026 13:29:43.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:43.401">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:42.731" endtime="20171026 13:29:43.401" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:43.402">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:43.402" endtime="20171026 13:29:43.402" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.403">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:43.403">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:43.403">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:43.402" endtime="20171026 13:29:43.403" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:43.403">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:29:42.731" endtime="20171026 13:29:43.403" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:43.403">${power_state} = On</msg>
<status starttime="20171026 13:29:42.730" endtime="20171026 13:29:43.404" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:29:43.404" endtime="20171026 13:29:43.404" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:42.730" endtime="20171026 13:29:43.404" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:43.408">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:29:43.407" endtime="20171026 13:29:43.408" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.409">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:29:43.408" endtime="20171026 13:29:43.409" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.410">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:29:43.409" endtime="20171026 13:29:43.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.410">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:29:43.410" endtime="20171026 13:29:43.410" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:43.820">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:29:43.411" endtime="20171026 13:29:43.820" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:43.820">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:43.820">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:43.411" endtime="20171026 13:29:43.820" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:43.821">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:43.821" endtime="20171026 13:29:43.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:43.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:43.822" endtime="20171026 13:29:43.822" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.407" endtime="20171026 13:29:43.822" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.406" endtime="20171026 13:29:43.822" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.406" endtime="20171026 13:29:43.822" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.823">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:29:43.823" endtime="20171026 13:29:43.823" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.825">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:43.824" endtime="20171026 13:29:43.826" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:43.826">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:43.826" endtime="20171026 13:29:43.827" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.826" endtime="20171026 13:29:43.827" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.824" endtime="20171026 13:29:43.827" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.823" endtime="20171026 13:29:43.827" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.953">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:43.954">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:43.827" endtime="20171026 13:29:43.954" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.956">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:43.955" endtime="20171026 13:29:43.956" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:43.957">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:43.956" endtime="20171026 13:29:43.957" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.956" endtime="20171026 13:29:43.957" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.955" endtime="20171026 13:29:43.957" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.954" endtime="20171026 13:29:43.957" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:43.958">Delete All Sessions</msg>
<status starttime="20171026 13:29:43.957" endtime="20171026 13:29:43.958" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:43.958">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:43.405" endtime="20171026 13:29:43.958" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:43.959">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:43.958" endtime="20171026 13:29:43.959" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.959">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:43.959">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:43.959">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:43.959" endtime="20171026 13:29:43.960" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:43.960">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:29:43.405" endtime="20171026 13:29:43.960" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:43.960">${host_state} = Running</msg>
<status starttime="20171026 13:29:43.404" endtime="20171026 13:29:43.960" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:29:43.960" endtime="20171026 13:29:43.961" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:43.965">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:29:43.964" endtime="20171026 13:29:43.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.966">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:29:43.965" endtime="20171026 13:29:43.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.966">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:29:43.966" endtime="20171026 13:29:43.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:43.967">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:29:43.967" endtime="20171026 13:29:43.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:44.302">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:29:43.968" endtime="20171026 13:29:44.303" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:44.303">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:44.303">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:43.967" endtime="20171026 13:29:44.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:44.304">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:44.303" endtime="20171026 13:29:44.304" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:44.304">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:44.304" endtime="20171026 13:29:44.304" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.964" endtime="20171026 13:29:44.304" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.963" endtime="20171026 13:29:44.305" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:43.963" endtime="20171026 13:29:44.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:44.305">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:29:44.305" endtime="20171026 13:29:44.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:44.307">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:29:44.307" endtime="20171026 13:29:44.308" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:44.308">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:29:44.308" endtime="20171026 13:29:44.309" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:44.308" endtime="20171026 13:29:44.309" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:44.306" endtime="20171026 13:29:44.309" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:44.306" endtime="20171026 13:29:44.309" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:44.436">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:44.436">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:44.309" endtime="20171026 13:29:44.436" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:44.438">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:44.437" endtime="20171026 13:29:44.438" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:44.439">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:44.438" endtime="20171026 13:29:44.439" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:44.438" endtime="20171026 13:29:44.439" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:44.437" endtime="20171026 13:29:44.439" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:44.436" endtime="20171026 13:29:44.439" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:44.439">Delete All Sessions</msg>
<status starttime="20171026 13:29:44.439" endtime="20171026 13:29:44.439" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:44.440">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:43.962" endtime="20171026 13:29:44.440" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:44.440">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:44.440" endtime="20171026 13:29:44.440" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:44.441">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:44.441">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:44.441">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:44.441" endtime="20171026 13:29:44.441" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:44.441">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:29:43.962" endtime="20171026 13:29:44.441" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:44.442">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:29:43.961" endtime="20171026 13:29:44.442" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:44.442">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:44.442" endtime="20171026 13:29:44.442" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:44.446">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:29:44.446" endtime="20171026 13:29:44.447" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:44.447">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:29:44.447" endtime="20171026 13:29:44.447" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:44.448">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:29:44.448" endtime="20171026 13:29:44.448" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:44.449">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:29:44.448" endtime="20171026 13:29:44.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:44.884">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:29:44.450" endtime="20171026 13:29:44.884" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:44.884">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:44.884">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:44.449" endtime="20171026 13:29:44.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:44.885">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:44.885" endtime="20171026 13:29:44.885" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:44.886">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:44.885" endtime="20171026 13:29:44.886" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:44.445" endtime="20171026 13:29:44.886" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:44.445" endtime="20171026 13:29:44.886" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:44.444" endtime="20171026 13:29:44.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:44.887">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:29:44.886" endtime="20171026 13:29:44.887" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:44.889">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:44.888" endtime="20171026 13:29:44.889" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:44.890">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:44.890" endtime="20171026 13:29:44.890" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:44.889" endtime="20171026 13:29:44.890" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:44.887" endtime="20171026 13:29:44.890" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:44.887" endtime="20171026 13:29:44.890" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:45.016">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:45.016">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:44.891" endtime="20171026 13:29:45.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:45.018">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:45.017" endtime="20171026 13:29:45.018" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:45.019">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:45.019" endtime="20171026 13:29:45.019" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:45.018" endtime="20171026 13:29:45.020" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:45.017" endtime="20171026 13:29:45.020" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:45.016" endtime="20171026 13:29:45.020" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:45.020">Delete All Sessions</msg>
<status starttime="20171026 13:29:45.020" endtime="20171026 13:29:45.020" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:45.020">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:44.443" endtime="20171026 13:29:45.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:45.021">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:45.021" endtime="20171026 13:29:45.021" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:45.022">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:45.022">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:45.022">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:45.021" endtime="20171026 13:29:45.022" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:45.022">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:29:44.443" endtime="20171026 13:29:45.022" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:45.022">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:29:44.442" endtime="20171026 13:29:45.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:45.023">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:29:45.023">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:29:45.023" endtime="20171026 13:29:45.023" status="FAIL"></status>
</kw>
<status starttime="20171026 13:29:43.961" endtime="20171026 13:29:45.023" status="FAIL"></status>
</kw>
<status starttime="20171026 13:29:42.729" endtime="20171026 13:29:45.024" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:55.029">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:29:55.028" endtime="20171026 13:29:55.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:55.030">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:29:55.030" endtime="20171026 13:29:55.030" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:55.031">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:29:55.030" endtime="20171026 13:29:55.031" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:55.031">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:29:55.031" endtime="20171026 13:29:55.031" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:55.471">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:29:55.032" endtime="20171026 13:29:55.472" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:55.472">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:55.472">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:55.032" endtime="20171026 13:29:55.472" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:55.473">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:55.472" endtime="20171026 13:29:55.473" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:55.473">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:55.473" endtime="20171026 13:29:55.473" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:55.028" endtime="20171026 13:29:55.474" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:55.027" endtime="20171026 13:29:55.474" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:55.027" endtime="20171026 13:29:55.474" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:55.474">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:29:55.474" endtime="20171026 13:29:55.474" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:55.476">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:55.476" endtime="20171026 13:29:55.476" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:55.477">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:55.477" endtime="20171026 13:29:55.477" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:55.477" endtime="20171026 13:29:55.478" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:55.475" endtime="20171026 13:29:55.478" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:55.475" endtime="20171026 13:29:55.478" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:55.576">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:55.577">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:55.478" endtime="20171026 13:29:55.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:55.578">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:55.578" endtime="20171026 13:29:55.578" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:55.579">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:55.579" endtime="20171026 13:29:55.579" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:55.579" endtime="20171026 13:29:55.580" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:55.577" endtime="20171026 13:29:55.580" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:55.577" endtime="20171026 13:29:55.580" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:55.580">Delete All Sessions</msg>
<status starttime="20171026 13:29:55.580" endtime="20171026 13:29:55.580" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:55.580">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:55.026" endtime="20171026 13:29:55.581" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:55.581">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:55.581" endtime="20171026 13:29:55.581" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:55.582">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:55.582">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:55.582">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:55.581" endtime="20171026 13:29:55.582" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:55.582">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:29:55.026" endtime="20171026 13:29:55.582" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:55.583">${power_state} = On</msg>
<status starttime="20171026 13:29:55.025" endtime="20171026 13:29:55.583" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:29:55.583" endtime="20171026 13:29:55.583" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:55.025" endtime="20171026 13:29:55.583" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:55.588">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:29:55.587" endtime="20171026 13:29:55.589" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:55.590">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:29:55.589" endtime="20171026 13:29:55.590" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:55.590">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:29:55.590" endtime="20171026 13:29:55.591" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:55.591">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:29:55.591" endtime="20171026 13:29:55.592" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:56.227">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:29:55.593" endtime="20171026 13:29:56.228" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:56.228">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:56.228">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:55.592" endtime="20171026 13:29:56.228" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:56.228">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:56.228" endtime="20171026 13:29:56.229" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:56.229">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:56.229" endtime="20171026 13:29:56.229" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:55.586" endtime="20171026 13:29:56.229" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:55.586" endtime="20171026 13:29:56.230" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:55.585" endtime="20171026 13:29:56.230" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:56.230">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:29:56.230" endtime="20171026 13:29:56.230" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:56.232">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:56.232" endtime="20171026 13:29:56.232" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:56.233">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:56.233" endtime="20171026 13:29:56.234" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:56.233" endtime="20171026 13:29:56.234" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:56.231" endtime="20171026 13:29:56.234" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:56.231" endtime="20171026 13:29:56.234" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:56.613">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:56.613">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:56.234" endtime="20171026 13:29:56.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:56.615">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:56.615" endtime="20171026 13:29:56.615" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:56.616">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:56.616" endtime="20171026 13:29:56.616" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:56.616" endtime="20171026 13:29:56.617" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:56.614" endtime="20171026 13:29:56.617" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:56.614" endtime="20171026 13:29:56.617" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:56.617">Delete All Sessions</msg>
<status starttime="20171026 13:29:56.617" endtime="20171026 13:29:56.617" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:56.617">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:55.584" endtime="20171026 13:29:56.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:56.618">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:56.618" endtime="20171026 13:29:56.618" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:56.619">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:56.619">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:56.619">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:56.618" endtime="20171026 13:29:56.619" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:56.619">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:29:55.584" endtime="20171026 13:29:56.619" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:56.620">${host_state} = Running</msg>
<status starttime="20171026 13:29:55.583" endtime="20171026 13:29:56.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:29:56.620" endtime="20171026 13:29:56.620" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:56.625">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:29:56.624" endtime="20171026 13:29:56.625" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:56.626">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:29:56.625" endtime="20171026 13:29:56.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:56.626">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:29:56.626" endtime="20171026 13:29:56.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:56.627">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:29:56.626" endtime="20171026 13:29:56.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:57.016">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:29:56.628" endtime="20171026 13:29:57.016" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:57.016">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:57.016">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:56.627" endtime="20171026 13:29:57.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:57.017">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:57.016" endtime="20171026 13:29:57.017" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:57.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:57.017" endtime="20171026 13:29:57.018" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:56.624" endtime="20171026 13:29:57.018" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:56.623" endtime="20171026 13:29:57.018" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:56.623" endtime="20171026 13:29:57.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:57.019">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:29:57.018" endtime="20171026 13:29:57.019" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:57.021">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:29:57.020" endtime="20171026 13:29:57.021" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:57.022">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:29:57.021" endtime="20171026 13:29:57.022" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:57.021" endtime="20171026 13:29:57.022" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:57.019" endtime="20171026 13:29:57.022" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:57.019" endtime="20171026 13:29:57.022" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:57.304">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:57.305">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:57.022" endtime="20171026 13:29:57.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:57.307">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:57.306" endtime="20171026 13:29:57.307" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:57.308">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:57.307" endtime="20171026 13:29:57.308" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:57.307" endtime="20171026 13:29:57.308" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:57.305" endtime="20171026 13:29:57.308" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:57.305" endtime="20171026 13:29:57.308" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:57.308">Delete All Sessions</msg>
<status starttime="20171026 13:29:57.308" endtime="20171026 13:29:57.308" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:57.309">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:56.622" endtime="20171026 13:29:57.309" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:57.309">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:57.309" endtime="20171026 13:29:57.309" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:57.310">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:57.310">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:57.310">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:57.310" endtime="20171026 13:29:57.311" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:57.311">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:29:56.621" endtime="20171026 13:29:57.311" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:57.311">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:29:56.621" endtime="20171026 13:29:57.311" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:57.312">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:57.311" endtime="20171026 13:29:57.312" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:57.316">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:29:57.315" endtime="20171026 13:29:57.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:57.317">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:29:57.316" endtime="20171026 13:29:57.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:57.317">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:29:57.317" endtime="20171026 13:29:57.317" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:57.318">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:29:57.318" endtime="20171026 13:29:57.318" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:57.703">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:29:57.319" endtime="20171026 13:29:57.703" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:57.703">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:29:57.703">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:57.318" endtime="20171026 13:29:57.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:57.704">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:57.703" endtime="20171026 13:29:57.704" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:57.705">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:57.704" endtime="20171026 13:29:57.705" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:57.315" endtime="20171026 13:29:57.705" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:57.314" endtime="20171026 13:29:57.705" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:57.314" endtime="20171026 13:29:57.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:57.705">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:29:57.705" endtime="20171026 13:29:57.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:57.708">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:57.707" endtime="20171026 13:29:57.708" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:57.709">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:29:57.708" endtime="20171026 13:29:57.709" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:57.708" endtime="20171026 13:29:57.709" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:57.706" endtime="20171026 13:29:57.709" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:57.706" endtime="20171026 13:29:57.709" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:58.028">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:29:58.029">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:57.709" endtime="20171026 13:29:58.029" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:58.031">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:58.030" endtime="20171026 13:29:58.031" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:58.032">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:29:58.031" endtime="20171026 13:29:58.032" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:58.031" endtime="20171026 13:29:58.032" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:58.030" endtime="20171026 13:29:58.032" status="PASS"></status>
</kw>
<status starttime="20171026 13:29:58.029" endtime="20171026 13:29:58.032" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:29:58.032">Delete All Sessions</msg>
<status starttime="20171026 13:29:58.032" endtime="20171026 13:29:58.033" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:58.033">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:29:57.313" endtime="20171026 13:29:58.033" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:58.033">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:29:58.033" endtime="20171026 13:29:58.033" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:29:58.034">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:29:58.034">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:29:58.034">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:29:58.034" endtime="20171026 13:29:58.034" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:58.034">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:29:57.312" endtime="20171026 13:29:58.035" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:29:58.035">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:29:57.312" endtime="20171026 13:29:58.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:29:58.035">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:29:58.036">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:29:58.035" endtime="20171026 13:29:58.036" status="FAIL"></status>
</kw>
<status starttime="20171026 13:29:56.620" endtime="20171026 13:29:58.036" status="FAIL"></status>
</kw>
<status starttime="20171026 13:29:55.024" endtime="20171026 13:29:58.036" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:08.042">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:08.042" endtime="20171026 13:30:08.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:08.043">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:08.043" endtime="20171026 13:30:08.043" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:08.044">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:08.043" endtime="20171026 13:30:08.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:08.044">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:08.044" endtime="20171026 13:30:08.044" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:08.494">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:08.045" endtime="20171026 13:30:08.494" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:08.494">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:08.494">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:08.045" endtime="20171026 13:30:08.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:08.495">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:08.495" endtime="20171026 13:30:08.495" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:08.496">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:08.495" endtime="20171026 13:30:08.496" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.041" endtime="20171026 13:30:08.496" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.040" endtime="20171026 13:30:08.496" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.039" endtime="20171026 13:30:08.496" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:08.497">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:30:08.496" endtime="20171026 13:30:08.497" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:08.499">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:08.498" endtime="20171026 13:30:08.499" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:08.500">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:08.500" endtime="20171026 13:30:08.500" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.499" endtime="20171026 13:30:08.500" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.497" endtime="20171026 13:30:08.500" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.497" endtime="20171026 13:30:08.500" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:08.600">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:08.600">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:08.501" endtime="20171026 13:30:08.600" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:08.602">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:08.601" endtime="20171026 13:30:08.602" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:08.603">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:08.603" endtime="20171026 13:30:08.603" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.602" endtime="20171026 13:30:08.604" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.601" endtime="20171026 13:30:08.604" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.601" endtime="20171026 13:30:08.604" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:08.604">Delete All Sessions</msg>
<status starttime="20171026 13:30:08.604" endtime="20171026 13:30:08.604" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:08.604">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:08.039" endtime="20171026 13:30:08.605" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:08.605">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:08.605" endtime="20171026 13:30:08.605" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:08.606">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:08.606">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:08.606">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:08.605" endtime="20171026 13:30:08.606" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:08.606">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:30:08.038" endtime="20171026 13:30:08.606" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:08.607">${power_state} = On</msg>
<status starttime="20171026 13:30:08.038" endtime="20171026 13:30:08.607" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:30:08.607" endtime="20171026 13:30:08.607" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.037" endtime="20171026 13:30:08.607" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:08.611">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:08.611" endtime="20171026 13:30:08.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:08.613">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:08.612" endtime="20171026 13:30:08.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:08.614">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:08.613" endtime="20171026 13:30:08.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:08.615">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:08.614" endtime="20171026 13:30:08.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:08.959">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:08.616" endtime="20171026 13:30:08.960" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:08.960">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:08.960">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:08.615" endtime="20171026 13:30:08.960" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:08.961">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:08.960" endtime="20171026 13:30:08.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:08.961">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:08.961" endtime="20171026 13:30:08.961" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.610" endtime="20171026 13:30:08.962" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.610" endtime="20171026 13:30:08.962" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.609" endtime="20171026 13:30:08.962" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:08.962">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:30:08.962" endtime="20171026 13:30:08.962" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:08.966">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:08.965" endtime="20171026 13:30:08.966" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:08.967">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:08.967" endtime="20171026 13:30:08.967" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.966" endtime="20171026 13:30:08.968" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.964" endtime="20171026 13:30:08.968" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:08.963" endtime="20171026 13:30:08.968" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:09.093">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:09.093">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:08.968" endtime="20171026 13:30:09.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:09.095">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:09.094" endtime="20171026 13:30:09.095" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:09.096">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:09.096" endtime="20171026 13:30:09.096" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.095" endtime="20171026 13:30:09.096" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.094" endtime="20171026 13:30:09.096" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.093" endtime="20171026 13:30:09.096" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:09.097">Delete All Sessions</msg>
<status starttime="20171026 13:30:09.097" endtime="20171026 13:30:09.097" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:09.097">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:08.608" endtime="20171026 13:30:09.097" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:09.098">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:09.097" endtime="20171026 13:30:09.098" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:09.098">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:09.098">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:09.098">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:09.098" endtime="20171026 13:30:09.098" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:09.099">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:30:08.608" endtime="20171026 13:30:09.099" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:09.099">${host_state} = Running</msg>
<status starttime="20171026 13:30:08.607" endtime="20171026 13:30:09.099" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:30:09.099" endtime="20171026 13:30:09.100" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:09.104">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:09.103" endtime="20171026 13:30:09.104" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:09.105">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:09.104" endtime="20171026 13:30:09.105" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:09.106">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:09.105" endtime="20171026 13:30:09.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:09.106">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:09.106" endtime="20171026 13:30:09.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:09.595">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:09.107" endtime="20171026 13:30:09.595" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:09.595">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:09.595">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:09.107" endtime="20171026 13:30:09.595" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:09.596">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:09.596" endtime="20171026 13:30:09.596" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:09.597">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:09.596" endtime="20171026 13:30:09.597" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.103" endtime="20171026 13:30:09.597" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.102" endtime="20171026 13:30:09.597" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.102" endtime="20171026 13:30:09.597" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:09.598">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:30:09.597" endtime="20171026 13:30:09.598" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:09.600">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:30:09.599" endtime="20171026 13:30:09.600" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:09.601">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:30:09.601" endtime="20171026 13:30:09.601" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.600" endtime="20171026 13:30:09.601" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.598" endtime="20171026 13:30:09.601" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.598" endtime="20171026 13:30:09.601" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:09.728">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:09.729">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:09.602" endtime="20171026 13:30:09.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:09.731">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:09.730" endtime="20171026 13:30:09.731" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:09.732">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:09.731" endtime="20171026 13:30:09.732" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.731" endtime="20171026 13:30:09.732" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.729" endtime="20171026 13:30:09.732" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.729" endtime="20171026 13:30:09.732" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:09.732">Delete All Sessions</msg>
<status starttime="20171026 13:30:09.732" endtime="20171026 13:30:09.733" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:09.733">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:09.101" endtime="20171026 13:30:09.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:09.733">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:09.733" endtime="20171026 13:30:09.733" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:09.734">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:09.734">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:09.734">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:09.734" endtime="20171026 13:30:09.734" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:09.734">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:30:09.101" endtime="20171026 13:30:09.735" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:09.735">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:30:09.100" endtime="20171026 13:30:09.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:09.735">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:09.735" endtime="20171026 13:30:09.735" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:09.740">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:09.739" endtime="20171026 13:30:09.740" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:09.740">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:09.740" endtime="20171026 13:30:09.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:09.741">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:09.741" endtime="20171026 13:30:09.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:09.742">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:09.741" endtime="20171026 13:30:09.742" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:10.156">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:09.743" endtime="20171026 13:30:10.156" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:10.156">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:10.156">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:09.742" endtime="20171026 13:30:10.156" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:10.157">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:10.157" endtime="20171026 13:30:10.157" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:10.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:10.158" endtime="20171026 13:30:10.158" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.738" endtime="20171026 13:30:10.158" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.738" endtime="20171026 13:30:10.158" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:09.737" endtime="20171026 13:30:10.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:10.159">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:30:10.159" endtime="20171026 13:30:10.159" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:10.161">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:10.161" endtime="20171026 13:30:10.161" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:10.162">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:10.162" endtime="20171026 13:30:10.162" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:10.161" endtime="20171026 13:30:10.162" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:10.160" endtime="20171026 13:30:10.163" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:10.159" endtime="20171026 13:30:10.163" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:10.337">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:10.337">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:10.163" endtime="20171026 13:30:10.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:10.339">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:10.339" endtime="20171026 13:30:10.339" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:10.341">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:10.340" endtime="20171026 13:30:10.341" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:10.339" endtime="20171026 13:30:10.341" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:10.338" endtime="20171026 13:30:10.341" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:10.338" endtime="20171026 13:30:10.341" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:10.341">Delete All Sessions</msg>
<status starttime="20171026 13:30:10.341" endtime="20171026 13:30:10.342" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:10.342">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:09.737" endtime="20171026 13:30:10.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:10.342">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:10.342" endtime="20171026 13:30:10.342" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:10.343">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:10.343">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:10.343">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:10.343" endtime="20171026 13:30:10.343" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:10.343">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:30:09.736" endtime="20171026 13:30:10.344" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:10.344">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:30:09.736" endtime="20171026 13:30:10.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:10.344">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:30:10.345">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:30:10.344" endtime="20171026 13:30:10.345" status="FAIL"></status>
</kw>
<status starttime="20171026 13:30:09.100" endtime="20171026 13:30:10.345" status="FAIL"></status>
</kw>
<status starttime="20171026 13:30:08.037" endtime="20171026 13:30:10.345" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:20.350">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:20.350" endtime="20171026 13:30:20.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:20.351">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:20.351" endtime="20171026 13:30:20.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:20.352">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:20.352" endtime="20171026 13:30:20.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:20.353">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:20.352" endtime="20171026 13:30:20.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:20.821">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:20.353" endtime="20171026 13:30:20.821" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:20.821">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:20.821">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:20.353" endtime="20171026 13:30:20.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:20.822">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:20.822" endtime="20171026 13:30:20.822" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:20.823">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:20.823" endtime="20171026 13:30:20.823" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:20.349" endtime="20171026 13:30:20.823" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:20.349" endtime="20171026 13:30:20.823" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:20.348" endtime="20171026 13:30:20.823" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:20.824">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:30:20.824" endtime="20171026 13:30:20.824" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:20.826">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:20.826" endtime="20171026 13:30:20.826" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:20.827">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:20.827" endtime="20171026 13:30:20.827" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:20.826" endtime="20171026 13:30:20.828" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:20.825" endtime="20171026 13:30:20.828" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:20.824" endtime="20171026 13:30:20.828" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:21.004">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:21.005">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:20.828" endtime="20171026 13:30:21.005" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:21.006">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:21.006" endtime="20171026 13:30:21.006" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:21.007">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:21.007" endtime="20171026 13:30:21.007" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.007" endtime="20171026 13:30:21.008" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.005" endtime="20171026 13:30:21.008" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.005" endtime="20171026 13:30:21.008" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:21.008">Delete All Sessions</msg>
<status starttime="20171026 13:30:21.008" endtime="20171026 13:30:21.008" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:21.008">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:20.348" endtime="20171026 13:30:21.009" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:21.009">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:21.009" endtime="20171026 13:30:21.009" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:21.010">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:21.010">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:21.010">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:21.010" endtime="20171026 13:30:21.010" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:21.010">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:30:20.347" endtime="20171026 13:30:21.010" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:21.011">${power_state} = On</msg>
<status starttime="20171026 13:30:20.347" endtime="20171026 13:30:21.011" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:30:21.011" endtime="20171026 13:30:21.011" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:20.346" endtime="20171026 13:30:21.011" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:21.015">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:21.015" endtime="20171026 13:30:21.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:21.016">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:21.016" endtime="20171026 13:30:21.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:21.017">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:21.017" endtime="20171026 13:30:21.017" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:21.018">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:21.017" endtime="20171026 13:30:21.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:21.325">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:21.018" endtime="20171026 13:30:21.326" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:21.326">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:21.326">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:21.018" endtime="20171026 13:30:21.326" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:21.326">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:21.326" endtime="20171026 13:30:21.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:21.327">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:21.327" endtime="20171026 13:30:21.327" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.014" endtime="20171026 13:30:21.327" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.014" endtime="20171026 13:30:21.327" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.013" endtime="20171026 13:30:21.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:21.328">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:30:21.328" endtime="20171026 13:30:21.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:21.330">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:21.330" endtime="20171026 13:30:21.330" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:21.331">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:21.331" endtime="20171026 13:30:21.331" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.331" endtime="20171026 13:30:21.332" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.329" endtime="20171026 13:30:21.332" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.328" endtime="20171026 13:30:21.332" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:21.660">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:21.660">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:21.332" endtime="20171026 13:30:21.660" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:21.662">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:21.662" endtime="20171026 13:30:21.662" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:21.663">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:21.663" endtime="20171026 13:30:21.663" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.662" endtime="20171026 13:30:21.663" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.661" endtime="20171026 13:30:21.663" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.661" endtime="20171026 13:30:21.663" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:21.664">Delete All Sessions</msg>
<status starttime="20171026 13:30:21.664" endtime="20171026 13:30:21.664" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:21.664">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:21.012" endtime="20171026 13:30:21.664" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:21.665">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:21.664" endtime="20171026 13:30:21.665" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:21.666">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:21.666">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:21.666">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:21.665" endtime="20171026 13:30:21.666" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:21.666">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:30:21.012" endtime="20171026 13:30:21.666" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:21.666">${host_state} = Running</msg>
<status starttime="20171026 13:30:21.011" endtime="20171026 13:30:21.666" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:30:21.667" endtime="20171026 13:30:21.667" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:21.671">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:21.671" endtime="20171026 13:30:21.672" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:21.672">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:21.672" endtime="20171026 13:30:21.672" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:21.673">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:21.673" endtime="20171026 13:30:21.673" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:21.674">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:21.673" endtime="20171026 13:30:21.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:22.510">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:21.674" endtime="20171026 13:30:22.510" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:22.510">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:22.510">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:21.674" endtime="20171026 13:30:22.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:22.511">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:22.511" endtime="20171026 13:30:22.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:22.512">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:22.512" endtime="20171026 13:30:22.512" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.671" endtime="20171026 13:30:22.512" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.670" endtime="20171026 13:30:22.512" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:21.670" endtime="20171026 13:30:22.512" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:22.513">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:30:22.513" endtime="20171026 13:30:22.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:22.515">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:30:22.514" endtime="20171026 13:30:22.515" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:22.516">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:30:22.516" endtime="20171026 13:30:22.516" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:22.515" endtime="20171026 13:30:22.516" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:22.514" endtime="20171026 13:30:22.517" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:22.513" endtime="20171026 13:30:22.517" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:22.678">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:22.678">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:22.517" endtime="20171026 13:30:22.678" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:22.680">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:22.679" endtime="20171026 13:30:22.680" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:22.681">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:22.680" endtime="20171026 13:30:22.681" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:22.680" endtime="20171026 13:30:22.681" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:22.679" endtime="20171026 13:30:22.681" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:22.678" endtime="20171026 13:30:22.681" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:22.682">Delete All Sessions</msg>
<status starttime="20171026 13:30:22.681" endtime="20171026 13:30:22.682" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:22.682">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:21.668" endtime="20171026 13:30:22.682" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:22.683">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:22.682" endtime="20171026 13:30:22.683" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:22.683">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:22.683">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:22.683">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:22.683" endtime="20171026 13:30:22.683" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:22.684">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:30:21.668" endtime="20171026 13:30:22.684" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:22.684">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:30:21.667" endtime="20171026 13:30:22.684" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:22.684">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:22.684" endtime="20171026 13:30:22.685" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:22.688">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:22.688" endtime="20171026 13:30:22.689" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:22.689">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:22.689" endtime="20171026 13:30:22.689" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:22.690">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:22.690" endtime="20171026 13:30:22.690" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:22.691">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:22.690" endtime="20171026 13:30:22.691" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:23.555">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:22.691" endtime="20171026 13:30:23.556" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:23.556">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:23.556">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:22.691" endtime="20171026 13:30:23.556" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:23.557">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:23.556" endtime="20171026 13:30:23.557" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:23.557">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:23.557" endtime="20171026 13:30:23.557" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:22.687" endtime="20171026 13:30:23.558" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:22.687" endtime="20171026 13:30:23.558" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:22.686" endtime="20171026 13:30:23.558" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:23.558">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:30:23.558" endtime="20171026 13:30:23.558" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:23.561">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:23.560" endtime="20171026 13:30:23.561" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:23.561">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:23.561" endtime="20171026 13:30:23.562" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:23.561" endtime="20171026 13:30:23.562" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:23.559" endtime="20171026 13:30:23.562" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:23.559" endtime="20171026 13:30:23.562" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:23.995">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:23.995">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:23.562" endtime="20171026 13:30:23.995" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:23.997">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:23.997" endtime="20171026 13:30:23.997" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:23.998">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:23.998" endtime="20171026 13:30:23.998" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:23.997" endtime="20171026 13:30:23.998" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:23.996" endtime="20171026 13:30:23.999" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:23.996" endtime="20171026 13:30:23.999" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:23.999">Delete All Sessions</msg>
<status starttime="20171026 13:30:23.999" endtime="20171026 13:30:23.999" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:23.999">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:22.686" endtime="20171026 13:30:23.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:24.000">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:24.000" endtime="20171026 13:30:24.000" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:24.001">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:24.001">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:24.001">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:24.000" endtime="20171026 13:30:24.001" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:24.001">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:30:22.685" endtime="20171026 13:30:24.001" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:24.002">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:30:22.685" endtime="20171026 13:30:24.002" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:24.002">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:30:24.002">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:30:24.002" endtime="20171026 13:30:24.002" status="FAIL"></status>
</kw>
<status starttime="20171026 13:30:21.667" endtime="20171026 13:30:24.003" status="FAIL"></status>
</kw>
<status starttime="20171026 13:30:20.346" endtime="20171026 13:30:24.003" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:34.008">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:34.008" endtime="20171026 13:30:34.009" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:34.010">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:34.009" endtime="20171026 13:30:34.010" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:34.010">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:34.010" endtime="20171026 13:30:34.010" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:34.011">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:34.011" endtime="20171026 13:30:34.011" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:34.397">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:34.012" endtime="20171026 13:30:34.397" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:34.397">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:34.397">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:34.011" endtime="20171026 13:30:34.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:34.398">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:34.397" endtime="20171026 13:30:34.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:34.399">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:34.398" endtime="20171026 13:30:34.399" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:34.007" endtime="20171026 13:30:34.399" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:34.007" endtime="20171026 13:30:34.399" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:34.006" endtime="20171026 13:30:34.399" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:34.400">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:30:34.399" endtime="20171026 13:30:34.400" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:34.402">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:34.401" endtime="20171026 13:30:34.402" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:34.404">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:34.403" endtime="20171026 13:30:34.404" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:34.403" endtime="20171026 13:30:34.404" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:34.400" endtime="20171026 13:30:34.404" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:34.400" endtime="20171026 13:30:34.404" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:34.576">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:34.576">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:34.404" endtime="20171026 13:30:34.576" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:34.578">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:34.577" endtime="20171026 13:30:34.578" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:34.579">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:34.579" endtime="20171026 13:30:34.579" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:34.578" endtime="20171026 13:30:34.579" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:34.577" endtime="20171026 13:30:34.580" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:34.576" endtime="20171026 13:30:34.580" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:34.580">Delete All Sessions</msg>
<status starttime="20171026 13:30:34.580" endtime="20171026 13:30:34.580" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:34.580">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:34.005" endtime="20171026 13:30:34.580" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:34.581">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:34.581" endtime="20171026 13:30:34.581" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:34.582">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:34.582">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:34.582">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:34.581" endtime="20171026 13:30:34.582" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:34.582">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:30:34.005" endtime="20171026 13:30:34.582" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:34.582">${power_state} = On</msg>
<status starttime="20171026 13:30:34.004" endtime="20171026 13:30:34.583" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:30:34.583" endtime="20171026 13:30:34.583" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:34.004" endtime="20171026 13:30:34.583" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:34.587">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:34.587" endtime="20171026 13:30:34.587" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:34.588">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:34.587" endtime="20171026 13:30:34.588" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:34.588">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:34.588" endtime="20171026 13:30:34.588" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:34.589">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:34.589" endtime="20171026 13:30:34.589" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.024">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:34.590" endtime="20171026 13:30:35.024" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:35.024">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:35.024">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:34.589" endtime="20171026 13:30:35.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.025">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:35.024" endtime="20171026 13:30:35.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.025">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:35.025" endtime="20171026 13:30:35.025" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:34.586" endtime="20171026 13:30:35.026" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:34.586" endtime="20171026 13:30:35.026" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:34.585" endtime="20171026 13:30:35.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.026">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:30:35.026" endtime="20171026 13:30:35.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.029">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:35.028" endtime="20171026 13:30:35.029" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.030">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:35.030" endtime="20171026 13:30:35.030" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.029" endtime="20171026 13:30:35.030" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.027" endtime="20171026 13:30:35.030" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.027" endtime="20171026 13:30:35.030" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.154">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:35.154">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:35.031" endtime="20171026 13:30:35.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.156">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:35.156" endtime="20171026 13:30:35.156" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.157">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:35.157" endtime="20171026 13:30:35.157" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.156" endtime="20171026 13:30:35.157" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.155" endtime="20171026 13:30:35.158" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.155" endtime="20171026 13:30:35.158" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:35.158">Delete All Sessions</msg>
<status starttime="20171026 13:30:35.158" endtime="20171026 13:30:35.158" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:35.158">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:34.584" endtime="20171026 13:30:35.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:35.159" endtime="20171026 13:30:35.159" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.160">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:35.160">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:35.160">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:35.159" endtime="20171026 13:30:35.160" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:35.160">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:30:34.584" endtime="20171026 13:30:35.160" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:35.160">${host_state} = Running</msg>
<status starttime="20171026 13:30:34.583" endtime="20171026 13:30:35.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:30:35.161" endtime="20171026 13:30:35.161" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.165">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:35.165" endtime="20171026 13:30:35.165" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.166">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:35.166" endtime="20171026 13:30:35.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.167">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:35.166" endtime="20171026 13:30:35.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.167">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:35.167" endtime="20171026 13:30:35.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.539">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:35.168" endtime="20171026 13:30:35.539" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:35.539">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:35.539">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:35.168" endtime="20171026 13:30:35.539" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.540">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:35.539" endtime="20171026 13:30:35.540" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.541">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:35.540" endtime="20171026 13:30:35.541" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.164" endtime="20171026 13:30:35.541" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.164" endtime="20171026 13:30:35.541" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.163" endtime="20171026 13:30:35.541" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.542">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:30:35.541" endtime="20171026 13:30:35.542" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.544">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:30:35.543" endtime="20171026 13:30:35.544" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.545">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:30:35.545" endtime="20171026 13:30:35.545" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.544" endtime="20171026 13:30:35.545" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.542" endtime="20171026 13:30:35.545" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.542" endtime="20171026 13:30:35.545" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.755">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:35.755">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:35.545" endtime="20171026 13:30:35.755" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.757">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:35.757" endtime="20171026 13:30:35.757" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.759">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:35.758" endtime="20171026 13:30:35.759" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.758" endtime="20171026 13:30:35.759" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.756" endtime="20171026 13:30:35.759" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.755" endtime="20171026 13:30:35.759" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:35.760">Delete All Sessions</msg>
<status starttime="20171026 13:30:35.759" endtime="20171026 13:30:35.760" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:35.760">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:35.162" endtime="20171026 13:30:35.760" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:35.760" endtime="20171026 13:30:35.761" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.761">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:35.761">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:35.761">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:35.761" endtime="20171026 13:30:35.761" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:35.762">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:30:35.162" endtime="20171026 13:30:35.762" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:35.762">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:30:35.162" endtime="20171026 13:30:35.762" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.763">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:35.762" endtime="20171026 13:30:35.763" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:35.767">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:35.767" endtime="20171026 13:30:35.767" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.768">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:35.768" endtime="20171026 13:30:35.768" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.769">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:35.768" endtime="20171026 13:30:35.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:35.769">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:35.769" endtime="20171026 13:30:35.769" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:36.202">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:35.770" endtime="20171026 13:30:36.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:36.202">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:36.202">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:35.770" endtime="20171026 13:30:36.202" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:36.203">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:36.202" endtime="20171026 13:30:36.203" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:36.203">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:36.203" endtime="20171026 13:30:36.204" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.766" endtime="20171026 13:30:36.204" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.765" endtime="20171026 13:30:36.204" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:35.764" endtime="20171026 13:30:36.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:36.204">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:30:36.204" endtime="20171026 13:30:36.204" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:36.207">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:36.206" endtime="20171026 13:30:36.207" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:36.208">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:36.208" endtime="20171026 13:30:36.208" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:36.207" endtime="20171026 13:30:36.208" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:36.205" endtime="20171026 13:30:36.209" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:36.205" endtime="20171026 13:30:36.209" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:36.335">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:36.335">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:36.209" endtime="20171026 13:30:36.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:36.337">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:36.337" endtime="20171026 13:30:36.337" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:36.338">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:36.338" endtime="20171026 13:30:36.338" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:36.337" endtime="20171026 13:30:36.339" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:36.336" endtime="20171026 13:30:36.339" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:36.336" endtime="20171026 13:30:36.339" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:36.339">Delete All Sessions</msg>
<status starttime="20171026 13:30:36.339" endtime="20171026 13:30:36.339" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:36.339">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:35.764" endtime="20171026 13:30:36.339" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:36.340">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:36.340" endtime="20171026 13:30:36.340" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:36.341">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:36.341">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:36.341">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:36.341" endtime="20171026 13:30:36.341" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:36.341">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:30:35.763" endtime="20171026 13:30:36.341" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:36.342">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:30:35.763" endtime="20171026 13:30:36.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:36.342">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:30:36.342">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:30:36.342" endtime="20171026 13:30:36.342" status="FAIL"></status>
</kw>
<status starttime="20171026 13:30:35.161" endtime="20171026 13:30:36.343" status="FAIL"></status>
</kw>
<status starttime="20171026 13:30:34.003" endtime="20171026 13:30:36.343" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:46.348">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:46.348" endtime="20171026 13:30:46.348" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:46.349">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:46.349" endtime="20171026 13:30:46.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:46.350">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:46.349" endtime="20171026 13:30:46.350" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:46.351">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:46.350" endtime="20171026 13:30:46.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:46.672">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:46.351" endtime="20171026 13:30:46.672" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:46.672">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:46.672">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:46.351" endtime="20171026 13:30:46.672" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:46.673">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:46.673" endtime="20171026 13:30:46.673" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:46.674">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:46.673" endtime="20171026 13:30:46.674" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:46.347" endtime="20171026 13:30:46.674" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:46.347" endtime="20171026 13:30:46.674" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:46.346" endtime="20171026 13:30:46.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:46.675">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:30:46.674" endtime="20171026 13:30:46.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:46.677">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:46.676" endtime="20171026 13:30:46.677" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:46.678">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:46.678" endtime="20171026 13:30:46.678" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:46.677" endtime="20171026 13:30:46.679" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:46.676" endtime="20171026 13:30:46.679" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:46.675" endtime="20171026 13:30:46.679" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:46.800">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:46.801">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:46.679" endtime="20171026 13:30:46.801" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:46.803">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:46.802" endtime="20171026 13:30:46.803" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:46.803">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:46.803" endtime="20171026 13:30:46.804" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:46.803" endtime="20171026 13:30:46.804" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:46.802" endtime="20171026 13:30:46.804" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:46.801" endtime="20171026 13:30:46.804" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:46.804">Delete All Sessions</msg>
<status starttime="20171026 13:30:46.804" endtime="20171026 13:30:46.804" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:46.805">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:46.345" endtime="20171026 13:30:46.805" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:46.805">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:46.805" endtime="20171026 13:30:46.805" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:46.806">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:46.806">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:46.806">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:46.806" endtime="20171026 13:30:46.806" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:46.806">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:30:46.345" endtime="20171026 13:30:46.807" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:46.807">${power_state} = On</msg>
<status starttime="20171026 13:30:46.344" endtime="20171026 13:30:46.807" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:30:46.807" endtime="20171026 13:30:46.807" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:46.344" endtime="20171026 13:30:46.807" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:46.811">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:46.811" endtime="20171026 13:30:46.812" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:46.813">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:46.812" endtime="20171026 13:30:46.813" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:46.813">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:46.813" endtime="20171026 13:30:46.813" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:46.814">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:46.814" endtime="20171026 13:30:46.814" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.128">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:46.815" endtime="20171026 13:30:47.128" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:47.129">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:47.129">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:46.814" endtime="20171026 13:30:47.129" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.130">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:47.129" endtime="20171026 13:30:47.130" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.131">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:47.130" endtime="20171026 13:30:47.131" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:46.810" endtime="20171026 13:30:47.131" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:46.810" endtime="20171026 13:30:47.131" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:46.809" endtime="20171026 13:30:47.132" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.132">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:30:47.132" endtime="20171026 13:30:47.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.135">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:47.134" endtime="20171026 13:30:47.135" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.136">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:47.136" endtime="20171026 13:30:47.136" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.135" endtime="20171026 13:30:47.136" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.134" endtime="20171026 13:30:47.136" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.133" endtime="20171026 13:30:47.136" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.355">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:47.355">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:47.137" endtime="20171026 13:30:47.355" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.357">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:47.357" endtime="20171026 13:30:47.357" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.358">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:47.358" endtime="20171026 13:30:47.358" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.358" endtime="20171026 13:30:47.359" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.356" endtime="20171026 13:30:47.359" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.356" endtime="20171026 13:30:47.359" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:47.359">Delete All Sessions</msg>
<status starttime="20171026 13:30:47.359" endtime="20171026 13:30:47.359" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:47.359">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:46.809" endtime="20171026 13:30:47.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:47.360" endtime="20171026 13:30:47.360" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.361">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:47.361">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:47.361">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:47.360" endtime="20171026 13:30:47.361" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:47.361">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:30:46.808" endtime="20171026 13:30:47.361" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:47.362">${host_state} = Running</msg>
<status starttime="20171026 13:30:46.808" endtime="20171026 13:30:47.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:30:47.362" endtime="20171026 13:30:47.362" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.367">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:47.366" endtime="20171026 13:30:47.367" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.368">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:47.367" endtime="20171026 13:30:47.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.368">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:47.368" endtime="20171026 13:30:47.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.369">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:47.369" endtime="20171026 13:30:47.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.758">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:47.370" endtime="20171026 13:30:47.758" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:47.759">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:47.759">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:47.369" endtime="20171026 13:30:47.759" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.759">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:47.759" endtime="20171026 13:30:47.759" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.760">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:47.760" endtime="20171026 13:30:47.760" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.366" endtime="20171026 13:30:47.760" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.365" endtime="20171026 13:30:47.760" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.365" endtime="20171026 13:30:47.760" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.761">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:30:47.761" endtime="20171026 13:30:47.761" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.763">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:30:47.763" endtime="20171026 13:30:47.763" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.764">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:30:47.764" endtime="20171026 13:30:47.764" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.763" endtime="20171026 13:30:47.764" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.762" endtime="20171026 13:30:47.764" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.761" endtime="20171026 13:30:47.765" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.907">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:47.907">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:47.765" endtime="20171026 13:30:47.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.909">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:47.909" endtime="20171026 13:30:47.909" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.910">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:47.910" endtime="20171026 13:30:47.911" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.910" endtime="20171026 13:30:47.911" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.908" endtime="20171026 13:30:47.911" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.908" endtime="20171026 13:30:47.911" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:47.911">Delete All Sessions</msg>
<status starttime="20171026 13:30:47.911" endtime="20171026 13:30:47.911" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:47.912">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:47.364" endtime="20171026 13:30:47.912" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.912">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:47.912" endtime="20171026 13:30:47.912" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.913">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:47.913">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:47.913">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:47.913" endtime="20171026 13:30:47.913" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:47.913">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:30:47.363" endtime="20171026 13:30:47.913" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:47.914">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:30:47.363" endtime="20171026 13:30:47.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.914">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:47.914" endtime="20171026 13:30:47.914" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:47.918">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:47.918" endtime="20171026 13:30:47.918" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.919">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:47.918" endtime="20171026 13:30:47.919" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.920">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:47.919" endtime="20171026 13:30:47.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:47.920">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:47.920" endtime="20171026 13:30:47.920" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:48.291">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:47.921" endtime="20171026 13:30:48.291" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:48.291">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:48.291">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:47.921" endtime="20171026 13:30:48.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:48.292">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:48.291" endtime="20171026 13:30:48.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:48.292">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:48.292" endtime="20171026 13:30:48.292" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.917" endtime="20171026 13:30:48.293" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.917" endtime="20171026 13:30:48.293" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:47.916" endtime="20171026 13:30:48.293" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:48.293">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:30:48.293" endtime="20171026 13:30:48.294" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:48.296">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:48.295" endtime="20171026 13:30:48.296" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:48.296">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:48.296" endtime="20171026 13:30:48.297" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:48.296" endtime="20171026 13:30:48.297" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:48.294" endtime="20171026 13:30:48.297" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:48.294" endtime="20171026 13:30:48.297" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:48.422">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:30:48.423">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:48.297" endtime="20171026 13:30:48.423" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:48.424">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:48.424" endtime="20171026 13:30:48.425" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:48.425">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:30:48.425" endtime="20171026 13:30:48.426" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:48.425" endtime="20171026 13:30:48.426" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:48.423" endtime="20171026 13:30:48.426" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:48.423" endtime="20171026 13:30:48.426" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:30:48.426">Delete All Sessions</msg>
<status starttime="20171026 13:30:48.426" endtime="20171026 13:30:48.426" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:48.427">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:47.915" endtime="20171026 13:30:48.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:48.427">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:48.427" endtime="20171026 13:30:48.427" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:48.428">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:30:48.428">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:30:48.428">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:30:48.428" endtime="20171026 13:30:48.428" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:48.428">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:30:47.915" endtime="20171026 13:30:48.428" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:48.429">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:30:47.914" endtime="20171026 13:30:48.429" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:48.429">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:30:48.429">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:30:48.429" endtime="20171026 13:30:48.429" status="FAIL"></status>
</kw>
<status starttime="20171026 13:30:47.362" endtime="20171026 13:30:48.430" status="FAIL"></status>
</kw>
<status starttime="20171026 13:30:46.343" endtime="20171026 13:30:48.430" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:58.438">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:30:58.438" endtime="20171026 13:30:58.439" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:58.440">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:30:58.439" endtime="20171026 13:30:58.440" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:58.440">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:30:58.440" endtime="20171026 13:30:58.441" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:58.441">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:30:58.441" endtime="20171026 13:30:58.441" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:59.480">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:30:58.442" endtime="20171026 13:30:59.480" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:30:59.480">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:30:59.480">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:58.442" endtime="20171026 13:30:59.480" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:59.481">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:59.480" endtime="20171026 13:30:59.481" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:59.482">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:30:59.481" endtime="20171026 13:30:59.482" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:58.434" endtime="20171026 13:30:59.482" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:58.434" endtime="20171026 13:30:59.482" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:58.433" endtime="20171026 13:30:59.482" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:59.483">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:30:59.482" endtime="20171026 13:30:59.483" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:30:59.485">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:59.484" endtime="20171026 13:30:59.485" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:30:59.486">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:30:59.485" endtime="20171026 13:30:59.486" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:59.485" endtime="20171026 13:30:59.486" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:59.483" endtime="20171026 13:30:59.486" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:59.483" endtime="20171026 13:30:59.486" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:05.398">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:31:05.399">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:59.486" endtime="20171026 13:31:05.399" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:05.401">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:31:05.401" endtime="20171026 13:31:05.401" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:05.403">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:31:05.402" endtime="20171026 13:31:05.403" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:05.402" endtime="20171026 13:31:05.403" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:05.400" endtime="20171026 13:31:05.403" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:05.400" endtime="20171026 13:31:05.403" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:31:05.404">Delete All Sessions</msg>
<status starttime="20171026 13:31:05.404" endtime="20171026 13:31:05.404" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:05.404">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:30:58.432" endtime="20171026 13:31:05.404" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:05.405">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:05.405" endtime="20171026 13:31:05.405" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:05.406">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:31:05.406">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:31:05.406">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:31:05.406" endtime="20171026 13:31:05.406" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:05.407">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:30:58.432" endtime="20171026 13:31:05.407" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:05.407">${power_state} = On</msg>
<status starttime="20171026 13:30:58.431" endtime="20171026 13:31:05.407" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:31:05.408" endtime="20171026 13:31:05.408" status="PASS"></status>
</kw>
<status starttime="20171026 13:30:58.431" endtime="20171026 13:31:05.408" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:05.414">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:31:05.413" endtime="20171026 13:31:05.414" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:05.415">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:31:05.415" endtime="20171026 13:31:05.415" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:05.416">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:31:05.416" endtime="20171026 13:31:05.416" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:05.417">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:31:05.417" endtime="20171026 13:31:05.417" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:05.726">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:31:05.418" endtime="20171026 13:31:05.726" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:05.726">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:31:05.726">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:05.418" endtime="20171026 13:31:05.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:05.727">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:05.727" endtime="20171026 13:31:05.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:05.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:05.728" endtime="20171026 13:31:05.728" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:05.413" endtime="20171026 13:31:05.728" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:05.412" endtime="20171026 13:31:05.728" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:05.411" endtime="20171026 13:31:05.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:05.729">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:31:05.729" endtime="20171026 13:31:05.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:05.731">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:31:05.730" endtime="20171026 13:31:05.732" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:05.732">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:31:05.732" endtime="20171026 13:31:05.733" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:05.732" endtime="20171026 13:31:05.733" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:05.730" endtime="20171026 13:31:05.733" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:05.729" endtime="20171026 13:31:05.733" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:11.816">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:31:11.816">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:05.733" endtime="20171026 13:31:11.816" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:11.818">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:31:11.818" endtime="20171026 13:31:11.818" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:11.819">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:31:11.819" endtime="20171026 13:31:11.819" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:11.818" endtime="20171026 13:31:11.819" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:11.817" endtime="20171026 13:31:11.819" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:11.817" endtime="20171026 13:31:11.820" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:31:11.820">Delete All Sessions</msg>
<status starttime="20171026 13:31:11.820" endtime="20171026 13:31:11.820" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:11.820">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:05.410" endtime="20171026 13:31:11.820" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:11.821">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:11.821" endtime="20171026 13:31:11.821" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:11.822">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:31:11.822">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:31:11.822">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:31:11.821" endtime="20171026 13:31:11.822" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:11.822">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:31:05.409" endtime="20171026 13:31:11.822" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:11.823">${host_state} = Running</msg>
<status starttime="20171026 13:31:05.409" endtime="20171026 13:31:11.823" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:31:11.823" endtime="20171026 13:31:11.823" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:11.827">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:31:11.827" endtime="20171026 13:31:11.827" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:11.828">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:31:11.828" endtime="20171026 13:31:11.828" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:11.829">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:31:11.829" endtime="20171026 13:31:11.829" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:11.830">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:31:11.830" endtime="20171026 13:31:11.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:12.334">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:31:11.831" endtime="20171026 13:31:12.334" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:12.334">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:31:12.334">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:11.831" endtime="20171026 13:31:12.334" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:12.335">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:12.334" endtime="20171026 13:31:12.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:12.336">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:12.335" endtime="20171026 13:31:12.336" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:11.826" endtime="20171026 13:31:12.336" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:11.826" endtime="20171026 13:31:12.336" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:11.825" endtime="20171026 13:31:12.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:12.337">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:31:12.336" endtime="20171026 13:31:12.337" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:12.339">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:31:12.338" endtime="20171026 13:31:12.339" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:12.340">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:31:12.339" endtime="20171026 13:31:12.340" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:12.339" endtime="20171026 13:31:12.340" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:12.337" endtime="20171026 13:31:12.340" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:12.337" endtime="20171026 13:31:12.340" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:13.278">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:31:13.278">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:12.341" endtime="20171026 13:31:13.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:13.280">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:31:13.280" endtime="20171026 13:31:13.280" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:13.281">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:31:13.281" endtime="20171026 13:31:13.281" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:13.280" endtime="20171026 13:31:13.281" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:13.279" endtime="20171026 13:31:13.282" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:13.279" endtime="20171026 13:31:13.282" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:31:13.282">Delete All Sessions</msg>
<status starttime="20171026 13:31:13.282" endtime="20171026 13:31:13.282" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:13.282">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:11.825" endtime="20171026 13:31:13.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:13.283">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:13.283" endtime="20171026 13:31:13.283" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:13.284">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:31:13.284">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:31:13.284">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:31:13.283" endtime="20171026 13:31:13.284" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:13.284">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:31:11.824" endtime="20171026 13:31:13.284" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:13.284">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:31:11.824" endtime="20171026 13:31:13.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:13.285">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:13.285" endtime="20171026 13:31:13.285" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:13.289">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:31:13.289" endtime="20171026 13:31:13.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:13.290">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:31:13.290" endtime="20171026 13:31:13.290" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:13.291">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:31:13.290" endtime="20171026 13:31:13.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:13.291">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:31:13.291" endtime="20171026 13:31:13.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:13.611">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:31:13.292" endtime="20171026 13:31:13.611" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:13.611">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:31:13.611">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:13.292" endtime="20171026 13:31:13.611" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:13.612">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:13.611" endtime="20171026 13:31:13.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:13.612">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:13.612" endtime="20171026 13:31:13.612" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:13.288" endtime="20171026 13:31:13.613" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:13.287" endtime="20171026 13:31:13.613" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:13.287" endtime="20171026 13:31:13.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:13.613">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:31:13.613" endtime="20171026 13:31:13.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:13.616">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:31:13.615" endtime="20171026 13:31:13.616" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:13.616">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:31:13.616" endtime="20171026 13:31:13.617" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:13.616" endtime="20171026 13:31:13.617" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:13.614" endtime="20171026 13:31:13.617" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:13.614" endtime="20171026 13:31:13.617" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:14.455">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:31:14.455">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:13.617" endtime="20171026 13:31:14.455" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:14.457">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:31:14.457" endtime="20171026 13:31:14.457" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:14.459">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:31:14.458" endtime="20171026 13:31:14.459" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:14.457" endtime="20171026 13:31:14.459" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:14.456" endtime="20171026 13:31:14.459" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:14.456" endtime="20171026 13:31:14.459" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:31:14.459">Delete All Sessions</msg>
<status starttime="20171026 13:31:14.459" endtime="20171026 13:31:14.460" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:14.460">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:13.286" endtime="20171026 13:31:14.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:14.461">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:14.460" endtime="20171026 13:31:14.461" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:14.461">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:31:14.461">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:31:14.461">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:31:14.461" endtime="20171026 13:31:14.461" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:14.462">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:31:13.286" endtime="20171026 13:31:14.462" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:14.462">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:31:13.285" endtime="20171026 13:31:14.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:14.463">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:31:14.463">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:31:14.462" endtime="20171026 13:31:14.463" status="FAIL"></status>
</kw>
<status starttime="20171026 13:31:11.823" endtime="20171026 13:31:14.463" status="FAIL"></status>
</kw>
<status starttime="20171026 13:30:58.430" endtime="20171026 13:31:14.463" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:24.468">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:31:24.468" endtime="20171026 13:31:24.469" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:24.470">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:31:24.469" endtime="20171026 13:31:24.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:24.470">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:31:24.470" endtime="20171026 13:31:24.470" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:24.471">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:31:24.470" endtime="20171026 13:31:24.471" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:26.303">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:31:24.472" endtime="20171026 13:31:26.304" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:26.304">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:31:26.304">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:24.471" endtime="20171026 13:31:26.304" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:26.305">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:26.304" endtime="20171026 13:31:26.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:26.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:26.305" endtime="20171026 13:31:26.306" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:24.468" endtime="20171026 13:31:26.306" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:24.467" endtime="20171026 13:31:26.306" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:24.466" endtime="20171026 13:31:26.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:26.306">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:31:26.306" endtime="20171026 13:31:26.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:26.309">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:31:26.308" endtime="20171026 13:31:26.309" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:26.310">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:31:26.309" endtime="20171026 13:31:26.310" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:26.309" endtime="20171026 13:31:26.310" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:26.307" endtime="20171026 13:31:26.310" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:26.307" endtime="20171026 13:31:26.310" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:27.273">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:31:27.273">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:26.310" endtime="20171026 13:31:27.273" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:27.276">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:31:27.275" endtime="20171026 13:31:27.276" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:27.276">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:31:27.276" endtime="20171026 13:31:27.277" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:27.276" endtime="20171026 13:31:27.277" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:27.274" endtime="20171026 13:31:27.277" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:27.274" endtime="20171026 13:31:27.277" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:31:27.277">Delete All Sessions</msg>
<status starttime="20171026 13:31:27.277" endtime="20171026 13:31:27.277" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:27.278">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:24.466" endtime="20171026 13:31:27.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:27.278">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:27.278" endtime="20171026 13:31:27.278" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:27.279">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:31:27.279">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:31:27.279">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:31:27.279" endtime="20171026 13:31:27.279" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:27.279">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171026 13:31:24.465" endtime="20171026 13:31:27.279" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:27.280">${power_state} = Off</msg>
<status starttime="20171026 13:31:24.465" endtime="20171026 13:31:27.280" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:31:27.280">On != Off</msg>
<status starttime="20171026 13:31:27.280" endtime="20171026 13:31:27.280" status="FAIL"></status>
</kw>
<status starttime="20171026 13:31:24.464" endtime="20171026 13:31:27.281" status="FAIL"></status>
</kw>
<status starttime="20171026 13:31:24.464" endtime="20171026 13:31:27.281" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:37.287">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:31:37.286" endtime="20171026 13:31:37.287" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:37.288">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:31:37.288" endtime="20171026 13:31:37.288" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:37.289">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:31:37.288" endtime="20171026 13:31:37.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:37.289">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:31:37.289" endtime="20171026 13:31:37.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:37.650">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:31:37.290" endtime="20171026 13:31:37.650" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:37.650">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:31:37.650">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:37.290" endtime="20171026 13:31:37.650" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:37.651">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:37.651" endtime="20171026 13:31:37.651" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:37.652">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:37.651" endtime="20171026 13:31:37.652" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:37.285" endtime="20171026 13:31:37.652" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:37.285" endtime="20171026 13:31:37.652" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:37.284" endtime="20171026 13:31:37.652" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:37.653">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:31:37.652" endtime="20171026 13:31:37.653" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:37.655">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:31:37.654" endtime="20171026 13:31:37.655" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:37.656">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:31:37.656" endtime="20171026 13:31:37.656" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:37.655" endtime="20171026 13:31:37.656" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:37.654" endtime="20171026 13:31:37.656" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:37.653" endtime="20171026 13:31:37.657" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:37.760">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:31:37.760">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:37.657" endtime="20171026 13:31:37.761" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:37.762">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:31:37.762" endtime="20171026 13:31:37.763" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:37.764">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:31:37.763" endtime="20171026 13:31:37.764" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:37.763" endtime="20171026 13:31:37.764" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:37.761" endtime="20171026 13:31:37.764" status="PASS"></status>
</kw>
<status starttime="20171026 13:31:37.761" endtime="20171026 13:31:37.764" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:31:37.765">Delete All Sessions</msg>
<status starttime="20171026 13:31:37.764" endtime="20171026 13:31:37.765" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:37.765">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:31:37.283" endtime="20171026 13:31:37.765" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:37.766">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:31:37.765" endtime="20171026 13:31:37.766" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:37.766">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:31:37.766">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:31:37.766">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:31:37.766" endtime="20171026 13:31:37.767" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:37.767">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171026 13:31:37.283" endtime="20171026 13:31:37.767" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:37.767">${power_state} = Off</msg>
<status starttime="20171026 13:31:37.283" endtime="20171026 13:31:37.767" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:31:37.769">On != Off</msg>
<status starttime="20171026 13:31:37.768" endtime="20171026 13:31:37.769" status="FAIL"></status>
</kw>
<status starttime="20171026 13:31:37.282" endtime="20171026 13:31:37.769" status="FAIL"></status>
</kw>
<status starttime="20171026 13:31:37.281" endtime="20171026 13:31:37.769" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:47.775">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:31:47.774" endtime="20171026 13:31:47.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:47.776">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:31:47.775" endtime="20171026 13:31:47.776" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:47.776">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:31:47.776" endtime="20171026 13:31:47.776" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:31:47.777">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:31:47.777" endtime="20171026 13:31:47.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:31:56.610">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status starttime="20171026 13:31:47.778" endtime="20171026 13:31:56.610" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:31:56.610">${status} = FAIL</msg>
<msg level="INFO" timestamp="20171026 13:31:56.610">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status starttime="20171026 13:31:47.777" endtime="20171026 13:31:56.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:31:56.611">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:31:56.611">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status starttime="20171026 13:31:56.611" endtime="20171026 13:31:56.612" status="FAIL"></status>
</kw>
<status starttime="20171026 13:31:47.774" endtime="20171026 13:31:56.612" status="FAIL"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:32:16.614">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:32:16.613" endtime="20171026 13:32:16.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:32:16.615">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:32:16.615" endtime="20171026 13:32:16.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:32:16.616">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:32:16.616" endtime="20171026 13:32:16.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:32:16.617">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:32:16.616" endtime="20171026 13:32:16.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="WARN" timestamp="20171026 13:32:26.630">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa6e5f250&gt;, 'Connection to 9.5.180.47 timed out. (connect timeout=10.0)')': /login</msg>
<msg level="WARN" timestamp="20171026 13:32:36.841">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa7156fd0&gt;, 'Connection to 9.5.180.47 timed out. (connect timeout=10.0)')': /login</msg>
<msg level="WARN" timestamp="20171026 13:32:47.253">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa6f92c10&gt;, 'Connection to 9.5.180.47 timed out. (connect timeout=10.0)')': /login</msg>
<msg level="FAIL" timestamp="20171026 13:32:57.265">ConnectTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa6e69810&gt;, 'Connection to 9.5.180.47 timed out. (connect timeout=10.0)'))</msg>
<status starttime="20171026 13:32:16.618" endtime="20171026 13:32:57.265" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:32:57.266">${status} = FAIL</msg>
<msg level="INFO" timestamp="20171026 13:32:57.266">${resp} = ConnectTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa6e69...</msg>
<status starttime="20171026 13:32:16.617" endtime="20171026 13:32:57.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:32:57.267">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:32:57.267">ConnectTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa6e69810&gt;, 'Connection to 9.5.180.47 timed out. (connect timeout=10.0)')): FAIL != PASS</msg>
<status starttime="20171026 13:32:57.266" endtime="20171026 13:32:57.267" status="FAIL"></status>
</kw>
<status starttime="20171026 13:32:16.612" endtime="20171026 13:32:57.267" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20171026 13:32:57.267">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ConnectTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa6e69810&gt;, 'Connection to 9.5.180.47 timed out. (connect timeout=10.0)')): FAIL != PASS</msg>
<status starttime="20171026 13:31:47.773" endtime="20171026 13:32:57.267" status="FAIL"></status>
</kw>
<status starttime="20171026 13:31:47.773" endtime="20171026 13:32:57.268" status="FAIL"></status>
</kw>
<status starttime="20171026 13:31:47.772" endtime="20171026 13:32:57.268" status="FAIL"></status>
</kw>
<status starttime="20171026 13:31:47.771" endtime="20171026 13:32:57.268" status="FAIL"></status>
</kw>
<status starttime="20171026 13:31:47.771" endtime="20171026 13:32:57.268" status="FAIL"></status>
</kw>
<status starttime="20171026 13:31:47.770" endtime="20171026 13:32:57.268" status="FAIL"></status>
</kw>
<status starttime="20171026 13:31:47.770" endtime="20171026 13:32:57.268" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:33:07.274">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:33:07.273" endtime="20171026 13:33:07.274" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:33:07.275">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:33:07.275" endtime="20171026 13:33:07.275" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:33:07.276">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:33:07.275" endtime="20171026 13:33:07.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:33:07.276">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:33:07.276" endtime="20171026 13:33:07.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:33:24.336">ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20171026 13:33:07.277" endtime="20171026 13:33:24.336" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:33:24.336">${status} = FAIL</msg>
<msg level="INFO" timestamp="20171026 13:33:24.336">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20171026 13:33:07.277" endtime="20171026 13:33:24.336" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:33:24.337">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:33:24.337">ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20171026 13:33:24.337" endtime="20171026 13:33:24.337" status="FAIL"></status>
</kw>
<status starttime="20171026 13:33:07.273" endtime="20171026 13:33:24.337" status="FAIL"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:33:44.339">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:33:44.339" endtime="20171026 13:33:44.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:33:44.341">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:33:44.341" endtime="20171026 13:33:44.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:33:44.342">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:33:44.341" endtime="20171026 13:33:44.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:33:44.342">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:33:44.342" endtime="20171026 13:33:44.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:33:54.381">ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20171026 13:33:44.343" endtime="20171026 13:33:54.381" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:33:54.382">${status} = FAIL</msg>
<msg level="INFO" timestamp="20171026 13:33:54.382">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20171026 13:33:44.343" endtime="20171026 13:33:54.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:33:54.383">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:33:54.383">ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20171026 13:33:54.382" endtime="20171026 13:33:54.383" status="FAIL"></status>
</kw>
<status starttime="20171026 13:33:44.338" endtime="20171026 13:33:54.383" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20171026 13:33:54.383">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20171026 13:33:07.272" endtime="20171026 13:33:54.383" status="FAIL"></status>
</kw>
<status starttime="20171026 13:33:07.272" endtime="20171026 13:33:54.383" status="FAIL"></status>
</kw>
<status starttime="20171026 13:33:07.271" endtime="20171026 13:33:54.384" status="FAIL"></status>
</kw>
<status starttime="20171026 13:33:07.270" endtime="20171026 13:33:54.384" status="FAIL"></status>
</kw>
<status starttime="20171026 13:33:07.270" endtime="20171026 13:33:54.384" status="FAIL"></status>
</kw>
<status starttime="20171026 13:33:07.270" endtime="20171026 13:33:54.384" status="FAIL"></status>
</kw>
<status starttime="20171026 13:33:07.269" endtime="20171026 13:33:54.384" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:04.390">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:34:04.389" endtime="20171026 13:34:04.390" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:04.391">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:34:04.391" endtime="20171026 13:34:04.391" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:04.392">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:34:04.391" endtime="20171026 13:34:04.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:04.392">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:34:04.392" endtime="20171026 13:34:04.392" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:34:14.437">ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20171026 13:34:04.393" endtime="20171026 13:34:14.437" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:34:14.438">${status} = FAIL</msg>
<msg level="INFO" timestamp="20171026 13:34:14.438">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20171026 13:34:04.393" endtime="20171026 13:34:14.438" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:14.439">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:34:14.439">ReadTimeout: HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20171026 13:34:14.438" endtime="20171026 13:34:14.439" status="FAIL"></status>
</kw>
<status starttime="20171026 13:34:04.389" endtime="20171026 13:34:14.439" status="FAIL"></status>
</kw>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:34.441">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:34:34.441" endtime="20171026 13:34:34.442" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:34.442">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:34:34.442" endtime="20171026 13:34:34.443" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:34.443">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:34:34.443" endtime="20171026 13:34:34.443" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:34.444">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:34:34.443" endtime="20171026 13:34:34.444" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:35.289">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:34:34.445" endtime="20171026 13:34:35.290" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:34:35.290">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:34:35.290">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:34:34.444" endtime="20171026 13:34:35.290" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:35.291">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:34:35.290" endtime="20171026 13:34:35.291" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:35.291">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:34:35.291" endtime="20171026 13:34:35.291" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:34.439" endtime="20171026 13:34:35.292" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:04.388" endtime="20171026 13:34:35.292" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:04.388" endtime="20171026 13:34:35.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:35.292">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:34:35.292" endtime="20171026 13:34:35.292" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:35.295">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:34:35.294" endtime="20171026 13:34:35.295" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:35.296">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:34:35.295" endtime="20171026 13:34:35.296" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:35.295" endtime="20171026 13:34:35.296" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:35.293" endtime="20171026 13:34:35.296" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:35.293" endtime="20171026 13:34:35.296" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:36.608">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:34:36.609">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:34:35.296" endtime="20171026 13:34:36.609" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:36.611">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:34:36.610" endtime="20171026 13:34:36.611" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:36.612">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:34:36.611" endtime="20171026 13:34:36.612" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:36.611" endtime="20171026 13:34:36.612" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:36.610" endtime="20171026 13:34:36.612" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:36.609" endtime="20171026 13:34:36.612" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:34:36.612">Delete All Sessions</msg>
<status starttime="20171026 13:34:36.612" endtime="20171026 13:34:36.613" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:34:36.613">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:34:04.387" endtime="20171026 13:34:36.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:36.614">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:34:36.613" endtime="20171026 13:34:36.614" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:36.614">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:34:36.614">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:34:36.614">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:34:36.614" endtime="20171026 13:34:36.614" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:34:36.615">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171026 13:34:04.386" endtime="20171026 13:34:36.615" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:34:36.615">${power_state} = Off</msg>
<status starttime="20171026 13:34:04.386" endtime="20171026 13:34:36.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:34:36.616">On != Off</msg>
<status starttime="20171026 13:34:36.616" endtime="20171026 13:34:36.616" status="FAIL"></status>
</kw>
<status starttime="20171026 13:34:04.386" endtime="20171026 13:34:36.616" status="FAIL"></status>
</kw>
<status starttime="20171026 13:34:04.385" endtime="20171026 13:34:36.616" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:46.622">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:34:46.621" endtime="20171026 13:34:46.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:46.627">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:34:46.626" endtime="20171026 13:34:46.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:46.627">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:34:46.627" endtime="20171026 13:34:46.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:46.628">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:34:46.628" endtime="20171026 13:34:46.628" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:47.424">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:34:46.629" endtime="20171026 13:34:47.424" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:34:47.424">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:34:47.424">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:34:46.628" endtime="20171026 13:34:47.424" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:47.425">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:34:47.425" endtime="20171026 13:34:47.425" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:47.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:34:47.426" endtime="20171026 13:34:47.426" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:46.621" endtime="20171026 13:34:47.426" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:46.620" endtime="20171026 13:34:47.426" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:46.620" endtime="20171026 13:34:47.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:47.427">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:34:47.427" endtime="20171026 13:34:47.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:47.429">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:34:47.428" endtime="20171026 13:34:47.429" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:47.430">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:34:47.430" endtime="20171026 13:34:47.430" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:47.429" endtime="20171026 13:34:47.430" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:47.428" endtime="20171026 13:34:47.430" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:47.427" endtime="20171026 13:34:47.431" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:48.444">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:34:48.445">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:34:47.431" endtime="20171026 13:34:48.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:48.447">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:34:48.446" endtime="20171026 13:34:48.447" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:48.448">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:34:48.448" endtime="20171026 13:34:48.448" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:48.447" endtime="20171026 13:34:48.448" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:48.446" endtime="20171026 13:34:48.448" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:48.445" endtime="20171026 13:34:48.448" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:34:48.449">Delete All Sessions</msg>
<status starttime="20171026 13:34:48.449" endtime="20171026 13:34:48.449" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:34:48.449">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:34:46.619" endtime="20171026 13:34:48.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:48.450">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:34:48.449" endtime="20171026 13:34:48.450" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:48.450">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:34:48.450">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:34:48.450">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:34:48.450" endtime="20171026 13:34:48.450" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:34:48.451">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171026 13:34:46.618" endtime="20171026 13:34:48.451" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:34:48.451">${power_state} = Off</msg>
<status starttime="20171026 13:34:46.618" endtime="20171026 13:34:48.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:34:48.452">On != Off</msg>
<status starttime="20171026 13:34:48.451" endtime="20171026 13:34:48.452" status="FAIL"></status>
</kw>
<status starttime="20171026 13:34:46.618" endtime="20171026 13:34:48.452" status="FAIL"></status>
</kw>
<status starttime="20171026 13:34:46.617" endtime="20171026 13:34:48.452" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:58.458">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:34:58.458" endtime="20171026 13:34:58.458" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:58.459">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:34:58.459" endtime="20171026 13:34:58.459" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:58.460">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:34:58.459" endtime="20171026 13:34:58.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:58.460">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:34:58.460" endtime="20171026 13:34:58.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:58.940">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:34:58.461" endtime="20171026 13:34:58.941" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:34:58.941">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:34:58.941">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:34:58.461" endtime="20171026 13:34:58.941" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:58.942">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:34:58.941" endtime="20171026 13:34:58.942" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:58.942">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:34:58.942" endtime="20171026 13:34:58.942" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:58.457" endtime="20171026 13:34:58.943" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:58.457" endtime="20171026 13:34:58.943" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:58.456" endtime="20171026 13:34:58.943" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:58.943">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:34:58.943" endtime="20171026 13:34:58.943" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:34:58.946">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:34:58.945" endtime="20171026 13:34:58.946" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:34:58.946">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:34:58.946" endtime="20171026 13:34:58.947" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:58.946" endtime="20171026 13:34:58.947" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:58.944" endtime="20171026 13:34:58.947" status="PASS"></status>
</kw>
<status starttime="20171026 13:34:58.944" endtime="20171026 13:34:58.947" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:05.315">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:35:05.315">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:34:58.947" endtime="20171026 13:35:05.315" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:05.317">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:35:05.317" endtime="20171026 13:35:05.317" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:05.318">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:35:05.318" endtime="20171026 13:35:05.319" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:05.318" endtime="20171026 13:35:05.319" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:05.316" endtime="20171026 13:35:05.319" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:05.316" endtime="20171026 13:35:05.319" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:35:05.319">Delete All Sessions</msg>
<status starttime="20171026 13:35:05.319" endtime="20171026 13:35:05.319" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:05.320">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:34:58.455" endtime="20171026 13:35:05.320" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:05.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:35:05.320" endtime="20171026 13:35:05.320" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:05.321">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:35:05.321">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:35:05.321">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:35:05.321" endtime="20171026 13:35:05.321" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:05.321">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171026 13:34:58.454" endtime="20171026 13:35:05.321" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:05.322">${power_state} = Off</msg>
<status starttime="20171026 13:34:58.454" endtime="20171026 13:35:05.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:35:05.322">On != Off</msg>
<status starttime="20171026 13:35:05.322" endtime="20171026 13:35:05.322" status="FAIL"></status>
</kw>
<status starttime="20171026 13:34:58.453" endtime="20171026 13:35:05.323" status="FAIL"></status>
</kw>
<status starttime="20171026 13:34:58.453" endtime="20171026 13:35:05.323" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:15.328">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:35:15.328" endtime="20171026 13:35:15.329" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:15.329">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:35:15.329" endtime="20171026 13:35:15.329" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:15.330">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:35:15.330" endtime="20171026 13:35:15.330" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:15.331">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:35:15.330" endtime="20171026 13:35:15.331" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:15.683">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:35:15.332" endtime="20171026 13:35:15.683" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:15.684">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:35:15.684">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:35:15.331" endtime="20171026 13:35:15.684" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:15.684">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:35:15.684" endtime="20171026 13:35:15.684" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:15.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:35:15.685" endtime="20171026 13:35:15.685" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:15.328" endtime="20171026 13:35:15.685" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:15.327" endtime="20171026 13:35:15.686" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:15.326" endtime="20171026 13:35:15.686" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:15.686">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:35:15.686" endtime="20171026 13:35:15.686" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:15.688">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:35:15.688" endtime="20171026 13:35:15.689" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:15.689">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:35:15.689" endtime="20171026 13:35:15.690" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:15.689" endtime="20171026 13:35:15.690" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:15.687" endtime="20171026 13:35:15.690" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:15.687" endtime="20171026 13:35:15.690" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:15.786">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:35:15.786">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:35:15.690" endtime="20171026 13:35:15.786" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:15.788">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:35:15.787" endtime="20171026 13:35:15.788" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:15.789">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:35:15.788" endtime="20171026 13:35:15.789" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:15.788" endtime="20171026 13:35:15.789" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:15.787" endtime="20171026 13:35:15.789" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:15.786" endtime="20171026 13:35:15.789" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:35:15.789">Delete All Sessions</msg>
<status starttime="20171026 13:35:15.789" endtime="20171026 13:35:15.789" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:15.790">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:35:15.326" endtime="20171026 13:35:15.790" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:15.790">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:35:15.790" endtime="20171026 13:35:15.790" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:15.791">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:35:15.791">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:35:15.791">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:35:15.791" endtime="20171026 13:35:15.791" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:15.791">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171026 13:35:15.325" endtime="20171026 13:35:15.791" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:15.792">${power_state} = Off</msg>
<status starttime="20171026 13:35:15.325" endtime="20171026 13:35:15.792" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:35:15.792">On != Off</msg>
<status starttime="20171026 13:35:15.792" endtime="20171026 13:35:15.792" status="FAIL"></status>
</kw>
<status starttime="20171026 13:35:15.324" endtime="20171026 13:35:15.793" status="FAIL"></status>
</kw>
<status starttime="20171026 13:35:15.323" endtime="20171026 13:35:15.793" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:25.799">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:35:25.798" endtime="20171026 13:35:25.799" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:25.800">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:35:25.799" endtime="20171026 13:35:25.800" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:25.800">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:35:25.800" endtime="20171026 13:35:25.800" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:25.801">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:35:25.801" endtime="20171026 13:35:25.801" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:26.139">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:35:25.802" endtime="20171026 13:35:26.139" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:26.139">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:35:26.139">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:35:25.801" endtime="20171026 13:35:26.139" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:26.140">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:35:26.139" endtime="20171026 13:35:26.140" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:26.140">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:35:26.140" endtime="20171026 13:35:26.141" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:25.797" endtime="20171026 13:35:26.141" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:25.797" endtime="20171026 13:35:26.141" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:25.796" endtime="20171026 13:35:26.141" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:26.141">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:35:26.141" endtime="20171026 13:35:26.141" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:26.144">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:35:26.143" endtime="20171026 13:35:26.144" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:26.145">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:35:26.144" endtime="20171026 13:35:26.145" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:26.144" endtime="20171026 13:35:26.145" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:26.142" endtime="20171026 13:35:26.145" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:26.142" endtime="20171026 13:35:26.145" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:26.256">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:35:26.256">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:35:26.145" endtime="20171026 13:35:26.257" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:26.259">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:35:26.258" endtime="20171026 13:35:26.259" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:26.260">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:35:26.259" endtime="20171026 13:35:26.260" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:26.259" endtime="20171026 13:35:26.260" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:26.257" endtime="20171026 13:35:26.260" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:26.257" endtime="20171026 13:35:26.260" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:35:26.261">Delete All Sessions</msg>
<status starttime="20171026 13:35:26.261" endtime="20171026 13:35:26.261" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:26.261">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:35:25.795" endtime="20171026 13:35:26.261" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:26.262">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:35:26.261" endtime="20171026 13:35:26.262" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:26.262">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:35:26.262">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:35:26.263">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:35:26.262" endtime="20171026 13:35:26.263" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:26.263">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171026 13:35:25.795" endtime="20171026 13:35:26.263" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:26.263">${power_state} = Off</msg>
<status starttime="20171026 13:35:25.794" endtime="20171026 13:35:26.263" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:35:26.264">On != Off</msg>
<status starttime="20171026 13:35:26.263" endtime="20171026 13:35:26.264" status="FAIL"></status>
</kw>
<status starttime="20171026 13:35:25.794" endtime="20171026 13:35:26.264" status="FAIL"></status>
</kw>
<status starttime="20171026 13:35:25.793" endtime="20171026 13:35:26.264" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:36.270">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:35:36.269" endtime="20171026 13:35:36.270" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:36.271">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:35:36.270" endtime="20171026 13:35:36.271" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:36.271">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:35:36.271" endtime="20171026 13:35:36.271" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:36.272">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:35:36.272" endtime="20171026 13:35:36.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:36.613">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:35:36.273" endtime="20171026 13:35:36.613" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:36.613">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:35:36.613">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:35:36.272" endtime="20171026 13:35:36.613" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:36.614">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:35:36.613" endtime="20171026 13:35:36.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:36.615">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:35:36.614" endtime="20171026 13:35:36.615" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:36.269" endtime="20171026 13:35:36.615" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:36.268" endtime="20171026 13:35:36.615" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:36.268" endtime="20171026 13:35:36.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:36.616">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:35:36.615" endtime="20171026 13:35:36.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:36.618">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:35:36.617" endtime="20171026 13:35:36.618" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:36.619">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:35:36.619" endtime="20171026 13:35:36.619" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:36.618" endtime="20171026 13:35:36.619" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:36.617" endtime="20171026 13:35:36.619" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:36.616" endtime="20171026 13:35:36.619" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:36.713">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:35:36.713">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:35:36.619" endtime="20171026 13:35:36.713" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:36.715">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:35:36.714" endtime="20171026 13:35:36.715" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:36.716">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:35:36.716" endtime="20171026 13:35:36.716" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:36.715" endtime="20171026 13:35:36.716" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:36.714" endtime="20171026 13:35:36.716" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:36.714" endtime="20171026 13:35:36.716" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:35:36.717">Delete All Sessions</msg>
<status starttime="20171026 13:35:36.717" endtime="20171026 13:35:36.717" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:36.717">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:35:36.267" endtime="20171026 13:35:36.717" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:36.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:35:36.717" endtime="20171026 13:35:36.718" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:36.718">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:35:36.718">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:35:36.719">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:35:36.718" endtime="20171026 13:35:36.719" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:36.719">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171026 13:35:36.266" endtime="20171026 13:35:36.719" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:36.719">${power_state} = Off</msg>
<status starttime="20171026 13:35:36.266" endtime="20171026 13:35:36.719" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:35:36.720">On != Off</msg>
<status starttime="20171026 13:35:36.719" endtime="20171026 13:35:36.720" status="FAIL"></status>
</kw>
<status starttime="20171026 13:35:36.265" endtime="20171026 13:35:36.720" status="FAIL"></status>
</kw>
<status starttime="20171026 13:35:36.265" endtime="20171026 13:35:36.720" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:46.726">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:35:46.726" endtime="20171026 13:35:46.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:46.727">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:35:46.727" endtime="20171026 13:35:46.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:46.728">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:35:46.728" endtime="20171026 13:35:46.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:46.729">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:35:46.728" endtime="20171026 13:35:46.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:48.195">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:35:46.729" endtime="20171026 13:35:48.195" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:48.195">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:35:48.195">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:35:46.729" endtime="20171026 13:35:48.195" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:48.196">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:35:48.196" endtime="20171026 13:35:48.196" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:48.197">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:35:48.197" endtime="20171026 13:35:48.197" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:46.725" endtime="20171026 13:35:48.197" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:46.724" endtime="20171026 13:35:48.197" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:46.723" endtime="20171026 13:35:48.197" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:48.198">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:35:48.198" endtime="20171026 13:35:48.198" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:48.200">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:35:48.199" endtime="20171026 13:35:48.200" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:48.201">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:35:48.201" endtime="20171026 13:35:48.201" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:48.200" endtime="20171026 13:35:48.201" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:48.199" endtime="20171026 13:35:48.201" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:48.198" endtime="20171026 13:35:48.202" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:55.669">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:35:55.669">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:35:48.202" endtime="20171026 13:35:55.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:55.671">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:35:55.671" endtime="20171026 13:35:55.671" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:55.673">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:35:55.672" endtime="20171026 13:35:55.673" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:55.672" endtime="20171026 13:35:55.673" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:55.670" endtime="20171026 13:35:55.673" status="PASS"></status>
</kw>
<status starttime="20171026 13:35:55.670" endtime="20171026 13:35:55.673" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:35:55.674">Delete All Sessions</msg>
<status starttime="20171026 13:35:55.673" endtime="20171026 13:35:55.674" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:55.674">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:35:46.723" endtime="20171026 13:35:55.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:35:55.675">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:35:55.674" endtime="20171026 13:35:55.675" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:35:55.675">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:35:55.675">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:35:55.675">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:35:55.675" endtime="20171026 13:35:55.675" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:55.676">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status starttime="20171026 13:35:46.722" endtime="20171026 13:35:55.676" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:35:55.676">${power_state} = Off</msg>
<status starttime="20171026 13:35:46.722" endtime="20171026 13:35:55.676" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:35:55.677">On != Off</msg>
<status starttime="20171026 13:35:55.676" endtime="20171026 13:35:55.677" status="FAIL"></status>
</kw>
<status starttime="20171026 13:35:46.721" endtime="20171026 13:35:55.677" status="FAIL"></status>
</kw>
<status starttime="20171026 13:35:46.721" endtime="20171026 13:35:55.677" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:05.683">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:05.683" endtime="20171026 13:36:05.684" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:05.684">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:05.684" endtime="20171026 13:36:05.684" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:05.685">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:05.685" endtime="20171026 13:36:05.685" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:05.686">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:05.685" endtime="20171026 13:36:05.686" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:06.450">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:05.688" endtime="20171026 13:36:06.450" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:06.450">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:06.450">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:05.686" endtime="20171026 13:36:06.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:06.451">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:06.451" endtime="20171026 13:36:06.451" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:06.452">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:06.451" endtime="20171026 13:36:06.452" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:05.682" endtime="20171026 13:36:06.452" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:05.682" endtime="20171026 13:36:06.452" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:05.681" endtime="20171026 13:36:06.452" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:06.453">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:36:06.452" endtime="20171026 13:36:06.453" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:06.455">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:06.454" endtime="20171026 13:36:06.455" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:06.456">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:06.456" endtime="20171026 13:36:06.456" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:06.455" endtime="20171026 13:36:06.456" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:06.454" endtime="20171026 13:36:06.457" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:06.453" endtime="20171026 13:36:06.457" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:06.879">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:06.879">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:06.457" endtime="20171026 13:36:06.879" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:06.881">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:06.881" endtime="20171026 13:36:06.881" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:06.882">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:06.882" endtime="20171026 13:36:06.883" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:06.882" endtime="20171026 13:36:06.883" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:06.880" endtime="20171026 13:36:06.883" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:06.880" endtime="20171026 13:36:06.883" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:06.883">Delete All Sessions</msg>
<status starttime="20171026 13:36:06.883" endtime="20171026 13:36:06.883" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:06.883">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:05.680" endtime="20171026 13:36:06.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:06.884">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:06.884" endtime="20171026 13:36:06.884" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:06.885">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:06.885">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:06.885">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:06.884" endtime="20171026 13:36:06.885" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:06.885">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:36:05.680" endtime="20171026 13:36:06.885" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:06.886">${power_state} = On</msg>
<status starttime="20171026 13:36:05.679" endtime="20171026 13:36:06.886" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:36:06.886" endtime="20171026 13:36:06.886" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:05.679" endtime="20171026 13:36:06.886" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:06.890">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:06.890" endtime="20171026 13:36:06.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:06.892">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:06.891" endtime="20171026 13:36:06.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:06.892">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:06.892" endtime="20171026 13:36:06.892" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:06.893">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:06.893" endtime="20171026 13:36:06.893" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:07.622">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:06.894" endtime="20171026 13:36:07.623" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:07.623">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:07.623">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:06.893" endtime="20171026 13:36:07.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:07.624">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:07.623" endtime="20171026 13:36:07.624" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:07.624">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:07.624" endtime="20171026 13:36:07.624" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:06.889" endtime="20171026 13:36:07.625" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:06.889" endtime="20171026 13:36:07.625" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:06.888" endtime="20171026 13:36:07.625" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:07.625">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:36:07.625" endtime="20171026 13:36:07.625" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:07.628">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:07.627" endtime="20171026 13:36:07.628" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:07.629">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:07.628" endtime="20171026 13:36:07.629" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:07.628" endtime="20171026 13:36:07.629" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:07.626" endtime="20171026 13:36:07.629" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:07.626" endtime="20171026 13:36:07.629" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:07.986">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:07.986">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:07.629" endtime="20171026 13:36:07.986" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:07.988">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:07.988" endtime="20171026 13:36:07.988" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:07.989">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:07.989" endtime="20171026 13:36:07.989" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:07.989" endtime="20171026 13:36:07.990" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:07.987" endtime="20171026 13:36:07.990" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:07.987" endtime="20171026 13:36:07.990" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:07.990">Delete All Sessions</msg>
<status starttime="20171026 13:36:07.990" endtime="20171026 13:36:07.990" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:07.990">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:06.888" endtime="20171026 13:36:07.990" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:07.991">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:07.991" endtime="20171026 13:36:07.991" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:07.992">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:07.992">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:07.992">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:07.991" endtime="20171026 13:36:07.992" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:07.992">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:36:06.887" endtime="20171026 13:36:07.992" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:07.992">${host_state} = Running</msg>
<status starttime="20171026 13:36:06.887" endtime="20171026 13:36:07.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:36:07.993" endtime="20171026 13:36:07.993" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:07.997">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:07.997" endtime="20171026 13:36:07.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:07.998">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:07.998" endtime="20171026 13:36:07.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:07.999">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:07.999" endtime="20171026 13:36:07.999" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:08.000">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:08.000" endtime="20171026 13:36:08.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:08.342">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:08.001" endtime="20171026 13:36:08.342" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:08.342">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:08.342">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:08.000" endtime="20171026 13:36:08.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:08.343">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:08.342" endtime="20171026 13:36:08.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:08.343">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:08.343" endtime="20171026 13:36:08.344" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:07.997" endtime="20171026 13:36:08.344" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:07.996" endtime="20171026 13:36:08.344" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:07.996" endtime="20171026 13:36:08.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:08.345">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:36:08.344" endtime="20171026 13:36:08.345" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:08.347">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:36:08.346" endtime="20171026 13:36:08.347" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:08.348">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:36:08.348" endtime="20171026 13:36:08.348" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:08.347" endtime="20171026 13:36:08.348" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:08.345" endtime="20171026 13:36:08.348" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:08.345" endtime="20171026 13:36:08.348" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:08.522">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:08.523">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:08.349" endtime="20171026 13:36:08.523" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:08.525">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:08.524" endtime="20171026 13:36:08.525" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:08.526">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:08.525" endtime="20171026 13:36:08.526" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:08.525" endtime="20171026 13:36:08.526" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:08.524" endtime="20171026 13:36:08.526" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:08.523" endtime="20171026 13:36:08.526" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:08.527">Delete All Sessions</msg>
<status starttime="20171026 13:36:08.526" endtime="20171026 13:36:08.527" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:08.527">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:07.995" endtime="20171026 13:36:08.527" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:08.528">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:08.527" endtime="20171026 13:36:08.528" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:08.528">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:08.528">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:08.528">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:08.528" endtime="20171026 13:36:08.528" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:08.529">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20171026 13:36:07.994" endtime="20171026 13:36:08.529" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:08.529">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20171026 13:36:07.993" endtime="20171026 13:36:08.529" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:08.530">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:36:08.530">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status starttime="20171026 13:36:08.529" endtime="20171026 13:36:08.530" status="FAIL"></status>
</kw>
<status starttime="20171026 13:36:07.993" endtime="20171026 13:36:08.530" status="FAIL"></status>
</kw>
<status starttime="20171026 13:36:05.678" endtime="20171026 13:36:08.530" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:18.536">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:18.536" endtime="20171026 13:36:18.536" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:18.537">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:18.537" endtime="20171026 13:36:18.537" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:18.538">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:18.537" endtime="20171026 13:36:18.538" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:18.538">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:18.538" endtime="20171026 13:36:18.538" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:18.978">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:18.539" endtime="20171026 13:36:18.978" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:18.979">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:18.979">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:18.539" endtime="20171026 13:36:18.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:18.979">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:18.979" endtime="20171026 13:36:18.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:18.980">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:18.980" endtime="20171026 13:36:18.980" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:18.535" endtime="20171026 13:36:18.980" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:18.534" endtime="20171026 13:36:18.980" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:18.534" endtime="20171026 13:36:18.981" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:18.981">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:36:18.981" endtime="20171026 13:36:18.981" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:18.983">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:18.983" endtime="20171026 13:36:18.983" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:18.984">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:18.984" endtime="20171026 13:36:18.984" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:18.984" endtime="20171026 13:36:18.985" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:18.982" endtime="20171026 13:36:18.985" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:18.982" endtime="20171026 13:36:18.985" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:19.133">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:19.133">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:18.985" endtime="20171026 13:36:19.133" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:19.135">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:19.134" endtime="20171026 13:36:19.135" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:19.136">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:19.136" endtime="20171026 13:36:19.136" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.135" endtime="20171026 13:36:19.136" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.134" endtime="20171026 13:36:19.137" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.134" endtime="20171026 13:36:19.137" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:19.137">Delete All Sessions</msg>
<status starttime="20171026 13:36:19.137" endtime="20171026 13:36:19.137" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:19.137">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:18.533" endtime="20171026 13:36:19.137" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:19.138">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:19.138" endtime="20171026 13:36:19.138" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:19.139">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:19.139">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:19.139">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:19.138" endtime="20171026 13:36:19.139" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:19.139">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:36:18.532" endtime="20171026 13:36:19.139" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:19.140">${power_state} = On</msg>
<status starttime="20171026 13:36:18.532" endtime="20171026 13:36:19.140" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:36:19.140" endtime="20171026 13:36:19.140" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:18.531" endtime="20171026 13:36:19.140" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:19.144">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:19.144" endtime="20171026 13:36:19.145" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:19.145">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:19.145" endtime="20171026 13:36:19.145" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:19.146">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:19.146" endtime="20171026 13:36:19.146" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:19.147">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:19.146" endtime="20171026 13:36:19.147" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:19.674">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:19.147" endtime="20171026 13:36:19.674" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:19.674">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:19.674">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:19.147" endtime="20171026 13:36:19.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:19.675">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:19.675" endtime="20171026 13:36:19.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:19.676">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:19.675" endtime="20171026 13:36:19.676" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.143" endtime="20171026 13:36:19.676" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.143" endtime="20171026 13:36:19.676" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.142" endtime="20171026 13:36:19.676" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:19.677">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:36:19.676" endtime="20171026 13:36:19.677" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:19.679">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:19.678" endtime="20171026 13:36:19.679" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:19.680">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:19.680" endtime="20171026 13:36:19.680" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.679" endtime="20171026 13:36:19.680" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.678" endtime="20171026 13:36:19.680" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.677" endtime="20171026 13:36:19.681" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:19.884">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:19.884">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:19.681" endtime="20171026 13:36:19.884" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:19.886">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:19.886" endtime="20171026 13:36:19.887" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:19.887">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:19.887" endtime="20171026 13:36:19.888" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.887" endtime="20171026 13:36:19.888" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.885" endtime="20171026 13:36:19.888" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.885" endtime="20171026 13:36:19.888" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:19.888">Delete All Sessions</msg>
<status starttime="20171026 13:36:19.888" endtime="20171026 13:36:19.888" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:19.889">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:19.141" endtime="20171026 13:36:19.889" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:19.889">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:19.889" endtime="20171026 13:36:19.889" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:19.890">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:19.890">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:19.890">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:19.890" endtime="20171026 13:36:19.890" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:19.890">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:36:19.141" endtime="20171026 13:36:19.890" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:19.891">${host_state} = Running</msg>
<status starttime="20171026 13:36:19.140" endtime="20171026 13:36:19.891" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:36:19.891" endtime="20171026 13:36:19.891" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:19.895">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:19.895" endtime="20171026 13:36:19.896" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:19.896">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:19.896" endtime="20171026 13:36:19.896" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:19.897">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:19.896" endtime="20171026 13:36:19.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:19.898">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:19.897" endtime="20171026 13:36:19.898" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:20.325">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:19.898" endtime="20171026 13:36:20.325" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:20.325">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:20.326">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:19.898" endtime="20171026 13:36:20.326" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:20.326">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:20.326" endtime="20171026 13:36:20.327" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:20.327">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:20.327" endtime="20171026 13:36:20.327" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.894" endtime="20171026 13:36:20.328" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.894" endtime="20171026 13:36:20.328" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:19.893" endtime="20171026 13:36:20.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:20.328">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:36:20.328" endtime="20171026 13:36:20.328" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:20.330">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:36:20.330" endtime="20171026 13:36:20.330" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:20.331">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:36:20.331" endtime="20171026 13:36:20.331" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:20.331" endtime="20171026 13:36:20.332" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:20.329" endtime="20171026 13:36:20.332" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:20.329" endtime="20171026 13:36:20.332" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:20.500">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:20.500">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:20.332" endtime="20171026 13:36:20.500" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:20.502">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:20.501" endtime="20171026 13:36:20.502" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:20.503">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:20.502" endtime="20171026 13:36:20.503" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:20.502" endtime="20171026 13:36:20.503" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:20.501" endtime="20171026 13:36:20.503" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:20.500" endtime="20171026 13:36:20.503" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:20.503">Delete All Sessions</msg>
<status starttime="20171026 13:36:20.503" endtime="20171026 13:36:20.503" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:20.504">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:19.893" endtime="20171026 13:36:20.504" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:20.504">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:20.504" endtime="20171026 13:36:20.504" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:20.505">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:20.505">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:20.505">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:20.505" endtime="20171026 13:36:20.505" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:20.505">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:36:19.892" endtime="20171026 13:36:20.505" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:20.506">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:36:19.892" endtime="20171026 13:36:20.506" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:20.506">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:36:20.506">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:36:20.506" endtime="20171026 13:36:20.507" status="FAIL"></status>
</kw>
<status starttime="20171026 13:36:19.891" endtime="20171026 13:36:20.507" status="FAIL"></status>
</kw>
<status starttime="20171026 13:36:18.531" endtime="20171026 13:36:20.507" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:30.513">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:30.512" endtime="20171026 13:36:30.513" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:30.514">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:30.513" endtime="20171026 13:36:30.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:30.514">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:30.514" endtime="20171026 13:36:30.514" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:30.515">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:30.515" endtime="20171026 13:36:30.515" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:30.845">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:30.516" endtime="20171026 13:36:30.845" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:30.845">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:30.845">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:30.515" endtime="20171026 13:36:30.845" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:30.846">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:30.845" endtime="20171026 13:36:30.846" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:30.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:30.846" endtime="20171026 13:36:30.846" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:30.511" endtime="20171026 13:36:30.847" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:30.511" endtime="20171026 13:36:30.847" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:30.510" endtime="20171026 13:36:30.847" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:30.847">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:36:30.847" endtime="20171026 13:36:30.847" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:30.850">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:30.849" endtime="20171026 13:36:30.850" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:30.850">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:30.850" endtime="20171026 13:36:30.851" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:30.850" endtime="20171026 13:36:30.851" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:30.848" endtime="20171026 13:36:30.851" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:30.848" endtime="20171026 13:36:30.851" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:30.972">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:30.972">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:30.851" endtime="20171026 13:36:30.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:30.975">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:30.974" endtime="20171026 13:36:30.975" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:30.976">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:30.975" endtime="20171026 13:36:30.976" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:30.975" endtime="20171026 13:36:30.976" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:30.973" endtime="20171026 13:36:30.976" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:30.973" endtime="20171026 13:36:30.976" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:30.976">Delete All Sessions</msg>
<status starttime="20171026 13:36:30.976" endtime="20171026 13:36:30.977" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:30.977">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:30.510" endtime="20171026 13:36:30.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:30.977">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:30.977" endtime="20171026 13:36:30.977" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:30.978">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:30.978">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:30.978">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:30.978" endtime="20171026 13:36:30.978" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:30.979">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:36:30.509" endtime="20171026 13:36:30.979" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:30.979">${power_state} = On</msg>
<status starttime="20171026 13:36:30.509" endtime="20171026 13:36:30.979" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:36:30.979" endtime="20171026 13:36:30.979" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:30.508" endtime="20171026 13:36:30.980" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:30.983">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:30.983" endtime="20171026 13:36:30.983" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:30.984">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:30.984" endtime="20171026 13:36:30.984" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:30.985">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:30.984" endtime="20171026 13:36:30.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:30.985">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:30.985" endtime="20171026 13:36:30.985" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:31.341">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:30.986" endtime="20171026 13:36:31.342" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:31.342">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:31.342">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:30.986" endtime="20171026 13:36:31.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:31.343">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:31.342" endtime="20171026 13:36:31.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:31.343">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:31.343" endtime="20171026 13:36:31.343" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:30.982" endtime="20171026 13:36:31.343" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:30.982" endtime="20171026 13:36:31.344" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:30.981" endtime="20171026 13:36:31.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:31.344">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:36:31.344" endtime="20171026 13:36:31.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:31.347">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:31.346" endtime="20171026 13:36:31.347" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:31.348">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:31.348" endtime="20171026 13:36:31.348" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:31.347" endtime="20171026 13:36:31.348" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:31.345" endtime="20171026 13:36:31.348" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:31.345" endtime="20171026 13:36:31.348" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:31.479">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:31.479">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:31.349" endtime="20171026 13:36:31.479" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:31.481">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:31.481" endtime="20171026 13:36:31.481" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:31.482">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:31.482" endtime="20171026 13:36:31.482" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:31.481" endtime="20171026 13:36:31.482" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:31.480" endtime="20171026 13:36:31.482" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:31.480" endtime="20171026 13:36:31.482" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:31.483">Delete All Sessions</msg>
<status starttime="20171026 13:36:31.483" endtime="20171026 13:36:31.483" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:31.483">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:30.981" endtime="20171026 13:36:31.483" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:31.484">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:31.483" endtime="20171026 13:36:31.484" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:31.485">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:31.485">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:31.485">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:31.484" endtime="20171026 13:36:31.485" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:31.485">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:36:30.980" endtime="20171026 13:36:31.485" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:31.485">${host_state} = Running</msg>
<status starttime="20171026 13:36:30.980" endtime="20171026 13:36:31.486" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:36:31.486" endtime="20171026 13:36:31.486" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:31.490">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:31.490" endtime="20171026 13:36:31.490" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:31.491">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:31.491" endtime="20171026 13:36:31.491" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:31.492">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:31.491" endtime="20171026 13:36:31.492" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:31.493">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:31.492" endtime="20171026 13:36:31.493" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:32.178">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:31.493" endtime="20171026 13:36:32.178" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:32.178">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:32.178">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:31.493" endtime="20171026 13:36:32.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:32.179">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:32.178" endtime="20171026 13:36:32.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:32.179">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:32.179" endtime="20171026 13:36:32.180" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:31.489" endtime="20171026 13:36:32.180" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:31.489" endtime="20171026 13:36:32.180" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:31.488" endtime="20171026 13:36:32.180" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:32.180">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:36:32.180" endtime="20171026 13:36:32.180" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:32.183">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:36:32.182" endtime="20171026 13:36:32.183" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:32.184">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:36:32.184" endtime="20171026 13:36:32.184" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:32.183" endtime="20171026 13:36:32.184" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:32.181" endtime="20171026 13:36:32.184" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:32.181" endtime="20171026 13:36:32.184" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:33.334">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:33.335">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:32.184" endtime="20171026 13:36:33.335" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:33.337">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:33.336" endtime="20171026 13:36:33.337" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:33.338">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:33.337" endtime="20171026 13:36:33.338" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:33.337" endtime="20171026 13:36:33.338" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:33.336" endtime="20171026 13:36:33.338" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:33.335" endtime="20171026 13:36:33.338" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:33.338">Delete All Sessions</msg>
<status starttime="20171026 13:36:33.338" endtime="20171026 13:36:33.339" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:33.339">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:31.488" endtime="20171026 13:36:33.339" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:33.339">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:33.339" endtime="20171026 13:36:33.340" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:33.340">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:33.340">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:33.340">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:33.340" endtime="20171026 13:36:33.340" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:33.341">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:36:31.487" endtime="20171026 13:36:33.341" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:33.341">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:36:31.487" endtime="20171026 13:36:33.341" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:33.341">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:36:33.342">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:36:33.341" endtime="20171026 13:36:33.342" status="FAIL"></status>
</kw>
<status starttime="20171026 13:36:31.486" endtime="20171026 13:36:33.342" status="FAIL"></status>
</kw>
<status starttime="20171026 13:36:30.507" endtime="20171026 13:36:33.342" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:43.348">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:43.347" endtime="20171026 13:36:43.348" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:43.349">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:43.348" endtime="20171026 13:36:43.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:43.349">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:43.349" endtime="20171026 13:36:43.350" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:43.350">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:43.350" endtime="20171026 13:36:43.350" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:43.668">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:43.351" endtime="20171026 13:36:43.668" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:43.668">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:43.668">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:43.350" endtime="20171026 13:36:43.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:43.669">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:43.669" endtime="20171026 13:36:43.669" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:43.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:43.670" endtime="20171026 13:36:43.670" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:43.347" endtime="20171026 13:36:43.670" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:43.346" endtime="20171026 13:36:43.670" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:43.346" endtime="20171026 13:36:43.670" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:43.671">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:36:43.671" endtime="20171026 13:36:43.671" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:43.673">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:43.673" endtime="20171026 13:36:43.673" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:43.674">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:43.674" endtime="20171026 13:36:43.674" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:43.673" endtime="20171026 13:36:43.674" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:43.672" endtime="20171026 13:36:43.674" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:43.671" endtime="20171026 13:36:43.675" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:43.771">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:43.771">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:43.675" endtime="20171026 13:36:43.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:43.773">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:43.772" endtime="20171026 13:36:43.773" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:43.774">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:43.773" endtime="20171026 13:36:43.774" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:43.773" endtime="20171026 13:36:43.774" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:43.772" endtime="20171026 13:36:43.774" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:43.771" endtime="20171026 13:36:43.774" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:43.774">Delete All Sessions</msg>
<status starttime="20171026 13:36:43.774" endtime="20171026 13:36:43.775" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:43.775">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:43.344" endtime="20171026 13:36:43.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:43.775">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:43.775" endtime="20171026 13:36:43.776" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:43.776">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:43.776">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:43.776">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:43.776" endtime="20171026 13:36:43.776" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:43.777">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:36:43.344" endtime="20171026 13:36:43.777" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:43.777">${power_state} = On</msg>
<status starttime="20171026 13:36:43.343" endtime="20171026 13:36:43.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:36:43.777" endtime="20171026 13:36:43.777" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:43.343" endtime="20171026 13:36:43.778" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:43.781">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:43.781" endtime="20171026 13:36:43.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:43.782">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:43.782" endtime="20171026 13:36:43.782" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:43.783">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:43.782" endtime="20171026 13:36:43.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:43.783">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:43.783" endtime="20171026 13:36:43.783" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:44.105">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:43.784" endtime="20171026 13:36:44.105" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:44.105">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:44.105">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:43.784" endtime="20171026 13:36:44.105" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:44.106">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:44.106" endtime="20171026 13:36:44.106" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:44.107">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:44.106" endtime="20171026 13:36:44.107" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:43.780" endtime="20171026 13:36:44.107" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:43.780" endtime="20171026 13:36:44.107" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:43.779" endtime="20171026 13:36:44.107" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:44.108">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:36:44.107" endtime="20171026 13:36:44.108" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:44.110">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:44.109" endtime="20171026 13:36:44.110" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:44.111">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:44.111" endtime="20171026 13:36:44.111" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.110" endtime="20171026 13:36:44.111" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.109" endtime="20171026 13:36:44.111" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.108" endtime="20171026 13:36:44.111" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:44.272">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:44.272">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:44.112" endtime="20171026 13:36:44.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:44.274">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:44.273" endtime="20171026 13:36:44.274" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:44.275">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:44.274" endtime="20171026 13:36:44.275" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.274" endtime="20171026 13:36:44.275" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.273" endtime="20171026 13:36:44.275" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.272" endtime="20171026 13:36:44.275" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:44.275">Delete All Sessions</msg>
<status starttime="20171026 13:36:44.275" endtime="20171026 13:36:44.275" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:44.276">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:43.779" endtime="20171026 13:36:44.276" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:44.276">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:44.276" endtime="20171026 13:36:44.276" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:44.277">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:44.277">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:44.277">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:44.277" endtime="20171026 13:36:44.277" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:44.277">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:36:43.778" endtime="20171026 13:36:44.278" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:44.278">${host_state} = Running</msg>
<status starttime="20171026 13:36:43.778" endtime="20171026 13:36:44.278" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:36:44.278" endtime="20171026 13:36:44.278" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:44.283">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:44.283" endtime="20171026 13:36:44.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:44.284">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:44.284" endtime="20171026 13:36:44.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:44.285">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:44.284" endtime="20171026 13:36:44.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:44.285">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:44.285" endtime="20171026 13:36:44.285" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:44.655">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:44.286" endtime="20171026 13:36:44.655" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:44.655">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:44.655">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:44.286" endtime="20171026 13:36:44.655" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:44.656">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:44.655" endtime="20171026 13:36:44.656" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:44.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:44.656" endtime="20171026 13:36:44.656" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.282" endtime="20171026 13:36:44.656" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.281" endtime="20171026 13:36:44.657" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.281" endtime="20171026 13:36:44.657" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:44.657">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:36:44.657" endtime="20171026 13:36:44.657" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:44.659">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:36:44.659" endtime="20171026 13:36:44.660" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:44.660">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:36:44.660" endtime="20171026 13:36:44.661" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.660" endtime="20171026 13:36:44.661" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.658" endtime="20171026 13:36:44.661" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.658" endtime="20171026 13:36:44.661" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:44.814">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:44.814">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:44.661" endtime="20171026 13:36:44.814" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:44.816">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:44.815" endtime="20171026 13:36:44.816" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:44.820">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:44.819" endtime="20171026 13:36:44.820" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.816" endtime="20171026 13:36:44.820" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.815" endtime="20171026 13:36:44.820" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:44.814" endtime="20171026 13:36:44.820" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:44.821">Delete All Sessions</msg>
<status starttime="20171026 13:36:44.820" endtime="20171026 13:36:44.821" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:44.821">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:44.280" endtime="20171026 13:36:44.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:44.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:44.821" endtime="20171026 13:36:44.822" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:44.822">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:44.822">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:44.822">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:44.822" endtime="20171026 13:36:44.822" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:44.823">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:36:44.279" endtime="20171026 13:36:44.823" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:44.823">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:36:44.279" endtime="20171026 13:36:44.823" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:44.823">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:36:44.824">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:36:44.823" endtime="20171026 13:36:44.824" status="FAIL"></status>
</kw>
<status starttime="20171026 13:36:44.279" endtime="20171026 13:36:44.824" status="FAIL"></status>
</kw>
<status starttime="20171026 13:36:43.342" endtime="20171026 13:36:44.824" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:54.829">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:54.829" endtime="20171026 13:36:54.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:54.830">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:54.830" endtime="20171026 13:36:54.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:54.831">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:54.831" endtime="20171026 13:36:54.831" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:54.832">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:54.831" endtime="20171026 13:36:54.832" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:55.206">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:54.833" endtime="20171026 13:36:55.206" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:55.206">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:55.207">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:54.832" endtime="20171026 13:36:55.207" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:55.207">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:55.207" endtime="20171026 13:36:55.208" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:55.208">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:55.208" endtime="20171026 13:36:55.208" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:54.829" endtime="20171026 13:36:55.208" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:54.828" endtime="20171026 13:36:55.208" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:54.827" endtime="20171026 13:36:55.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.209">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:36:55.209" endtime="20171026 13:36:55.209" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.211">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:55.211" endtime="20171026 13:36:55.211" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:55.212">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:55.212" endtime="20171026 13:36:55.212" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.212" endtime="20171026 13:36:55.213" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.210" endtime="20171026 13:36:55.213" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.210" endtime="20171026 13:36:55.213" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.340">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:55.340">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:55.213" endtime="20171026 13:36:55.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.342">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:55.341" endtime="20171026 13:36:55.342" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:55.343">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:55.343" endtime="20171026 13:36:55.343" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.342" endtime="20171026 13:36:55.343" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.341" endtime="20171026 13:36:55.343" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.340" endtime="20171026 13:36:55.343" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:55.344">Delete All Sessions</msg>
<status starttime="20171026 13:36:55.343" endtime="20171026 13:36:55.344" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:55.344">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:54.827" endtime="20171026 13:36:55.344" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:55.345">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:55.344" endtime="20171026 13:36:55.345" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.345">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:55.345">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:55.345">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:55.345" endtime="20171026 13:36:55.345" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:55.346">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:36:54.826" endtime="20171026 13:36:55.346" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:55.346">${power_state} = On</msg>
<status starttime="20171026 13:36:54.826" endtime="20171026 13:36:55.346" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:36:55.346" endtime="20171026 13:36:55.347" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:54.825" endtime="20171026 13:36:55.347" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:55.351">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:55.350" endtime="20171026 13:36:55.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.352">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:55.352" endtime="20171026 13:36:55.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.353">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:55.352" endtime="20171026 13:36:55.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.353">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:55.353" endtime="20171026 13:36:55.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:55.690">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:55.354" endtime="20171026 13:36:55.690" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:55.691">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:55.691">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:55.354" endtime="20171026 13:36:55.691" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:55.691">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:55.691" endtime="20171026 13:36:55.691" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:55.692">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:55.692" endtime="20171026 13:36:55.692" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.350" endtime="20171026 13:36:55.692" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.349" endtime="20171026 13:36:55.692" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.349" endtime="20171026 13:36:55.692" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.693">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:36:55.693" endtime="20171026 13:36:55.693" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.695">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:55.694" endtime="20171026 13:36:55.695" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:55.696">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:36:55.696" endtime="20171026 13:36:55.696" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.695" endtime="20171026 13:36:55.696" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.694" endtime="20171026 13:36:55.696" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.693" endtime="20171026 13:36:55.697" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.831">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:55.831">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:55.697" endtime="20171026 13:36:55.831" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.833">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:55.833" endtime="20171026 13:36:55.834" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:55.834">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:55.834" endtime="20171026 13:36:55.835" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.834" endtime="20171026 13:36:55.835" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.832" endtime="20171026 13:36:55.835" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.832" endtime="20171026 13:36:55.835" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:55.835">Delete All Sessions</msg>
<status starttime="20171026 13:36:55.835" endtime="20171026 13:36:55.835" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:55.836">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:55.348" endtime="20171026 13:36:55.836" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:55.836">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:55.836" endtime="20171026 13:36:55.836" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.837">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:55.837">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:55.837">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:55.837" endtime="20171026 13:36:55.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:55.837">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:36:55.347" endtime="20171026 13:36:55.838" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:55.838">${host_state} = Running</msg>
<status starttime="20171026 13:36:55.347" endtime="20171026 13:36:55.838" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:36:55.838" endtime="20171026 13:36:55.838" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:55.843">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:36:55.842" endtime="20171026 13:36:55.843" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.844">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:36:55.843" endtime="20171026 13:36:55.844" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.844">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:36:55.844" endtime="20171026 13:36:55.844" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:55.845">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:36:55.845" endtime="20171026 13:36:55.845" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:56.166">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:36:55.846" endtime="20171026 13:36:56.166" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:56.166">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:36:56.166">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:55.845" endtime="20171026 13:36:56.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:56.167">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:56.166" endtime="20171026 13:36:56.167" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:56.167">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:56.167" endtime="20171026 13:36:56.168" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.842" endtime="20171026 13:36:56.168" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.842" endtime="20171026 13:36:56.168" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:55.841" endtime="20171026 13:36:56.168" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:56.169">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:36:56.168" endtime="20171026 13:36:56.169" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:56.171">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:36:56.170" endtime="20171026 13:36:56.171" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:56.172">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:36:56.171" endtime="20171026 13:36:56.172" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:56.171" endtime="20171026 13:36:56.172" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:56.169" endtime="20171026 13:36:56.172" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:56.169" endtime="20171026 13:36:56.172" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:56.293">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:36:56.293">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:56.172" endtime="20171026 13:36:56.293" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:56.295">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:56.295" endtime="20171026 13:36:56.295" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:56.296">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:36:56.296" endtime="20171026 13:36:56.296" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:56.295" endtime="20171026 13:36:56.296" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:56.294" endtime="20171026 13:36:56.296" status="PASS"></status>
</kw>
<status starttime="20171026 13:36:56.294" endtime="20171026 13:36:56.297" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:36:56.297">Delete All Sessions</msg>
<status starttime="20171026 13:36:56.297" endtime="20171026 13:36:56.297" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:56.297">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:36:55.840" endtime="20171026 13:36:56.297" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:56.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:36:56.298" endtime="20171026 13:36:56.298" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:36:56.299">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:36:56.299">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:36:56.299">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:36:56.298" endtime="20171026 13:36:56.299" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:56.299">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:36:55.839" endtime="20171026 13:36:56.299" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:36:56.299">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:36:55.839" endtime="20171026 13:36:56.299" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:36:56.300">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:36:56.300">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status starttime="20171026 13:36:56.300" endtime="20171026 13:36:56.300" status="FAIL"></status>
</kw>
<status starttime="20171026 13:36:55.839" endtime="20171026 13:36:56.300" status="FAIL"></status>
</kw>
<status starttime="20171026 13:36:54.825" endtime="20171026 13:36:56.301" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:06.306">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:37:06.306" endtime="20171026 13:37:06.306" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:06.307">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:37:06.307" endtime="20171026 13:37:06.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:06.308">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:37:06.307" endtime="20171026 13:37:06.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:06.308">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:37:06.308" endtime="20171026 13:37:06.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:06.620">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:37:06.309" endtime="20171026 13:37:06.621" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:06.621">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:06.621">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:06.309" endtime="20171026 13:37:06.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:06.621">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:06.621" endtime="20171026 13:37:06.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:06.622">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:06.622" endtime="20171026 13:37:06.622" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:06.305" endtime="20171026 13:37:06.622" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:06.305" endtime="20171026 13:37:06.623" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:06.304" endtime="20171026 13:37:06.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:06.623">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status starttime="20171026 13:37:06.623" endtime="20171026 13:37:06.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:06.626">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:37:06.625" endtime="20171026 13:37:06.626" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:06.626">URI:https://9.5.180.47:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status starttime="20171026 13:37:06.626" endtime="20171026 13:37:06.627" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:06.626" endtime="20171026 13:37:06.627" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:06.624" endtime="20171026 13:37:06.627" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:06.624" endtime="20171026 13:37:06.627" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:06.722">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:37:06.722">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:06.627" endtime="20171026 13:37:06.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:06.724">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:37:06.723" endtime="20171026 13:37:06.724" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:06.725">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:37:06.724" endtime="20171026 13:37:06.725" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:06.724" endtime="20171026 13:37:06.725" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:06.723" endtime="20171026 13:37:06.725" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:06.722" endtime="20171026 13:37:06.725" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:37:06.725">Delete All Sessions</msg>
<status starttime="20171026 13:37:06.725" endtime="20171026 13:37:06.725" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:06.726">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:06.303" endtime="20171026 13:37:06.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:06.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:06.726" endtime="20171026 13:37:06.726" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:06.727">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:37:06.727">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:37:06.727">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:37:06.727" endtime="20171026 13:37:06.727" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:06.728">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status starttime="20171026 13:37:06.303" endtime="20171026 13:37:06.728" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:06.728">${power_state} = On</msg>
<status starttime="20171026 13:37:06.302" endtime="20171026 13:37:06.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status starttime="20171026 13:37:06.728" endtime="20171026 13:37:06.729" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:06.302" endtime="20171026 13:37:06.729" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:06.732">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:37:06.732" endtime="20171026 13:37:06.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:06.734">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:37:06.733" endtime="20171026 13:37:06.734" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:06.735">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:37:06.734" endtime="20171026 13:37:06.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:06.735">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:37:06.735" endtime="20171026 13:37:06.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.083">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:37:06.736" endtime="20171026 13:37:07.083" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:07.083">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:07.084">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:06.736" endtime="20171026 13:37:07.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.084">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:07.084" endtime="20171026 13:37:07.084" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.085">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:07.085" endtime="20171026 13:37:07.085" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:06.731" endtime="20171026 13:37:07.085" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:06.731" endtime="20171026 13:37:07.085" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:06.730" endtime="20171026 13:37:07.085" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.086">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20171026 13:37:07.086" endtime="20171026 13:37:07.086" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.088">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:37:07.088" endtime="20171026 13:37:07.088" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.089">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20171026 13:37:07.089" endtime="20171026 13:37:07.089" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.088" endtime="20171026 13:37:07.089" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.087" endtime="20171026 13:37:07.090" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.086" endtime="20171026 13:37:07.090" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.226">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:37:07.226">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:07.090" endtime="20171026 13:37:07.226" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.228">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:37:07.228" endtime="20171026 13:37:07.228" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.229">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:37:07.229" endtime="20171026 13:37:07.229" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.228" endtime="20171026 13:37:07.229" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.227" endtime="20171026 13:37:07.229" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.227" endtime="20171026 13:37:07.230" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:37:07.230">Delete All Sessions</msg>
<status starttime="20171026 13:37:07.230" endtime="20171026 13:37:07.230" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:07.230">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:06.730" endtime="20171026 13:37:07.230" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.231">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:07.231" endtime="20171026 13:37:07.231" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.232">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:37:07.232">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:37:07.232">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:37:07.231" endtime="20171026 13:37:07.232" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:07.232">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20171026 13:37:06.729" endtime="20171026 13:37:07.232" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:07.232">${host_state} = Running</msg>
<status starttime="20171026 13:37:06.729" endtime="20171026 13:37:07.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20171026 13:37:07.233" endtime="20171026 13:37:07.233" status="PASS"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.237">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:37:07.237" endtime="20171026 13:37:07.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.238">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:37:07.238" endtime="20171026 13:37:07.238" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.239">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:37:07.239" endtime="20171026 13:37:07.239" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.240">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:37:07.239" endtime="20171026 13:37:07.240" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.550">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:37:07.240" endtime="20171026 13:37:07.550" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:07.550">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:07.551">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:07.240" endtime="20171026 13:37:07.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.551">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:07.551" endtime="20171026 13:37:07.551" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.552">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:07.552" endtime="20171026 13:37:07.552" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.237" endtime="20171026 13:37:07.552" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.236" endtime="20171026 13:37:07.552" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.236" endtime="20171026 13:37:07.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.553">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status starttime="20171026 13:37:07.553" endtime="20171026 13:37:07.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.556">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:37:07.555" endtime="20171026 13:37:07.556" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.556">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status starttime="20171026 13:37:07.556" endtime="20171026 13:37:07.557" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.556" endtime="20171026 13:37:07.557" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.554" endtime="20171026 13:37:07.557" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.554" endtime="20171026 13:37:07.557" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.679">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:37:07.679">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:07.557" endtime="20171026 13:37:07.679" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.681">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:37:07.680" endtime="20171026 13:37:07.681" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.682">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:37:07.682" endtime="20171026 13:37:07.682" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.681" endtime="20171026 13:37:07.682" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.680" endtime="20171026 13:37:07.682" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.679" endtime="20171026 13:37:07.682" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:37:07.683">Delete All Sessions</msg>
<status starttime="20171026 13:37:07.683" endtime="20171026 13:37:07.683" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:07.683">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:07.234" endtime="20171026 13:37:07.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.684">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:07.683" endtime="20171026 13:37:07.684" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.684">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:37:07.684">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:37:07.684">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:37:07.684" endtime="20171026 13:37:07.685" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:07.685">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:37:07.234" endtime="20171026 13:37:07.685" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:07.685">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status starttime="20171026 13:37:07.233" endtime="20171026 13:37:07.685" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.686">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:07.685" endtime="20171026 13:37:07.686" status="PASS"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:07.689">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:37:07.689" endtime="20171026 13:37:07.690" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.690">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:37:07.690" endtime="20171026 13:37:07.690" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.691">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:37:07.691" endtime="20171026 13:37:07.691" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:07.692">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:37:07.691" endtime="20171026 13:37:07.692" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:08.037">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:37:07.692" endtime="20171026 13:37:08.037" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:08.037">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:08.037">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:07.692" endtime="20171026 13:37:08.037" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:08.038">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:08.037" endtime="20171026 13:37:08.038" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:08.038">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:08.038" endtime="20171026 13:37:08.039" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.689" endtime="20171026 13:37:08.039" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.688" endtime="20171026 13:37:08.039" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:07.687" endtime="20171026 13:37:08.039" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:08.039">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status starttime="20171026 13:37:08.039" endtime="20171026 13:37:08.040" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:08.042">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:37:08.041" endtime="20171026 13:37:08.042" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:08.043">URI:https://9.5.180.47:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status starttime="20171026 13:37:08.042" endtime="20171026 13:37:08.043" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:08.042" endtime="20171026 13:37:08.043" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:08.040" endtime="20171026 13:37:08.043" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:08.040" endtime="20171026 13:37:08.043" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:08.179">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:37:08.179">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:08.043" endtime="20171026 13:37:08.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:08.181">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:37:08.181" endtime="20171026 13:37:08.181" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:08.182">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:37:08.182" endtime="20171026 13:37:08.182" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:08.181" endtime="20171026 13:37:08.182" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:08.180" endtime="20171026 13:37:08.183" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:08.180" endtime="20171026 13:37:08.183" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:37:08.183">Delete All Sessions</msg>
<status starttime="20171026 13:37:08.183" endtime="20171026 13:37:08.183" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:08.183">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:07.687" endtime="20171026 13:37:08.183" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:08.184">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:08.184" endtime="20171026 13:37:08.184" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:08.185">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:37:08.185">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:37:08.185">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:37:08.184" endtime="20171026 13:37:08.185" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:08.185">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:37:07.686" endtime="20171026 13:37:08.185" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:08.185">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:37:07.686" endtime="20171026 13:37:08.185" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:08.186">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171026 13:37:08.186">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:37:08.186" endtime="20171026 13:37:08.186" status="FAIL"></status>
</kw>
<status starttime="20171026 13:37:07.233" endtime="20171026 13:37:08.186" status="FAIL"></status>
</kw>
<status starttime="20171026 13:37:06.301" endtime="20171026 13:37:08.186" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20171026 13:37:08.187">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status starttime="20171026 13:27:00.513" endtime="20171026 13:37:08.187" status="FAIL"></status>
</kw>
<status starttime="20171026 13:26:59.826" endtime="20171026 13:37:08.187" status="FAIL"></status>
</kw>
<status starttime="20171026 13:26:09.330" endtime="20171026 13:37:08.187" status="FAIL"></status>
</kw>
<status starttime="20171026 13:22:44.399" endtime="20171026 13:37:08.187" status="FAIL"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.5.180.47</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:08.210">Length is 10</msg>
<status starttime="20171026 13:37:08.210" endtime="20171026 13:37:08.210" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:08.217">Running command 'ping -c 4 9.5.180.47 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171026 13:37:11.268">${RC} = 0</msg>
<msg level="INFO" timestamp="20171026 13:37:11.268">${output} = PING 9.5.180.47 (9.5.180.47) 56(84) bytes of data.
64 bytes from 9.5.180.47: icmp_seq=1 ttl=50 time=35.2 ms
64 bytes from 9.5.180.47: icmp_seq=2 ttl=50 time=35.0 ms
64 bytes from 9.5.180.47: icmp_seq=...</msg>
<status starttime="20171026 13:37:08.211" endtime="20171026 13:37:11.269" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:11.272">RC: 0
Output:
PING 9.5.180.47 (9.5.180.47) 56(84) bytes of data.
64 bytes from 9.5.180.47: icmp_seq=1 ttl=50 time=35.2 ms
64 bytes from 9.5.180.47: icmp_seq=2 ttl=50 time=35.0 ms
64 bytes from 9.5.180.47: icmp_seq=3 ttl=50 time=35.0 ms
64 bytes from 9.5.180.47: icmp_seq=4 ttl=50 time=35.0 ms

--- 9.5.180.47 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 35.063/35.107/35.230/0.150 ms</msg>
<status starttime="20171026 13:37:11.271" endtime="20171026 13:37:11.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20171026 13:37:11.273" endtime="20171026 13:37:11.273" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:08.209" endtime="20171026 13:37:11.273" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:11.301">${cur_time} = 2017-10-26 13:37:11:300819</msg>
<status starttime="20171026 13:37:11.301" endtime="20171026 13:37:11.301" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:11.302">${cur_time} = 20171026133711300819</msg>
<status starttime="20171026 13:37:11.301" endtime="20171026 13:37:11.302" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.300" endtime="20171026 13:37:11.302" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:11.302">${FFDC_TIME} = 20171026133711300819</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:11.314">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20171026 13:37:11.314" endtime="20171026 13:37:11.314" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:11.315">${suite_name} = 20171026133711300819_TestsTestBasicPoweron</msg>
<status starttime="20171026 13:37:11.315" endtime="20171026 13:37:11.315" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:11.316">${test_name} = PowerOnTest</msg>
<status starttime="20171026 13:37:11.315" endtime="20171026 13:37:11.316" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:11.316">${test_name} = 20171026133711300819_PowerOnTest</msg>
<status starttime="20171026 13:37:11.316" endtime="20171026 13:37:11.316" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.314" endtime="20171026 13:37:11.317" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:11.317">${FFDC_DIR_PATH} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/</msg>
<msg level="INFO" timestamp="20171026 13:37:11.317">${FFDC_PREFIX} = 20171026133711300819_</msg>
<msg level="INFO" timestamp="20171026 13:37:11.338">${LOG_PREFIX} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:11.339">Created directory '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:11.338" endtime="20171026 13:37:11.339" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:11.344">${FFDC_FILE_PATH} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:11.366">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:11.366" endtime="20171026 13:37:11.366" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.365" endtime="20171026 13:37:11.367" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:11.368">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:11.367" endtime="20171026 13:37:11.368" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.367" endtime="20171026 13:37:11.368" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:11.375">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:11.375" endtime="20171026 13:37:11.375" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.368" endtime="20171026 13:37:11.375" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:11.377">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:11.376" endtime="20171026 13:37:11.377" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.376" endtime="20171026 13:37:11.377" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:11.378">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:11.378" endtime="20171026 13:37:11.378" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.377" endtime="20171026 13:37:11.378" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:11.380">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:11.379" endtime="20171026 13:37:11.380" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.379" endtime="20171026 13:37:11.380" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:11.381">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:11.381" endtime="20171026 13:37:11.381" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.380" endtime="20171026 13:37:11.381" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:11.382">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:11.382" endtime="20171026 13:37:11.382" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.381" endtime="20171026 13:37:11.383" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:11.384">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:11.383" endtime="20171026 13:37:11.384" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.383" endtime="20171026 13:37:11.384" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:11.385">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:11.385" endtime="20171026 13:37:11.385" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.384" endtime="20171026 13:37:11.386" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:11.387">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:11.386" endtime="20171026 13:37:11.387" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.386" endtime="20171026 13:37:11.387" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:11.388">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:11.388" endtime="20171026 13:37:11.388" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.387" endtime="20171026 13:37:11.388" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:11.389">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:11.389" endtime="20171026 13:37:11.389" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.388" endtime="20171026 13:37:11.389" status="PASS"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:11.401">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:11.401">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20171026 13:37:11.402">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:11.402">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171026 13:37:12.578">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20171026 13:37:12.579">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20171026 13:37:12.829">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171026 13:37:12.839">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20171026 13:37:12.839">${stderr} = </msg>
<msg level="INFO" timestamp="20171026 13:37:12.839">${rc} = 0</msg>
<status starttime="20171026 13:37:11.390" endtime="20171026 13:37:12.839" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:12.840">Length is 0</msg>
<status starttime="20171026 13:37:12.840" endtime="20171026 13:37:12.840" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:12.840">Length is 11</msg>
<status starttime="20171026 13:37:12.840" endtime="20171026 13:37:12.841" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:12.841">${model_name} = Witherspoon</msg>
<status starttime="20171026 13:37:11.390" endtime="20171026 13:37:12.841" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:12.842">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:12.842" endtime="20171026 13:37:12.842" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.841" endtime="20171026 13:37:12.842" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.384" endtime="20171026 13:37:12.843" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:12.844">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:12.843" endtime="20171026 13:37:12.844" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.843" endtime="20171026 13:37:12.844" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:12.844">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status starttime="20171026 13:37:12.844" endtime="20171026 13:37:12.844" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:12.846">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:12.846" endtime="20171026 13:37:12.846" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.845" endtime="20171026 13:37:12.846" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:12.847">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:12.847" endtime="20171026 13:37:12.847" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.846" endtime="20171026 13:37:12.847" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.845" endtime="20171026 13:37:12.847" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:12.849">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:12.848" endtime="20171026 13:37:12.849" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.848" endtime="20171026 13:37:12.849" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:12.851">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:12.850" endtime="20171026 13:37:12.851" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.849" endtime="20171026 13:37:12.851" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.847" endtime="20171026 13:37:12.851" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:12.852">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:12.852" endtime="20171026 13:37:12.852" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.851" endtime="20171026 13:37:12.852" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:12.853">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:12.853" endtime="20171026 13:37:12.853" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.852" endtime="20171026 13:37:12.854" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.851" endtime="20171026 13:37:12.854" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.845" endtime="20171026 13:37:12.854" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:12.855">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:12.854" endtime="20171026 13:37:12.855" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.854" endtime="20171026 13:37:12.855" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:11.365" endtime="20171026 13:37:12.855" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:12.861">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20171026 13:37:12.861" endtime="20171026 13:37:12.861" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:12.863">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('SEL Log', 'Collect eSEL Log') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('Sy...</msg>
<status starttime="20171026 13:37:12.862" endtime="20171026 13:37:12.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20171026 13:37:12.864" endtime="20171026 13:37:12.864" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:12.864">@{ffdc_function_list} = [ OS FFDC | FFDC Generic Report | SEL Log | Core Files | BMC Specific Files | Sys Inventory Files | Get Request FFDC ]</msg>
<status starttime="20171026 13:37:12.863" endtime="20171026 13:37:12.864" status="PASS"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171026 13:37:12.866" endtime="20171026 13:37:12.866" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:12.866">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:12.866">${ret_values} = None</msg>
<status starttime="20171026 13:37:12.865" endtime="20171026 13:37:12.866" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171026 13:37:12.867" endtime="20171026 13:37:12.867" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:12.894">Returning from the enclosing user keyword.</msg>
<status starttime="20171026 13:37:12.894" endtime="20171026 13:37:12.894" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.893" endtime="20171026 13:37:12.895" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.867" endtime="20171026 13:37:12.895" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.864" endtime="20171026 13:37:12.895" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.864" endtime="20171026 13:37:12.895" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171026 13:37:12.896" endtime="20171026 13:37:12.897" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:12.897">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:12.897">${ret_values} = None</msg>
<status starttime="20171026 13:37:12.896" endtime="20171026 13:37:12.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171026 13:37:12.897" endtime="20171026 13:37:12.897" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:12.925">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status starttime="20171026 13:37:12.924" endtime="20171026 13:37:12.925" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:12.926">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status starttime="20171026 13:37:12.926" endtime="20171026 13:37:12.927" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:12.936">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20171026 13:37:12.927" endtime="20171026 13:37:12.936" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:12.939">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:12.938" endtime="20171026 13:37:12.939" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.938" endtime="20171026 13:37:12.939" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:12.941">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:12.940" endtime="20171026 13:37:12.941" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.939" endtime="20171026 13:37:12.941" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:12.942">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:12.942" endtime="20171026 13:37:12.942" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.941" endtime="20171026 13:37:12.942" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:12.943">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:12.943" endtime="20171026 13:37:12.943" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.942" endtime="20171026 13:37:12.944" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.937" endtime="20171026 13:37:12.944" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.937" endtime="20171026 13:37:12.944" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:12.944">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status starttime="20171026 13:37:12.944" endtime="20171026 13:37:12.945" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:13.013">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:13.013">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:13.014">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20171026 13:37:13.244">Command exited with return code 0.</msg>
<status starttime="20171026 13:37:12.976" endtime="20171026 13:37:13.245" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:13.245">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:13.245">${ret_values} = (u'Linux witherspoon 4.10.17-da78428ac543d6d9ac2493dfa77364eb300a47cb #1 Fri Oct 20 20:00:41 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status starttime="20171026 13:37:12.945" endtime="20171026 13:37:13.245" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:13.246">${stdout} = Linux witherspoon 4.10.17-da78428ac543d6d9ac2493dfa77364eb300a47cb #1 Fri Oct 20 20:00:41 UTC 2017 armv6l GNU/Linux</msg>
<status starttime="20171026 13:37:13.245" endtime="20171026 13:37:13.246" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:13.247">${stderr} = </msg>
<status starttime="20171026 13:37:13.246" endtime="20171026 13:37:13.247" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.257">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.257" endtime="20171026 13:37:13.257" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.256" endtime="20171026 13:37:13.257" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.247" endtime="20171026 13:37:13.258" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.936" endtime="20171026 13:37:13.258" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.936" endtime="20171026 13:37:13.258" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.261">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.260" endtime="20171026 13:37:13.261" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.260" endtime="20171026 13:37:13.261" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.262">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.262" endtime="20171026 13:37:13.262" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.261" endtime="20171026 13:37:13.262" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.264">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.264" endtime="20171026 13:37:13.264" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.263" endtime="20171026 13:37:13.264" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.265">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.265" endtime="20171026 13:37:13.265" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.264" endtime="20171026 13:37:13.265" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.259" endtime="20171026 13:37:13.266" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.259" endtime="20171026 13:37:13.266" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:13.266">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status starttime="20171026 13:37:13.266" endtime="20171026 13:37:13.266" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:13.336">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:13.336">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:13.336">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20171026 13:37:13.617">Command exited with return code 0.</msg>
<status starttime="20171026 13:37:13.298" endtime="20171026 13:37:13.617" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:13.617">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:13.617">${ret_values} = (u' 13:37:24 up 4 min,  load average: 1.55, 2.28, 1.13', u'', 0)</msg>
<status starttime="20171026 13:37:13.267" endtime="20171026 13:37:13.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:13.618">${stdout} =  13:37:24 up 4 min,  load average: 1.55, 2.28, 1.13</msg>
<status starttime="20171026 13:37:13.618" endtime="20171026 13:37:13.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:13.619">${stderr} = </msg>
<status starttime="20171026 13:37:13.619" endtime="20171026 13:37:13.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.626">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.626" endtime="20171026 13:37:13.626" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.625" endtime="20171026 13:37:13.626" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.619" endtime="20171026 13:37:13.626" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.258" endtime="20171026 13:37:13.626" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.258" endtime="20171026 13:37:13.627" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.630">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.629" endtime="20171026 13:37:13.630" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.629" endtime="20171026 13:37:13.630" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.631">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.631" endtime="20171026 13:37:13.631" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.630" endtime="20171026 13:37:13.631" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.632">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.632" endtime="20171026 13:37:13.632" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.631" endtime="20171026 13:37:13.633" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.634">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.633" endtime="20171026 13:37:13.634" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.633" endtime="20171026 13:37:13.634" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.628" endtime="20171026 13:37:13.634" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.628" endtime="20171026 13:37:13.634" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:13.635">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status starttime="20171026 13:37:13.634" endtime="20171026 13:37:13.635" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:13.704">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:13.704">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:13.704">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20171026 13:37:13.970">Command exited with return code 0.</msg>
<status starttime="20171026 13:37:13.667" endtime="20171026 13:37:13.970" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:13.970">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:13.971">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status starttime="20171026 13:37:13.635" endtime="20171026 13:37:13.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:13.971">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status starttime="20171026 13:37:13.971" endtime="20171026 13:37:13.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:13.972">${stderr} = </msg>
<status starttime="20171026 13:37:13.972" endtime="20171026 13:37:13.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.979">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.979" endtime="20171026 13:37:13.979" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.978" endtime="20171026 13:37:13.979" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.972" endtime="20171026 13:37:13.979" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.627" endtime="20171026 13:37:13.980" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.627" endtime="20171026 13:37:13.980" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.936" endtime="20171026 13:37:13.980" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.925" endtime="20171026 13:37:13.980" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.925" endtime="20171026 13:37:13.980" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:13.981">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status starttime="20171026 13:37:13.981" endtime="20171026 13:37:13.981" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:13.982">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20171026 13:37:13.981" endtime="20171026 13:37:13.982" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.985">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.984" endtime="20171026 13:37:13.985" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.984" endtime="20171026 13:37:13.985" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.986">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.986" endtime="20171026 13:37:13.986" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.985" endtime="20171026 13:37:13.986" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.988">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.987" endtime="20171026 13:37:13.988" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.987" endtime="20171026 13:37:13.988" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:13.989">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:13.989" endtime="20171026 13:37:13.989" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.988" endtime="20171026 13:37:13.989" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.983" endtime="20171026 13:37:13.989" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.983" endtime="20171026 13:37:13.989" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:13.990">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status starttime="20171026 13:37:13.990" endtime="20171026 13:37:13.990" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:14.059">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:14.059">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:14.060">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20171026 13:37:23.778">Command exited with return code 0.</msg>
<status starttime="20171026 13:37:14.022" endtime="20171026 13:37:23.778" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:23.778">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:23.778">${ret_values} = (u'CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState    : xyz.openbmc_project.State.Host.HostS...</msg>
<status starttime="20171026 13:37:13.990" endtime="20171026 13:37:23.778" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:23.779">${stdout} = CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState    : xyz.openbmc_project.State.Host.HostState....</msg>
<status starttime="20171026 13:37:23.779" endtime="20171026 13:37:23.779" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:23.780">${stderr} = </msg>
<status starttime="20171026 13:37:23.780" endtime="20171026 13:37:23.780" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:23.787">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:23.787" endtime="20171026 13:37:23.787" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:23.786" endtime="20171026 13:37:23.787" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:23.780" endtime="20171026 13:37:23.787" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.982" endtime="20171026 13:37:23.788" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.982" endtime="20171026 13:37:23.788" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.982" endtime="20171026 13:37:23.788" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.980" endtime="20171026 13:37:23.788" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:13.980" endtime="20171026 13:37:23.788" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:23.789">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('FW Timestamp', 'cat /etc/timestamp') ]</msg>
<status starttime="20171026 13:37:23.789" endtime="20171026 13:37:23.789" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:23.790">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20171026 13:37:23.789" endtime="20171026 13:37:23.790" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:23.793">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:23.793" endtime="20171026 13:37:23.793" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:23.792" endtime="20171026 13:37:23.793" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:23.794">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:23.794" endtime="20171026 13:37:23.794" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:23.793" endtime="20171026 13:37:23.795" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:23.796">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:23.795" endtime="20171026 13:37:23.796" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:23.795" endtime="20171026 13:37:23.796" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:23.797">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:23.797" endtime="20171026 13:37:23.797" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:23.796" endtime="20171026 13:37:23.797" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:23.792" endtime="20171026 13:37:23.797" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:23.791" endtime="20171026 13:37:23.798" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:23.798">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status starttime="20171026 13:37:23.798" endtime="20171026 13:37:23.798" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:23.868">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:23.868">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:23.868">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20171026 13:37:24.364">Command exited with return code 0.</msg>
<status starttime="20171026 13:37:23.831" endtime="20171026 13:37:24.364" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:24.364">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:24.364">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-217"\nVERSION_ID="v1.99.10-217-gc29ad1c"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status starttime="20171026 13:37:23.799" endtime="20171026 13:37:24.364" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:24.365">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-217"
VERSION_ID="v1.99.10-217-gc29ad1c"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status starttime="20171026 13:37:24.365" endtime="20171026 13:37:24.365" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:24.366">${stderr} = </msg>
<status starttime="20171026 13:37:24.365" endtime="20171026 13:37:24.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:24.373">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:24.372" endtime="20171026 13:37:24.373" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.372" endtime="20171026 13:37:24.373" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.366" endtime="20171026 13:37:24.373" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:23.790" endtime="20171026 13:37:24.373" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:23.790" endtime="20171026 13:37:24.373" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:24.376">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:24.376" endtime="20171026 13:37:24.377" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.375" endtime="20171026 13:37:24.377" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:24.378">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:24.378" endtime="20171026 13:37:24.378" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.377" endtime="20171026 13:37:24.378" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:24.379">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:24.379" endtime="20171026 13:37:24.379" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.378" endtime="20171026 13:37:24.379" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:24.381">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:24.380" endtime="20171026 13:37:24.381" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.380" endtime="20171026 13:37:24.381" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.375" endtime="20171026 13:37:24.381" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.375" endtime="20171026 13:37:24.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:24.382">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status starttime="20171026 13:37:24.381" endtime="20171026 13:37:24.382" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:24.451">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:24.451">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:24.452">Executing command 'cat /etc/timestamp'.</msg>
<msg level="INFO" timestamp="20171026 13:37:24.870">Command exited with return code 0.</msg>
<status starttime="20171026 13:37:24.414" endtime="20171026 13:37:24.870" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:24.870">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:24.870">${ret_values} = (u'20171026130753', u'', 0)</msg>
<status starttime="20171026 13:37:24.382" endtime="20171026 13:37:24.871" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:24.871">${stdout} = 20171026130753</msg>
<status starttime="20171026 13:37:24.871" endtime="20171026 13:37:24.871" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:24.872">${stderr} = </msg>
<status starttime="20171026 13:37:24.872" endtime="20171026 13:37:24.872" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:24.879">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:24.879" endtime="20171026 13:37:24.879" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.878" endtime="20171026 13:37:24.880" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.872" endtime="20171026 13:37:24.880" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.374" endtime="20171026 13:37:24.880" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.374" endtime="20171026 13:37:24.880" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:23.790" endtime="20171026 13:37:24.880" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:23.788" endtime="20171026 13:37:24.880" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:23.788" endtime="20171026 13:37:24.880" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.925" endtime="20171026 13:37:24.880" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.923" endtime="20171026 13:37:24.880" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.898" endtime="20171026 13:37:24.880" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.895" endtime="20171026 13:37:24.880" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.895" endtime="20171026 13:37:24.880" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171026 13:37:24.882" endtime="20171026 13:37:24.882" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:24.882">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:24.882">${ret_values} = None</msg>
<status starttime="20171026 13:37:24.882" endtime="20171026 13:37:24.882" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171026 13:37:24.883" endtime="20171026 13:37:24.883" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:24.913">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:37:24.912" endtime="20171026 13:37:24.913" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:24.914">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:37:24.913" endtime="20171026 13:37:24.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:24.914">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:37:24.914" endtime="20171026 13:37:24.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:24.915">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:37:24.914" endtime="20171026 13:37:24.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:25.715">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:37:24.916" endtime="20171026 13:37:25.715" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:25.715">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:25.715">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:24.915" endtime="20171026 13:37:25.715" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:25.716">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:25.716" endtime="20171026 13:37:25.716" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:25.717">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:25.717" endtime="20171026 13:37:25.717" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.912" endtime="20171026 13:37:25.717" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.911" endtime="20171026 13:37:25.717" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.911" endtime="20171026 13:37:25.717" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:25.718">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20171026 13:37:25.718" endtime="20171026 13:37:25.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:37:25.718" endtime="20171026 13:37:25.719" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:28.540">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:37:28.540">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:25.719" endtime="20171026 13:37:28.540" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:37:28.541" endtime="20171026 13:37:28.541" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:37:28.542">Delete All Sessions</msg>
<status starttime="20171026 13:37:28.541" endtime="20171026 13:37:28.542" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:28.542">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:24.910" endtime="20171026 13:37:28.542" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:28.543">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:28.543" endtime="20171026 13:37:28.543" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:28.543">${status} = True</msg>
<status starttime="20171026 13:37:28.542" endtime="20171026 13:37:28.543" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20171026 13:37:28.543" endtime="20171026 13:37:28.544" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:28.544">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "_PID=1320"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509024415320, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1303"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509024972093, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:37:28.544">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:37:28.545">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Id': 1, u'AdditionalData': [u'_PID=1320'], u'Resolved': 0, u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Message': u'org.open_...</msg>
<status starttime="20171026 13:37:28.544" endtime="20171026 13:37:28.545" status="PASS"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:28.545">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2']</msg>
<status starttime="20171026 13:37:28.545" endtime="20171026 13:37:28.545" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:28.546">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_esel</msg>
<status starttime="20171026 13:37:28.545" endtime="20171026 13:37:28.546" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:28.547">Created file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_esel"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_esel&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:28.546" endtime="20171026 13:37:28.547" status="PASS"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20171026 13:37:28.547" endtime="20171026 13:37:28.548" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:28.551">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:37:28.551" endtime="20171026 13:37:28.552" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:28.552">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:37:28.552" endtime="20171026 13:37:28.552" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:28.553">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:37:28.552" endtime="20171026 13:37:28.553" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:28.554">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:37:28.553" endtime="20171026 13:37:28.554" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:29.271">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:37:28.555" endtime="20171026 13:37:29.271" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:29.271">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:29.271">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:28.554" endtime="20171026 13:37:29.271" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:29.272">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:29.272" endtime="20171026 13:37:29.272" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:29.273">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:29.272" endtime="20171026 13:37:29.273" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:28.550" endtime="20171026 13:37:29.273" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:28.550" endtime="20171026 13:37:29.273" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:28.549" endtime="20171026 13:37:29.273" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:29.274">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status starttime="20171026 13:37:29.274" endtime="20171026 13:37:29.274" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:37:29.275" endtime="20171026 13:37:29.275" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:29.963">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:37:29.963">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:29.276" endtime="20171026 13:37:29.963" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:37:29.964" endtime="20171026 13:37:29.964" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:37:29.965">Delete All Sessions</msg>
<status starttime="20171026 13:37:29.964" endtime="20171026 13:37:29.965" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:29.965">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:28.549" endtime="20171026 13:37:29.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:29.965">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:29.965" endtime="20171026 13:37:29.966" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:29.966">To JSON using : content={
  "data": [
    "_PID=1320"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:37:29.966">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:37:29.966">${content} = {u'data': [u'_PID=1320'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:37:29.966" endtime="20171026 13:37:29.966" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:29.967">${esel_data} = [u'_PID=1320']</msg>
<status starttime="20171026 13:37:28.548" endtime="20171026 13:37:29.967" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:37:29.968">[ _PID=1320 ] does not contain match for pattern 'ESEL*'.</msg>
<status starttime="20171026 13:37:29.967" endtime="20171026 13:37:29.968" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:29.968">${status} = False</msg>
<status starttime="20171026 13:37:29.967" endtime="20171026 13:37:29.968" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:29.969">Continuing for loop from the next iteration.</msg>
<status starttime="20171026 13:37:29.969" endtime="20171026 13:37:29.969" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:28.547" endtime="20171026 13:37:29.969" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20171026 13:37:29.970" endtime="20171026 13:37:29.970" status="PASS"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:29.973">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:37:29.973" endtime="20171026 13:37:29.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:29.976">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:37:29.976" endtime="20171026 13:37:29.976" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:29.977">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:37:29.976" endtime="20171026 13:37:29.977" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:29.978">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:37:29.977" endtime="20171026 13:37:29.978" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:30.381">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:37:29.979" endtime="20171026 13:37:30.382" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:30.382">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:30.382">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:29.978" endtime="20171026 13:37:30.382" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:30.383">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:30.382" endtime="20171026 13:37:30.383" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:30.383">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:30.383" endtime="20171026 13:37:30.383" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:29.972" endtime="20171026 13:37:30.384" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:29.972" endtime="20171026 13:37:30.384" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:29.971" endtime="20171026 13:37:30.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:30.384">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20171026 13:37:30.384" endtime="20171026 13:37:30.384" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:37:30.385" endtime="20171026 13:37:30.385" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:31.355">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:37:31.355">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:30.385" endtime="20171026 13:37:31.355" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:37:31.355" endtime="20171026 13:37:31.356" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:37:31.356">Delete All Sessions</msg>
<status starttime="20171026 13:37:31.356" endtime="20171026 13:37:31.356" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:31.357">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:37:29.971" endtime="20171026 13:37:31.357" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:31.357">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:37:31.357" endtime="20171026 13:37:31.357" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:31.358">To JSON using : content={
  "data": [
    "_PID=1303"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:37:31.358">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:37:31.358">${content} = {u'data': [u'_PID=1303'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:37:31.358" endtime="20171026 13:37:31.358" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:31.358">${esel_data} = [u'_PID=1303']</msg>
<status starttime="20171026 13:37:29.970" endtime="20171026 13:37:31.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="Collections" name="Should Contain Match">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:37:31.360">[ _PID=1303 ] does not contain match for pattern 'ESEL*'.</msg>
<status starttime="20171026 13:37:31.359" endtime="20171026 13:37:31.360" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:31.360">${status} = False</msg>
<status starttime="20171026 13:37:31.359" endtime="20171026 13:37:31.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:31.360">Continuing for loop from the next iteration.</msg>
<status starttime="20171026 13:37:31.360" endtime="20171026 13:37:31.361" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:29.969" endtime="20171026 13:37:31.361" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:28.547" endtime="20171026 13:37:31.361" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:31.366">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171026 13:37:31.369">${out} = </msg>
<status starttime="20171026 13:37:31.361" endtime="20171026 13:37:31.369" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:37:31.374">'' does not contain 'eSEL.pl'</msg>
<status starttime="20171026 13:37:31.373" endtime="20171026 13:37:31.374" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:31.374">${status} = False</msg>
<status starttime="20171026 13:37:31.372" endtime="20171026 13:37:31.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:31.375">Returning from the enclosing user keyword.</msg>
<status starttime="20171026 13:37:31.374" endtime="20171026 13:37:31.375" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.909" endtime="20171026 13:37:31.375" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.883" endtime="20171026 13:37:31.376" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.881" endtime="20171026 13:37:31.376" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:24.881" endtime="20171026 13:37:31.376" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171026 13:37:31.379" endtime="20171026 13:37:31.379" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:31.379">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:31.379">${ret_values} = None</msg>
<status starttime="20171026 13:37:31.378" endtime="20171026 13:37:31.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171026 13:37:31.380" endtime="20171026 13:37:31.380" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:31.444">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:31.444">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:31.444">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20171026 13:37:31.625">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20171026 13:37:31.637">${core_files} = None</msg>
<msg level="INFO" timestamp="20171026 13:37:31.637">${stderr} = None</msg>
<msg level="INFO" timestamp="20171026 13:37:31.637">${rc} = None</msg>
<msg level="FAIL" timestamp="20171026 13:37:31.638">#(UTC) 2017/10/26 13:37:31.636401 -    0.193057 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status starttime="20171026 13:37:31.411" endtime="20171026 13:37:31.638" status="FAIL"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:31.639">@{core_list} = [ ]</msg>
<msg level="FAIL" timestamp="20171026 13:37:31.639">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status starttime="20171026 13:37:31.638" endtime="20171026 13:37:31.639" status="FAIL"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20171026 13:37:31.649" endtime="20171026 13:37:31.650" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20171026 13:37:31.652" endtime="20171026 13:37:33.764" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:31.651" endtime="20171026 13:37:33.764" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:31.651" endtime="20171026 13:37:33.764" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:31.648" endtime="20171026 13:37:33.764" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:31.639" endtime="20171026 13:37:33.764" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status starttime="20171026 13:37:33.764" endtime="20171026 13:37:33.764" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:31.411" endtime="20171026 13:37:33.765" status="FAIL"></status>
</kw>
<status starttime="20171026 13:37:31.380" endtime="20171026 13:37:33.765" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:31.377" endtime="20171026 13:37:33.765" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:31.376" endtime="20171026 13:37:33.765" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171026 13:37:33.767" endtime="20171026 13:37:33.767" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:33.767">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:33.767">${ret_values} = None</msg>
<status starttime="20171026 13:37:33.766" endtime="20171026 13:37:33.767" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171026 13:37:33.768" endtime="20171026 13:37:33.768" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:33.795">@{entries} = [ BMC FILES ]</msg>
<status starttime="20171026 13:37:33.795" endtime="20171026 13:37:33.795" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:33.796">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpui...</msg>
<status starttime="20171026 13:37:33.796" endtime="20171026 13:37:33.797" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:33.797">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_proc_list.txt</msg>
<status starttime="20171026 13:37:33.797" endtime="20171026 13:37:33.797" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171026 13:37:33.799" endtime="20171026 13:37:33.799" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:33.800">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status starttime="20171026 13:37:33.799" endtime="20171026 13:37:33.800" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:33.875">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:33.875">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:33.875">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20171026 13:37:34.620">Command exited with return code 0.</msg>
<status starttime="20171026 13:37:33.832" endtime="20171026 13:37:34.620" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:34.620">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:34.620">${ret_values} = (u'Mem: 187624K used, 244628K free, 8992K shrd, 20008K buff, 71688K cached\nCPU:   0% usr 100% sys   0% nic   0% idle   0% io   0% irq   0% sirq\nLoad average: 2.41 2.44 1.21 4/171 1852\n  PID  PPID U...</msg>
<status starttime="20171026 13:37:33.800" endtime="20171026 13:37:34.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:34.621">${stdout} = Mem: 187624K used, 244628K free, 8992K shrd, 20008K buff, 71688K cached
CPU:   0% usr 100% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 2.41 2.44 1.21 4/171 1852
  PID  PPID USER   ...</msg>
<status starttime="20171026 13:37:34.621" endtime="20171026 13:37:34.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:34.622">${stderr} = </msg>
<status starttime="20171026 13:37:34.621" endtime="20171026 13:37:34.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:34.629">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_proc_list.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:34.629" endtime="20171026 13:37:34.629" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:34.628" endtime="20171026 13:37:34.629" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:34.622" endtime="20171026 13:37:34.630" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:33.798" endtime="20171026 13:37:34.630" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:33.797" endtime="20171026 13:37:34.630" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:34.630">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_journalctl_nopager.txt</msg>
<status starttime="20171026 13:37:34.630" endtime="20171026 13:37:34.630" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171026 13:37:34.631" endtime="20171026 13:37:34.632" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:34.633">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status starttime="20171026 13:37:34.632" endtime="20171026 13:37:34.633" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:34.703">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:34.704">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:34.704">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20171026 13:37:38.252">Command exited with return code 0.</msg>
<status starttime="20171026 13:37:34.665" endtime="20171026 13:37:38.253" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:38.253">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:38.255">${ret_values} = (u'-- Logs begin at Thu 2017-10-26 13:32:49 UTC, end at Thu 2017-10-26 13:37:45 UTC. --\nOct 26 13:32:49 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 26 13:32:49 witherspoon kernel: Linu...</msg>
<status starttime="20171026 13:37:34.633" endtime="20171026 13:37:38.255" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:38.256">${stdout} = -- Logs begin at Thu 2017-10-26 13:32:49 UTC, end at Thu 2017-10-26 13:37:45 UTC. --
Oct 26 13:32:49 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 26 13:32:49 witherspoon kernel: Linux ver...</msg>
<status starttime="20171026 13:37:38.256" endtime="20171026 13:37:38.257" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:38.257">${stderr} = </msg>
<status starttime="20171026 13:37:38.257" endtime="20171026 13:37:38.257" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:38.266">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_journalctl_nopager.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:38.265" endtime="20171026 13:37:38.266" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:38.263" endtime="20171026 13:37:38.266" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:38.257" endtime="20171026 13:37:38.266" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:34.631" endtime="20171026 13:37:38.266" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:34.630" endtime="20171026 13:37:38.266" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:38.267">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_dmesg.txt</msg>
<status starttime="20171026 13:37:38.267" endtime="20171026 13:37:38.267" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171026 13:37:38.268" endtime="20171026 13:37:38.268" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:38.269">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status starttime="20171026 13:37:38.269" endtime="20171026 13:37:38.269" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:38.339">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:38.339">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:38.339">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20171026 13:37:38.970">Command exited with return code 0.</msg>
<status starttime="20171026 13:37:38.301" endtime="20171026 13:37:38.970" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:38.970">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:38.971">${ret_values} = (u'[    0.300000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A\n[    0.300000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16...</msg>
<status starttime="20171026 13:37:38.269" endtime="20171026 13:37:38.971" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:38.972">${stdout} = [    0.300000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A
[    0.300000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16550A...</msg>
<status starttime="20171026 13:37:38.971" endtime="20171026 13:37:38.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:38.972">${stderr} = </msg>
<status starttime="20171026 13:37:38.972" endtime="20171026 13:37:38.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:38.980">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_dmesg.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:38.979" endtime="20171026 13:37:38.980" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:38.978" endtime="20171026 13:37:38.980" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:38.973" endtime="20171026 13:37:38.980" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:38.267" endtime="20171026 13:37:38.980" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:38.266" endtime="20171026 13:37:38.980" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:38.981">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_proc_fd_active_list.txt</msg>
<status starttime="20171026 13:37:38.981" endtime="20171026 13:37:38.981" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171026 13:37:38.982" endtime="20171026 13:37:38.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:38.983">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status starttime="20171026 13:37:38.983" endtime="20171026 13:37:38.983" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:39.053">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:39.053">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:39.053">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20171026 13:37:42.729">Command exited with return code 0.</msg>
<status starttime="20171026 13:37:39.015" endtime="20171026 13:37:42.730" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:42.730">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:42.731">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct 26 13:37 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct 26 13:37 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status starttime="20171026 13:37:38.983" endtime="20171026 13:37:42.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:42.732">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct 26 13:37 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct 26 13:37 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status starttime="20171026 13:37:42.731" endtime="20171026 13:37:42.732" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:42.732">${stderr} = ls: /proc/1855/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status starttime="20171026 13:37:42.732" endtime="20171026 13:37:42.733" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:42.741">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:42.740" endtime="20171026 13:37:42.741" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:42.739" endtime="20171026 13:37:42.741" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:42.733" endtime="20171026 13:37:42.741" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:38.981" endtime="20171026 13:37:42.741" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:38.980" endtime="20171026 13:37:42.741" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:42.742">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_procinfo.txt</msg>
<status starttime="20171026 13:37:42.741" endtime="20171026 13:37:42.742" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171026 13:37:42.743" endtime="20171026 13:37:42.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:42.744">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status starttime="20171026 13:37:42.744" endtime="20171026 13:37:42.744" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:42.813">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:42.813">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:42.814">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20171026 13:37:43.537">Command exited with return code 0.</msg>
<status starttime="20171026 13:37:42.776" endtime="20171026 13:37:43.537" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:43.537">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:43.537">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status starttime="20171026 13:37:42.744" endtime="20171026 13:37:43.537" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:43.538">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status starttime="20171026 13:37:43.537" endtime="20171026 13:37:43.538" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:43.538">${stderr} = </msg>
<status starttime="20171026 13:37:43.538" endtime="20171026 13:37:43.538" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:43.546">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_procinfo.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:43.545" endtime="20171026 13:37:43.546" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:43.544" endtime="20171026 13:37:43.546" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:43.539" endtime="20171026 13:37:43.546" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:42.742" endtime="20171026 13:37:43.546" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:42.741" endtime="20171026 13:37:43.546" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:43.547">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_meminfo.txt</msg>
<status starttime="20171026 13:37:43.547" endtime="20171026 13:37:43.547" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171026 13:37:43.548" endtime="20171026 13:37:43.548" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:43.549">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status starttime="20171026 13:37:43.549" endtime="20171026 13:37:43.549" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:43.619">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:43.619">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:43.619">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20171026 13:37:44.075">Command exited with return code 0.</msg>
<status starttime="20171026 13:37:43.581" endtime="20171026 13:37:44.075" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:37:44.075">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:37:44.076">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          227144 kB\nMemAvailable:     325368 kB\nBuffers:           28324 kB\nCached:            80020 kB\nSwapCached:            0 kB\nActive:           12954...</msg>
<status starttime="20171026 13:37:43.550" endtime="20171026 13:37:44.076" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:44.076">${stdout} = MemTotal:         432252 kB
MemFree:          227144 kB
MemAvailable:     325368 kB
Buffers:           28324 kB
Cached:            80020 kB
SwapCached:            0 kB
Active:           129548 kB
Inac...</msg>
<status starttime="20171026 13:37:44.076" endtime="20171026 13:37:44.076" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:44.077">${stderr} = </msg>
<status starttime="20171026 13:37:44.077" endtime="20171026 13:37:44.077" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:37:44.084">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_meminfo.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:37:44.084" endtime="20171026 13:37:44.084" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:44.083" endtime="20171026 13:37:44.084" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:44.077" endtime="20171026 13:37:44.084" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:43.547" endtime="20171026 13:37:44.085" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:43.546" endtime="20171026 13:37:44.085" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:44.085">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_journalctl_pretty.txt</msg>
<status starttime="20171026 13:37:44.085" endtime="20171026 13:37:44.085" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20171026 13:37:44.086" endtime="20171026 13:37:44.087" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:37:44.087">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status starttime="20171026 13:37:44.087" endtime="20171026 13:37:44.088" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:37:44.157">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=1
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:44.157">timeout=25 seconds
encoding=UTF-8
prompt=# 
newline=

index=2
height=24
width=80
term_type=vt100
port=22
host=9.5.180.47
path_separator=/
alias=bmc_connection</msg>
<msg level="INFO" timestamp="20171026 13:37:44.157">Executing command 'journalctl -o json-pretty'.</msg>
<msg level="INFO" timestamp="20171026 13:38:04.905">Command exited with return code 0.</msg>
<status starttime="20171026 13:37:44.119" endtime="20171026 13:38:04.913" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:04.913">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:04.942">${ret_values} = (u'{\n\t"__CURSOR" : "s=e73faa24691a4d6eaf6594cbc5f64f72;i=1;b=b73841578fcd4f3ca7fb1464d885af79;m=16338fa;t=55c7335576059;x=7375a9a8de0e8cc9",\n\t"__REALTIME_TIMESTAMP" : "1509024769466457",\n\t"__MON...</msg>
<status starttime="20171026 13:37:44.088" endtime="20171026 13:38:04.942" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:04.948">${stdout} = {
	"__CURSOR" : "s=e73faa24691a4d6eaf6594cbc5f64f72;i=1;b=b73841578fcd4f3ca7fb1464d885af79;m=16338fa;t=55c7335576059;x=7375a9a8de0e8cc9",
	"__REALTIME_TIMESTAMP" : "1509024769466457",
	"__MONOTONIC_TI...</msg>
<status starttime="20171026 13:38:04.942" endtime="20171026 13:38:04.948" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:04.949">${stderr} = </msg>
<status starttime="20171026 13:38:04.949" endtime="20171026 13:38:04.949" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:04.971">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_journalctl_pretty.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:38:04.966" endtime="20171026 13:38:04.971" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:04.958" endtime="20171026 13:38:04.971" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:04.950" endtime="20171026 13:38:04.971" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:44.086" endtime="20171026 13:38:04.972" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:44.085" endtime="20171026 13:38:04.972" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:33.797" endtime="20171026 13:38:04.972" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:33.796" endtime="20171026 13:38:04.972" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:33.795" endtime="20171026 13:38:04.972" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:33.795" endtime="20171026 13:38:04.972" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:33.794" endtime="20171026 13:38:04.972" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:33.768" endtime="20171026 13:38:04.972" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:33.765" endtime="20171026 13:38:04.972" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:33.765" endtime="20171026 13:38:04.972" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171026 13:38:04.974" endtime="20171026 13:38:04.974" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:04.974">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:04.974">${ret_values} = None</msg>
<status starttime="20171026 13:38:04.974" endtime="20171026 13:38:04.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171026 13:38:04.975" endtime="20171026 13:38:04.975" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="System Inventory Files">
<doc>Copy systest os_inventory files.</doc>
<kw library="OperatingSystem" name="Copy Files">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status starttime="20171026 13:38:05.003" endtime="20171026 13:38:05.004" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Remove Files">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:05.004">File '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/18314/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status starttime="20171026 13:38:05.004" endtime="20171026 13:38:05.004" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:05.002" endtime="20171026 13:38:05.004" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:04.975" endtime="20171026 13:38:05.004" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:04.973" endtime="20171026 13:38:05.005" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:04.972" endtime="20171026 13:38:05.005" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20171026 13:38:05.006" endtime="20171026 13:38:05.006" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:05.006">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:05.007">${ret_values} = None</msg>
<status starttime="20171026 13:38:05.006" endtime="20171026 13:38:05.007" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20171026 13:38:05.007" endtime="20171026 13:38:05.007" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:05.034">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20171026 13:38:05.033" endtime="20171026 13:38:05.034" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:05.035">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('BMC_control_list...</msg>
<status starttime="20171026 13:38:05.035" endtime="20171026 13:38:05.035" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:05.036">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_elog.txt</msg>
<status starttime="20171026 13:38:05.035" endtime="20171026 13:38:05.036" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:05.039">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:38:05.038" endtime="20171026 13:38:05.040" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:05.040">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:38:05.040" endtime="20171026 13:38:05.040" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:05.041">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:38:05.040" endtime="20171026 13:38:05.041" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:05.042">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:38:05.041" endtime="20171026 13:38:05.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:05.847">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:38:05.042" endtime="20171026 13:38:05.847" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:05.847">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:05.847">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:05.042" endtime="20171026 13:38:05.847" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:05.848">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:05.848" endtime="20171026 13:38:05.848" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:05.849">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:05.848" endtime="20171026 13:38:05.849" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:05.038" endtime="20171026 13:38:05.849" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:05.037" endtime="20171026 13:38:05.849" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:05.037" endtime="20171026 13:38:05.849" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:05.850">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20171026 13:38:05.849" endtime="20171026 13:38:05.850" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:38:05.850" endtime="20171026 13:38:05.850" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:07.248">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:38:07.248">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:05.851" endtime="20171026 13:38:07.248" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:38:07.248" endtime="20171026 13:38:07.249" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:38:07.249">Delete All Sessions</msg>
<status starttime="20171026 13:38:07.249" endtime="20171026 13:38:07.249" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:07.249">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:05.036" endtime="20171026 13:38:07.249" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:07.251">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:07.250" endtime="20171026 13:38:07.251" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:07.251">${status} = True</msg>
<status starttime="20171026 13:38:07.250" endtime="20171026 13:38:07.251" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171026 13:38:07.251" endtime="20171026 13:38:07.251" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:07.252">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "_PID=1320"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509024415320, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1303"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Witherspoon.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1509024972093, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:38:07.252">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171026 13:38:07.252">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "_PID=1320"
            ],
            "Id": 1,
            "Message": "org.open_power...</msg>
<status starttime="20171026 13:38:07.252" endtime="20171026 13:38:07.252" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:07.254">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_elog.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:38:07.253" endtime="20171026 13:38:07.254" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:07.253" endtime="20171026 13:38:07.254" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:05.035" endtime="20171026 13:38:07.254" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:07.255">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_OCC_state.txt</msg>
<status starttime="20171026 13:38:07.254" endtime="20171026 13:38:07.255" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:07.258">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:38:07.257" endtime="20171026 13:38:07.258" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:07.259">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:38:07.259" endtime="20171026 13:38:07.259" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:07.260">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:38:07.259" endtime="20171026 13:38:07.260" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:07.260">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:38:07.260" endtime="20171026 13:38:07.260" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:07.705">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:38:07.261" endtime="20171026 13:38:07.705" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:07.705">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:07.705">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:07.261" endtime="20171026 13:38:07.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:07.706">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:07.705" endtime="20171026 13:38:07.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:07.706">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:07.706" endtime="20171026 13:38:07.706" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:07.257" endtime="20171026 13:38:07.707" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:07.256" endtime="20171026 13:38:07.707" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:07.256" endtime="20171026 13:38:07.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:07.707">${base_uri} = /org/open_power/control/enumerate</msg>
<status starttime="20171026 13:38:07.707" endtime="20171026 13:38:07.708" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:38:07.708" endtime="20171026 13:38:07.708" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:11.718">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:38:11.718">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:07.708" endtime="20171026 13:38:11.718" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:38:11.719" endtime="20171026 13:38:11.719" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:38:11.720">Delete All Sessions</msg>
<status starttime="20171026 13:38:11.720" endtime="20171026 13:38:11.720" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:11.720">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:07.255" endtime="20171026 13:38:11.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:11.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:11.721" endtime="20171026 13:38:11.721" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:11.721">${status} = True</msg>
<status starttime="20171026 13:38:11.720" endtime="20171026 13:38:11.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171026 13:38:11.722" endtime="20171026 13:38:11.722" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:11.723">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 1, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 1, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:38:11.723">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171026 13:38:11.723">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 1,
            "ThrottleMemTemp": 0,
            "ThrottleProcPower": 0,...</msg>
<status starttime="20171026 13:38:11.722" endtime="20171026 13:38:11.723" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:11.724">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_OCC_state.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_OCC_state.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:38:11.724" endtime="20171026 13:38:11.725" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:11.723" endtime="20171026 13:38:11.725" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:07.254" endtime="20171026 13:38:11.725" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:11.725">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_sensor_list.txt</msg>
<status starttime="20171026 13:38:11.725" endtime="20171026 13:38:11.725" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:11.729">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:38:11.728" endtime="20171026 13:38:11.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:11.730">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:38:11.730" endtime="20171026 13:38:11.730" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:11.731">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:38:11.730" endtime="20171026 13:38:11.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:11.731">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:38:11.731" endtime="20171026 13:38:11.732" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:12.842">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:38:11.732" endtime="20171026 13:38:12.842" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:12.842">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:12.842">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:11.732" endtime="20171026 13:38:12.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:12.843">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:12.843" endtime="20171026 13:38:12.843" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:12.844">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:12.843" endtime="20171026 13:38:12.844" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:11.727" endtime="20171026 13:38:12.844" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:11.727" endtime="20171026 13:38:12.844" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:11.726" endtime="20171026 13:38:12.844" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:12.845">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status starttime="20171026 13:38:12.844" endtime="20171026 13:38:12.845" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:38:12.845" endtime="20171026 13:38:12.845" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="WARN" timestamp="20171026 13:38:22.858">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/sensors/enumerate</msg>
<msg level="INFO" timestamp="20171026 13:38:34.587">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:38:34.587">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:12.846" endtime="20171026 13:38:34.587" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:38:34.588" endtime="20171026 13:38:34.588" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:38:34.589">Delete All Sessions</msg>
<status starttime="20171026 13:38:34.588" endtime="20171026 13:38:34.589" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:34.589">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:11.726" endtime="20171026 13:38:34.589" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:34.590">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:34.590" endtime="20171026 13:38:34.590" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:34.590">${status} = True</msg>
<status starttime="20171026 13:38:34.589" endtime="20171026 13:38:34.590" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171026 13:38:34.591" endtime="20171026 13:38:34.591" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:34.596">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 17875, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 17125, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 7262, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 7500
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 7262, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 7381
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 7262, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 7500
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/fan_disk_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 400000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 81000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 375000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/io_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 150000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 54000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 128000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p0_gpu0_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 350000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 22000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 330000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p0_gpu1_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 350000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 23000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 330000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p0_gpu2_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 350000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 23000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 330000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p0_io_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 100000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 59000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p0_mem_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 24000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 250000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p0_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 36000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 250000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p1_gpu0_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 350000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 24000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 330000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p1_gpu1_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 350000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 21000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 330000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p1_gpu2_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 350000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 23000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 330000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p1_io_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 100000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 51000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p1_mem_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 23000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 250000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/p1_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 45000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 250000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 258000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 240000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/total_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 3100000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 447000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 3050000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 35000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 25736, 
      "WarningAlarmHigh": 1, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 25000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm0_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm10_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm11_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm12_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm13_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm14_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm15_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm1_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm2_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm3_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm4_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm5_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm6_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm7_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm8_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm9_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core0_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 14000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core12_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 15000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core13_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 14000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core16_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 16000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core18_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 13000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core19_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 17000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core23_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 14000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core2_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 12000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core7_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 12000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core9_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 11000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core0_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 16000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core10_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 15000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core11_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 16000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core13_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 14000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core14_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 14000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core15_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 15000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core16_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 15000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core17_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 16000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core18_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 16000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core19_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 16000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core1_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 14000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core20_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 16000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core21_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 14000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core6_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 15000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core7_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 13000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core8_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 17000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core9_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 83000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 16000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 78000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 203500, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "CriticalAlarmHigh": 1, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 398000, 
      "WarningAlarmHigh": 1, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 205500, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "CriticalAlarmHigh": 1, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 399000, 
      "WarningAlarmHigh": 1, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:38:34.597">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171026 13:38:34.597">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "CriticalAlarmHigh": 0,
            "CriticalAlarmLow": 0,
            "CriticalHigh": 180000,
        ...</msg>
<status starttime="20171026 13:38:34.591" endtime="20171026 13:38:34.597" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:34.599">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_sensor_list.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:38:34.599" endtime="20171026 13:38:34.599" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:34.597" endtime="20171026 13:38:34.600" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:11.725" endtime="20171026 13:38:34.600" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:34.600">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_control_list.txt</msg>
<status starttime="20171026 13:38:34.600" endtime="20171026 13:38:34.600" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:34.603">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:38:34.603" endtime="20171026 13:38:34.604" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:34.604">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:38:34.604" endtime="20171026 13:38:34.605" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:34.605">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:38:34.605" endtime="20171026 13:38:34.605" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:34.606">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:38:34.605" endtime="20171026 13:38:34.606" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:35.157">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:38:34.607" endtime="20171026 13:38:35.157" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:35.157">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:35.157">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:34.606" endtime="20171026 13:38:35.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:35.158">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:35.158" endtime="20171026 13:38:35.158" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:35.159">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:35.159" endtime="20171026 13:38:35.159" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:34.602" endtime="20171026 13:38:35.159" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:34.602" endtime="20171026 13:38:35.159" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:34.601" endtime="20171026 13:38:35.159" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:35.160">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status starttime="20171026 13:38:35.160" endtime="20171026 13:38:35.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:38:35.160" endtime="20171026 13:38:35.161" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:35.663">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:38:35.663">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:35.161" endtime="20171026 13:38:35.663" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:38:35.664" endtime="20171026 13:38:35.664" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:38:35.664">Delete All Sessions</msg>
<status starttime="20171026 13:38:35.664" endtime="20171026 13:38:35.664" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:35.665">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:34.601" endtime="20171026 13:38:35.665" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:35.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:35.665" endtime="20171026 13:38:35.666" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:35.666">${status} = True</msg>
<status starttime="20171026 13:38:35.665" endtime="20171026 13:38:35.666" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171026 13:38:35.666" endtime="20171026 13:38:35.667" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:35.667">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:38:35.667">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171026 13:38:35.668">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status starttime="20171026 13:38:35.667" endtime="20171026 13:38:35.668" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:35.669">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_control_list.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:38:35.669" endtime="20171026 13:38:35.669" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:35.668" endtime="20171026 13:38:35.669" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:34.600" endtime="20171026 13:38:35.670" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:35.670">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_inventory.txt</msg>
<status starttime="20171026 13:38:35.670" endtime="20171026 13:38:35.670" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:35.673">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:38:35.673" endtime="20171026 13:38:35.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:35.674">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:38:35.674" endtime="20171026 13:38:35.674" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:35.675">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:38:35.675" endtime="20171026 13:38:35.675" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:35.676">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:38:35.675" endtime="20171026 13:38:35.676" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:36.039">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:38:35.677" endtime="20171026 13:38:36.039" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:36.039">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:36.039">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:35.676" endtime="20171026 13:38:36.039" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:36.040">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:36.040" endtime="20171026 13:38:36.040" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:36.041">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:36.040" endtime="20171026 13:38:36.041" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:35.673" endtime="20171026 13:38:36.041" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:35.672" endtime="20171026 13:38:36.041" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:35.671" endtime="20171026 13:38:36.041" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:36.042">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20171026 13:38:36.041" endtime="20171026 13:38:36.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:38:36.042" endtime="20171026 13:38:36.043" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:40.006">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:38:40.006">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:36.043" endtime="20171026 13:38:40.006" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:38:40.006" endtime="20171026 13:38:40.007" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:38:40.007">Delete All Sessions</msg>
<status starttime="20171026 13:38:40.007" endtime="20171026 13:38:40.007" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:40.008">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:35.670" endtime="20171026 13:38:40.008" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:40.009">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:40.008" endtime="20171026 13:38:40.009" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:40.009">${status} = True</msg>
<status starttime="20171026 13:38:40.008" endtime="20171026 13:38:40.009" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171026 13:38:40.009" endtime="20171026 13:38:40.010" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:40.013">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "'8335-GTW000000'", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "'1318AAA0000000'"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/390e9d0f"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM WS", 
      "Model": "", 
      "PartNumber": "'00VK5250000000'", 
      "Present": 1, 
      "PrettyName": "FRU DESCRIPTION", 
      "SerialNumber": "Y130UF72702N0000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/aca07270", 
        "/xyz/openbmc_project/software/7413b9c5"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:2a:08", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA862", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA1934095325", 
      "Version": "21"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA862", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA1934095327", 
      "Version": "21"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447ab88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x34479965", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106206", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106774", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1610632b", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x161067d9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16105459", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106032", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447b3cb", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447b1ae", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x347a74db", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447a78b", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447ab90", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x347a7465", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x161067bc", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106204", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 0, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:38:40.013">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171026 13:38:40.013">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status starttime="20171026 13:38:40.010" endtime="20171026 13:38:40.013" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:40.015">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_inventory.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:38:40.014" endtime="20171026 13:38:40.015" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:40.014" endtime="20171026 13:38:40.015" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:35.670" endtime="20171026 13:38:40.015" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:40.016">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_led.txt</msg>
<status starttime="20171026 13:38:40.016" endtime="20171026 13:38:40.016" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:40.021">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:38:40.021" endtime="20171026 13:38:40.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:40.023">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:38:40.022" endtime="20171026 13:38:40.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:40.024">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:38:40.023" endtime="20171026 13:38:40.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:40.025">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:38:40.024" endtime="20171026 13:38:40.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:40.416">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:38:40.026" endtime="20171026 13:38:40.416" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:40.416">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:40.416">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:40.025" endtime="20171026 13:38:40.416" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:40.417">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:40.417" endtime="20171026 13:38:40.417" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:40.418">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:40.418" endtime="20171026 13:38:40.418" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:40.020" endtime="20171026 13:38:40.418" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:40.020" endtime="20171026 13:38:40.418" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:40.017" endtime="20171026 13:38:40.418" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:40.419">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status starttime="20171026 13:38:40.419" endtime="20171026 13:38:40.419" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:38:40.419" endtime="20171026 13:38:40.420" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:46.692">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:38:46.693">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:40.420" endtime="20171026 13:38:46.693" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:38:46.693" endtime="20171026 13:38:46.694" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:38:46.694">Delete All Sessions</msg>
<status starttime="20171026 13:38:46.694" endtime="20171026 13:38:46.694" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:46.694">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:40.016" endtime="20171026 13:38:46.695" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:46.696">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:46.695" endtime="20171026 13:38:46.696" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:46.696">${status} = True</msg>
<status starttime="20171026 13:38:46.695" endtime="20171026 13:38:46.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171026 13:38:46.696" endtime="20171026 13:38:46.696" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:46.698">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:38:46.699">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171026 13:38:46.699">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status starttime="20171026 13:38:46.697" endtime="20171026 13:38:46.699" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:46.701">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_led.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:38:46.700" endtime="20171026 13:38:46.701" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:46.699" endtime="20171026 13:38:46.701" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:40.015" endtime="20171026 13:38:46.701" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:46.702">${logpath} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_FIRMWARE_list.txt</msg>
<status starttime="20171026 13:38:46.701" endtime="20171026 13:38:46.702" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:46.705">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:38:46.705" endtime="20171026 13:38:46.705" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:46.706">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:38:46.705" endtime="20171026 13:38:46.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:46.706">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:38:46.706" endtime="20171026 13:38:46.706" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:46.707">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:38:46.707" endtime="20171026 13:38:46.707" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:47.213">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:38:46.708" endtime="20171026 13:38:47.213" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:47.213">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:47.213">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:46.707" endtime="20171026 13:38:47.213" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:47.214">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:47.214" endtime="20171026 13:38:47.214" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:47.215">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:47.214" endtime="20171026 13:38:47.215" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:46.704" endtime="20171026 13:38:47.215" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:46.703" endtime="20171026 13:38:47.215" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:46.702" endtime="20171026 13:38:47.215" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:47.216">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status starttime="20171026 13:38:47.215" endtime="20171026 13:38:47.216" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:38:47.216" endtime="20171026 13:38:47.216" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:47.707">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:38:47.708">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:47.217" endtime="20171026 13:38:47.708" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:38:47.708" endtime="20171026 13:38:47.709" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:38:47.709">Delete All Sessions</msg>
<status starttime="20171026 13:38:47.709" endtime="20171026 13:38:47.709" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:47.709">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:46.702" endtime="20171026 13:38:47.709" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:47.711">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:47.710" endtime="20171026 13:38:47.711" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:47.711">${status} = True</msg>
<status starttime="20171026 13:38:47.710" endtime="20171026 13:38:47.711" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20171026 13:38:47.711" endtime="20171026 13:38:47.711" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:47.712">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/390e9d0f": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1471-g8043efb,buildroot-2017.08-8-g5e23247,skiboot-v5.8-150-gabb1d4e81f33-p74eca7d,hostboot-b01e6bb,linux-4.13.5-openpower1-pd2c0bbb,petitboot-v1.6.0-p3dc37e1,machine-xml-389c56f,occ-ba4e81e,hostboot-binaries-0886586,capp-ucode-p9-dd2-v2,sbe-374add4", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-ibm-OP9_v1.19_1.62", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/390e9d0f/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/390e9d0f/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7413b9c5": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 2, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-199-g8899f0c", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7413b9c5/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/7413b9c5/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/aca07270": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-217-gc29ad1c", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/aca07270/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/aca07270/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/aca07270", 
        "/xyz/openbmc_project/software/390e9d0f", 
        "/xyz/openbmc_project/software/7413b9c5"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/aca07270", 
        "/xyz/openbmc_project/software/390e9d0f"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:38:47.712">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171026 13:38:47.713">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/390e9d0f": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-v1....</msg>
<status starttime="20171026 13:38:47.712" endtime="20171026 13:38:47.713" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:47.714">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_FIRMWARE_list.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/20171026133711300819_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:38:47.714" endtime="20171026 13:38:47.714" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:47.713" endtime="20171026 13:38:47.714" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:46.701" endtime="20171026 13:38:47.714" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:05.035" endtime="20171026 13:38:47.715" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:05.034" endtime="20171026 13:38:47.715" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:05.034" endtime="20171026 13:38:47.715" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:05.034" endtime="20171026 13:38:47.715" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:05.033" endtime="20171026 13:38:47.715" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:05.007" endtime="20171026 13:38:47.715" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:05.005" endtime="20171026 13:38:47.715" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:05.005" endtime="20171026 13:38:47.715" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.864" endtime="20171026 13:38:47.715" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.862" endtime="20171026 13:38:47.715" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.862" endtime="20171026 13:38:47.715" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.861" endtime="20171026 13:38:47.715" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20171026 13:38:47.723" endtime="20171026 13:38:47.723" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:47.716" endtime="20171026 13:38:47.723" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:12.861" endtime="20171026 13:38:47.723" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:08.189" endtime="20171026 13:38:47.723" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:08.188" endtime="20171026 13:38:47.724" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:47.735">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20171026 13:38:47.724" endtime="20171026 13:38:47.735" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:47.736">${FFDC_DIR_PATH} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/</msg>
<status starttime="20171026 13:38:47.736" endtime="20171026 13:38:47.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20171026 13:38:47.736" endtime="20171026 13:38:47.737" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20171026 13:38:47.737" endtime="20171026 13:38:47.738" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:47.738">Directory '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs"&gt;/tmp/fspcibld/18314/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20171026 13:38:47.738" endtime="20171026 13:38:47.739" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:47.739">File '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20171026 13:38:47.739" endtime="20171026 13:38:47.740" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:47.740">${exist} = True</msg>
<status starttime="20171026 13:38:47.739" endtime="20171026 13:38:47.740" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20171026 13:38:47.740" endtime="20171026 13:38:47.740" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20171026 13:38:47.740" endtime="20171026 13:38:47.741" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:47.742">${cur_time} = 2017-10-26 13:38:47:741649</msg>
<status starttime="20171026 13:38:47.741" endtime="20171026 13:38:47.742" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:47.742">${cur_time} = 20171026133847741649</msg>
<status starttime="20171026 13:38:47.742" endtime="20171026 13:38:47.742" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:47.743">${cur_time} = 20171026133847741649</msg>
<status starttime="20171026 13:38:47.741" endtime="20171026 13:38:47.743" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:47.743">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:38:47.743" endtime="20171026 13:38:47.744" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:47.724" endtime="20171026 13:38:47.744" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw library="utils" name="Delete Error Logs">
<doc>Delete error logs.</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:47.748">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:38:47.748" endtime="20171026 13:38:47.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:47.749">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:38:47.749" endtime="20171026 13:38:47.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:47.750">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:38:47.750" endtime="20171026 13:38:47.750" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:47.751">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:38:47.750" endtime="20171026 13:38:47.751" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:48.140">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:38:47.752" endtime="20171026 13:38:48.140" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:48.140">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:48.140">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:47.751" endtime="20171026 13:38:48.140" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:48.141">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:48.141" endtime="20171026 13:38:48.141" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:48.142">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:48.141" endtime="20171026 13:38:48.142" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:47.748" endtime="20171026 13:38:48.142" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:47.747" endtime="20171026 13:38:48.142" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:47.746" endtime="20171026 13:38:48.142" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:48.143">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status starttime="20171026 13:38:48.142" endtime="20171026 13:38:48.143" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:38:48.143" endtime="20171026 13:38:48.143" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:48.340">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:38:48.340">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:48.144" endtime="20171026 13:38:48.340" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:38:48.340" endtime="20171026 13:38:48.341" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:38:48.342">Delete All Sessions</msg>
<status starttime="20171026 13:38:48.341" endtime="20171026 13:38:48.342" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:48.342">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:47.746" endtime="20171026 13:38:48.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status starttime="20171026 13:38:48.343" endtime="20171026 13:38:48.343" status="PASS"></status>
</kw>
<kw library="utils" name="Get URL List">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:48.349">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:38:48.349" endtime="20171026 13:38:48.350" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:48.351">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:38:48.350" endtime="20171026 13:38:48.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:48.352">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:38:48.351" endtime="20171026 13:38:48.352" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:48.353">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:38:48.352" endtime="20171026 13:38:48.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:48.869">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:38:48.354" endtime="20171026 13:38:48.869" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:48.869">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:48.869">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:48.353" endtime="20171026 13:38:48.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:48.870">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:48.870" endtime="20171026 13:38:48.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:48.871">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:48.870" endtime="20171026 13:38:48.871" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:48.348" endtime="20171026 13:38:48.871" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:48.347" endtime="20171026 13:38:48.871" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:48.346" endtime="20171026 13:38:48.871" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:48.872">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status starttime="20171026 13:38:48.871" endtime="20171026 13:38:48.872" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:38:48.872" endtime="20171026 13:38:48.873" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:48.964">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:38:48.964">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:48.873" endtime="20171026 13:38:48.964" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:38:48.965" endtime="20171026 13:38:48.965" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:38:48.966">Delete All Sessions</msg>
<status starttime="20171026 13:38:48.965" endtime="20171026 13:38:48.966" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:48.966">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:48.345" endtime="20171026 13:38:48.966" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:48.966">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:48.966" endtime="20171026 13:38:48.967" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:48.967">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/2", 
    "/xyz/openbmc_project/logging/entry/1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171026 13:38:48.967">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171026 13:38:48.967">${content} = {u'data': [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/1'], u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20171026 13:38:48.967" endtime="20171026 13:38:48.967" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:48.968">${url_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/1']</msg>
<status starttime="20171026 13:38:48.344" endtime="20171026 13:38:48.968" status="PASS"></status>
</kw>
<kw library="Collections" name="Sort List">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status starttime="20171026 13:38:48.968" endtime="20171026 13:38:48.968" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:48.968">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2']</msg>
<status starttime="20171026 13:38:48.344" endtime="20171026 13:38:48.968" status="PASS"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/1">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20171026 13:38:48.969" endtime="20171026 13:38:48.970" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:48.971">${data} = {u'data': []}</msg>
<status starttime="20171026 13:38:48.970" endtime="20171026 13:38:48.971" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:48.973">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:38:48.973" endtime="20171026 13:38:48.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:48.974">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:38:48.974" endtime="20171026 13:38:48.974" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:48.975">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:38:48.974" endtime="20171026 13:38:48.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:48.975">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:38:48.975" endtime="20171026 13:38:48.975" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:49.683">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:38:48.976" endtime="20171026 13:38:49.683" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:49.683">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:49.683">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:48.976" endtime="20171026 13:38:49.683" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:49.684">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:49.684" endtime="20171026 13:38:49.684" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:49.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:49.684" endtime="20171026 13:38:49.685" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:48.972" endtime="20171026 13:38:49.685" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:48.972" endtime="20171026 13:38:49.685" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:48.971" endtime="20171026 13:38:49.685" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:49.686">${base_uri} = /xyz/openbmc_project/logging/entry/1</msg>
<status starttime="20171026 13:38:49.685" endtime="20171026 13:38:49.686" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:49.688">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status starttime="20171026 13:38:49.687" endtime="20171026 13:38:49.688" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:49.689">URI:https://9.5.180.47:443/xyz/openbmc_project/logging/entry/1, method:Delete, args:{u'data': {u'data': []}}</msg>
<status starttime="20171026 13:38:49.689" endtime="20171026 13:38:49.689" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:49.688" endtime="20171026 13:38:49.689" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:49.686" endtime="20171026 13:38:49.689" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:50.014">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171026 13:38:50.014">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:49.689" endtime="20171026 13:38:50.014" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:50.015">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:38:50.015" endtime="20171026 13:38:50.015" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:50.016">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:38:50.016" endtime="20171026 13:38:50.016" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.016" endtime="20171026 13:38:50.017" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.014" endtime="20171026 13:38:50.017" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:38:50.017">Delete All Sessions</msg>
<status starttime="20171026 13:38:50.017" endtime="20171026 13:38:50.017" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:50.017">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:48.971" endtime="20171026 13:38:50.017" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:50.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:50.018" endtime="20171026 13:38:50.018" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:48.969" endtime="20171026 13:38:50.018" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:48.969" endtime="20171026 13:38:50.018" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/2">
<kw library="utils" name="Delete Error Log Entry">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status starttime="20171026 13:38:50.019" endtime="20171026 13:38:50.019" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:50.020">${data} = {u'data': []}</msg>
<status starttime="20171026 13:38:50.020" endtime="20171026 13:38:50.020" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Delete Request">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:50.023">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:38:50.023" endtime="20171026 13:38:50.023" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:50.024">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:38:50.024" endtime="20171026 13:38:50.024" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:50.025">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:38:50.024" endtime="20171026 13:38:50.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:50.025">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:38:50.025" endtime="20171026 13:38:50.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:50.392">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:38:50.026" endtime="20171026 13:38:50.392" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:50.393">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:50.393">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:50.026" endtime="20171026 13:38:50.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:50.393">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:50.393" endtime="20171026 13:38:50.394" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:50.394">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:50.394" endtime="20171026 13:38:50.394" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.022" endtime="20171026 13:38:50.394" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.022" endtime="20171026 13:38:50.394" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.021" endtime="20171026 13:38:50.395" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:50.395">${base_uri} = /xyz/openbmc_project/logging/entry/2</msg>
<status starttime="20171026 13:38:50.395" endtime="20171026 13:38:50.395" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:50.397">${msg} = URI:https://9.5.180.47:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status starttime="20171026 13:38:50.396" endtime="20171026 13:38:50.397" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:50.398">URI:https://9.5.180.47:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status starttime="20171026 13:38:50.397" endtime="20171026 13:38:50.398" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.397" endtime="20171026 13:38:50.398" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.395" endtime="20171026 13:38:50.398" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete Request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:50.601">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171026 13:38:50.602">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:50.398" endtime="20171026 13:38:50.602" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:50.603">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:38:50.602" endtime="20171026 13:38:50.603" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:50.604">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20171026 13:38:50.604" endtime="20171026 13:38:50.604" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.603" endtime="20171026 13:38:50.604" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.602" endtime="20171026 13:38:50.604" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:38:50.605">Delete All Sessions</msg>
<status starttime="20171026 13:38:50.605" endtime="20171026 13:38:50.605" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:50.605">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:50.020" endtime="20171026 13:38:50.605" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:50.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:50.605" endtime="20171026 13:38:50.606" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.019" endtime="20171026 13:38:50.606" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.018" endtime="20171026 13:38:50.606" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:48.968" endtime="20171026 13:38:50.606" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:47.745" endtime="20171026 13:38:50.606" status="PASS"></status>
</kw>
<kw library="dump_utils" name="Delete All Dumps">
<doc>Delete all dumps.</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:50.609">Creating Session using : alias=openbmc, url=https://9.5.180.47:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20171026 13:38:50.609" endtime="20171026 13:38:50.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:50.610">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20171026 13:38:50.610" endtime="20171026 13:38:50.610" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:50.611">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20171026 13:38:50.611" endtime="20171026 13:38:50.611" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:50.612">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20171026 13:38:50.611" endtime="20171026 13:38:50.612" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:51.053">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20171026 13:38:50.612" endtime="20171026 13:38:51.053" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:51.053">${status} = PASS</msg>
<msg level="INFO" timestamp="20171026 13:38:51.053">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20171026 13:38:50.612" endtime="20171026 13:38:51.053" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:51.054">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:51.053" endtime="20171026 13:38:51.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:51.055">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20171026 13:38:51.054" endtime="20171026 13:38:51.055" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.608" endtime="20171026 13:38:51.055" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.608" endtime="20171026 13:38:51.055" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.607" endtime="20171026 13:38:51.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.056">${base_uri} = /xyz/openbmc_project//dump/entry/list</msg>
<status starttime="20171026 13:38:51.055" endtime="20171026 13:38:51.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20171026 13:38:51.056" endtime="20171026 13:38:51.056" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.284">Get Request using : alias=openbmc, uri=/xyz/openbmc_project//dump/entry/list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171026 13:38:51.284">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20171026 13:38:51.057" endtime="20171026 13:38:51.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20171026 13:38:51.285" endtime="20171026 13:38:51.285" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171026 13:38:51.285">Delete All Sessions</msg>
<status starttime="20171026 13:38:51.285" endtime="20171026 13:38:51.286" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:51.286">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20171026 13:38:50.607" endtime="20171026 13:38:51.286" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:51.286">Returning from the enclosing user keyword.</msg>
<status starttime="20171026 13:38:51.286" endtime="20171026 13:38:51.287" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:50.606" endtime="20171026 13:38:51.287" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:47.745" endtime="20171026 13:38:51.287" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:47.744" endtime="20171026 13:38:51.287" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:08.188" endtime="20171026 13:38:51.287" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.289">${default_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:38:51.288" endtime="20171026 13:38:51.289" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.289">${log_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:38:51.289" endtime="20171026 13:38:51.289" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:51.290">${log_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:38:51.288" endtime="20171026 13:38:51.290" status="PASS"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.291">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw'</msg>
<status starttime="20171026 13:38:51.291" endtime="20171026 13:38:51.291" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:38:51.291" endtime="20171026 13:38:51.292" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.296">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw''.</msg>
<msg level="INFO" timestamp="20171026 13:38:51.300">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:38:51.300">${output} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:38:51.292" endtime="20171026 13:38:51.300" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171026 13:38:51.303" endtime="20171026 13:38:51.303" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:51.304">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status starttime="20171026 13:38:51.304" endtime="20171026 13:38:51.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.305">${ssh_pw_file_path} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:38:51.305" endtime="20171026 13:38:51.305" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.306">${cmd_buf} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:38:51.306" endtime="20171026 13:38:51.306" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:51.307">${search_string} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:38:51.290" endtime="20171026 13:38:51.307" status="PASS"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.308">${search_string} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47</msg>
<status starttime="20171026 13:38:51.307" endtime="20171026 13:38:51.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.308">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20171026 13:38:51.308" endtime="20171026 13:38:51.309" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:38:51.309" endtime="20171026 13:38:51.309" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.313">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171026 13:38:51.328">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:38:51.328">${os_con_pid} = </msg>
<status starttime="20171026 13:38:51.309" endtime="20171026 13:38:51.329" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20171026 13:38:51.344" endtime="20171026 13:38:51.346" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:51.349">${os_con_pid} = </msg>
<status starttime="20171026 13:38:51.290" endtime="20171026 13:38:51.349" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.351">${cmd_buf} = kill -9 </msg>
<status starttime="20171026 13:38:51.349" endtime="20171026 13:38:51.351" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:38:51.352" endtime="20171026 13:38:51.353" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.354">${rc} = None</msg>
<msg level="INFO" timestamp="20171026 13:38:51.354">${output} = None</msg>
<status starttime="20171026 13:38:51.353" endtime="20171026 13:38:51.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171026 13:38:51.354" endtime="20171026 13:38:51.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:51.358">Copied file from '&lt;a href="file:///tmp/9.5.180.47_os_console.txt"&gt;/tmp/9.5.180.47_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/9.5.180.47_os_console.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/9.5.180.47_os_console.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:38:51.356" endtime="20171026 13:38:51.358" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:51.355" endtime="20171026 13:38:51.358" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:51.355" endtime="20171026 13:38:51.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.359">${output} = </msg>
<status starttime="20171026 13:38:51.359" endtime="20171026 13:38:51.359" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.362">${loc_quiet} = 1</msg>
<status starttime="20171026 13:38:51.360" endtime="20171026 13:38:51.362" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<status starttime="20171026 13:38:51.363" endtime="20171026 13:38:51.409" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:51.410">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:38:51.481">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.5.180.47
Warning: Permanently added '[9.5.180.47]:2200' (RSA) to the list of known hosts.
root@9.5.180.47's password: 


--== Welcome to Host...</msg>
<status starttime="20171026 13:38:51.363" endtime="20171026 13:38:51.481" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:51.606">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.5.180.47
Warning: Permanently added '[9.5.180.47]:2200' (RSA) to the list of known hosts.
root@9.5.180.47's password: 


--== Welcome to Host...</msg>
<status starttime="20171026 13:38:51.287" endtime="20171026 13:38:51.606" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:51.690">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.5.180.47
Warning: Permanently added '[9.5.180.47]:2200' (RSA) to the list of known hosts.
root@9.5.180.47's password: 


--== Welcome to Hostboot hostboot-b01e6bb/hbicore.bin ==--

  3.99417|secure|SecureROM valid - enabling functionality
  3.99420|secure|Booting in non-secure mode.
  7.45176|ISTEP  6. 5 - host_init_fsi
  7.58936|ISTEP  6. 6 - host_set_ipl_parms
  7.68193|ISTEP  6. 7 - host_discover_targets
  8.27303|HWAS|PRESENT&gt; DIMM[03]=AAAA000000000000
  8.27303|HWAS|PRESENT&gt; Proc[05]=8800000000000000
  8.27305|HWAS|PRESENT&gt; Core[07]=F3CFF3C3FFFC0000
  8.29854|ISTEP  6. 8 - host_update_master_tpm
 17.94119|SECURE|Security Access Bit&gt; 0x0000000000000000
 17.94119|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 17.94140|ISTEP  6. 9 - host_gard
 17.97140|HWAS|Deconfig HUID 0x00070003, Physical:/Sys0/Node0/Proc0/EQ0/EX1/Core1
 17.97146|HWAS|Deconfig HUID 0x00070011, Physical:/Sys0/Node0/Proc0/EQ4/EX0/Core1
 17.97152|HWAS|Deconfig HUID 0x0007000E, Physical:/Sys0/Node0/Proc0/EQ3/EX1/Core0
 17.97160|HWAS|Deconfig HUID 0x0007000F, Physical:/Sys0/Node0/Proc0/EQ3/EX1/Core1
 17.97166|HWAS|Deconfig HUID 0x00070006, Physical:/Sys0/Node0/Proc0/EQ1/EX1/Core0
 17.97171|HWAS|Deconfig HUID 0x00070001, Physical:/Sys0/Node0/Proc0/EQ0/EX0/Core1
 17.97183|HWAS|Deconfig HUID 0x00070024, Physical:/Sys0/Node0/Proc1/EQ3/EX0/Core0
 17.97189|HWAS|Deconfig HUID 0x00070016, Physical:/Sys0/Node0/Proc0/EQ5/EX1/Core0
 17.97195|HWAS|Deconfig HUID 0x00070008, Physical:/Sys0/Node0/Proc0/EQ2/EX0/Core0
 17.97525|HWAS|FUNCTIONAL&gt; DIMM[03]=AAAA000000000000
 17.97526|HWAS|FUNCTIONAL&gt; Proc[05]=8800000000000000
 17.97527|HWAS|FUNCTIONAL&gt; Core[07]=A14CB1C3F7FC0000
 17.97903|ISTEP  6.10 - host_revert_sbe_mcs_setup
 17.99649|ISTEP  6.11 - host_start_occ_xstop_handler
 18.69812|ISTEP  6.12 - host_voltage_config
 18.74528|ISTEP  7. 1 - mss_attr_cleanup
 19.15001|ISTEP  7. 2 - mss_volt
 19.23641|ISTEP  7. 3 - mss_freq
 19.35694|ISTEP  7. 4 - mss_eff_config
 20.52698|ISTEP  7. 5 - mss_attr_update
 20.53585|ISTEP  8. 1 - host_slave_sbe_config
 20.60487|ISTEP  8. 2 - host_setup_sbe
 20.60911|ISTEP  8. 3 - host_cbs_start
 20.63948|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 27.25893|ISTEP  8. 5 - host_attnlisten_proc
 27.26343|ISTEP  8. 6 - host_p9_fbc_eff_config
 27.26883|ISTEP  8. 7 - host_p9_eff_config_links
 27.27745|ISTEP  8. 8 - proc_attr_update
 27.27956|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 27.31061|ISTEP  8.10 - proc_xbus_scominit
 28.99925|ISTEP  8.11 - proc_xbus_enable_ridi
 29.00263|ISTEP  9. 1 - fabric_erepair
 29.25386|ISTEP  9. 2 - fabric_io_dccal
 29.93675|ISTEP  9. 3 - fabric_pre_trainadv
 29.94286|ISTEP  9. 4 - fabric_io_run_training
 30.12120|ISTEP  9. 5 - fabric_post_trainadv
 30.12624|ISTEP  9. 6 - proc_smp_link_layer
 30.13076|ISTEP  9. 7 - proc_fab_iovalid
 30.15853|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 30.16285|ISTEP 10. 1 - proc_build_smp
 30.28237|ISTEP 10. 2 - host_slave_sbe_update
 31.13307|ISTEP 10. 3 - host_set_voltages
 31.24430|ISTEP 10. 4 - proc_cen_ref_clk_enable
 31.24688|ISTEP 10. 5 - proc_enable_osclite
 31.24822|ISTEP 10. 6 - proc_chiplet_scominit
 31.27890|ISTEP 10. 7 - proc_abus_scominit
 31.28907|ISTEP 10. 8 - proc_obus_scominit
 31.35095|ISTEP 10. 9 - proc_npu_scominit
 31.38246|ISTEP 10.10 - proc_pcie_scominit
 31.42355|ISTEP 10.11 - proc_scomoverride_chiplets
 31.42521|ISTEP 10.12 - proc_chiplet_enable_ridi
 31.42806|ISTEP 10.13 - host_rng_bist
 31.43006|ISTEP 10.14 - host_update_redundant_tpm
 31.43208|ISTEP 11. 1 - host_prd_hwreconfig
 31.44145|ISTEP 11. 2 - cen_tp_chiplet_init1
 31.44334|ISTEP 11. 3 - cen_pll_initf
 31.44530|ISTEP 11. 4 - cen_pll_setup
 31.44706|ISTEP 11. 5 - cen_tp_chiplet_init2
 31.45033|ISTEP 11. 6 - cen_tp_arrayinit
 31.45232|ISTEP 11. 7 - cen_tp_chiplet_init3
 31.45444|ISTEP 11. 8 - cen_chiplet_init
 31.45620|ISTEP 11. 9 - cen_arrayinit
 31.45932|ISTEP 11.10 - cen_initf
 31.46107|ISTEP 11.11 - cen_do_manual_inits
 31.46419|ISTEP 11.12 - cen_startclocks
 31.46609|ISTEP 11.13 - cen_scominits
 31.46799|ISTEP 12. 1 - mss_getecid
 31.47861|ISTEP 12. 2 - dmi_attr_update
 31.48180|ISTEP 12. 3 - proc_dmi_scominit
 31.48390|ISTEP 12. 4 - cen_dmi_scominit
 31.48603|ISTEP 12. 5 - dmi_erepair
 31.48910|ISTEP 12. 6 - dmi_io_dccal
 31.79533|ISTEP 12. 7 - dmi_pre_trainadv
 31.79722|ISTEP 12. 8 - dmi_io_run_training
 31.80920|ISTEP 12. 9 - dmi_post_trainadv
 31.81126|ISTEP 12.10 - proc_cen_framelock
 31.81305|ISTEP 12.11 - host_startprd_dmi
 31.81463|ISTEP 12.12 - host_attnlisten_memb
 31.81605|ISTEP 12.13 - cen_set_inband_addr
 31.82637|ISTEP 13. 1 - host_disable_memvolt
 32.09042|ISTEP 13. 2 - mem_pll_reset
 32.10718|ISTEP 13. 3 - mem_pll_initf
 32.15162|ISTEP 13. 4 - mem_pll_setup
 32.17551|ISTEP 13. 6 - mem_startclocks
 32.19293|ISTEP 13. 7 - host_enable_memvolt
 32.19448|ISTEP 13. 8 - mss_scominit
 32.76392|ISTEP 13. 9 - mss_ddr_phy_reset
 32.85283|ISTEP 13.10 - mss_draminit
 33.09847|ISTEP 13.11 - mss_draminit_training
 33.54026|ISTEP 13.12 - mss_draminit_trainadv
 33.67413|ISTEP 13.13 - mss_draminit_mc
 33.71959|ISTEP 14. 1 - mss_memdiag
 50.90846|ISTEP 14. 2 - mss_thermal_init
 50.92690|ISTEP 14. 3 - proc_pcie_config
 50.94911|ISTEP 14. 4 - mss_power_cleanup
 50.95289|ISTEP 14. 5 - proc_setup_bars
 50.98350|ISTEP 14. 6 - proc_htm_setup
 50.99303|ISTEP 14. 7 - proc_exit_cache_contained
 51.00609|ISTEP 15. 1 - host_build_stop_image
 52.40345|ISTEP 15. 2 - proc_set_pba_homer_bar
 52.40775|ISTEP 15. 3 - host_establish_ex_chiplet
 52.41498|ISTEP 15. 4 - host_start_stop_engine
 52.43840|ISTEP 16. 1 - host_activate_master
  0.00438|ISTEP 16. 2 - host_activate_slave_cores
 53.88566|ISTEP 16. 3 - host_secure_rng
 53.90926|ISTEP 16. 4 - mss_scrub
 53.89433|ISTEP 16. 5 - host_ipl_complete
 53.94704|ISTEP 16. 6 - host_load_io_ppe
 53.99025|ISTEP 18.11 - proc_tod_setup
 54.01763|ISTEP 18.12 - proc_tod_init
 54.03147|ISTEP 20. 1 - host_load_payload
 54.30097|ISTEP 20. 2 - host_load_hdat
 57.33272|ISTEP 21. 1 - host_runtime_setup
 67.43018|htmgt|OCCs are now running in ACTIVE state
 67.43053|ISTEP 21. 2 - host_verify_hdat
 67.41248|ISTEP 21. 3 - host_start_payload
[   88.133314699,5] OPAL skiboot-v5.8-150-gabb1d4e81f33-p74eca7d starting...
[   88.133321018,7] initial console log level: memory 7, driver 5
[   88.133323048,6] CPU: P9 generation processor (max 4 threads/core)
[   88.133324839,7] CPU: Boot CPU PIR is 0x0834 PVR is 0x004e1201
[   88.133326805,7] CPU: Initial max PIR set to 0x7fff
[   88.134983571,7] OPAL table: 0x300e9c40 .. 0x300ea180, branch table: 0x30002000
[   88.134987618,7] Assigning physical memory map table for nimbus
[   88.134991333,7] Parsing HDAT...
[   88.134992563,5] SPIRA-S found.
[   88.134995696,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[   88.135349428,6] SP Family is openbmc
[   88.135355312,7] LPC: IOPATH chip id = 0
[   88.135356673,7] LPC: FW BAR       = f0000000
[   88.135358260,7] LPC: MEM BAR      = e0000000
[   88.135359801,7] LPC: IO BAR       = d0010000
[   88.135361263,7] LPC: Internal BAR = c0012000
[   88.135373978,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[   88.135376764,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[   88.136214592,5] UART: Using UART at 0x60300d00103f8
[   88.136292845,4] CORE[1]: HW_PROC_ID=1 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   88.136430373,4] CORE[3]: HW_PROC_ID=3 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   88.136536601,4] CORE[4]: HW_PROC_ID=4 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   88.136679215,4] CORE[6]: HW_PROC_ID=6 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   88.136876939,4] CORE[10]: HW_PROC_ID=10 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   88.137002248,4] CORE[11]: HW_PROC_ID=11 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   88.137158989,4] CORE[13]: HW_PROC_ID=13 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   88.137339887,4] CORE[16]: HW_PROC_ID=16 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   88.137790084,4] CORE[26]: HW_PROC_ID=8 PROC_CHIP_ID=1 EC=0x21 UNAVAILABLE
[   88.139058911,3] I2C: v2 found, but not supported. Parsing as v1
[   88.139404167,3] I2C: v2 found, but not supported. Parsing as v1
[   88.140816001,5] P9 DD2.10 detected
[   88.140878274,5] CHIP: Chip ID 0000 type: P9N DD2.1
[   88.140941470,5] P9 DD2.10 detected
[   88.140976426,5] CHIP: Chip ID 0008 type: P9N DD2.1
[   88.141331397,5] SLW: Enabling: stop0_lite
[   88.141401061,5] SLW: Enabling: stop0
[   88.141427413,5] SLW: Enabling: stop1_lite
[   88.141457119,5] SLW: Enabling: stop1
[   88.141486969,5] SLW: Enabling: stop2_lite
[   88.141522205,5] SLW: Enabling: stop2
[   88.141552571,5] SLW: Enabling: stop4
[   88.141581194,5] SLW: Enabling: stop11
[   88.141852426,5] PLAT: Using virtual UART
[   88.142094592,7] LPC: Routing irq 9, policy: 0 (r=1)
[   88.142096282,7] LPC: SerIRQ 9 using route 0 targetted at OPAL
[   88.142247599,5] PLAT: Detected Witherspoon platform
[   88.142299410,5] PLAT: Detected BMC platform OpenBMC
[   88.171794126,5] CPU: All 108 processors called in...
[   88.164137500,7] XIVE[CPU 0035] Initialized TIMA VP=0/b5 W01=000000ff00000000 W2=00-&gt;80
[    1.473326171,5] FLASH: Found system flash:  id:0
[    1.473942732,5] BT: Interface initialized, IO 0x00e4
[    1.474671062,7] LPC: Routing irq 10, policy: 0 (r=1)
[    1.474672191,7] LPC: SerIRQ 10 using route 1 targetted at OPAL
[    4.427201089,5] NVRAM: Size is 576 KB
[    5.124627469,5] STB: secure and trusted boot not supported
[    5.124638811,7] LPC-MBOX: Sending BMC interrupt
[    5.124703641,5] OPAL: Using OPAL UART console
[    5.124752752,7] LPC: Routing irq 4, policy: 0 (r=1)
[    5.124753720,7] LPC: SerIRQ 4 using route 2 targetted at OPAL
[    5.124868729,5] SLW: Configuring self-restore for HRMOR
[    5.124952403,5] SLW: Configuring self-restore for HRMOR
[    5.125603811,5] VAS: Initialized chip 0
[    5.126417444,5] VAS: Initialized chip 8
[    5.126550171,5] Found ibm,power9-nx
[    5.126643865,5] Found ibm,power9-nx
[    6.236806821,3] FLASH: flash subpartition not found.
[    6.237727586,3] FLASH: Failed to parse subpart info for IMA_CATALOG
[    6.239342521,3] IMC: IMC Catalog load failed
[    7.391679572,5] PCI: Resetting PHBs and training links...
[    8.429568170,5] PCI: Probing slots...
[    8.486097044,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    8.486651764,5] PHB#0000:01:00.0 [EP  ] 144d a822 R:01 C:010802 (  mass-storage) SLOT=SLOT3 
[    8.487405404,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    8.488857715,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[    8.488925867,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[    8.488977979,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[    8.489732770,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[    8.490478780,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    8.491240998,5] PHB#0003:01:00.0 [EP  ] 15b3 1019 R:00 C:020700 (       network) SLOT=SLOT1 
[    8.492700020,5] PHB#0003:01:00.1 [EP  ] 15b3 1019 R:00 C:020700 (       network) SLOT=SLOT1 
[    8.494138293,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..06 
[    8.494891022,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..06 
[    8.495647853,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[    8.496396341,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[    8.497152337,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 
[    8.498604594,5] PHB#0004:04:00.0 [EP  ] 10de 1db1 R:a1 C:030200 ( 3d-controller) SLOT=GPU0 
[    8.500063207,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 
[    8.500818922,5] PHB#0004:05:00.0 [EP  ] 10de 1db1 R:a1 C:030200 ( 3d-controller) SLOT=GPU1 
[    8.501579842,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..06 
[    8.502323928,5] PHB#0004:06:00.0 [EP  ] 10de 1db1 R:a1 C:030200 ( 3d-controller) SLOT=GPU2 
[    8.503075262,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.503830232,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.504584925,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.506045924,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.506805247,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    8.506850236,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    8.507595979,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    8.509046059,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    8.509108342,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    8.509161992,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    8.509230744,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    8.509276795,5] PHB#0006:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    8.509326092,5] PHB#0006:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    8.509376853,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    8.509433496,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    8.509489337,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    8.509535207,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    8.509582371,5] PHB#0007:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    8.509628703,5] PHB#0007:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    8.509683955,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.509734775,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    8.509805203,5] PHB#0033:01:00.0 [EP  ] 15b3 1019 R:00 C:020700 (       network) SLOT=SLOT1 
[    8.509895291,5] PHB#0033:01:00.1 [EP  ] 15b3 1019 R:00 C:020700 (       network) SLOT=SLOT1 
[    8.509952478,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    8.509999606,5] PHB#0034:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) SLOT=SLOT0 
[    8.510071978,5] PHB#0034:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) SLOT=SLOT0 
[    8.510138625,5] PHB#0034:01:00.2 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) SLOT=SLOT0 
[    8.510206738,5] PHB#0034:01:00.3 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) SLOT=SLOT0 
[    8.510269731,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..05 
[    8.510313826,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..05 
[    8.510363354,5] PHB#0035:02:04.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 
[    8.510419973,5] PHB#0035:03:00.0 [EP  ] 10de 1db1 R:a1 C:030200 ( 3d-controller) SLOT=GPU3 
[    8.510491863,5] PHB#0035:02:05.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 
[    8.510549829,5] PHB#0035:04:00.0 [EP  ] 10de 1db1 R:a1 C:030200 ( 3d-controller) SLOT=GPU4 
[    8.510616879,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 
[    8.510674567,5] PHB#0035:05:00.0 [EP  ] 10de 1db1 R:a1 C:030200 ( 3d-controller) SLOT=GPU5 
[   21.331000578,5] IPMI: Resetting boot count on successful boot
[   21.331080316,5] INIT: Waiting for kernel...
[   21.331109541,5] INIT: 64-bit LE kernel discovered
[   21.331151045,5] OCC: All Chip Rdy after 0 ms
[   21.349577709,5] INIT: Starting kernel at 0x20011000, fdt at 0x30a01468 305531 bytes)
[   22.341275333,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000203fff7f0000
[    0.000000] Mapped range 0x0 - 0x1200000 with 0x10000
[    0.000000] Mapped range 0x1200000 - 0x40000000 with 0x200000
[    0.000000] Mapped range 0x40000000 - 0x4000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x204000000000 with 0x40000000
[    0.000000] Process table c000203ffe000000 and radix root for kernel: c000000001c10000
[    0.000000] Linux version 4.13.5-openpower1 (fspbld@gfwa125.aus.stglabs.ibm.com) (gcc version 6.4.0 (Buildroot 2017.08-00008-g5e23247)) #2 SMP Fri Oct 13 12:40:53 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 143
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x8000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x075c7afd18500249
[    0.000000]   possible        = 0x5f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaee00000
[    0.000000] mmu_features      = 0x3c006041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa:   NODE_DATA [mem 0x3fffff6700-0x3fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x203fff7e1700-0x203fff7eafff]
[    0.000000] numa:   NODE_DATA [mem 0x203fff674180-0x203fff67da7f]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x203fff616700-0x203fff61ffff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x203fff60ce00-0x203fff6166ff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x203fff603500-0x203fff60cdff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x203fff5f9c00-0x203fff6034ff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x203fff5f0300-0x203fff5f9bff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000203fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000003fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000203fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000003fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000203fffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000003ff15f0000 s67608 r0 d63464 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 8381440
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 585728 bytes
[    0.000000] log_buf_len min size: 1048576 bytes
[    0.000000] log_buf_len: 2097152 bytes
[    0.000000] early log buf free: 1034208(98%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 536113920K/536870912K available (6144K kernel code, 1024K rwdata, 1984K rodata, 11328K init, 1685K bss, 756992K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=144, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU event tracing is enabled.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=144.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=144
[    0.000000] NR_IRQS: 512, nr_irqs: 512, preallocated irqs: 16
[    0.000000] xive: Interrupt handling initialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000004] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000219] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.000601] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001048] Console: colour dummy device 80x25
[    0.003075] console [tty0] enabled
[    0.003235] console [hvc0] enabled
[    0.003235] console [hvc0] enabled
[    0.003406] bootconsole [udbg0] disabled
[    0.003406] bootconsole [udbg0] disabled
[    0.003988] pid_max: default: 147456 minimum: 1152
[    0.005065] Security Framework initialized
[    0.014891] Dentry cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.019972] Inode-cache hash table entries: 8388608 (order: 10, 67108864 bytes)
[    0.020515] Mount-cache hash table entries: 262144 (order: 5, 2097152 bytes)
[    0.020816] Mountpoint-cache hash table entries: 262144 (order: 5, 2097152 bytes)
[    0.022661] EEH: PowerNV platform initialized
[    0.022804] POWER9 performance monitor hardware support registered
[    0.022962] Hierarchical SRCU implementation.
[    0.024051] smp: Bringing up secondary CPUs ...
[    0.207037] smp: Brought up 8 nodes, 108 CPUs
[    0.207168] numa: Node 0 CPUs: 0-3 8-11 20-23 28-39 48-51 56-63 68-71
[    0.207298] numa: Node 8 CPUs: 72-103 108-143
[    0.207384] numa: Node 250 CPUs:
[    0.207441] numa: Node 251 CPUs:
[    0.207513] numa: Node 252 CPUs:
[    0.207585] numa: Node 253 CPUs:
[    0.207657] numa: Node 254 CPUs:
[    0.207718] numa: Node 255 CPUs:
[    0.224321] devtmpfs: initialized
[    0.236017] evm: security.capability
[    0.236714] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.237028] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.238590] random: get_random_u32 called from bucket_table_alloc+0x210/0x288 with crng_init=0
[    0.238845] NET: Registered protocol family 16
[    0.239285] random: fast init done
[    0.239544] cpuidle: using governor menu
[   24.481571431,3] LPC: Got LPC reset on chip 0x0 !
[   24.481575964,3] LPC[000]: Unknown LPC error Error address reg: 0x00000000
[   24.481586138,6] IPMI: dropping non severe PEL event
[   24.481709795,7] UART: IRQ functional !
[    0.276066] PCI: Probing PCI hardware
[    0.276164] PCI host bridge to bus 0000:00
[    0.276233] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.276381] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.276534] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.276767] pci 0000:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.276872] pci 0000:00:00.0: disabling bridge mem windows
[    0.277417] pci 0000:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.277525] pci 0000:01:00.0: BAR0 [mem size 0x00004000 64bit]: requesting alignment to 0x10000
[    0.277919] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.278108] PCI host bridge to bus 0001:00
[    0.278163] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.278358] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.278508] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.278692] pci 0001:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.278831] pci 0001:00:00.0: disabling bridge mem windows
[    0.279321] pci 0001:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.279426] pci 0001:01:00.0: BAR2 [mem size 0x00002000 64bit]: requesting alignment to 0x10000
[    0.279797] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.279971] PCI host bridge to bus 0002:00
[    0.280032] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.280216] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.280363] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.280568] pci 0002:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.280687] pci 0002:00:00.0: disabling bridge mem windows
[    0.281171] pci 0002:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.281261] pci 0002:01:00.0: disabling bridge mem windows
[    0.281554] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.281929] pci 0002:02:00.0: Disabling memory decoding and releasing memory resources.
[    0.282180] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.282364] PCI host bridge to bus 0003:00
[    0.282421] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.282620] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.282768] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.282965] pci 0003:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.283068] pci 0003:00:00.0: disabling bridge mem windows
[    0.284084] pci 0003:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.285855] pci 0003:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.286831] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.287026] PCI host bridge to bus 0004:00
[    0.287101] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.287284] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.287439] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.287640] pci 0004:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.287779] pci 0004:00:00.0: disabling bridge mem windows
[    0.288265] pci 0004:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.288407] pci 0004:01:00.0: disabling bridge mem windows
[    0.288938] pci 0004:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.289079] pci 0004:01:00.1: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.289565] pci 0004:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.289695] pci 0004:01:00.2: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.290190] pci 0004:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.290324] pci 0004:01:00.3: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.290813] pci 0004:01:00.4: Disabling memory decoding and releasing memory resources.
[    0.290907] pci 0004:01:00.4: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.291217] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.291660] pci 0004:02:02.0: Disabling memory decoding and releasing memory resources.
[    0.291778] pci 0004:02:02.0: disabling bridge mem windows
[    0.292268] pci 0004:02:0a.0: Disabling memory decoding and releasing memory resources.
[    0.292369] pci 0004:02:0a.0: disabling bridge mem windows
[    0.292862] pci 0004:02:0b.0: Disabling memory decoding and releasing memory resources.
[    0.292955] pci 0004:02:0b.0: disabling bridge mem windows
[    0.293415] pci 0004:02:0c.0: Disabling memory decoding and releasing memory resources.
[    0.293524] pci 0004:02:0c.0: disabling bridge mem windows
[    0.293873] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.295077] pci 0004:03:00.0: Disabling memory decoding and releasing memory resources.
[    0.295173] pci 0004:03:00.0: BAR5 [mem size 0x00000800]: requesting alignment to 0x10000
[    0.295467] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.295859] pci 0004:04:00.0: Disabling memory decoding and releasing memory resources.
[    0.296172] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.296560] pci 0004:05:00.0: Disabling memory decoding and releasing memory resources.
[    0.296880] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.297268] pci 0004:06:00.0: Disabling memory decoding and releasing memory resources.
[    0.297606] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.297814] PCI host bridge to bus 0005:00
[    0.297870] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.298065] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.298220] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.298418] pci 0005:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.298519] pci 0005:00:00.0: disabling bridge mem windows
[    0.299021] pci 0005:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.299548] pci 0005:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.299874] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.300068] PCI host bridge to bus 0030:00
[    0.300126] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.300325] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.300457] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.300649] pci 0030:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.300775] pci 0030:00:00.0: disabling bridge mem windows
[    0.300997] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.301181] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.301325] PCI host bridge to bus 0033:00
[    0.301392] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.301567] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.301714] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.301897] pci 0033:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.302032] pci 0033:00:00.0: disabling bridge mem windows
[    0.303040] pci 0033:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.304846] pci 0033:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.305894] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.306094] PCI host bridge to bus 0034:00
[    0.306150] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.306343] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.306489] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.306665] pci 0034:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.306767] pci 0034:00:00.0: disabling bridge mem windows
[    0.307197] pci 0034:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.307694] pci 0034:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.308167] pci 0034:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.308638] pci 0034:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.308951] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.309188] PCI host bridge to bus 0035:00
[    0.309242] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.309417] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.309557] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.309750] pci 0035:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.309848] pci 0035:00:00.0: disabling bridge mem windows
[    0.310285] pci 0035:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.310375] pci 0035:01:00.0: disabling bridge mem windows
[    0.310677] pci 0035:00:00.0: PCI bridge to [bus 01-05]
[    0.310993] pci 0035:02:04.0: Disabling memory decoding and releasing memory resources.
[    0.311100] pci 0035:02:04.0: disabling bridge mem windows
[    0.311533] pci 0035:02:05.0: Disabling memory decoding and releasing memory resources.
[    0.311633] pci 0035:02:05.0: disabling bridge mem windows
[    0.312023] pci 0035:02:0d.0: Disabling memory decoding and releasing memory resources.
[    0.312138] pci 0035:02:0d.0: disabling bridge mem windows
[    0.312443] pci 0035:01:00.0: PCI bridge to [bus 02-05]
[    0.313274] pci 0035:03:00.0: Disabling memory decoding and releasing memory resources.
[    0.313537] pci 0035:02:04.0: PCI bridge to [bus 03]
[    0.313854] pci 0035:04:00.0: Disabling memory decoding and releasing memory resources.
[    0.314115] pci 0035:02:05.0: PCI bridge to [bus 04]
[    0.314515] pci 0035:05:00.0: Disabling memory decoding and releasing memory resources.
[    0.314776] pci 0035:02:0d.0: PCI bridge to [bus 05]
[    0.314934] PCI host bridge to bus 0006:00
[    0.314972] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.315041] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.315215] pci 0006:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.315489] pci 0006:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.315783] pci 0006:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.316064] pci 0006:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.316344] pci 0006:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.316622] pci 0006:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.317090] PCI host bridge to bus 0007:00
[    0.317142] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.317211] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.317371] pci 0007:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.317636] pci 0007:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.317907] pci 0007:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.318175] pci 0007:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.318445] pci 0007:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.318751] pci 0007:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.319229] pci 0000:00:00.0: BAR 8: assigned [mem 0x600c000000000-0x600c0003fffff]
[    0.319301] pci 0000:01:00.0: BAR 6: assigned [mem 0x600c000000000-0x600c00001ffff pref]
[    0.319372] pci 0000:01:00.0: BAR 0: assigned [mem 0x600c000020000-0x600c000023fff 64bit]
[    0.319461] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.319759] pci 0000:01     : [PE# 1fd] Secondary bus 1 associated with PE#1fd
[    0.320052] pci 0000:01     : [PE# 1fd] Setting up 32-bit TCE table at 0..80000000
[    0.325736] IOMMU table initialized, virtual merging enabled
[    0.325792] pci 0000:01     : [PE# 1fd] Setting up window#0 0..7fffffff pg=1000
[    0.325866] pci 0000:01     : [PE# 1fd] Enabling 64-bit DMA bypass
[    0.325922] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.325974] pci 0000:00:00.0:   bridge window [mem 0x600c000000000-0x600c07fefffff]
[    0.326084] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.326155] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.326242] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.326328] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.326611] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.326892] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.332559] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.332634] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.332717] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.332768] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.332895] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.332965] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.333034] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.333088] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.333142] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.333217] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.333292] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.333344] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.333399] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.333681] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.333971] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.339628] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.339703] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.339827] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.339931] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.340017] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.340297] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.340347] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.344199] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.347069] pci 0003:00:00.0: BAR 9: assigned [mem 0x6020000000000-0x602003fffffff 64bit pref]
[    0.349904] pci 0003:01:00.0: BAR 0: assigned [mem 0x6020000000000-0x602001fffffff 64bit pref]
[    0.351448] pci 0003:01:00.1: BAR 0: assigned [mem 0x6020020000000-0x602003fffffff 64bit pref]
[    0.352971] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.354628] pci 0003:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.356036] pci 0003:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.364263] pci 0003:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.364384] pci 0003:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.364478] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.364594] pci 0003:00:00.0:   bridge window [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.364863] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x60252ffffffff 64bit pref]
[    0.365004] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c203ffffff]
[    0.365159] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x60252ffffffff 64bit pref]
[    0.365338] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c2037fffff]
[    0.365542] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c203800000-0x600c20383ffff]
[    0.365695] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c203840000-0x600c203841fff]
[    0.365852] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c203850000-0x600c203851fff]
[    0.366029] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c203860000-0x600c203861fff]
[    0.366188] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c203870000-0x600c203871fff]
[    0.366338] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.366461] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.366582] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.366735] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.366830] pci 0004:02:0a.0: BAR 9: assigned [mem 0x6024000000000-0x60245ffffffff 64bit pref]
[    0.366993] pci 0004:02:0b.0: BAR 9: assigned [mem 0x6024600000000-0x6024bffffffff 64bit pref]
[    0.367153] pci 0004:02:0c.0: BAR 9: assigned [mem 0x6024c00000000-0x60251ffffffff 64bit pref]
[    0.367346] pci 0004:02:02.0: BAR 9: assigned [mem 0x6025200000000-0x602523fffffff 64bit pref]
[    0.367520] pci 0004:02:0a.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.367650] pci 0004:02:0b.0: BAR 8: assigned [mem 0x600c201000000-0x600c201ffffff]
[    0.367802] pci 0004:02:0c.0: BAR 8: assigned [mem 0x600c202000000-0x600c202ffffff]
[    0.367913] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c203000000-0x600c2037fffff]
[    0.368078] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.368190] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.368298] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.368401] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.368552] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c203000000-0x600c2030007ff]
[    0.368725] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c203010000-0x600c20301ffff pref]
[    0.368890] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.368993] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.369151] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.369299] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.369417] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.369535] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.369664] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.369783] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.369915] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.370036] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.370161] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.370507] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.370884] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.376640] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.376778] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.376883] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.376978] pci 0004:02:02.0:   bridge window [mem 0x600c203000000-0x600c2037fffff]
[    0.377110] pci 0004:02:02.0:   bridge window [mem 0x6025200000000-0x602523fffffff 64bit pref]
[    0.377274] pci 0004:04:00.0: BAR 1: assigned [mem 0x6024000000000-0x60243ffffffff 64bit pref]
[    0.377438] pci 0004:04:00.0: BAR 3: assigned [mem 0x6024400000000-0x6024401ffffff 64bit pref]
[    0.377602] pci 0004:04:00.0: BAR 0: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.377773] pci 0004:04     : [PE# 00] Secondary bus 4 associated with PE#0
[    0.378255] pci 0004:04     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.383952] pci 0004:04     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.384086] pci 0004:04     : [PE# 00] Enabling 64-bit DMA bypass
[    0.384192] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.384285] pci 0004:02:0a.0:   bridge window [mem 0x600c200000000-0x600c200ffffff]
[    0.384419] pci 0004:02:0a.0:   bridge window [mem 0x6024000000000-0x60245ffffffff 64bit pref]
[    0.384582] pci 0004:05:00.0: BAR 1: assigned [mem 0x6024800000000-0x6024bffffffff 64bit pref]
[    0.384748] pci 0004:05:00.0: BAR 3: assigned [mem 0x6024600000000-0x6024601ffffff 64bit pref]
[    0.384910] pci 0004:05:00.0: BAR 0: assigned [mem 0x600c201000000-0x600c201ffffff]
[    0.385091] pci 0004:05     : [PE# 18] Secondary bus 5 associated with PE#18
[    0.385586] pci 0004:05     : [PE# 18] Setting up 32-bit TCE table at 0..80000000
[    0.391317] pci 0004:05     : [PE# 18] Setting up window#0 0..7fffffff pg=1000
[    0.391408] pci 0004:05     : [PE# 18] Enabling 64-bit DMA bypass
[    0.391503] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.391590] pci 0004:02:0b.0:   bridge window [mem 0x600c201000000-0x600c201ffffff]
[    0.391728] pci 0004:02:0b.0:   bridge window [mem 0x6024600000000-0x6024bffffffff 64bit pref]
[    0.391919] pci 0004:06:00.0: BAR 1: assigned [mem 0x6024c00000000-0x6024fffffffff 64bit pref]
[    0.392084] pci 0004:06:00.0: BAR 3: assigned [mem 0x6025000000000-0x6025001ffffff 64bit pref]
[    0.392205] pci 0004:06:00.0: BAR 0: assigned [mem 0x600c202000000-0x600c202ffffff]
[    0.392416] pci 0004:06     : [PE# 30] Secondary bus 6 associated with PE#30
[    0.392902] pci 0004:06     : [PE# 30] Setting up 32-bit TCE table at 0..80000000
[    0.398633] pci 0004:06     : [PE# 30] Setting up window#0 0..7fffffff pg=1000
[    0.398722] pci 0004:06     : [PE# 30] Enabling 64-bit DMA bypass
[    0.398847] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.398945] pci 0004:02:0c.0:   bridge window [mem 0x600c202000000-0x600c202ffffff]
[    0.399079] pci 0004:02:0c.0:   bridge window [mem 0x6024c00000000-0x60251ffffffff 64bit pref]
[    0.399249] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.399584] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.399652] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.399791] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.399966] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.400312] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.406023] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.406125] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.406206] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.406293] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.406426] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.406595] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.406833] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.406970] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.407148] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.407296] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.407457] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.407630] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.407801] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.407969] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.408322] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.408623] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.414332] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.414418] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.414497] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.414603] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.414803] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.415152] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.415253] pci 0033:00:00.0: BAR 9: assigned [mem 0x6220000000000-0x622003fffffff 64bit pref]
[    0.415419] pci 0033:01:00.0: BAR 0: assigned [mem 0x6220000000000-0x622001fffffff 64bit pref]
[    0.415647] pci 0033:01:00.1: BAR 0: assigned [mem 0x6220020000000-0x622003fffffff 64bit pref]
[    0.415858] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.416193] pci 0033:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.416486] pci 0033:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.422102] pci 0033:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.422263] pci 0033:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.422344] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.422437] pci 0033:00:00.0:   bridge window [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.422645] pci 0034:00:00.0: BAR 9: assigned [mem 0x6224000000000-0x622403fffffff 64bit pref]
[    0.422777] pci 0034:00:00.0: BAR 8: assigned [mem 0x620c200000000-0x620c2007fffff]
[    0.422924] pci 0034:01:00.0: BAR 6: assigned [mem 0x620c200000000-0x620c20007ffff pref]
[    0.423043] pci 0034:01:00.1: BAR 6: assigned [mem 0x620c200080000-0x620c2000fffff pref]
[    0.423194] pci 0034:01:00.2: BAR 6: assigned [mem 0x620c200100000-0x620c20017ffff pref]
[    0.423291] pci 0034:01:00.3: BAR 6: assigned [mem 0x620c200180000-0x620c2001fffff pref]
[    0.423433] pci 0034:01:00.0: BAR 0: assigned [mem 0x6224000000000-0x622400000ffff 64bit pref]
[    0.423586] pci 0034:01:00.0: BAR 2: assigned [mem 0x6224000010000-0x622400001ffff 64bit pref]
[    0.423763] pci 0034:01:00.0: BAR 4: assigned [mem 0x6224000020000-0x622400002ffff 64bit pref]
[    0.423925] pci 0034:01:00.1: BAR 0: assigned [mem 0x6224000030000-0x622400003ffff 64bit pref]
[    0.424091] pci 0034:01:00.1: BAR 2: assigned [mem 0x6224000040000-0x622400004ffff 64bit pref]
[    0.424258] pci 0034:01:00.1: BAR 4: assigned [mem 0x6224000050000-0x622400005ffff 64bit pref]
[    0.424426] pci 0034:01:00.2: BAR 0: assigned [mem 0x6224000060000-0x622400006ffff 64bit pref]
[    0.424587] pci 0034:01:00.2: BAR 2: assigned [mem 0x6224000070000-0x622400007ffff 64bit pref]
[    0.424736] pci 0034:01:00.2: BAR 4: assigned [mem 0x6224000080000-0x622400008ffff 64bit pref]
[    0.424908] pci 0034:01:00.3: BAR 0: assigned [mem 0x6224000090000-0x622400009ffff 64bit pref]
[    0.425034] pci 0034:01:00.3: BAR 2: assigned [mem 0x62240000a0000-0x62240000affff 64bit pref]
[    0.425194] pci 0034:01:00.3: BAR 4: assigned [mem 0x62240000b0000-0x62240000bffff 64bit pref]
[    0.425368] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.425724] pci 0034:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.426014] pci 0034:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.431620] pci 0034:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.431713] pci 0034:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.431827] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.431895] pci 0034:00:00.0:   bridge window [mem 0x620c200000000-0x620c27fefffff]
[    0.432039] pci 0034:00:00.0:   bridge window [mem 0x6224000000000-0x6227f7ff0ffff 64bit pref]
[    0.432274] pci 0035:00:00.0: BAR 9: assigned [mem 0x6228000000000-0x62291ffffffff 64bit pref]
[    0.432424] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c2837fffff]
[    0.432553] pci 0035:01:00.0: BAR 9: assigned [mem 0x6228000000000-0x62291ffffffff 64bit pref]
[    0.432705] pci 0035:01:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c282ffffff]
[    0.432837] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c283000000-0x620c28303ffff]
[    0.432977] pci 0035:02:04.0: BAR 9: assigned [mem 0x6228000000000-0x62285ffffffff 64bit pref]
[    0.433126] pci 0035:02:05.0: BAR 9: assigned [mem 0x6228600000000-0x6228bffffffff 64bit pref]
[    0.433278] pci 0035:02:0d.0: BAR 9: assigned [mem 0x6228c00000000-0x62291ffffffff 64bit pref]
[    0.433431] pci 0035:02:04.0: BAR 8: assigned [mem 0x620c280000000-0x620c280ffffff]
[    0.433556] pci 0035:02:05.0: BAR 8: assigned [mem 0x620c281000000-0x620c281ffffff]
[    0.433686] pci 0035:02:0d.0: BAR 8: assigned [mem 0x620c282000000-0x620c282ffffff]
[    0.433824] pci 0035:03:00.0: BAR 1: assigned [mem 0x6228000000000-0x62283ffffffff 64bit pref]
[    0.433986] pci 0035:03:00.0: BAR 3: assigned [mem 0x6228400000000-0x6228401ffffff 64bit pref]
[    0.434140] pci 0035:03:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c280ffffff]
[    0.434283] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.434653] pci 0035:03     : [PE# 00] Secondary bus 3 associated with PE#0
[    0.435082] pci 0035:03     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.440680] pci 0035:03     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.440785] pci 0035:03     : [PE# 00] Enabling 64-bit DMA bypass
[    0.440906] pci 0035:02:04.0: PCI bridge to [bus 03]
[    0.440975] pci 0035:02:04.0:   bridge window [mem 0x620c280000000-0x620c280ffffff]
[    0.441121] pci 0035:02:04.0:   bridge window [mem 0x6228000000000-0x62285ffffffff 64bit pref]
[    0.441260] pci 0035:04:00.0: BAR 1: assigned [mem 0x6228800000000-0x6228bffffffff 64bit pref]
[    0.441417] pci 0035:04:00.0: BAR 3: assigned [mem 0x6228600000000-0x6228601ffffff 64bit pref]
[    0.441588] pci 0035:04:00.0: BAR 0: assigned [mem 0x620c281000000-0x620c281ffffff]
[    0.441738] pci 0035:04     : [PE# 18] Secondary bus 4 associated with PE#18
[    0.442212] pci 0035:04     : [PE# 18] Setting up 32-bit TCE table at 0..80000000
[    0.447801] pci 0035:04     : [PE# 18] Setting up window#0 0..7fffffff pg=1000
[    0.447894] pci 0035:04     : [PE# 18] Enabling 64-bit DMA bypass
[    0.448028] pci 0035:02:05.0: PCI bridge to [bus 04]
[    0.448120] pci 0035:02:05.0:   bridge window [mem 0x620c281000000-0x620c281ffffff]
[    0.448256] pci 0035:02:05.0:   bridge window [mem 0x6228600000000-0x6228bffffffff 64bit pref]
[    0.448412] pci 0035:05:00.0: BAR 1: assigned [mem 0x6228c00000000-0x6228fffffffff 64bit pref]
[    0.448570] pci 0035:05:00.0: BAR 3: assigned [mem 0x6229000000000-0x6229001ffffff 64bit pref]
[    0.448705] pci 0035:05:00.0: BAR 0: assigned [mem 0x620c282000000-0x620c282ffffff]
[    0.448884] pci 0035:05     : [PE# 30] Secondary bus 5 associated with PE#30
[    0.449363] pci 0035:05     : [PE# 30] Setting up 32-bit TCE table at 0..80000000
[    0.454946] pci 0035:05     : [PE# 30] Setting up window#0 0..7fffffff pg=1000
[    0.455049] pci 0035:05     : [PE# 30] Enabling 64-bit DMA bypass
[    0.455131] pci 0035:02:0d.0: PCI bridge to [bus 05]
[    0.455240] pci 0035:02:0d.0:   bridge window [mem 0x620c282000000-0x620c282ffffff]
[    0.455349] pci 0035:02:0d.0:   bridge window [mem 0x6228c00000000-0x62291ffffffff 64bit pref]
[    0.455542] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.455879] pci 0035:01:00.0: PCI bridge to [bus 02-05]
[    0.455953] pci 0035:01:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.456081] pci 0035:01:00.0:   bridge window [mem 0x6228000000000-0x622bf7ff0ffff 64bit pref]
[    0.456243] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.456582] pci 0035:00:00.0: PCI bridge to [bus 01-05]
[    0.456658] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.456809] pci 0035:00:00.0:   bridge window [mem 0x6228000000000-0x622bf7ff0ffff 64bit pref]
[    0.457006] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.457196] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.457370] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.457555] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.457732] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.457916] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.458095] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.458271] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.458460] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.458646] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.458810] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.458986] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.459171] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.459348] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.459527] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.459706] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.459891] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.460069] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.460242] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.460416] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.460599] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.460774] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.460952] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.461118] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.461335] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.461455] pci 0006:00:00.1: Associating to existing PE d
[    0.461565] pci 0006:00:01.0: [PE# 0c] Associated device to PE
[    0.461683] pci 0006:00:01.1: Associating to existing PE c
[    0.461791] pci 0006:00:02.0: [PE# 0b] Associated device to PE
[    0.461910] pci 0006:00:02.1: Associating to existing PE b
[    0.462219] NPU6: Found 1 MMIO ATSD registers
[    0.462232] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.462424] pci 0007:00:00.1: Associating to existing PE d
[    0.462499] pci 0007:00:01.0: [PE# 0c] Associated device to PE
[    0.462640] pci 0007:00:01.1: Associating to existing PE c
[    0.462753] pci 0007:00:02.0: [PE# 0b] Associated device to PE
[    0.462872] pci 0007:00:02.1: Associating to existing PE b
[    0.463130] NPU7: Found 1 MMIO ATSD registers
[    0.469982] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.477629] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.477755] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.477844] vgaarb: loaded
[    0.477991] SCSI subsystem initialized
[    0.478160] usbcore: registered new interface driver usbfs
[    0.478239] usbcore: registered new interface driver hub
[    0.478598] usbcore: registered new device driver usb
[    0.478714] pps_core: LinuxPPS API ver. 1 registered
[    0.478800] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.478935] PTP clock support registered
[    0.479557] clocksource: Switched to clocksource timebase
[    0.482368] NET: Registered protocol family 2
[    0.482690] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.485247] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.485727] TCP: Hash tables configured (established 524288 bind 65536)
[    0.486013] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.486860] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.488078] NET: Registered protocol family 1
[    0.488186] pci 0001:00:00.0: enabling device (0105 -&gt; 0107)
[    0.488301] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[    2.843658] Initialise system trusted keyrings
[    2.843835] workingset: timestamp_bits=54 max_order=23 bucket_order=0
[    2.847769] Key type asymmetric registered
[    2.847817] Asymmetric key parser 'x509' registered
[    2.848042] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    2.848172] io scheduler noop registered
[    2.848599] io scheduler cfq registered (default)
[    2.848654] io scheduler mq-deadline registered
[    2.848754] io scheduler kyber registered
[    2.850399] ipmi message handler version 39.2
[    2.850451] ipmi device interface
[    2.850559] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[    3.011509] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[    3.024014] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    3.024091] hvc0: No interrupts property, using OPAL event
[    3.024515] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[    3.025038] [drm] radeon kernel modesetting enabled.
[    3.028841] brd: module loaded
[    3.032681] loop: module loaded
[    3.032878] pci 0004:00:00.0: enabling device (0105 -&gt; 0107)
[    3.032965] pci 0004:01:00.0: enabling device (0545 -&gt; 0547)
[    3.033060] pci 0004:02:02.0: enabling device (0545 -&gt; 0547)
[    3.033150] ahci 0004:03:00.0: enabling device (0141 -&gt; 0143)
[    3.033399] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    3.043555] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    3.043633] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    3.044364] scsi host0: ahci
[    3.044543] scsi host1: ahci
[    3.044705] scsi host2: ahci
[    3.044861] scsi host3: ahci
[    3.044952] ata1: SATA max UDMA/133 abar m2048@0x600c203000000 port 0x600c203000100 irq 88
[    3.045059] ata2: SATA max UDMA/133 abar m2048@0x600c203000000 port 0x600c203000180 irq 88
[    3.045168] ata3: SATA max UDMA/133 abar m2048@0x600c203000000 port 0x600c203000200 irq 88
[    3.045285] ata4: SATA max UDMA/133 abar m2048@0x600c203000000 port 0x600c203000280 irq 88
[    3.045572] libphy: Fixed MDIO Bus: probed
[    3.045649] tg3.c:v3.137 (May 11, 2014)
[    3.045710] pci 0005:00:00.0: enabling device (0105 -&gt; 0107)
[    3.045791] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[    3.074835] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    3.075245] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:2a:09
[    3.075322] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.075396] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.075456] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.075598] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[    3.106290] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    3.106718] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:2a:0a
[    3.106863] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.106988] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.107086] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.107277] pci 0034:00:00.0: enabling device (0105 -&gt; 0107)
[    3.107393] tg3 0034:01:00.0: enabling device (0140 -&gt; 0142)
[    3.136641] tg3 0034:01:00.0: Using 64-bit DMA iommu bypass
[    3.137087] tg3 0034:01:00.0 eth2: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b0
[    3.137240] tg3 0034:01:00.0 eth2: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.137344] tg3 0034:01:00.0 eth2: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    3.137494] tg3 0034:01:00.0 eth2: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.137715] tg3 0034:01:00.1: enabling device (0140 -&gt; 0142)
[    3.168563] tg3 0034:01:00.1: Using 64-bit DMA iommu bypass
[    3.168948] tg3 0034:01:00.1 eth3: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b1
[    3.169109] tg3 0034:01:00.1 eth3: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.169267] tg3 0034:01:00.1 eth3: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    3.169369] tg3 0034:01:00.1 eth3: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.169595] tg3 0034:01:00.2: enabling device (0140 -&gt; 0142)
[    3.208564] tg3 0034:01:00.2: Using 64-bit DMA iommu bypass
[    3.208948] tg3 0034:01:00.2 eth4: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b2
[    3.209062] tg3 0034:01:00.2 eth4: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.209251] tg3 0034:01:00.2 eth4: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    3.209378] tg3 0034:01:00.2 eth4: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.209556] tg3 0034:01:00.3: enabling device (0140 -&gt; 0142)
[    3.248564] tg3 0034:01:00.3: Using 64-bit DMA iommu bypass
[    3.248940] tg3 0034:01:00.3 eth5: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b3
[    3.249053] tg3 0034:01:00.3 eth5: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.249234] tg3 0034:01:00.3 eth5: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    3.249347] tg3 0034:01:00.3 eth5: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.249655] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    3.249726] ehci-pci: EHCI PCI platform driver
[    3.249835] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    3.249938] ohci-pci: OHCI PCI platform driver
[    3.250119] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    3.250218] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    3.250392] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    3.250527] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    3.251258] hub 1-0:1.0: USB hub found
[    3.251312] hub 1-0:1.0: 4 ports detected
[    3.251502] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    3.251603] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    3.251729] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    3.251999] hub 2-0:1.0: USB hub found
[    3.252045] hub 2-0:1.0: 4 ports detected
[    3.252281] usbcore: registered new interface driver usb-storage
[    3.299536] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    3.299626] i2c /dev entries driver
[    3.300974] at24 0-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.301303] at24 1-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.301622] at24 2-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.301941] at24 3-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.302274] at24 4-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.311483] at24 5-0052: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.311755] at24 5-0053: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.312022] at24 5-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.312303] at24 5-0055: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.312643] at24 6-0052: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.312932] at24 6-0053: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.313191] at24 6-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.313451] at24 6-0055: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.319726] at24 7-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.320049] at24 8-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.320370] at24 9-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.331731] at24 10-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.337310] random: crng init done
[    3.370768] ata4: SATA link down (SStatus 0 SControl 300)
[    3.380921] ata3: SATA link down (SStatus 0 SControl 300)
[    3.549499] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.562813] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    3.563732] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.563813] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.563894] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    3.564000] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    3.564646] ata2.00: configured for UDMA/133
[    3.564785] ata1.00: configured for UDMA/133
[    3.565057] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.565526] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.646841] powernv-cpufreq: cpufreq pstate min 108 nominal 54 max 0
[    3.646911] powernv-cpufreq: Workload Optimized Frequency is enabled in the platform
[    3.652756] usbcore: registered new interface driver usbhid
[    3.652817] usbhid: USB HID core driver
[    3.653135] ipip: IPv4 and MPLS over IPv4 tunneling driver
[    3.653430] NET: Registered protocol family 17
[    3.653497] Key type dns_resolver registered
[    3.655381] registered taskstats version 1
[    3.655434] Loading compiled-in X.509 certificates
[    3.662307] Loaded X.509 cert 'Build time autogenerated kernel key: 01b5359645346f08e23569692801facc43c80ea0'
[    3.668043] Key type encrypted registered
[    3.668089] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    3.668232] evm: HMAC attrs: 0x1
[    3.709564] rtc-opal opal-rtc: setting system clock to 2017-10-26 13:25:14 UTC (1509024314)
[    3.711216] Freeing unused kernel memory: 11328K
[    3.729194] udevd[2427]: starting version 3.2.2
[    3.733781] udevd[2428]: starting eudev-3.2.2
[    3.777542] nvme nvme0: pci function 0000:01:00.0
[    3.777643] pci 0000:00:00.0: enabling device (0105 -&gt; 0107)
[    3.777749] pci 0002:00:00.0: enabling device (0105 -&gt; 0107)
[    3.777766] pci 0002:01:00.0: enabling device (0145 -&gt; 0147)
[    3.777781] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[    3.778139] nvme 0000:01:00.0: enabling device (0140 -&gt; 0142)
[    3.778260] nvme 0000:01:00.0: Using 64-bit DMA iommu bypass
[    3.778343] [drm] platform has no IO space, trying MMIO
[    3.778347] [drm] VGA not enabled on entry, requesting chip POST
[    3.778368] [drm] Using P2A bridge for configuration
[    3.778371] [drm] AST 2500 detected
[    3.778374] [drm] Analog VGA only
[    3.778417] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    3.778522] [TTM] Zone  kernel: Available graphics memory: 268062624 kiB
[    3.778524] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    3.778526] [TTM] Initializing pool allocator
[    3.779673] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    3.784172] scsi 0:0:0:0: Attached scsi generic sg0 type 0
[    3.784319] scsi 1:0:0:0: Attached scsi generic sg1 type 0

[1;24r[0;10m[4l[?7h[?25l[?1c[H[J[H[J Petitboot (v1.6.0-p3dc37e1)[2d \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80[4;3HSystem information[5;3HSystem configuration[6;3HSystem status log[7;3HLanguage[8;3HRescan devices[9;3HRetrieve config from URL[10;3HPlugins (0)[11d *[0;10;7mExit to shell           [22;2H[0;10m\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80[23d Enter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[24d Welcome to Petitboot[J[1;47H'8335-GTW000000' '1318AAA0000000'[24d [3;21r[3;1H[2L[1;24r[3;3H[Disk: sda2 / d88f908d-cac5-443e-82fa-12fe2159e34b][4;5HRed Hat Enterprise Linux Server (4.11.0-39.el7a.ppc64le) 7.4 (Pegas)[13;27H[0;10;7m                                              [24;2H[0;10m[4;21r[4;1HM[1;24r[4;5HRed Hat Enterprise Linux Server (4.11.0-34.el7a.ppc64le) 7.4 (Pegas)[24d [4;21r[4;1HM[1;24r[4;5HRed Hat Enterprise Linux Server (0-rescue-c66dca449c274d939961bc85e5b8ec19)[15;73H[0;10;7m       [24;2H[0;10m[enP5p1s0f0] Configuring with static address (ip: 9.5.180.48/24) Booting in 9 sec: [sda2] Red Hat Enterprise Linux Server (4.11.0-39.el7a.ppc64[?7ll[?7h[24;13H8[80G[24;13H7[80G[24;13H6[80G[24;13H5[80G[24;13H4[80G[24;13H3[80G[24;13H2[80G[24;13H1[80G[24;10HRed Hat Enterprise Linux Server (4.11.0-39.el7a.ppc64le) 7.4 (Pegas)[K Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/vmlinuz-4.11.0-39.[?7le[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/initramfs-4.11.0-39.el7a[?7l.[?7h Running boot hooks[K Performing kexec loadrebootThe system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   35.832636] kexec_core: Starting new kernel
[   60.335350555,5] OPAL: Switch to big-endian OS
[   62.028325277,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000203fff7f0000
[    0.000000] Mapped range 0x0 - 0x4000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x204000000000 with 0x40000000
[    0.000000] Process table c000203ffe000000 and radix root for kernel: c000000001450000
[    0.000000] Linux version 4.11.0-39.el7a.ppc64le (mockbuild@ppc-058.build.eng.bos.redhat.com) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-16) (GCC) ) #1 SMP Tue Oct 3 07:42:44 EDT 2017
[    0.000000] Found initrd at 0xc0000000035a0000:0xc000000004bef074
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 143
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x8000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x07fc7afd18500249
[    0.000000]   possible        = 0x7fffffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xefc00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000110000000
[    0.000000] -----------------------------------------------------
[    0.000000] cma: Reserved 26224 MiB at 0x0000203995000000
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0x3fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x3fffff3c80-0x3fffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x203fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x203fff6f3c80-0x203fff6fffff]
[    0.000000] numa: Initmem setup node 250
[    0.000000] numa:   NODE_DATA [mem 0x203fff6a7900-0x203fff6b3c7f]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa: Initmem setup node 251
[    0.000000] numa:   NODE_DATA [mem 0x203fff69b580-0x203fff6a78ff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa: Initmem setup node 252
[    0.000000] numa:   NODE_DATA [mem 0x203fff68f200-0x203fff69b57f]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa: Initmem setup node 253
[    0.000000] numa:   NODE_DATA [mem 0x203fff682e80-0x203fff68f1ff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa: Initmem setup node 254
[    0.000000] numa:   NODE_DATA [mem 0x203fff676b00-0x203fff682e7f]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa: Initmem setup node 255
[    0.000000] numa:   NODE_DATA [mem 0x203fff66a780-0x203fff676aff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000203fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000]   Device   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000003fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000203fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000003fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000203fffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 3 pages/cpu @c000003fef130000 s155800 r0 d40808 u196608
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 8380416
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: root=/dev/mapper/rhel_yc02pvos-root ro rd.lvm.lv=rhel_yc02pvos/root rd.lvm.lv=rhel_yc02pvos/swap nodmraid console=hvc0 LANG=en_US.UTF-8
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 585728 bytes
[    0.000000] log_buf_len min size: 1048576 bytes
[    0.000000] log_buf_len: 2097152 bytes
[    0.000000] early log buf free: 1033652(98%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 509169472K/536870912K available (12352K kernel code, 1536K rwdata, 2880K rodata, 3968K init, 3647K bss, 848064K reserved, 26853376K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=144, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=144.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=144
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: VP block alloc, for max VCPUs 144 use order 8
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000002] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000425] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.001158] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001781] Console: colour dummy device 80x25
[    0.002104] console [hvc0] enabled
[    0.002104] console [hvc0] enabled
[    0.002394] bootconsole [udbg0] disabled
[    0.002394] bootconsole [udbg0] disabled
[    0.002957] mempolicy: Enabling automatic NUMA balancing. Configure with numa_balancing= or the kernel.numa_balancing sysctl
[    0.003067] pid_max: default: 147456 minimum: 1152
[    0.005070] Security Framework initialized
[    0.005106] SELinux:  Initializing.
[    0.011754] Dentry cache hash table entries: 67108864 (order: 13, 536870912 bytes)
[    0.173335] Inode-cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.273621] Mount-cache hash table entries: 1048576 (order: 7, 8388608 bytes)
[    0.273814] Mountpoint-cache hash table entries: 1048576 (order: 7, 8388608 bytes)
[    0.280114] ftrace: allocating 23649 entries in 9 pages
[    0.290160] EEH: PowerNV platform initialized
[    0.290216] POWER9 performance monitor hardware support registered
[    0.291874] smp: Bringing up secondary CPUs ...
[    0.461300] smp: Brought up 8 nodes, 108 CPUs
[    0.461366] numa: Node 0 CPUs: 0-3 8-11 20-23 28-39 48-51 56-63 68-71
[    0.461448] numa: Node 8 CPUs: 72-103 108-143
[    0.461532] numa: Node 250 CPUs:
[    0.461578] numa: Node 251 CPUs:
[    0.461624] numa: Node 252 CPUs:
[    0.461679] numa: Node 253 CPUs:
[    0.461734] numa: Node 254 CPUs:
[    0.461779] numa: Node 255 CPUs:
[    0.475891] devtmpfs: initialized
[    0.541263] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.541444] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.553421] NET: Registered protocol family 16
[    0.553603] EEH: No capable adapters found
[    0.554131] cpuidle: using governor menu
[    0.554446] pstore: using zlib compression
[    0.554515] pstore: Registered nvram as persistent store backend
[    0.596700] PCI: Probing PCI hardware
[    0.596801] PCI host bridge to bus 0000:00
[    0.596858] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.597004] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.597120] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.597902] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.598134] PCI host bridge to bus 0001:00
[    0.598191] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.598324] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.598454] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.599164] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.599325] PCI host bridge to bus 0002:00
[    0.599380] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.599518] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.599633] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.600300] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.600776] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.600946] PCI host bridge to bus 0003:00
[    0.601004] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.601150] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.601267] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.603493] pci 0003:01:00.0: VF(n) BAR0 space: [mem 0x00000000-0x0fffffff 64bit pref] (contains BAR0 for 8 VFs)
[    0.604460] pci 0003:01:00.0: VF BAR0: [mem 0x00000000-0x3ffffffff 64bit pref] (expanded to 512 VFs for PE alignment)
[    0.606417] pci 0003:01:00.1: VF(n) BAR0 space: [mem 0x00000000-0x0fffffff 64bit pref] (contains BAR0 for 8 VFs)
[    0.607348] pci 0003:01:00.1: VF BAR0: [mem 0x00000000-0x3ffffffff 64bit pref] (expanded to 512 VFs for PE alignment)
[    0.607722] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.607915] PCI host bridge to bus 0004:00
[    0.607970] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.608110] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.608225] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.610126] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.611683] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.642236] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.642798] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.643369] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.643918] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.644083] PCI host bridge to bus 0005:00
[    0.644112] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.644179] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.644237] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.645345] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.645501] PCI host bridge to bus 0030:00
[    0.645529] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.645596] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.645654] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.646025] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.646128] PCI host bridge to bus 0033:00
[    0.646156] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.646223] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.646281] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.648577] pci 0033:01:00.0: VF(n) BAR0 space: [mem 0x00000000-0x0fffffff 64bit pref] (contains BAR0 for 8 VFs)
[    0.649496] pci 0033:01:00.0: VF BAR0: [mem 0x00000000-0x3ffffffff 64bit pref] (expanded to 512 VFs for PE alignment)
[    0.651451] pci 0033:01:00.1: VF(n) BAR0 space: [mem 0x00000000-0x0fffffff 64bit pref] (contains BAR0 for 8 VFs)
[    0.652343] pci 0033:01:00.1: VF BAR0: [mem 0x00000000-0x3ffffffff 64bit pref] (expanded to 512 VFs for PE alignment)
[    0.652645] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.652814] PCI host bridge to bus 0034:00
[    0.652843] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.652910] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.652968] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.655331] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.655514] PCI host bridge to bus 0035:00
[    0.655543] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.655610] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.655668] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.656521] pci 0035:00:00.0: PCI bridge to [bus 01-05]
[    0.657904] pci 0035:01:00.0: PCI bridge to [bus 02-05]
[    0.658904] pci 0035:02:04.0: PCI bridge to [bus 03]
[    0.659561] pci 0035:02:05.0: PCI bridge to [bus 04]
[    0.660236] pci 0035:02:0d.0: PCI bridge to [bus 05]
[    0.660407] PCI host bridge to bus 0006:00
[    0.660435] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.660485] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.661661] PCI host bridge to bus 0007:00
[    0.661689] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.661740] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.662926] pci 0000:00:00.0: BAR 14: assigned [mem 0x600c000000000-0x600c0003fffff]
[    0.662980] pci 0000:01:00.0: BAR 6: assigned [mem 0x600c000000000-0x600c00001ffff pref]
[    0.663032] pci 0000:01:00.0: BAR 0: assigned [mem 0x600c000020000-0x600c000023fff 64bit]
[    0.663099] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.663364] pci 0000:01     : [PE# 1fd] Secondary bus 1 associated with PE#1fd
[    0.663643] pci 0000:01     : [PE# 1fd] Setting up 32-bit TCE table at 0..80000000
[    0.665135] random: fast init done
[    0.667088] IOMMU table initialized, virtual merging enabled
[    0.667135] pci 0000:01     : [PE# 1fd] Setting up window#0 0..7fffffff pg=1000
[    0.667190] pci 0000:01     : [PE# 1fd] Enabling 64-bit DMA bypass
[    0.667240] iommu: Adding device 0000:01:00.0 to group 0, default domain type -1
[    0.667291] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.667331] pci 0000:00:00.0:   bridge window [mem 0x600c000000000-0x600c07fefffff]
[    0.667415] pci 0001:00:00.0: BAR 14: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.667467] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.669327] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.672158] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.677959] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.678245] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.681706] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.681823] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.681920] iommu: Adding device 0001:01:00.0 to group 1, default domain type -1
[    0.682028] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.682107] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.682283] pci 0002:00:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.682347] pci 0002:01:00.0: BAR 14: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.682436] pci 0002:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.682517] pci 0002:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.682592] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.682715] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.682839] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.682940] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.683051] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.683359] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.683691] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.687151] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.687226] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.687293] iommu: Adding device 0002:02:00.0 to group 2, default domain type -1
[    0.687404] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.687482] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.687611] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.687936] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.687987] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.688096] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.688231] pci 0003:00:00.0: BAR 15: assigned [mem 0x6020000000000-0x6020bffffffff 64bit pref]
[    0.688323] pci 0003:01:00.0: BAR 7: assigned [mem 0x6020000000000-0x60203ffffffff 64bit pref]
[    0.688486] pci 0003:01:00.1: BAR 7: assigned [mem 0x6020400000000-0x60207ffffffff 64bit pref]
[    0.688642] pci 0003:01:00.0: BAR 0: assigned [mem 0x6020800000000-0x602081fffffff 64bit pref]
[    0.688837] pci 0003:01:00.1: BAR 0: assigned [mem 0x6020820000000-0x602083fffffff 64bit pref]
[    0.689029] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.689341] pci 0003:01     : [PE# 40] Secondary bus 1 associated with PE#40
[    0.689642] pci 0003:01     : [PE# 40] Setting up 32-bit TCE table at 0..80000000
[    0.693056] pci 0003:01     : [PE# 40] Setting up window#0 0..7fffffff pg=1000
[    0.693128] pci 0003:01     : [PE# 40] Enabling 64-bit DMA bypass
[    0.693226] iommu: Adding device 0003:01:00.0 to group 3, default domain type -1
[    0.693317] iommu: Adding device 0003:01:00.1 to group 3, default domain type -1
[    0.693414] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.693485] pci 0003:00:00.0:   bridge window [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.693711] pci 0004:00:00.0: BAR 15: assigned [mem 0x6024000000000-0x60253ffffffff 64bit pref]
[    0.693832] pci 0004:00:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c203ffffff]
[    0.693946] pci 0004:01:00.0: BAR 15: assigned [mem 0x6024000000000-0x60253ffffffff 64bit pref]
[    0.694062] pci 0004:01:00.0: BAR 14: assigned [mem 0x600c200000000-0x600c2037fffff]
[    0.694180] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c203800000-0x600c20383ffff]
[    0.694287] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c203840000-0x600c203841fff]
[    0.694398] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c203842000-0x600c203843fff]
[    0.694464] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c203844000-0x600c203845fff]
[    0.694569] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c203846000-0x600c203847fff]
[    0.694664] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.694766] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.694866] pci 0004:01:00.0: BAR 13: no space for [io  size 0x1000]
[    0.694957] pci 0004:01:00.0: BAR 13: failed to assign [io  size 0x1000]
[    0.695044] pci 0004:02:0a.0: BAR 15: assigned [mem 0x6024000000000-0x60245ffffffff 64bit pref]
[    0.695143] pci 0004:02:0b.0: BAR 15: assigned [mem 0x6024600000000-0x6024bffffffff 64bit pref]
[    0.695269] pci 0004:02:0c.0: BAR 15: assigned [mem 0x6024c00000000-0x60251ffffffff 64bit pref]
[    0.695398] pci 0004:02:02.0: BAR 15: assigned [mem 0x6025200000000-0x602523fffffff 64bit pref]
[    0.695516] pci 0004:02:0a.0: BAR 14: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.695617] pci 0004:02:0b.0: BAR 14: assigned [mem 0x600c201000000-0x600c201ffffff]
[    0.695716] pci 0004:02:0c.0: BAR 14: assigned [mem 0x600c202000000-0x600c202ffffff]
[    0.695826] pci 0004:02:02.0: BAR 14: assigned [mem 0x600c203000000-0x600c2037fffff]
[    0.695925] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.696016] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.696110] pci 0004:02:02.0: BAR 13: no space for [io  size 0x1000]
[    0.696220] pci 0004:02:02.0: BAR 13: failed to assign [io  size 0x1000]
[    0.696321] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c203000000-0x600c20300ffff pref]
[    0.696412] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c203010000-0x600c2030107ff]
[    0.696527] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.696630] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.696734] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.696818] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.696899] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.696991] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.697081] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.697166] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.697253] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.697336] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.697422] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.697728] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.698010] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.701422] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.701502] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.701587] iommu: Adding device 0004:03:00.0 to group 4, default domain type -1
[    0.701696] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.701766] pci 0004:02:02.0:   bridge window [mem 0x600c203000000-0x600c2037fffff]
[    0.701846] pci 0004:02:02.0:   bridge window [mem 0x6025200000000-0x602523fffffff 64bit pref]
[    0.701959] pci 0004:04:00.0: BAR 1: assigned [mem 0x6024000000000-0x60243ffffffff 64bit pref]
[    0.702108] pci 0004:04:00.0: BAR 3: assigned [mem 0x6024400000000-0x6024401ffffff 64bit pref]
[    0.702240] pci 0004:04:00.0: BAR 0: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.702391] pci 0004:04     : [PE# 00] Secondary bus 4 associated with PE#0
[    0.702834] pci 0004:04     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.706289] pci 0004:04     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.706357] pci 0004:04     : [PE# 00] Enabling 64-bit DMA bypass
[    0.706433] iommu: Adding device 0004:04:00.0 to group 5, default domain type -1
[    0.706550] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.706618] pci 0004:02:0a.0:   bridge window [mem 0x600c200000000-0x600c200ffffff]
[    0.706738] pci 0004:02:0a.0:   bridge window [mem 0x6024000000000-0x60245ffffffff 64bit pref]
[    0.706860] pci 0004:05:00.0: BAR 1: assigned [mem 0x6024800000000-0x6024bffffffff 64bit pref]
[    0.706990] pci 0004:05:00.0: BAR 3: assigned [mem 0x6024600000000-0x6024601ffffff 64bit pref]
[    0.707128] pci 0004:05:00.0: BAR 0: assigned [mem 0x600c201000000-0x600c201ffffff]
[    0.707235] pci 0004:05     : [PE# 18] Secondary bus 5 associated with PE#18
[    0.707682] pci 0004:05     : [PE# 18] Setting up 32-bit TCE table at 0..80000000
[    0.711102] pci 0004:05     : [PE# 18] Setting up window#0 0..7fffffff pg=1000
[    0.711175] pci 0004:05     : [PE# 18] Enabling 64-bit DMA bypass
[    0.711241] iommu: Adding device 0004:05:00.0 to group 6, default domain type -1
[    0.711352] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.711401] pci 0004:02:0b.0:   bridge window [mem 0x600c201000000-0x600c201ffffff]
[    0.711485] pci 0004:02:0b.0:   bridge window [mem 0x6024600000000-0x6024bffffffff 64bit pref]
[    0.711619] pci 0004:06:00.0: BAR 1: assigned [mem 0x6024c00000000-0x6024fffffffff 64bit pref]
[    0.711753] pci 0004:06:00.0: BAR 3: assigned [mem 0x6025000000000-0x6025001ffffff 64bit pref]
[    0.711872] pci 0004:06:00.0: BAR 0: assigned [mem 0x600c202000000-0x600c202ffffff]
[    0.712002] pci 0004:06     : [PE# 30] Secondary bus 6 associated with PE#30
[    0.712445] pci 0004:06     : [PE# 30] Setting up 32-bit TCE table at 0..80000000
[    0.715989] pci 0004:06     : [PE# 30] Setting up window#0 0..7fffffff pg=1000
[    0.716057] pci 0004:06     : [PE# 30] Enabling 64-bit DMA bypass
[    0.716146] iommu: Adding device 0004:06:00.0 to group 7, default domain type -1
[    0.716225] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.716304] pci 0004:02:0c.0:   bridge window [mem 0x600c202000000-0x600c202ffffff]
[    0.716415] pci 0004:02:0c.0:   bridge window [mem 0x6024c00000000-0x60251ffffffff 64bit pref]
[    0.716539] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.716863] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.716919] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.717020] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.717157] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.717479] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.720925] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.721002] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.721088] iommu: Adding device 0004:01:00.0 to group 8, default domain type -1
[    0.721171] iommu: Adding device 0004:01:00.1 to group 8, default domain type -1
[    0.721264] iommu: Adding device 0004:01:00.2 to group 8, default domain type -1
[    0.721376] iommu: Adding device 0004:01:00.3 to group 8, default domain type -1
[    0.721471] iommu: Adding device 0004:01:00.4 to group 8, default domain type -1
[    0.721596] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.721645] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.721723] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.721839] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.722018] pci 0005:00:00.0: BAR 15: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.722138] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.722279] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.722390] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.722523] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.722655] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.722796] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.722946] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.723275] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.723542] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.726959] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.727028] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.727113] iommu: Adding device 0005:01:00.0 to group 9, default domain type -1
[    0.727212] iommu: Adding device 0005:01:00.1 to group 9, default domain type -1
[    0.727319] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.727413] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.727545] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.727839] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.727938] pci 0033:00:00.0: BAR 15: assigned [mem 0x6220000000000-0x6220bffffffff 64bit pref]
[    0.728061] pci 0033:01:00.0: BAR 7: assigned [mem 0x6220000000000-0x62203ffffffff 64bit pref]
[    0.728220] pci 0033:01:00.1: BAR 7: assigned [mem 0x6220400000000-0x62207ffffffff 64bit pref]
[    0.728375] pci 0033:01:00.0: BAR 0: assigned [mem 0x6220800000000-0x622081fffffff 64bit pref]
[    0.728565] pci 0033:01:00.1: BAR 0: assigned [mem 0x6220820000000-0x622083fffffff 64bit pref]
[    0.728760] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.729077] pci 0033:01     : [PE# 40] Secondary bus 1 associated with PE#40
[    0.729375] pci 0033:01     : [PE# 40] Setting up 32-bit TCE table at 0..80000000
[    0.732913] pci 0033:01     : [PE# 40] Setting up window#0 0..7fffffff pg=1000
[    0.733028] pci 0033:01     : [PE# 40] Enabling 64-bit DMA bypass
[    0.733124] iommu: Adding device 0033:01:00.0 to group 10, default domain type -1
[    0.733241] iommu: Adding device 0033:01:00.1 to group 10, default domain type -1
[    0.733356] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.733433] pci 0033:00:00.0:   bridge window [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.733586] pci 0034:00:00.0: BAR 15: assigned [mem 0x6224000000000-0x622403fffffff 64bit pref]
[    0.733697] pci 0034:00:00.0: BAR 14: assigned [mem 0x620c200000000-0x620c2007fffff]
[    0.733812] pci 0034:01:00.0: BAR 6: assigned [mem 0x620c200000000-0x620c20007ffff pref]
[    0.733919] pci 0034:01:00.1: BAR 6: assigned [mem 0x620c200080000-0x620c2000fffff pref]
[    0.734028] pci 0034:01:00.2: BAR 6: assigned [mem 0x620c200100000-0x620c20017ffff pref]
[    0.734097] pci 0034:01:00.3: BAR 6: assigned [mem 0x620c200180000-0x620c2001fffff pref]
[    0.734209] pci 0034:01:00.0: BAR 0: assigned [mem 0x6224000000000-0x622400000ffff 64bit pref]
[    0.734356] pci 0034:01:00.0: BAR 2: assigned [mem 0x6224000010000-0x622400001ffff 64bit pref]
[    0.734471] pci 0034:01:00.0: BAR 4: assigned [mem 0x6224000020000-0x622400002ffff 64bit pref]
[    0.734630] pci 0034:01:00.1: BAR 0: assigned [mem 0x6224000030000-0x622400003ffff 64bit pref]
[    0.734770] pci 0034:01:00.1: BAR 2: assigned [mem 0x6224000040000-0x622400004ffff 64bit pref]
[    0.734905] pci 0034:01:00.1: BAR 4: assigned [mem 0x6224000050000-0x622400005ffff 64bit pref]
[    0.735043] pci 0034:01:00.2: BAR 0: assigned [mem 0x6224000060000-0x622400006ffff 64bit pref]
[    0.735180] pci 0034:01:00.2: BAR 2: assigned [mem 0x6224000070000-0x622400007ffff 64bit pref]
[    0.735313] pci 0034:01:00.2: BAR 4: assigned [mem 0x6224000080000-0x622400008ffff 64bit pref]
[    0.735451] pci 0034:01:00.3: BAR 0: assigned [mem 0x6224000090000-0x622400009ffff 64bit pref]
[    0.735590] pci 0034:01:00.3: BAR 2: assigned [mem 0x62240000a0000-0x62240000affff 64bit pref]
[    0.735727] pci 0034:01:00.3: BAR 4: assigned [mem 0x62240000b0000-0x62240000bffff 64bit pref]
[    0.735849] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.736198] pci 0034:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.736485] pci 0034:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.740096] pci 0034:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.740165] pci 0034:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.740241] iommu: Adding device 0034:01:00.0 to group 11, default domain type -1
[    0.740345] iommu: Adding device 0034:01:00.1 to group 11, default domain type -1
[    0.740448] iommu: Adding device 0034:01:00.2 to group 11, default domain type -1
[    0.740560] iommu: Adding device 0034:01:00.3 to group 11, default domain type -1
[    0.740669] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.740750] pci 0034:00:00.0:   bridge window [mem 0x620c200000000-0x620c27fefffff]
[    0.740850] pci 0034:00:00.0:   bridge window [mem 0x6224000000000-0x6227f7ff0ffff 64bit pref]
[    0.741083] pci 0035:00:00.0: BAR 15: assigned [mem 0x6228000000000-0x62291ffffffff 64bit pref]
[    0.741199] pci 0035:00:00.0: BAR 14: assigned [mem 0x620c280000000-0x620c2837fffff]
[    0.741280] pci 0035:01:00.0: BAR 15: assigned [mem 0x6228000000000-0x62291ffffffff 64bit pref]
[    0.741418] pci 0035:01:00.0: BAR 14: assigned [mem 0x620c280000000-0x620c282ffffff]
[    0.741518] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c283000000-0x620c28303ffff]
[    0.741616] pci 0035:02:04.0: BAR 15: assigned [mem 0x6228000000000-0x62285ffffffff 64bit pref]
[    0.741731] pci 0035:02:05.0: BAR 15: assigned [mem 0x6228600000000-0x6228bffffffff 64bit pref]
[    0.741855] pci 0035:02:0d.0: BAR 15: assigned [mem 0x6228c00000000-0x62291ffffffff 64bit pref]
[    0.741993] pci 0035:02:04.0: BAR 14: assigned [mem 0x620c280000000-0x620c280ffffff]
[    0.742103] pci 0035:02:05.0: BAR 14: assigned [mem 0x620c281000000-0x620c281ffffff]
[    0.742206] pci 0035:02:0d.0: BAR 14: assigned [mem 0x620c282000000-0x620c282ffffff]
[    0.742308] pci 0035:03:00.0: BAR 1: assigned [mem 0x6228000000000-0x62283ffffffff 64bit pref]
[    0.742442] pci 0035:03:00.0: BAR 3: assigned [mem 0x6228400000000-0x6228401ffffff 64bit pref]
[    0.742555] pci 0035:03:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c280ffffff]
[    0.742668] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.743016] pci 0035:03     : [PE# 00] Secondary bus 3 associated with PE#0
[    0.743439] pci 0035:03     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.746970] pci 0035:03     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.747038] pci 0035:03     : [PE# 00] Enabling 64-bit DMA bypass
[    0.747104] iommu: Adding device 0035:03:00.0 to group 12, default domain type -1
[    0.747229] pci 0035:02:04.0: PCI bridge to [bus 03]
[    0.747313] pci 0035:02:04.0:   bridge window [mem 0x620c280000000-0x620c280ffffff]
[    0.747422] pci 0035:02:04.0:   bridge window [mem 0x6228000000000-0x62285ffffffff 64bit pref]
[    0.747545] pci 0035:04:00.0: BAR 1: assigned [mem 0x6228800000000-0x6228bffffffff 64bit pref]
[    0.747672] pci 0035:04:00.0: BAR 3: assigned [mem 0x6228600000000-0x6228601ffffff 64bit pref]
[    0.747814] pci 0035:04:00.0: BAR 0: assigned [mem 0x620c281000000-0x620c281ffffff]
[    0.747979] pci 0035:04     : [PE# 18] Secondary bus 4 associated with PE#18
[    0.748446] pci 0035:04     : [PE# 18] Setting up 32-bit TCE table at 0..80000000
[    0.752121] pci 0035:04     : [PE# 18] Setting up window#0 0..7fffffff pg=1000
[    0.752203] pci 0035:04     : [PE# 18] Enabling 64-bit DMA bypass
[    0.752292] iommu: Adding device 0035:04:00.0 to group 13, default domain type -1
[    0.752410] pci 0035:02:05.0: PCI bridge to [bus 04]
[    0.752496] pci 0035:02:05.0:   bridge window [mem 0x620c281000000-0x620c281ffffff]
[    0.752601] pci 0035:02:05.0:   bridge window [mem 0x6228600000000-0x6228bffffffff 64bit pref]
[    0.752733] pci 0035:05:00.0: BAR 1: assigned [mem 0x6228c00000000-0x6228fffffffff 64bit pref]
[    0.752856] pci 0035:05:00.0: BAR 3: assigned [mem 0x6229000000000-0x6229001ffffff 64bit pref]
[    0.752992] pci 0035:05:00.0: BAR 0: assigned [mem 0x620c282000000-0x620c282ffffff]
[    0.753146] pci 0035:05     : [PE# 30] Secondary bus 5 associated with PE#30
[    0.753612] pci 0035:05     : [PE# 30] Setting up 32-bit TCE table at 0..80000000
[    0.757179] pci 0035:05     : [PE# 30] Setting up window#0 0..7fffffff pg=1000
[    0.757246] pci 0035:05     : [PE# 30] Enabling 64-bit DMA bypass
[    0.757321] iommu: Adding device 0035:05:00.0 to group 14, default domain type -1
[    0.757444] pci 0035:02:0d.0: PCI bridge to [bus 05]
[    0.757534] pci 0035:02:0d.0:   bridge window [mem 0x620c282000000-0x620c282ffffff]
[    0.757654] pci 0035:02:0d.0:   bridge window [mem 0x6228c00000000-0x62291ffffffff 64bit pref]
[    0.757788] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.758099] pci 0035:01:00.0: PCI bridge to [bus 02-05]
[    0.758161] pci 0035:01:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.758253] pci 0035:01:00.0:   bridge window [mem 0x6228000000000-0x622bf7ff0ffff 64bit pref]
[    0.758390] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.758700] pci 0035:00:00.0: PCI bridge to [bus 01-05]
[    0.758766] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.758878] pci 0035:00:00.0:   bridge window [mem 0x6228000000000-0x622bf7ff0ffff 64bit pref]
[    0.759039] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.759191] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.759336] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.759485] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.759631] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.759779] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.759927] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.760069] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.760216] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.760350] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.760501] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.760649] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.760798] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.760951] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.761100] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.761242] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.761388] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.761525] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.761679] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.761807] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.761959] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.762099] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.762254] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.762398] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.762628] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.762715] pci 0006:00:00.1: Associating to existing PE d
[    0.762794] pci 0006:00:01.0: [PE# 0c] Associated device to PE
[    0.762886] pci 0006:00:01.1: Associating to existing PE c
[    0.762973] pci 0006:00:02.0: [PE# 0b] Associated device to PE
[    0.763063] pci 0006:00:02.1: Associating to existing PE b
[    0.763252] NPU6: Found 1 MMIO ATSD registers
[    0.763265] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.763423] pci 0007:00:00.1: Associating to existing PE d
[    0.763509] pci 0007:00:01.0: [PE# 0c] Associated device to PE
[    0.763602] pci 0007:00:01.1: Associating to existing PE c
[    0.763688] pci 0007:00:02.0: [PE# 0b] Associated device to PE
[    0.763780] pci 0007:00:02.1: Associating to existing PE b
[    0.763934] NPU7: Found 1 MMIO ATSD registers
[    0.763945] pci 0004:04     : [PE# 00] Attached NPU 0006:00:00.0
[    0.764086] iommu: Adding device 0006:00:00.0 to group 5, default domain type -1
[    0.764201] pci 0004:04     : [PE# 00] Attached NPU 0006:00:00.1
[    0.764287] iommu: Adding device 0006:00:00.1 to group 5, default domain type -1
[    0.764418] pci 0004:05     : [PE# 18] Attached NPU 0006:00:01.0
[    0.764499] iommu: Adding device 0006:00:01.0 to group 6, default domain type -1
[    0.764605] pci 0004:05     : [PE# 18] Attached NPU 0006:00:01.1
[    0.764673] iommu: Adding device 0006:00:01.1 to group 6, default domain type -1
[    0.764818] pci 0004:06     : [PE# 30] Attached NPU 0006:00:02.0
[    0.764900] iommu: Adding device 0006:00:02.0 to group 7, default domain type -1
[    0.765008] pci 0004:06     : [PE# 30] Attached NPU 0006:00:02.1
[    0.765090] iommu: Adding device 0006:00:02.1 to group 7, default domain type -1
[    0.765200] pci 0035:03     : [PE# 00] Attached NPU 0007:00:00.0
[    0.765287] iommu: Adding device 0007:00:00.0 to group 12, default domain type -1
[    0.765389] pci 0035:03     : [PE# 00] Attached NPU 0007:00:00.1
[    0.765474] iommu: Adding device 0007:00:00.1 to group 12, default domain type -1
[    0.765605] pci 0035:04     : [PE# 18] Attached NPU 0007:00:01.0
[    0.765692] iommu: Adding device 0007:00:01.0 to group 13, default domain type -1
[    0.765799] pci 0035:04     : [PE# 18] Attached NPU 0007:00:01.1
[    0.765884] iommu: Adding device 0007:00:01.1 to group 13, default domain type -1
[    0.766018] pci 0035:05     : [PE# 30] Attached NPU 0007:00:02.0
[    0.766102] iommu: Adding device 0007:00:02.0 to group 14, default domain type -1
[    0.766204] pci 0035:05     : [PE# 30] Attached NPU 0007:00:02.1
[    0.766288] iommu: Adding device 0007:00:02.1 to group 14, default domain type -1
[    0.774952] cpuidle-powernv: Default stop: psscr = 0x0000000000000330,mask=0x00000000003003ff
[    0.775020] cpuidle-powernv: Deepest stop: psscr = 0x00000000003003bb,mask=0x00000000003003ff
[    0.775122] cpuidle-powernv: Requested Level (RL) value of first deep stop = 0x4
[    0.780676] HugeTLB registered 2 MB page size, pre-allocated 0 pages
[    0.780734] HugeTLB registered 1 GB page size, pre-allocated 0 pages
[    0.781568] random: crng init done
[    0.783546] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.783627] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.783698] vgaarb: loaded
[    0.783954] SCSI subsystem initialized
[    0.784038] usbcore: registered new interface driver usbfs
[    0.784099] usbcore: registered new interface driver hub
[    0.784469] usbcore: registered new device driver usb
[    0.785141] NetLabel: Initializing
[    0.785167] NetLabel:  domain hash size = 128
[    0.785208] NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO
[    0.785302] NetLabel:  unlabeled traffic allowed by default
[    0.785975] clocksource: Switched to clocksource timebase
[    0.804723] VFS: Disk quotas dquot_6.6.0
[    0.804962] VFS: Dquot-cache hash table entries: 8192 (order 0, 65536 bytes)
[    0.808178] NET: Registered protocol family 2
[    0.808638] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.809964] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.810236] TCP: Hash tables configured (established 524288 bind 65536)
[    0.810492] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.811072] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.812144] NET: Registered protocol family 1
[    0.812565] Unpacking initramfs...
[    1.314691] Freeing initrd memory: 22784K
[    1.315165] rtas_flash: no firmware flash support
[    1.318125] audit: initializing netlink subsys (disabled)
[    1.318269] audit: type=2000 audit(1509024351.310:1): state=initialized audit_enabled=0 res=1
[    1.318867] Initialise system trusted keyrings
[    1.318982] workingset: timestamp_bits=38 max_order=23 bucket_order=0
[    1.321124] zbud: loaded
[    1.385313] DRBG: could not allocate CTR cipher TFM handle: ctr(aes)
[    1.385372] alg: drbg: Failed to reset rng
[    1.385417] alg: drbg: Test 0 failed for drbg_pr_ctr_aes128
[    1.391844] DRBG: could not allocate CTR cipher TFM handle: ctr(aes)
[    1.391910] alg: drbg: Failed to reset rng
[    1.391955] alg: drbg: Test 0 failed for drbg_nopr_ctr_aes128
[    1.395348] DRBG: could not allocate CTR cipher TFM handle: ctr(aes)
[    1.395411] alg: drbg: Failed to reset rng
[    1.395446] alg: drbg: Test 0 failed for drbg_nopr_ctr_aes192
[    1.398773] DRBG: could not allocate CTR cipher TFM handle: ctr(aes)
[    1.398827] alg: drbg: Failed to reset rng
[    1.398881] alg: drbg: Test 0 failed for drbg_nopr_ctr_aes256
[    1.399956] NET: Registered protocol family 38
[    1.399996] Key type asymmetric registered
[    1.400032] Asymmetric key parser 'x509' registered
[    1.400104] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 249)
[    1.400416] io scheduler noop registered
[    1.400457] io scheduler deadline registered (default)
[    1.400707] io scheduler cfq registered
[    1.400734] io scheduler mq-deadline registered
[    1.402121] atomic64_test: passed
[    1.402868] pcieport 0004:02:0a.0: enabling device (0545 -&gt; 0547)
[    1.403077] pcieport 0004:02:0b.0: enabling device (0545 -&gt; 0547)
[    1.403290] pcieport 0004:02:0c.0: enabling device (0545 -&gt; 0547)
[    1.403684] pcieport 0035:00:00.0: enabling device (0105 -&gt; 0107)
[    1.403804] pcieport 0035:01:00.0: enabling device (0545 -&gt; 0547)
[    1.404186] pcieport 0035:02:04.0: enabling device (0545 -&gt; 0547)
[    1.404430] pcieport 0035:02:05.0: enabling device (0545 -&gt; 0547)
[    1.404694] pcieport 0035:02:0d.0: enabling device (0545 -&gt; 0547)
[    1.404972] PowerPC PowerNV PCI Hotplug Driver version: 0.1
[    1.405278] Using unsupported 1024x768 vga at 600c100010000, depth=32, pitch=4096
[    1.487853] Console: switching to colour frame buffer device 128x48
[    1.569049] fb0: Open Firmware frame buffer device on /pciex@600c3c0200000/pci@0/pci@0/vga@0
[    1.569248] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    1.569358] hvc0: No interrupts property, using OPAL event
[    1.569745] Serial: 8250/16550 driver, 4 ports, IRQ sharing enabled
[    1.570218] Linux agpgart interface v0.103
[    1.570925] rdac: device handler registered
[    1.570991] hp_sw: device handler registered
[    1.571062] emc: device handler registered
[    1.571482] alua: device handler registered
[    1.571564] libphy: Fixed MDIO Bus: probed
[    1.571659] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    1.571766] ehci-pci: EHCI PCI platform driver
[    1.571853] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    1.571931] ohci-pci: OHCI PCI platform driver
[    1.572010] uhci_hcd: USB Universal Host Controller Interface driver
[    1.572187] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    1.572287] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    1.572461] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    1.572579] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x00000000
[    1.573046] usb usb1: New USB device found, idVendor=1d6b, idProduct=0002
[    1.573106] usb usb1: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    1.573200] usb usb1: Product: xHCI Host Controller
[    1.573281] usb usb1: Manufacturer: Linux 4.11.0-39.el7a.ppc64le xhci-hcd
[    1.573350] usb usb1: SerialNumber: 0001:01:00.0
[    1.573561] hub 1-0:1.0: USB hub found
[    1.573608] hub 1-0:1.0: 4 ports detected
[    1.573812] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    1.573909] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    1.574020] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    1.574121] usb usb2: New USB device found, idVendor=1d6b, idProduct=0003
[    1.574206] usb usb2: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[    1.574291] usb usb2: Product: xHCI Host Controller
[    1.574351] usb usb2: Manufacturer: Linux 4.11.0-39.el7a.ppc64le xhci-hcd
[    1.574438] usb usb2: SerialNumber: 0001:01:00.0
[    1.574620] hub 2-0:1.0: USB hub found
[    1.574664] hub 2-0:1.0: 4 ports detected
[    1.574900] usbcore: registered new interface driver usbserial
[    1.574970] usbcore: registered new interface driver usbserial_generic
[    1.575065] usbserial: USB Serial support registered for generic
[    1.575411] mousedev: PS/2 mouse device common for all mice
[    1.635944] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    1.636024] powernv-cpufreq: cpufreq pstate min 108 nominal 54 max 0
[    1.636092] powernv-cpufreq: Workload Optimized Frequency is enabled in the platform
[    1.647624] hidraw: raw HID events driver (C) Jiri Kosina
[    1.647761] usbcore: registered new interface driver usbhid
[    1.647817] usbhid: USB HID core driver
[    1.648020] drop_monitor: Initializing network drop monitor service
[    1.648191] Initializing XFRM netlink socket
[    1.648645] NET: Registered protocol family 10
[    1.649310] Segment Routing with IPv6
[    1.649348] NET: Registered protocol family 17
[    1.649629] registered taskstats version 1
[    1.649658] Loading compiled-in X.509 certificates
[    1.652631] alg: No test for pkcs1pad(rsa,sha1) (pkcs1pad(rsa-generic,sha1))
[    1.653115] Loaded X.509 cert 'Red Hat Enterprise Linux kernel signing key: 76dcad15dac67f16c6070042f859011d99be53f3'
[    1.653256] zswap: loaded using pool lzo/zbud
[    1.657210] Key type big_key registered
[    1.657247] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    1.706974] rtc-opal opal-rtc: setting system clock to 2017-10-26 13:25:52 UTC (1509024352)
[    1.708013] Freeing unused kernel memory: 3968K
[    1.708065] This architecture does not have kernel memory protection.
[    1.714824] systemd[1]: systemd 219 running in system mode. (+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ -LZ4 -SECCOMP +BLKID +ELFUTILS +KMOD +IDN)
[    1.715347] systemd[1]: Detected architecture ppc64-le.
[    1.715395] systemd[1]: Running in initial RAM disk.

Welcome to [0;34mRed Hat Enterprise Linux Server 7.4 Beta (Pegas) dracut-033-502.el7 (Initramfs)[0m!

[    1.715748] systemd[1]: Set hostname to &lt;yc02pvos&gt;.
[[32m  OK  [0m] Reached target Local File Systems.
[    1.765925] systemd[1]: Reached target Local File Systems.
[    1.765968] systemd[1]: Starting Local File Systems.
[[32m  OK  [0m] Reached target Swap.
[    1.766106] systemd[1]: Reached target Swap.
[    1.766146] systemd[1]: Starting Swap.
[[32m  OK  [0m] Created slice Root Slice.
[    1.766761] systemd[1]: Created slice Root Slice.
[    1.766801] systemd[1]: Starting Root Slice.
[[32m  OK  [0m] Listening on udev Control Socket.
[[32m  OK  [0m] Listening on udev Kernel Socket.
[[32m  OK  [0m] Reached target Timers.
[[32m  OK  [0m] Created slice System Slice.
[[32m  OK  [0m] Reached target Slices.
[[32m  OK  [0m] Listening on Journal Socket.
         Starting Journal Service...
         Starting Setup Virtual Console...
         Starting Apply Kernel Variables...
         Starting dracut cmdline hook...
         Starting Create list of required st... nodes for the current kernel...
[[32m  OK  [0m] Reached target Sockets.
[[32m  OK  [0m] Started Apply Kernel Variables.
[[32m  OK  [0m] Started Create list of required sta...ce nodes for the current kernel.
         Starting Create Static Device Nodes in /dev...
[[32m  OK  [0m] Started Create Static Device Nodes in /dev.
[[32m  OK  [0m] Started Journal Service.
[[32m  OK  [0m] Started Setup Virtual Console.
[[32m  OK  [0m] Started dracut cmdline hook.
         Starting dracut pre-udev hook...
[    1.995257] alg: No test for pkcs1pad(rsa,sha256) (pkcs1pad(rsa-generic,sha256))
[    1.998591] device-mapper: uevent: version 1.0.3
[    1.999768] device-mapper: ioctl: 4.35.0-ioctl (2016-06-23) initialised: dm-devel@redhat.com
[[32m  OK  [0m] Started dracut pre-udev hook.
         Starting udev Kernel Device Manager...
[[32m  OK  [0m] Started udev Kernel Device Manager.
         Starting udev Coldplug all Devices...
         Mounting Configuration File System...
[[32m  OK  [0m] Mounted Configuration File System.
[    2.108538] pps_core: LinuxPPS API ver. 1 registered
[    2.108597] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    2.110188] PTP clock support registered
[    2.114722] nvme nvme0: pci function 0000:01:00.0
[    2.114849] nvme 0000:01:00.0: Using 64-bit DMA iommu bypass
[    2.120284] tg3.c:v3.137 (May 11, 2014)
[    2.122846] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    2.129309] mlx5_core 0003:01:00.0: Using 64-bit DMA iommu bypass
[    2.129731] mlx5_core 0003:01:00.0: firmware version: 16.21.62
[[32m  OK  [0m] Started udev Coldplug all Devices.
[    2.132991] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    2.133051] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
         Starting dracut initqueue hook...
[[32m  OK  [0m] Reached target System Initialization.
[    2.133878] scsi host0: ahci
[    2.134127] scsi host1: ahci
         Starting Show Plymouth Boot Scree[    2.134354] sncsi host2: ahci
...
[    2.134606] scsi host3: ahci
[    2.134735] ata1: SATA max UDMA/133 abar m2048@0x600c203010000 port 0x600c203010100 irq 93
[    2.134801] ata2: SATA max UDMA/133 abar m2048@0x600c203010000 port 0x600c203010180 irq 93
[    2.134890] ata3: SATA max UDMA/133 abar m2048@0x600c203010000 port 0x600c203010200 irq 93
[    2.135003] ata4: SATA max UDMA/133 abar m2048@0x600c203010000 port 0x600c203010280 irq 93
[    2.144835] [drm] platform has no IO space, trying MMIO
[    2.144894] [drm] Using P2A bridge for configuration
[    2.144956] [drm] AST 2500 detected
[    2.144994] [drm] Analog VGA only
[    2.145043] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    2.145306] [TTM] Zone  kernel: Available graphics memory: 268025280 kiB
[    2.145361] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    2.145443] [TTM] Initializing pool allocator
[    2.148397] fb: switching to astdrmfb from OFfb vga
[    2.148495] Console: switching to colour dummy device 80x25
[    2.151171] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    2.151839] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:2a:09
[    2.151841] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.151843] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    2.151844] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.165981] Console: switching to colour frame buffer device 128x48
[    2.176682] nouveau 0004:04:00.0: enabling device (0140 -&gt; 0142)
[    2.176721] nouveau 0004:04:00.0: unknown chipset (140000a1)
[    2.176726] nouveau: probe of 0004:04:00.0 failed with error -12
[    2.176735] nouveau 0004:05:00.0: enabling device (0140 -&gt; 0142)
[    2.176748] nouveau 0004:05:00.0: unknown chipset (140000a1)
[    2.176750] nouveau: probe of 0004:05:00.0 failed with error -12
[    2.176758] nouveau 0004:06:00.0: enabling device (0140 -&gt; 0142)
[    2.176770] nouveau 0004:06:00.0: unknown chipset (140000a1)
[    2.176774] nouveau: probe of 0004:06:00.0 failed with error -12
[    2.177304] nouveau 0035:03:00.0: enabling device (0140 -&gt; 0142)
[    2.177334] nouveau 0035:03:00.0: unknown chipset (140000a1)
[    2.177617] nouveau: probe of 0035:03:00.0 failed with error -12
[    2.178145] nouveau 0035:04:00.0: enabling device (0140 -&gt; 0142)
[    2.178165] nouveau 0035:04:00.0: unknown chipset (140000a1)
[    2.178444] nouveau: probe of 0035:04:00.0 failed with error -12
[    2.178965] nouveau 0035:05:00.0: enabling device (0140 -&gt; 0142)
[    2.178985] nouveau 0035:05:00.0: unknown chipset (140000a1)
[    2.179272] nouveau: probe of 0035:05:00.0 failed with error -12
[    2.186391] ast 0002:02:00.0: fb0: astdrmfb frame buffer device
[[32m  OK  [0m] Started Show Plymouth Boot Screen.
[[32m  OK  [0m] Reached target Paths.
[[32m  OK  [0m] Reached target Basic System.
[    2.192996] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    2.193550] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:2a:0a
[    2.193640] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.193771] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    2.193879] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
%G%G[    2.266473] [drm] Initialized ast 0.1.0 20120228 for 0002:02:00.0 on minor 0
%G[    2.313490] tg3 0034:01:00.0: Using 64-bit DMA iommu bypass
[    2.314504] tg3 0034:01:00.0 eth2: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b0
[    2.314664] tg3 0034:01:00.0 eth2: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.314819] tg3 0034:01:00.0 eth2: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    2.314939] tg3 0034:01:00.0 eth2: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.395384] tg3 0034:01:00.1: Using 64-bit DMA iommu bypass
[    2.396316] tg3 0034:01:00.1 eth3: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b1
[    2.396443] tg3 0034:01:00.1 eth3: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.396615] tg3 0034:01:00.1 eth3: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    2.396736] tg3 0034:01:00.1 eth3: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.467090] ata4: SATA link down (SStatus 0 SControl 300)
[    2.467678] ata3: SATA link down (SStatus 0 SControl 300)
[    2.525429] tg3 0034:01:00.2: Using 64-bit DMA iommu bypass
[    2.526352] tg3 0034:01:00.2 eth4: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b2
[    2.526450] tg3 0034:01:00.2 eth4: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.526609] tg3 0034:01:00.2 eth4: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    2.526740] tg3 0034:01:00.2 eth4: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.625446] tg3 0034:01:00.3: Using 64-bit DMA iommu bypass
[    2.626391] tg3 0034:01:00.3 eth5: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b3
[    2.626505] tg3 0034:01:00.3 eth5: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.626681] tg3 0034:01:00.3 eth5: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    2.626787] tg3 0034:01:00.3 eth5: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.629763] tg3 0034:01:00.3 enP52p1s0f3: renamed from eth5
[    2.635934] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    2.636447] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    2.637997] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    2.638064] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    2.638154] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    2.638271] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    2.639565] ata2.00: configured for UDMA/133
[    2.639672] ata1.00: configured for UDMA/133
[    2.640575] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    2.716695] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    2.727412] mlx5_core 0003:01:00.0: Port module event: module 0, Cable plugged
[    2.767098] mlx5_core 0003:01:00.1: Using 64-bit DMA iommu bypass
[    2.767747] mlx5_core 0003:01:00.1: firmware version: 16.21.62
[    2.787158] tg3 0034:01:00.2 enP52p1s0f2: renamed from eth4
[    2.788303] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    2.847100] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[    2.937124] tg3 0034:01:00.1 enP52p1s0f1: renamed from eth3
[    2.938596] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    2.938610] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    2.938613] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[    2.938641] sd 1:0:0:0: [sdb] Write Protect is off
[    2.938691] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    2.939172] sd 0:0:0:0: [sda] 4096-byte physical blocks
[    2.939271] sd 0:0:0:0: [sda] Write Protect is off
[    2.939370] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    2.958959]  sda: sda1 sda2 sda3
[    2.959552] sd 0:0:0:0: [sda] Attached SCSI removable disk
[    2.960384] sd 1:0:0:0: [sdb] Attached SCSI removable disk
[    3.016625] tg3 0034:01:00.0 enP52p1s0f0: renamed from eth2
[    3.366412] mlx5_core 0003:01:00.1: Port module event: module 1, Cable plugged
[    3.438224] mlx5_core 0033:01:00.0: Using 64-bit DMA iommu bypass
[    3.439854] mlx5_core 0033:01:00.0: firmware version: 16.21.62
[    4.059070] mlx5_core 0033:01:00.0: Port module event: module 0, Cable plugged
[    4.139343] mlx5_core 0033:01:00.1: Using 64-bit DMA iommu bypass
[    4.140515] mlx5_core 0033:01:00.1: firmware version: 16.21.62
[    4.747546] mlx5_core 0033:01:00.1: Port module event: module 1, Cable plugged
[[32m  OK  [0m] Found device /dev/mapper/rhel_yc02pvos-root.
         Starting File System Check on /dev/mapper/rhel_yc02pvos-root...
[[32m  OK  [0m] Started File System Check on /dev/mapper/rhel_yc02pvos-root.
[[32m  OK  [0m] Started dracut initqueue hook.
[[32m  OK  [0m] Reached target Remote File Systems (Pre).
[[32m  OK  [0m] Reached target Remote File Systems.
         Mounting /sysroot...
[    5.342257] SGI XFS with ACLs, security attributes, no debug enabled
[    5.354706] XFS (dm-0): Mounting V5 Filesystem
[    5.516396] XFS (dm-0): Ending clean mount
[[32m  OK  [0m] Mounted /sysroot.
[[32m  OK  [0m] Reached target Initrd Root File System.
         Starting Reload Configuration from the Real Root...
[[32m  OK  [0m] Started Reload Configuration from the Real Root.
[[32m  OK  [0m] Reached target Initrd File Systems.
[[32m  OK  [0m] Reached target Initrd Default Target.
         Starting dracut pre-pivot and cleanup hook...
[[32m  OK  [0m] Started dracut pre-pivot and cleanup hook.
         Starting Cleaning Up and Shutting Down Daemons...
[[32m  OK  [0m] Stopped target Timers.
         Starting Plymouth switch root service...
[[32m  OK  [0m] Stopped Cleaning Up and Shutting Down Daemons.
[[32m  OK  [0m] Stopped dracut pre-pivot and cleanup hook.
         Stopping dracut pre-pivot and cleanup hook...
[[32m  OK  [0m] Stopped target Initrd Default Target.
[[32m  OK  [0m] Stopped target Basic System.
[[32m  OK  [0m] Stopped target Paths.
[[32m  OK  [0m] Stopped target System Initialization.
[[32m  OK  [0m] Stopped Apply Kernel Variables.
         Stopping Apply Kernel Variables...
         Stopping udev Kernel Device Manager...
[[32m  OK  [0m] Stopped target Swap.
[[32m  OK  [0m] Stopped target Local File Systems.
[[32m  OK  [0m] Stopped target Sockets.
[[32m  OK  [0m] Stopped target Slices.
[[32m  OK  [0m] Stopped target Remote File Systems.
[[32m  OK  [0m] Stopped target Remote File Systems (Pre).
[[32m  OK  [0m] Stopped dracut initqueue hook.
         Stopping dracut initqueue hook...
[[32m  OK  [0m] Stopped udev Coldplug all Devices.
         Stopping udev Coldplug all Devices...
[[32m  OK  [0m] Started Plymouth switch root service.
[[32m  OK  [0m] Stopped udev Kernel Device Manager.
[[32m  OK  [0m] Stopped dracut pre-udev hook.
         Stopping dracut pre-udev hook...
[[32m  OK  [0m] Stopped dracut cmdline hook.
         Stopping dracut cmdline hook...
[[32m  OK  [0m] Stopped Create Static Device Nodes in /dev.
         Stopping Create Static Device Nodes in /dev...
[[32m  OK  [0m] Stopped Create list of required sta...ce nodes for the current kernel.
         Stopping Create list of required st... nodes for the current kernel...
[[32m  OK  [0m] Closed udev Control Socket.
[[32m  OK  [0m] Closed udev Kernel Socket.
         Starting Cleanup udevd DB...
[[32m  OK  [0m] Started Cleanup udevd DB.
[[32m  OK  [0m] Reached target Switch Root.
         Starting Switch Root...
[    5.895527] systemd-journald[886]: Received SIGTERM from PID 1 (systemd).
[    5.991723] systemd: 24 output lines suppressed due to ratelimiting
[    6.311378] audit: type=1404 audit(1509024357.090:2): enforcing=1 old_enforcing=0 auid=4294967295 ses=4294967295
[    6.526338] SELinux:  Class sctp_socket not defined in policy.
[    6.526376] SELinux:  Class icmp_socket not defined in policy.
[    6.526415] SELinux:  Class ax25_socket not defined in policy.
[    6.526462] SELinux:  Class ipx_socket not defined in policy.
[    6.526509] SELinux:  Class netrom_socket not defined in policy.
[    6.526567] SELinux:  Class atmpvc_socket not defined in policy.
[    6.526635] SELinux:  Class x25_socket not defined in policy.
[    6.526703] SELinux:  Class rose_socket not defined in policy.
[    6.526761] SELinux:  Class decnet_socket not defined in policy.
[    6.526838] SELinux:  Class atmsvc_socket not defined in policy.
[    6.526914] SELinux:  Class rds_socket not defined in policy.
[    6.526989] SELinux:  Class irda_socket not defined in policy.
[    6.527064] SELinux:  Class pppox_socket not defined in policy.
[    6.527121] SELinux:  Class llc_socket not defined in policy.
[    6.527178] SELinux:  Class can_socket not defined in policy.
[    6.527245] SELinux:  Class tipc_socket not defined in policy.
[    6.527303] SELinux:  Class bluetooth_socket not defined in policy.
[    6.527360] SELinux:  Class iucv_socket not defined in policy.
[    6.527435] SELinux:  Class rxrpc_socket not defined in policy.
[    6.527510] SELinux:  Class isdn_socket not defined in policy.
[    6.527585] SELinux:  Class phonet_socket not defined in policy.
[    6.527660] SELinux:  Class ieee802154_socket not defined in policy.
[    6.527708] SELinux:  Class caif_socket not defined in policy.
[    6.527774] SELinux:  Class alg_socket not defined in policy.
[    6.527831] SELinux:  Class nfc_socket not defined in policy.
[    6.527897] SELinux:  Class vsock_socket not defined in policy.
[    6.527991] SELinux:  Class kcm_socket not defined in policy.
[    6.528066] SELinux:  Class qipcrtr_socket not defined in policy.
[    6.528141] SELinux:  Class smc_socket not defined in policy.
[    6.528199] SELinux: the above unknown classes and permissions will be allowed
[    6.578964] audit: type=1403 audit(1509024357.360:3): policy loaded auid=4294967295 ses=4294967295
[    6.583076] systemd[1]: Successfully loaded SELinux policy in 281.589ms.
[    6.815012] ip_tables: (C) 2000-2006 Netfilter Core Team
[    6.815084] systemd[1]: Inserted module 'ip_tables'
[    6.832468] systemd[1]: Relabelled /dev and /run in 16.202ms.

Welcome to [0;31mRed Hat Enterprise Linux Server 7.4 Beta (Pegas)[0m!

[[32m  OK  [0m] Stopped Switch Root.
[[32m  OK  [0m] Stopped Journal Service.
         Starting Journal Service...
[[32m  OK  [0m] Listening on LVM2 metadata daemon socket.
         Mounting Huge Pages File System...
[[32m  OK  [0m] Stopped target Switch Root.
[[32m  OK  [0m] Stopped target Initrd Root File System.
[[32m  OK  [0m] Created slice system-selinux\x2dpol...grate\x2dlocal\x2dchanges.slice.
[[32m  OK  [0m] Listening on Device-mapper event daemon FIFOs.
         Starting Monitoring of LVM2 mirrors... dmeventd or progress polling...
[[32m  OK  [0m] Listening on /dev/initctl Compatibility Named Pipe.
[[32m  OK  [0m] Listening on Delayed Shutdown Socket.
[[32m  OK  [0m] Listening on udev Control Socket.
         Starting Create list of required st... nodes for the current kernel...
         Mounting Debug File System...
[[32m  OK  [0m] Stopped target Initrd File Systems.
[[32m  OK  [0m] Created slice system-getty.slice.
[[32m  OK  [0m] Created slice User and Session Slice.
         Mounting NFSD configuration filesystem...
[[32m  OK  [0m] Reached target Slices.
[[32m  OK  [0m] Created slice system-serial\x2dgetty.slice.
[[32m  OK  [0m] Set up automount Arbitrary Executab...ats File System Automount Point.
         Mounting POSIX Message Queue File System...
[[32m  OK  [0m] Listening on udev Kernel Socket.
[[32m  OK  [0m] Listening on LVM2 poll daemon socket.
[[32m  OK  [0m] Stopped File System Check on Root Device.
         Stopping File System Check on Root Device...
         Starting Replay Read-Ahead Data...
         Starting Collect Read-Ahead Data...
[[32m  OK  [0m] Started Create list of required sta...ce nodes for the current kernel.
[[32m  OK  [0m] Started Collect Read-Ahead Data.
[[32m  OK  [0m] Started Replay Read-Ahead Data.
         Starting Create Static Device Nodes in /dev...
         Starting Remount Root and Kernel File Systems...
         Starting Apply Kernel Variables...
[[32m  OK  [0m] Started Journal Service.
[[32m  OK  [0m] Mounted Debug File System.
[[32m  OK  [0m] Mounted POSIX Message Queue File System.
[[32m  OK  [0m] Mounted Huge Pages File System.
[[32m  OK  [0m] Started Remount Root and Kernel File Systems.
         Starting udev Coldplug all Devices...
         Starting Load/Save Random Seed...
         Starting Configure read-only root support...
         Starting Flush Journal to Persistent Storage...
[[32m  OK  [0m] Started Load/Save Random Seed.
[[32m  OK  [0m] Started Apply Kernel Variables.
[[32m  OK  [0m] Started Create Static Device Nodes in /dev.
         Starting udev Kernel Device Manager...
[    8.359408] RPC: Registered named UNIX socket transport module.
[    8.359471] RPC: Registered udp transport module.
[    8.359508] RPC: Registered tcp transport module.
[    8.359563] RPC: Registered tcp NFSv4.1 backchannel transport module.
[[32m  OK  [0m] Started udev Coldplug all Devices.
         Starting udev Wait for Complete Device Initialization...
[[32m  OK  [0m] Started LVM2 metadata daemon.
         Starting LVM2 metadata daemon...
[    8.385936] systemd-journald[1354]: Received request to flush runtime journal from PID 1
[[32m  OK  [0m] Started Flush Journal to Persistent Storage.
[[32m  OK  [0m] Started Configure read-only root support.
[    8.482396] Installing knfsd (copyright (C) 1996 okir@monad.swb.de).
[[32m  OK  [0m] Mounted NFSD configuration filesystem.
[[32m  OK  [0m] Started udev Kernel Device Manager.
[    8.863186] ipmi message handler version 39.2
[    8.864739] ipmi device interface
[    8.866009] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[    8.891380] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[    9.034781] shpchp: Standard Hot Plug PCI Controller Driver version: 0.4
[    9.099105] sd 0:0:0:0: Attached scsi generic sg0 type 0
[    9.099397] sd 1:0:0:0: Attached scsi generic sg1 type 0
[    9.101749] Using 'aes-generic' as fallback implementation.
[    9.101810] crypto_register_alg 'aes' = 0
[    9.103477] Using 'aes-generic' as fallback implementation.
[    9.103730] Using 'aes-generic' as fallback implementation.
[    9.103773] Using 'cbc(p8_aes)' as fallback implementation.
[    9.103890] crypto_register_alg 'cbc(aes)' = 0
[    9.107767] Using 'aes-generic' as fallback implementation.
[    9.108011] Using 'aes-generic' as fallback implementation.
[    9.108069] Using 'ctr(p8_aes)' as fallback implementation.
[    9.108360] crypto_register_alg 'ctr(aes)' = 0
[    9.117548] Using 'aes-generic' as fallback implementation.
[    9.119081] Using 'aes-generic' as fallback implementation.
[    9.119138] Using 'aes-generic' as fallback implementation.
[    9.119480] Using 'aes-generic' as fallback implementation.
[    9.119530] Using 'aes-generic' as fallback implementation.
[    9.119571] Using 'xts(ecb(p8_aes))' as fallback implementation.
[    9.119801] crypto_register_alg 'xts(aes)' = 0
[    9.121992] Using 'ghash-generic' as fallback implementation.
[[32m  OK  [0m] Found device /dev/hvc0.
[    9.325031] at24 1-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.325314] at24 2-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.325587] at24 3-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.325826] at24 4-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.326339] at24 5-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
%G%G[    9.350790] at24 6-0052: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.351316] at24 6-0053: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.351841] at24 6-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.352348] at24 6-0055: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.352850] at24 7-0052: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.353092] at24 7-0053: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.353338] at24 7-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.353593] at24 7-0055: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.360129] at24 8-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.360625] at24 9-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.373439] at24 10-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    9.374049] at24 11-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.617333] tg3 0005:01:00.0 net0: renamed from enP5p1s0f0
[[32m  OK  [0m] Found device ST1000NX0313_00LY266_00LY265IBM 2.
[[32m  OK  [0m] Created slice system-lvm2\x2dpvscan.slice.
         Starting LVM2 PV scan on device 8:3...
[[32m  OK  [0m] Found device /dev/mapper/rhel_yc02pvos-swap.
         Activating swap /dev/mapper/rhel_yc02pvos-swap...
[[32m  OK  [0m] Started udev Wait for Complete Device Initialization.
         Starting Activation of DM RAID sets...
[   11.082986] Adding 4194240k swap on /dev/mapper/rhel_yc02pvos-swap.  Priority:-1 extents:1 across:4194240k FS
[[32m  OK  [0m] Started Activation of DM RAID sets.
[[32m  OK  [0m] Activated swap /dev/mapper/rhel_yc02pvos-swap.
[[32m  OK  [0m] Reached target Swap.
[[32m  OK  [0m] Reached target Encrypted Volumes.
[[32m  OK  [0m] Started Monitoring of LVM2 mirrors,...ng dmeventd or progress polling.
[[32m  OK  [0m] Reached target Local File Systems (Pre).
         Mounting /boot...
[   11.179817] XFS (sda2): Mounting V5 Filesystem
[   11.826460] XFS (sda2): Ending clean mount
[[32m  OK  [0m] Mounted /boot.
[[32m  OK  [0m] Found device /dev/mapper/rhel_yc02pvos-home.
[[32m  OK  [0m] Started LVM2 PV scan on device 8:3.
         Mounting /home...
[   12.854669] XFS (dm-2): Mounting V5 Filesystem
[   13.129319] XFS (dm-2): Ending clean mount
[[32m  OK  [0m] Mounted /home.
[[32m  OK  [0m] Reached target Local File Systems.
         Starting Import network configuration from initramfs...
         Starting Tell Plymouth To Write Out Runtime Data...
         Starting Preprocess NFS configuration...
[[32m  OK  [0m] Started Tell Plymouth To Write Out Runtime Data.
[[32m  OK  [0m] Started Preprocess NFS configuration.
[[32m  OK  [0m] Started Import network configuration from initramfs.
         Starting Create Volatile Files and Directories...
[[32m  OK  [0m] Started Create Volatile Files and Directories.
         Starting Security Auditing Service...
         Mounting RPC Pipe File System...
[[32m  OK  [0m] Mounted RPC Pipe File System.
[[32m  OK  [0m] Started Security Auditing Service.
         Starting Update UTMP about System Boot/Shutdown...
[[32m  OK  [0m] Started Update UTMP about System Boot/Shutdown.
[[32m  OK  [0m] Reached target System Initialization.
[[32m  OK  [0m] Listening on Open-iSCSI iscsid Socket.
[[32m  OK  [0m] Reached target Timers.
[[32m  OK  [0m] Listening on RPCbind Server Activation Socket.
[[32m  OK  [0m] Listening on D-Bus System Message Bus Socket.
[[32m  OK  [0m] Listening on Open-iSCSI iscsiuio Socket.
[[32m  OK  [0m] Reached target Sockets.
[[32m  OK  [0m] Reached target Paths.
[[32m  OK  [0m] Reached target Basic System.
[[32m  OK  [0m] Started Hardware RNG Entropy Gatherer Daemon.
         Starting Hardware RNG Entropy Gatherer Daemon...
         Starting GSSAPI Proxy Daemon...
[[32m  OK  [0m] Started libstoragemgmt plug-in server daemon.
         Starting libstoragemgmt plug-in server daemon...
         Starting NTP client/server...
[[32m  OK  [0m] Started D-Bus System Message Bus.
         Starting D-Bus System Message Bus...
         Starting System Logging Service...
         Starting Login Service...
[[32m  OK  [0m] Started Self Monitoring and Reporting Technology (SMART) Daemon.
         Starting Self Monitoring and Reporting Technology (SMART) Daemon...
[[32m  OK  [0m] Started OPAL PRD daemon.
         Starting OPAL PRD daemon...
         Starting Dump dmesg to /var/log/dmesg...
         Starting ppc64-diag rtas_errd (platform error handling) Service...
[[32m  OK  [0m] Started irqbalance daemon.
         Starting irqbalance daemon...
[[32m  OK  [0m] Started ABRT Automated Bug Reporting Tool.
         Starting ABRT Automated Bug Reporting Tool...
         Starting Install ABRT coredump hook...
[[32m  OK  [0m] Started ABRT kernel log watcher.
         Starting ABRT kernel log watcher...
         Starting Resets System Activity Logs...
         Starting Authorization Manager...
         Starting opal_errd (PowerNV platform error handling) Service...
[[32m  OK  [0m] Started GSSAPI Proxy Daemon.
[[32m  OK  [0m] Reached target NFS client services.
[   13.686254] i2c /dev entries driver
[[32m  OK  [0m] Started opal_errd (PowerNV platform error handling) Service.
[[32m  OK  [0m] Started ppc64-diag rtas_errd (platform error handling) Service.
[[32m  OK  [0m] Started Dump dmesg to /var/log/dmesg.
[[32m  OK  [0m] Started Resets System Activity Logs.
[[32m  OK  [0m] Started Login Service.
[[32m  OK  [0m] Started System Logging Service.
[[32m  OK  [0m] Started NTP client/server.
[[32m  OK  [0m] Started Install ABRT coredump hook.
[[32m  OK  [0m] Started Authorization Manager.
         Starting firewalld - dynamic firewall daemon...
[[32m  OK  [0m] Started firewalld - dynamic firewall daemon.
[[32m  OK  [0m] Reached target Network (Pre).
         Starting Network Manager...
[   15.597681] ip6_tables: (C) 2000-2006 Netfilter Core Team
[   15.627268] Ebtables v2.0 registered
[   15.678302] nf_conntrack version 0.5.0 (65536 buckets, 262144 max)
[   15.770827] bridge: filtering via arp/ip/ip6tables is no longer available by default. Update your scripts to load br_netfilter if you need this.
[   15.825803] Netfilter messages via NETLINK v0.30.
[   15.830679] ip_set: protocol 6
[[32m  OK  [0m] Started Network Manager.
         Starting Network Manager Wait Online...
         Starting Network Manager Script Dispatcher Service...
[[32m  OK  [0m] Started Network Manager Script Dispatcher Service.
         Starting Hostname Service...
[[32m  OK  [0m] Started Hostname Service.
[   16.143948] IPv6: ADDRCONF(NETDEV_UP): net0: link is not ready
[   16.227937] tg3 0005:01:00.0 net0: Link is up at 1000 Mbps, full duplex
[   16.227994] tg3 0005:01:00.0 net0: Flow control is on for TX and on for RX
[   16.228039] tg3 0005:01:00.0 net0: EEE is disabled
[   16.232596] IPv6: ADDRCONF(NETDEV_UP): enP5p1s0f1: link is not ready
[   16.349339] IPv6: ADDRCONF(NETDEV_UP): enP5p1s0f1: link is not ready
[   16.352648] IPv6: ADDRCONF(NETDEV_UP): enP52p1s0f0: link is not ready
[   16.431357] IPv6: ADDRCONF(NETDEV_UP): enP52p1s0f0: link is not ready
[   16.437038] IPv6: ADDRCONF(NETDEV_UP): enP52p1s0f1: link is not ready
[   16.508454] IPv6: ADDRCONF(NETDEV_UP): enP52p1s0f1: link is not ready
[   16.515671] IPv6: ADDRCONF(NETDEV_UP): enP52p1s0f2: link is not ready
[   16.587209] IPv6: ADDRCONF(NETDEV_UP): enP52p1s0f2: link is not ready
[   16.592931] IPv6: ADDRCONF(NETDEV_UP): enP52p1s0f3: link is not ready
[   16.664367] IPv6: ADDRCONF(NETDEV_UP): enP52p1s0f3: link is not ready
[   16.684068] IPv6: ADDRCONF(NETDEV_UP): enP5p1s0f1: link is not ready
[   16.684610] IPv6: ADDRCONF(NETDEV_UP): enP52p1s0f0: link is not ready
[   16.685226] IPv6: ADDRCONF(NETDEV_UP): enP52p1s0f1: link is not ready
[   16.685758] IPv6: ADDRCONF(NETDEV_UP): enP52p1s0f2: link is not ready
[   16.686312] IPv6: ADDRCONF(NETDEV_UP): enP52p1s0f3: link is not ready
[   20.087711] tg3 0034:01:00.0 enP52p1s0f0: Link is up at 1000 Mbps, full duplex
[   20.087812] tg3 0034:01:00.0 enP52p1s0f0: Flow control is on for TX and on for RX
[   20.087912] tg3 0034:01:00.0 enP52p1s0f0: EEE is disabled
[   20.087990] IPv6: ADDRCONF(NETDEV_CHANGE): enP52p1s0f0: link becomes ready
[[0m[31m*     [0m] A start job is running for Network ...ger Wait Online (13s / no limit)[K[[1;31m*[0m[31m*    [0m] A start job is running for Network ...ger Wait Online (14s / no limit)[K[[32m  OK  [0m] Started Network Manager Wait Online.
         Starting LSB: Bring up/down networking...
[[32m  OK  [0m] Started LSB: Bring up/down networking.
[[32m  OK  [0m] Reached target Network.
         Starting Postfix Mail Transport Agent...
         Starting Logout off all iSCSI sessions on shutdown...
         Starting OpenSSH server daemon...
         Starting Dynamic System Tuning Daemon...
[[32m  OK  [0m] Reached target Network is Online.
         Starting Notify NFS peers of a restart...
[[32m  OK  [0m] Started Logout off all iSCSI sessions on shutdown.
         Starting Availability of block devices...
[[32m  OK  [0m] Reached target Remote File Systems (Pre).
[[32m  OK  [0m] Reached target Remote File Systems.
         Starting Permit User Sessions...
         Starting LSB: Starts the Spacewalk Daemon...
[[32m  OK  [0m] Started Availability of block devices.
[[32m  OK  [0m] Started Permit User Sessions.
[[32m  OK  [0m] Started Command Scheduler.
         Starting Command Scheduler...
         Starting Wait for Plymouth Boot Screen to Quit...
[[32m  OK  [0m] Started Job spooling tools.
         Starting Job spooling tools...
         Starting Terminate Plymouth Boot Screen...

Red Hat Enterprise Linux Server 7.4 Beta (Pegas)
Kernel 4.11.0-39.el7a.ppc64le on an ppc64le

yc02pvos login: [  109.017191459,5] IPMI: Soft shutdown requested
[   44.874651] opal-power: Poweroff requested
[[32m  OK  [0m] Started Show Plymouth Power Off Screen.
[[32m  OK  [0m] Unmounted RPC Pipe File System.
[[32m  OK  [0m] Unmounted /home.
[[32m  OK  [0m] Stopped LVM2 PV scan on device 8:3.
[[32m  OK  [0m] Removed slice system-lvm2\x2dpvscan.slice.
[   45.287579] XFS (dm-2): Unmounting Filesystem
[[32m  OK  [0m] Stopped Availability of block devices.
         Stopping Logout off all iSCSI sessions on shutdown...
[[32m  OK  [0m] Stopped Logout off all iSCSI sessions on shutdown.
[[32m  OK  [0m] Started Restore /run/initramfs.
[[32m  OK  [0m] Stopped Dynamic System Tuning Daemon.
[[32m  OK  [0m] Stopped target Network.
         Stopping LSB: Bring up/down networking...
[[32m  OK  [0m] Stopped LSB: Bring up/down networking.
[[32m  OK  [0m] Stopped Network Manager Wait Online.
         Stopping Network Manager Wait Online...
         Stopping Network Manager...
[[32m  OK  [0m] Stopped Network Manager.
[[32m  OK  [0m] Stopped target Network (Pre).
         Stopping firewalld - dynamic firewall daemon...
[[31m*[1;31m*[0m[31m*   [0m] A stop job is running for firewalld... firewall daemon (8s / 1min 33s)[K[ [31m*[1;31m*[0m[31m*  [0m] A stop job is running for firewalld... firewall daemon (8s / 1min 33s)[K[  [31m*[1;31m*[0m[31m* [0m] A stop job is running for firewalld... firewall daemon (9s / 1min 33s)[K[   [31m*[1;31m*[0m[31m*[0m] A stop job is running for firewalld... firewall daemon (9s / 1min 33s)[K[    [31m*[1;31m*[0m] A stop job is running for firewalld...firewall daemon (10s / 1min 33s)[K[     [31m*[0m] A stop job is running for firewalld...firewall daemon (10s / 1min 33s)[K[    [31m*[1;31m*[0m] A stop job is running for firewalld...firewall daemon (11s / 1min 33s)[K[   [31m*[1;31m*[0m[31m*[0m] A stop job is running for firewalld...firewall daemon (11s / 1min 33s)[K[  [31m*[1;31m*[0m[31m* [0m] A stop job is running for firewalld...firewall daemon (12s / 1min 33s)[K[ [31m*[1;31m*[0m[31m*  [0m] A stop job is running for firewalld...firewall daemon (12s / 1min 33s)[   58.060419] Ebtables v2.0 unregistered
[K[[31m*[1;31m*[0m[31m*   [0m] A stop job is running for firewalld...firewall daemon (13s / 1min 33s)[K[[1;31m*[0m[31m*    [0m] A stop job is running for firewalld...firewall daemon (13s / 1min 33s)[K[[0m[31m*     [0m] A stop job is running for firewalld...firewall daemon (14s / 1min 33s)[K[[32m  OK  [0m] Stopped firewalld - dynamic firewall daemon.
         Stopping Authorization Manager...
         Stopping D-Bus System Message Bus...
[[32m  OK  [0m] Stopped Authorization Manager.
[[32m  OK  [0m] Stopped D-Bus System Message Bus.
[[32m  OK  [0m] Stopped target Basic System.
[[32m  OK  [0m] Stopped target Slices.
[[32m  OK  [0m] Removed slice User and Session Slice.
[[32m  OK  [0m] Stopped target Sockets.
[[32m  OK  [0m] Closed Open-iSCSI iscsid Socket.
[[32m  OK  [0m] Closed D-Bus System Message Bus Socket.
[[32m  OK  [0m] Closed RPCbind Server Activation Socket.
[[32m  OK  [0m] Closed Open-iSCSI iscsiuio Socket.
[[32m  OK  [0m] Stopped target Paths.
[[32m  OK  [0m] Stopped target System Initialization.
[[32m  OK  [0m] Stopped Setup Virtual Console.
         Stopping Setup Virtual Console...
[[32m  OK  [0m] Stopped target Swap.
         Deactivating swap /dev/mapper/rhel_yc02pvos-swap...
         Stopping Load/Save Random Seed...
[[32m  OK  [0m] Stopped target Encrypted Volumes.
[[32m  OK  [0m] Stopped Apply Kernel Variables.
         Stopping Apply Kernel Variables...
         Stopping Update UTMP about System Boot/Shutdown...
[[32m  OK  [0m] Stopped Load/Save Random Seed.
[[32m  OK  [0m] Stopped Update UTMP about System Boot/Shutdown.
         Stopping Security Auditing Service...
[   59.185399] audit: type=1305 audit(1509024398.541:201): audit_pid=0 old=4614 auid=4294967295 ses=4294967295 subj=system_u:system_r:auditd_t:s0 res=1
[[32m  OK  [0m] Stopped Security Auditing Service[   59.187227] audit: type=1131 audit(1509024398.541:202): pid=1 uid=0 auid=4294967295 ses=42949.67295 subj=system_u:system_r:init_t:s0 msg='unit=auditd comm="sy
stemd" exe="/usr/lib/systemd/systemd" hostname=? addr=? terminal=? res=success'
[   59.187501] audit: type=1131 audit(1509024398.541:203): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:init_t:s0 msg='unit=systemd-tmpfiles-setup comm="systemd" exe="/usr/lib/systemd/systemd" hostname=? addr=? terminal=? res=success'
[[32m  OK  [0m] Stopped Create Volatile Files and Directories.
         Stopping[   59.187892] a Create Volatileudit: type=1131 audit(1509024398.541:204): pid=1 uid=0 auid=4294 967295 ses=4294967295 subj=systeFiles and Directm_u:system_r:iniot_t:s0 msg='unit=rhel-import-staries...te comm="systemd" exe="/usr/lib/systemd/systemd" hostname=? addr
=? terminal=? res=success'
[[32m  OK  [0m] Stopped Import network configuration from initramfs.
         Stopping Import network configuration from initramfs...
[[32m  OK  [0m] Stopped target Local File Systems.
         Unmounting Configuration File System...
         Unmounting /boot...
[   59.189770] audit: type=1131 audit(1509024398.551:205): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:init_t:s0 msg='unit=rhel-readonly comm="systemd" exe="/usr/lib/systemd/systemd" hostname=? addr=? terminal=? res=success'
[[32m  OK  [0m] Stopped Configure read-only root support.
         Stopping Configure read-only root support...
[   59.258376] XFS (sda2): Unmounting Filesystem
[[32m  OK  [0m] Deactivated swap /dev/rhel_yc02pvos/swap.
[[32m  OK  [0m] Deactivated swap /dev/disk/by-uuid/...da9-4aa3-4280-8bef-3053bb6d559f.
[[32m  OK  [0m] Deactivated swap /dev/disk/by-id/dm...0J560gh23HBLiIg2T1wfyIyQgiiS2HM.
[[32m  OK  [0m] Deactivated swap /dev/disk/by-id/dm-name-rhel_yc02pvos-swap.
[[32m  OK  [0m] Deactivated swap /dev/dm-1.
[[32m  OK  [0m] Deactivated swap /dev/mapper/rhel_yc02pvos-swap.
[[32m  OK  [0m] Unmounted Configuration File System.
[[32m  OK  [0m] Unmounted /boot.
[[32m  OK  [0m] Reached target Unmount All Filesystems.
[[32m  OK  [0m] Stopped target Local File Systems (Pre).
[   59.323302] audit: type=1131 audit(1509024398.681:206): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:init_t:s0 msg='unit=systemd-remount-fs comm="systemd" exe="/usr/lib/systemd/systemd" hostname=? addr=? terminal=? res=success'
[[32m  OK  [0m] Stopped Remount Root and Kernel File Systems.
         Stopping Remount Root and Kernel File Systems...
         Stopping Monitoring of LVM2 mirrors... dmeventd or progress polling...
[[32m  OK  [0m] Stopped Create Static Device Nodes in /dev.
         Stopping Create Static Device Nodes in /dev...
[   59.324691] audit: type=1131 audit(1509024398.681:207): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:init_t:s0 msg='unit=systemd-tmpfiles-setup-dev comm="systemd" exe="/usr/lib/systemd/systemd" hostname=? addr=? terminal=? res=success'
         Stopping Collect Read-Ahead Data...
[[32m  OK  [0m] Stopped Replay Read-Ahead Data.
[   59.326047] audit: type=1131 audit(1509024398.681:208): pid=1 uid=0 auid=4294         Stopping967295 ses=42949 Replay Read-Ahe67295 subj=systeam_u:system_r:init_t:s0 msg='unitd Data...=systemd-readahe
ad-replay comm="systemd" exe="/usr/lib/systemd/systemd" hostname=? addr=? terminal=? res=success'
[[32m  OK  [0m] Stopped Collect Read-Ahead Data.[   59.338155] audit: type=1131 audit(1509024398.701:209): pid=1
 uid=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:init_t:s0 msg='unit=systemd-readahead-collect comm="systemd" exe="/usr/lib/systemd/systemd" hostname=? addr=? terminal=? res=success'
[[32m  OK  [0m] Reached target Shutdown.
[   59.340031] audit: type=1131 audit(1509024398.701:210): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=system_u:system_r:init_t:s0 msg='unit=lvm2-monitor comm="systemd" exe="/usr/lib/systemd/systemd" hostname=? addr=? terminal=? res=success'
[   59.434943] systemd-shutdown[1]: Sending SIGTERM to remaining processes...
[   59.461642] systemd-journald[1354]: Received SIGTERM from PID 1 (systemd-shutdow).
[   59.528661] systemd-shutdown[1]: Sending SIGKILL to remaining processes...
[   59.551298] systemd-shutdown[1]: Unmounting file systems.
[   59.830737] systemd-shutdown[1]: All filesystems unmounted.
[   59.830779] systemd-shutdown[1]: Deactivating swaps.
[   59.830849] systemd-shutdown[1]: All swaps deactivated.
[   59.830899] systemd-shutdown[1]: Detaching loop devices.
[   59.832559] systemd-shutdown[1]: All loop devices detached.
[   59.832632] systemd-shutdown[1]: Detaching DM devices.
[   59.832952] systemd-shutdown[1]: Detaching DM 253:2.
[   60.094546] shutdown: 7 output lines suppressed due to ratelimiting
[   60.132144] dracut Warning: Killing all remaining processes
dracut Warning: Killing all remaining processes
[   60.323679] XFS (dm-0): Unmounting Filesystem
[   60.330506] dracut Warning: Unmounted /oldroot.
[   60.347238] dracut: Disassembling device-mapper devices
Powering off.
[   60.452704] mlx5_core 0033:01:00.1: Shutdown was called
[   60.891597] mlx5_core 0033:01:00.0: Shutdown was called
[   61.334873] sd 1:0:0:0: [sdb] Synchronizing SCSI cache
[   61.335958] sd 1:0:0:0: [sdb] Stopping disk
[   61.735013] sd 0:0:0:0: [sda] Synchronizing SCSI cache
[   61.754063] sd 0:0:0:0: [sda] Stopping disk
[   62.425147] mlx5_core 0003:01:00.1: Shutdown was called
[   64.858468] pci_raw_set_power_state: 4 callbacks suppressed
[   64.858506] tg3 0034:01:00.0: Refused to change power state, currently in D0
[   65.038478] tg3 0005:01:00.1: Refused to change power state, currently in D0
[   65.038571] mlx5_core 0003:01:00.0: Shutdown was called
[   65.638504] tg3 0005:01:00.0: Refused to change power state, currently in D0
[   67.171810] reboot: Power down
[  131.177571004,5] OPAL: Shutdown request type 0x0...


--== Welcome to Hostboot hostboot-b01e6bb/hbicore.bin ==--

  3.99344|secure|SecureROM valid - enabling functionality
  3.99347|secure|Booting in non-secure mode.
  6.08914|ISTEP  6. 5 - host_init_fsi
  6.21975|ISTEP  6. 6 - host_set_ipl_parms
  6.23693|ISTEP  6. 7 - host_discover_targets
  6.67695|HWAS|PRESENT&gt; DIMM[03]=AAAA000000000000
  6.67695|HWAS|PRESENT&gt; Proc[05]=8800000000000000
  6.67697|HWAS|PRESENT&gt; Core[07]=F3CFF3C3FFFC0000
  6.70235|ISTEP  6. 8 - host_update_master_tpm
 19.18124|SECURE|Security Access Bit&gt; 0x0000000000000000
 19.18125|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 19.18135|ISTEP  6. 9 - host_gard
 19.21332|HWAS|Deconfig HUID 0x00070003, Physical:/Sys0/Node0/Proc0/EQ0/EX1/Core1
 19.21339|HWAS|Deconfig HUID 0x00070011, Physical:/Sys0/Node0/Proc0/EQ4/EX0/Core1
 19.21345|HWAS|Deconfig HUID 0x0007000E, Physical:/Sys0/Node0/Proc0/EQ3/EX1/Core0
 19.21353|HWAS|Deconfig HUID 0x0007000F, Physical:/Sys0/Node0/Proc0/EQ3/EX1/Core1
 19.21359|HWAS|Deconfig HUID 0x00070006, Physical:/Sys0/Node0/Proc0/EQ1/EX1/Core0
 19.21364|HWAS|Deconfig HUID 0x00070001, Physical:/Sys0/Node0/Proc0/EQ0/EX0/Core1
 19.21377|HWAS|Deconfig HUID 0x00070024, Physical:/Sys0/Node0/Proc1/EQ3/EX0/Core0
 19.21384|HWAS|Deconfig HUID 0x00070016, Physical:/Sys0/Node0/Proc0/EQ5/EX1/Core0
 19.21389|HWAS|Deconfig HUID 0x00070008, Physical:/Sys0/Node0/Proc0/EQ2/EX0/Core0
 19.21733|HWAS|FUNCTIONAL&gt; DIMM[03]=AAAA000000000000
 19.21734|HWAS|FUNCTIONAL&gt; Proc[05]=8800000000000000
 19.21735|HWAS|FUNCTIONAL&gt; Core[07]=A14CB1C3F7FC0000
 19.22297|ISTEP  6.10 - host_revert_sbe_mcs_setup
 19.23943|ISTEP  6.11 - host_start_occ_xstop_handler
 19.94353|ISTEP  6.12 - host_voltage_config
 20.00846|ISTEP  7. 1 - mss_attr_cleanup
 20.34682|ISTEP  7. 2 - mss_volt
 20.43611|ISTEP  7. 3 - mss_freq
 20.55345|ISTEP  7. 4 - mss_eff_config
 21.76132|ISTEP  7. 5 - mss_attr_update
 21.77003|ISTEP  8. 1 - host_slave_sbe_config
 21.83465|ISTEP  8. 2 - host_setup_sbe
 21.83833|ISTEP  8. 3 - host_cbs_start
 21.86294|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 28.48207|ISTEP  8. 5 - host_attnlisten_proc
 28.48317|ISTEP  8. 6 - host_p9_fbc_eff_config
 28.48850|ISTEP  8. 7 - host_p9_eff_config_links
 28.49720|ISTEP  8. 8 - proc_attr_update
 28.49876|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 28.52973|ISTEP  8.10 - proc_xbus_scominit
 30.21567|ISTEP  8.11 - proc_xbus_enable_ridi
 30.21879|ISTEP  9. 1 - fabric_erepair
 30.29839|ISTEP  9. 2 - fabric_io_dccal
 30.98233|ISTEP  9. 3 - fabric_pre_trainadv
 30.98841|ISTEP  9. 4 - fabric_io_run_training
 31.18569|ISTEP  9. 5 - fabric_post_trainadv
 31.19067|ISTEP  9. 6 - proc_smp_link_layer
 31.19490|ISTEP  9. 7 - proc_fab_iovalid
 31.25128|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 31.25651|ISTEP 10. 1 - proc_build_smp
 31.38009|ISTEP 10. 2 - host_slave_sbe_update
 32.21211|ISTEP 10. 3 - host_set_voltages
 32.32321|ISTEP 10. 4 - proc_cen_ref_clk_enable
 32.32588|ISTEP 10. 5 - proc_enable_osclite
 32.32696|ISTEP 10. 6 - proc_chiplet_scominit
 32.36383|ISTEP 10. 7 - proc_abus_scominit
 32.37302|ISTEP 10. 8 - proc_obus_scominit
 32.43568|ISTEP 10. 9 - proc_npu_scominit
 32.46270|ISTEP 10.10 - proc_pcie_scominit
 32.50403|ISTEP 10.11 - proc_scomoverride_chiplets
 32.50566|ISTEP 10.12 - proc_chiplet_enable_ridi
 32.50845|ISTEP 10.13 - host_rng_bist
 32.51046|ISTEP 10.14 - host_update_redundant_tpm
 32.51203|ISTEP 11. 1 - host_prd_hwreconfig
 32.52172|ISTEP 11. 2 - cen_tp_chiplet_init1
 32.52373|ISTEP 11. 3 - cen_pll_initf
 32.52551|ISTEP 11. 4 - cen_pll_setup
 32.52847|ISTEP 11. 5 - cen_tp_chiplet_init2
 32.53204|ISTEP 11. 6 - cen_tp_arrayinit
 32.53385|ISTEP 11. 7 - cen_tp_chiplet_init3
 32.53577|ISTEP 11. 8 - cen_chiplet_init
 32.53763|ISTEP 11. 9 - cen_arrayinit
 32.54068|ISTEP 11.10 - cen_initf
 32.54246|ISTEP 11.11 - cen_do_manual_inits
 32.54430|ISTEP 11.12 - cen_startclocks
 32.54600|ISTEP 11.13 - cen_scominits
 32.54786|ISTEP 12. 1 - mss_getecid
 32.55811|ISTEP 12. 2 - dmi_attr_update
 32.56137|ISTEP 12. 3 - proc_dmi_scominit
 32.56349|ISTEP 12. 4 - cen_dmi_scominit
 32.56528|ISTEP 12. 5 - dmi_erepair
 32.56959|ISTEP 12. 6 - dmi_io_dccal
 32.87571|ISTEP 12. 7 - dmi_pre_trainadv
 32.88307|ISTEP 12. 8 - dmi_io_run_training
 32.89508|ISTEP 12. 9 - dmi_post_trainadv
 32.89707|ISTEP 12.10 - proc_cen_framelock
 32.89896|ISTEP 12.11 - host_startprd_dmi
 32.90081|ISTEP 12.12 - host_attnlisten_memb
 32.90229|ISTEP 12.13 - cen_set_inband_addr
 32.91298|ISTEP 13. 1 - host_disable_memvolt
 33.11195|ISTEP 13. 2 - mem_pll_reset
 33.13797|ISTEP 13. 3 - mem_pll_initf
 33.18211|ISTEP 13. 4 - mem_pll_setup
 33.20708|ISTEP 13. 6 - mem_startclocks
 33.22169|ISTEP 13. 7 - host_enable_memvolt
 33.22329|ISTEP 13. 8 - mss_scominit
 33.61987|ISTEP 13. 9 - mss_ddr_phy_reset
 33.71443|ISTEP 13.10 - mss_draminit
 33.96157|ISTEP 13.11 - mss_draminit_training
 34.39932|ISTEP 13.12 - mss_draminit_trainadv
 34.52932|ISTEP 13.13 - mss_draminit_mc
 34.56926|ISTEP 14. 1 - mss_memdiag
 51.73456|ISTEP 14. 2 - mss_thermal_init
 51.75374|ISTEP 14. 3 - proc_pcie_config
 51.77266|ISTEP 14. 4 - mss_power_cleanup
 51.77644|ISTEP 14. 5 - proc_setup_bars
 51.81005|ISTEP 14. 6 - proc_htm_setup
 51.81809|ISTEP 14. 7 - proc_exit_cache_contained
 51.83102|ISTEP 15. 1 - host_build_stop_image
 53.22006|ISTEP 15. 2 - proc_set_pba_homer_bar
 53.22829|ISTEP 15. 3 - host_establish_ex_chiplet
 53.23526|ISTEP 15. 4 - host_start_stop_engine
 53.25892|ISTEP 16. 1 - host_activate_master
  0.00440|ISTEP 16. 2 - host_activate_slave_cores
 54.74772|ISTEP 16. 3 - host_secure_rng
 54.74718|ISTEP 16. 4 - mss_scrub
 54.80627|ISTEP 16. 5 - host_ipl_complete
 54.82884|ISTEP 16. 6 - host_load_io_ppe
 54.84879|ISTEP 18.11 - proc_tod_setup
 54.92598|ISTEP 18.12 - proc_tod_init
 54.90622|ISTEP 20. 1 - host_load_payload
 55.14966|ISTEP 20. 2 - host_load_hdat
 58.19598|ISTEP 21. 1 - host_runtime_setup
 67.93531|htmgt|OCCs are now running in ACTIVE state
 67.94999|ISTEP 21. 2 - host_verify_hdat
 67.92506|ISTEP 21. 3 - host_start_payload
[   86.472468442,5] OPAL skiboot-v5.8-150-gabb1d4e81f33-p74eca7d starting...
[   86.472477462,7] initial console log level: memory 7, driver 5
[   86.472479777,6] CPU: P9 generation processor (max 4 threads/core)
[   86.472481586,7] CPU: Boot CPU PIR is 0x083c PVR is 0x004e1201
[   86.472483539,7] CPU: Initial max PIR set to 0x7fff
[   86.474158756,7] OPAL table: 0x300e9c40 .. 0x300ea180, branch table: 0x30002000
[   86.474163233,7] Assigning physical memory map table for nimbus
[   86.474167596,7] Parsing HDAT...
[   86.474169051,5] SPIRA-S found.
[   86.474173655,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[   86.474530725,6] SP Family is openbmc
[   86.474536936,7] LPC: IOPATH chip id = 0
[   86.474538300,7] LPC: FW BAR       = f0000000
[   86.474539873,7] LPC: MEM BAR      = e0000000
[   86.474541355,7] LPC: IO BAR       = d0010000
[   86.474542817,7] LPC: Internal BAR = c0012000
[   86.474555813,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[   86.474558613,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[   86.475378695,5] UART: Using UART at 0x60300d00103f8
[   86.475464423,4] CORE[1]: HW_PROC_ID=1 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   86.475605609,4] CORE[3]: HW_PROC_ID=3 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   86.475713432,4] CORE[4]: HW_PROC_ID=4 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   86.475831438,4] CORE[6]: HW_PROC_ID=6 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   86.476031320,4] CORE[10]: HW_PROC_ID=10 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   86.476158811,4] CORE[11]: HW_PROC_ID=11 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   86.476301718,4] CORE[13]: HW_PROC_ID=13 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   86.476489765,4] CORE[16]: HW_PROC_ID=16 PROC_CHIP_ID=0 EC=0x21 UNAVAILABLE
[   86.476942933,4] CORE[26]: HW_PROC_ID=8 PROC_CHIP_ID=1 EC=0x21 UNAVAILABLE
[   86.478221255,3] I2C: v2 found, but not supported. Parsing as v1
[   86.478576622,3] I2C: v2 found, but not supported. Parsing as v1
[   86.479953448,5] P9 DD2.10 detected
[   86.479980926,5] CHIP: Chip ID 0000 type: P9N DD2.1
[   86.480037985,5] P9 DD2.10 detected
[   86.480068281,5] CHIP: Chip ID 0008 type: P9N DD2.1
[   86.480429330,5] SLW: Enabling: stop0_lite
[   86.480463016,5] SLW: Enabling: stop0
[   86.480488321,5] SLW: Enabling: stop1_lite
[   86.480519635,5] SLW: Enabling: stop1
[   86.480548248,5] SLW: Enabling: stop2_lite
[   86.480581019,5] SLW: Enabling: stop2
[   86.480611289,5] SLW: Enabling: stop4
[   86.480637932,5] SLW: Enabling: stop11
[   86.480911965,5] PLAT: Using virtual UART
[   86.481125800,7] LPC: Routing irq 9, policy: 0 (r=1)
[   86.481127522,7] LPC: SerIRQ 9 using route 0 targetted at OPAL
[   86.481254128,5] PLAT: Detected Witherspoon platform
[   86.481301502,5] PLAT: Detected BMC platform OpenBMC
[   86.511242037,5] CPU: All 108 processors called in...
[    1.461371412,5] FLASH: Found system flash:  id:0
[    1.461752116,5] BT: Interface initialized, IO 0x00e4
[    1.462974305,7] LPC: Routing irq 10, policy: 0 (r=1)
[    1.462975412,7] LPC: SerIRQ 10 using route 1 targetted at OPAL
[    4.211887807,5] NVRAM: Size is 576 KB
[    4.421451285,5] STB: secure and trusted boot not supported
[    4.421462574,7] LPC-MBOX: Sending BMC interrupt
[    4.422160726,5] OPAL: Using OPAL UART console
[    4.422193166,7] LPC: Routing irq 4, policy: 0 (r=1)
[    4.422194362,7] LPC: SerIRQ 4 using route 2 targetted at OPAL
[    4.423488106,5] SLW: Configuring self-restore for HRMOR
[    4.424739413,5] SLW: Configuring self-restore for HRMOR
[    4.426518310,5] VAS: Initialized chip 0
[    4.427341445,5] VAS: Initialized chip 8
[    4.427465454,5] Found ibm,power9-nx
[    4.427560561,5] Found ibm,power9-nx
[    6.022049225,3] FLASH: flash subpartition not found.
[    6.022111355,3] FLASH: Failed to parse subpart info for IMA_CATALOG
[    6.024584793,3] IMC: IMC Catalog load failed
[    7.380536278,5] PCI: Resetting PHBs and training links...
[    8.463136119,5] PCI: Probing slots...
[    9.007639298,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    9.007721846,5] PHB#0000:01:00.0 [EP  ] 144d a822 R:01 C:010802 (  mass-storage) SLOT=SLOT3 
[    9.007788587,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    9.007832652,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[    9.007884773,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[    9.007930616,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[    9.007985958,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[    9.008048796,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    9.008119094,5] PHB#0003:01:00.0 [EP  ] 15b3 1019 R:00 C:020700 (       network) SLOT=SLOT1 
[    9.008202771,5] PHB#0003:01:00.1 [EP  ] 15b3 1019 R:00 C:020700 (       network) SLOT=SLOT1 
[    9.008281245,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..06 
[    9.008333468,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..06 
[    9.008391163,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[    9.008452454,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[    9.008521626,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 
[    9.008572090,5] PHB#0004:04:00.0 [EP  ] 10de 1db1 R:a1 C:030200 ( 3d-controller) SLOT=GPU0 
[    9.008625113,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 
[    9.008673550,5] PHB#0004:05:00.0 [EP  ] 10de 1db1 R:a1 C:030200 ( 3d-controller) SLOT=GPU1 
[    9.008737160,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..06 
[    9.008790636,5] PHB#0004:06:00.0 [EP  ] 10de 1db1 R:a1 C:030200 ( 3d-controller) SLOT=GPU2 
[    9.008860125,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    9.008912486,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    9.008966495,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    9.009018147,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    9.009075286,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    9.009126991,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    9.009182142,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    9.009233749,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    9.009277857,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    9.009328029,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    9.009383255,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    9.009436355,5] PHB#0006:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    9.009489362,5] PHB#0006:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    9.009533709,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    9.009584500,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    9.009631730,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    9.009684867,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    9.009736697,5] PHB#0007:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    9.009789204,5] PHB#0007:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) 
[    9.009833398,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    9.009875433,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    9.009943988,5] PHB#0033:01:00.0 [EP  ] 15b3 1019 R:00 C:020700 (       network) SLOT=SLOT1 
[    9.010056504,5] PHB#0033:01:00.1 [EP  ] 15b3 1019 R:00 C:020700 (       network) SLOT=SLOT1 
[    9.010121896,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    9.010171361,5] PHB#0034:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) SLOT=SLOT0 
[    9.010231979,5] PHB#0034:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) SLOT=SLOT0 
[    9.010297275,5] PHB#0034:01:00.2 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) SLOT=SLOT0 
[    9.010364473,5] PHB#0034:01:00.3 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) SLOT=SLOT0 
[    9.010427943,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..05 
[    9.010472919,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..05 
[    9.010517741,5] PHB#0035:02:04.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 
[    9.010575068,5] PHB#0035:03:00.0 [EP  ] 10de 1db1 R:a1 C:030200 ( 3d-controller) SLOT=GPU3 
[    9.010627579,5] PHB#0035:02:05.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 
[    9.010681100,5] PHB#0035:04:00.0 [EP  ] 10de 1db1 R:a1 C:030200 ( 3d-controller) SLOT=GPU4 
[    9.010747626,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 
[    9.010801784,5] PHB#0035:05:00.0 [EP  ] 10de 1db1 R:a1 C:030200 ( 3d-controller) SLOT=GPU5 
[   18.008487002,5] IPMI: Resetting boot count on successful boot
[   18.009133734,5] INIT: Waiting for kernel...
[   18.009171023,5] INIT: 64-bit LE kernel discovered
[   18.009206395,5] OCC: All Chip Rdy after 0 ms
[   18.027656878,5] INIT: Starting kernel at 0x20011000, fdt at 0x30a01720 305531 bytes)
[   19.020821425,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000203fff7f0000
[    0.000000] Mapped range 0x0 - 0x1200000 with 0x10000
[    0.000000] Mapped range 0x1200000 - 0x40000000 with 0x200000
[    0.000000] Mapped range 0x40000000 - 0x4000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x204000000000 with 0x40000000
[    0.000000] Process table c000203ffe000000 and radix root for kernel: c000000001c10000
[    0.000000] Linux version 4.13.5-openpower1 (fspbld@gfwa125.aus.stglabs.ibm.com) (gcc version 6.4.0 (Buildroot 2017.08-00008-g5e23247)) #2 SMP Fri Oct 13 12:40:53 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 143
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x8000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x075c7afd18500249
[    0.000000]   possible        = 0x5f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaee00000
[    0.000000] mmu_features      = 0x3c006041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa:   NODE_DATA [mem 0x3fffff6700-0x3fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x203fff7e1700-0x203fff7eafff]
[    0.000000] numa:   NODE_DATA [mem 0x203fff674180-0x203fff67da7f]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x203fff616700-0x203fff61ffff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x203fff60ce00-0x203fff6166ff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x203fff603500-0x203fff60cdff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x203fff5f9c00-0x203fff6034ff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x203fff5f0300-0x203fff5f9bff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000203fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000003fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000203fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000003fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000203fffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000003ff15f0000 s67608 r0 d63464 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 8381440
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 585728 bytes
[    0.000000] log_buf_len min size: 1048576 bytes
[    0.000000] log_buf_len: 2097152 bytes
[    0.000000] early log buf free: 1034208(98%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 536113920K/536870912K available (6144K kernel code, 1024K rwdata, 1984K rodata, 11328K init, 1685K bss, 756992K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=144, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU event tracing is enabled.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=144.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=144
[    0.000000] NR_IRQS: 512, nr_irqs: 512, preallocated irqs: 16
[    0.000000] xive: Interrupt handling initialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000003] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.002113] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.004792] clocksource: timebase mult[1f40000] shift[24] registered
[    0.007545] Console: colour dummy device 80x25
[    0.011633] console [tty0] enabled
[    0.012207] console [hvc0] enabled
[    0.012207] console [hvc0] enabled
[    0.012437] bootconsole [udbg0] disabled
[    0.012437] bootconsole [udbg0] disabled
[    0.015326] pid_max: default: 147456 minimum: 1152
[    0.020682] Security Framework initialized
[    0.031601] Dentry cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.041072] Inode-cache hash table entries: 8388608 (order: 10, 67108864 bytes)
[    0.046071] Mount-cache hash table entries: 262144 (order: 5, 2097152 bytes)
[    0.046372] Mountpoint-cache hash table entries: 262144 (order: 5, 2097152 bytes)
[    0.048174] EEH: PowerNV platform initialized
[    0.048301] POWER9 performance monitor hardware support registered
[    0.048485] Hierarchical SRCU implementation.
[    0.049604] smp: Bringing up secondary CPUs ...
[    0.232843] smp: Brought up 8 nodes, 108 CPUs
[    0.232993] numa: Node 0 CPUs: 0-3 8-11 20-23 28-39 48-51 56-63 68-71
[    0.233161] numa: Node 8 CPUs: 72-103 108-143
[    0.233251] numa: Node 250 CPUs:
[    0.233312] numa: Node 251 CPUs:
[    0.233378] numa: Node 252 CPUs:
[    0.233444] numa: Node 253 CPUs:
[    0.233504] numa: Node 254 CPUs:
[    0.233565] numa: Node 255 CPUs:
[    0.250090] devtmpfs: initialized
[    0.261745] evm: security.capability
[    0.262434] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.262754] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.264289] random: get_random_u32 called from bucket_table_alloc+0x210/0x288 with crng_init=0
[    0.264501] NET: Registered protocol family 16
[    0.264918] random: fast init done
[    0.265172] cpuidle: using governor menu
[   21.194153768,3] LPC: Got LPC reset on chip 0x0 !
[   21.194158452,3] LPC[000]: Unknown LPC error Error address reg: 0x00000000
[   21.194168890,6] IPMI: dropping non severe PEL event
[    0.301710] PCI: Probing PCI hardware
[    0.301813] PCI host bridge to bus 0000:00
[    0.301885] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.302068] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.302220] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.302433] pci 0000:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.302537] pci 0000:00:00.0: disabling bridge mem windows
[    0.303055] pci 0000:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.303160] pci 0000:01:00.0: BAR0 [mem size 0x00004000 64bit]: requesting alignment to 0x10000
[    0.303572] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.303768] PCI host bridge to bus 0001:00
[    0.303817] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.304006] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.304123] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.304330] pci 0001:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.304470] pci 0001:00:00.0: disabling bridge mem windows
[    0.304955] pci 0001:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.305046] pci 0001:01:00.0: BAR2 [mem size 0x00002000 64bit]: requesting alignment to 0x10000
[    0.305401] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.305582] PCI host bridge to bus 0002:00
[    0.305639] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.305835] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.305985] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.306189] pci 0002:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.306306] pci 0002:00:00.0: disabling bridge mem windows
[    0.306778] pci 0002:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.306884] pci 0002:01:00.0: disabling bridge mem windows
[    0.307178] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.307558] pci 0002:02:00.0: Disabling memory decoding and releasing memory resources.
[    0.307827] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.307996] PCI host bridge to bus 0003:00
[    0.308067] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.308242] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.308392] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.308599] pci 0003:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.308745] pci 0003:00:00.0: disabling bridge mem windows
[    0.309756] pci 0003:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.311512] pci 0003:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.312522] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.312745] PCI host bridge to bus 0004:00
[    0.312798] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.312987] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.313136] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.313339] pci 0004:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.313477] pci 0004:00:00.0: disabling bridge mem windows
[    0.313955] pci 0004:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.314095] pci 0004:01:00.0: disabling bridge mem windows
[    0.314636] pci 0004:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.314781] pci 0004:01:00.1: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.315256] pci 0004:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.315392] pci 0004:01:00.2: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.315877] pci 0004:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.315982] pci 0004:01:00.3: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.316506] pci 0004:01:00.4: Disabling memory decoding and releasing memory resources.
[    0.316604] pci 0004:01:00.4: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.316900] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.317339] pci 0004:02:02.0: Disabling memory decoding and releasing memory resources.
[    0.317441] pci 0004:02:02.0: disabling bridge mem windows
[    0.317949] pci 0004:02:0a.0: Disabling memory decoding and releasing memory resources.
[    0.318080] pci 0004:02:0a.0: disabling bridge mem windows
[    0.318568] pci 0004:02:0b.0: Disabling memory decoding and releasing memory resources.
[    0.318668] pci 0004:02:0b.0: disabling bridge mem windows
[    0.319164] pci 0004:02:0c.0: Disabling memory decoding and releasing memory resources.
[    0.319267] pci 0004:02:0c.0: disabling bridge mem windows
[    0.319577] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.320773] pci 0004:03:00.0: Disabling memory decoding and releasing memory resources.
[    0.320882] pci 0004:03:00.0: BAR5 [mem size 0x00000800]: requesting alignment to 0x10000
[    0.321223] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.321624] pci 0004:04:00.0: Disabling memory decoding and releasing memory resources.
[    0.321941] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.322324] pci 0004:05:00.0: Disabling memory decoding and releasing memory resources.
[    0.322649] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.323051] pci 0004:06:00.0: Disabling memory decoding and releasing memory resources.
[    0.323373] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.323575] PCI host bridge to bus 0005:00
[    0.323636] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.323829] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.323972] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.324179] pci 0005:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.324321] pci 0005:00:00.0: disabling bridge mem windows
[    0.324792] pci 0005:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.325330] pci 0005:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.325675] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.325895] PCI host bridge to bus 0030:00
[    0.325947] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.326125] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.326288] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.326462] pci 0030:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.326568] pci 0030:00:00.0: disabling bridge mem windows
[    0.326803] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.326994] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.327125] PCI host bridge to bus 0033:00
[    0.327200] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.327388] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.327542] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.327722] pci 0033:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.327854] pci 0033:00:00.0: disabling bridge mem windows
[    0.328852] pci 0033:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.330659] pci 0033:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.331702] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.331907] PCI host bridge to bus 0034:00
[    0.331956] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.332131] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.332258] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.332454] pci 0034:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.332574] pci 0034:00:00.0: disabling bridge mem windows
[    0.333044] pci 0034:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.333539] pci 0034:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.334024] pci 0034:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.334537] pci 0034:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.334844] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.335074] PCI host bridge to bus 0035:00
[    0.335133] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.335291] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.335470] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.335650] pci 0035:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.335765] pci 0035:00:00.0: disabling bridge mem windows
[    0.336205] pci 0035:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.336311] pci 0035:01:00.0: disabling bridge mem windows
[    0.336579] pci 0035:00:00.0: PCI bridge to [bus 01-05]
[    0.336920] pci 0035:02:04.0: Disabling memory decoding and releasing memory resources.
[    0.337022] pci 0035:02:04.0: disabling bridge mem windows
[    0.337420] pci 0035:02:05.0: Disabling memory decoding and releasing memory resources.
[    0.337561] pci 0035:02:05.0: disabling bridge mem windows
[    0.337975] pci 0035:02:0d.0: Disabling memory decoding and releasing memory resources.
[    0.338073] pci 0035:02:0d.0: disabling bridge mem windows
[    0.338383] pci 0035:01:00.0: PCI bridge to [bus 02-05]
[    0.339208] pci 0035:03:00.0: Disabling memory decoding and releasing memory resources.
[    0.339488] pci 0035:02:04.0: PCI bridge to [bus 03]
[    0.339831] pci 0035:04:00.0: Disabling memory decoding and releasing memory resources.
[    0.340108] pci 0035:02:05.0: PCI bridge to [bus 04]
[    0.340460] pci 0035:05:00.0: Disabling memory decoding and releasing memory resources.
[    0.340734] pci 0035:02:0d.0: PCI bridge to [bus 05]
[    0.340908] PCI host bridge to bus 0006:00
[    0.340967] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.341080] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.341308] pci 0006:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.341611] pci 0006:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.341928] pci 0006:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.342239] pci 0006:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.342547] pci 0006:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.342861] pci 0006:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.343365] PCI host bridge to bus 0007:00
[    0.343424] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.343541] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.343753] pci 0007:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.344059] pci 0007:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.344358] pci 0007:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.344663] pci 0007:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.344960] pci 0007:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.345278] pci 0007:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.345789] pci 0000:00:00.0: BAR 8: assigned [mem 0x600c000000000-0x600c0003fffff]
[    0.345882] pci 0000:01:00.0: BAR 6: assigned [mem 0x600c000000000-0x600c00001ffff pref]
[    0.346003] pci 0000:01:00.0: BAR 0: assigned [mem 0x600c000020000-0x600c000023fff 64bit]
[    0.346157] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.346541] pci 0000:01     : [PE# 1fd] Secondary bus 1 associated with PE#1fd
[    0.346852] pci 0000:01     : [PE# 1fd] Setting up 32-bit TCE table at 0..80000000
[    0.352561] IOMMU table initialized, virtual merging enabled
[    0.352638] pci 0000:01     : [PE# 1fd] Setting up window#0 0..7fffffff pg=1000
[    0.352828] pci 0000:01     : [PE# 1fd] Enabling 64-bit DMA bypass
[    0.352921] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.353026] pci 0000:00:00.0:   bridge window [mem 0x600c000000000-0x600c07fefffff]
[    0.353180] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.353276] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.353465] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.353595] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.353949] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.354253] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.359950] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.360040] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.360120] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.360201] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.360402] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.360553] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.360652] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.360791] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.360901] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.361038] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.361147] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.361272] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.361385] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.361727] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.362030] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.367721] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.367813] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.367924] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.368036] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.368194] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.368536] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.368608] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.368759] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.368947] pci 0003:00:00.0: BAR 9: assigned [mem 0x6020000000000-0x602003fffffff 64bit pref]
[    0.369097] pci 0003:01:00.0: BAR 0: assigned [mem 0x6020000000000-0x602001fffffff 64bit pref]
[    0.369330] pci 0003:01:00.1: BAR 0: assigned [mem 0x6020020000000-0x602003fffffff 64bit pref]
[    0.369553] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.369879] pci 0003:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.370186] pci 0003:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.375883] pci 0003:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.375981] pci 0003:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.376066] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.376169] pci 0003:00:00.0:   bridge window [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.376482] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x60252ffffffff 64bit pref]
[    0.376601] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c203ffffff]
[    0.376714] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x60252ffffffff 64bit pref]
[    0.376866] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c2037fffff]
[    0.377010] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c203800000-0x600c20383ffff]
[    0.377156] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c203840000-0x600c203841fff]
[    0.377295] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c203850000-0x600c203851fff]
[    0.377409] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c203860000-0x600c203861fff]
[    0.377563] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c203870000-0x600c203871fff]
[    0.377689] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.377799] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.377879] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.378016] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.378094] pci 0004:02:0a.0: BAR 9: assigned [mem 0x6024000000000-0x60245ffffffff 64bit pref]
[    0.378262] pci 0004:02:0b.0: BAR 9: assigned [mem 0x6024600000000-0x6024bffffffff 64bit pref]
[    0.378412] pci 0004:02:0c.0: BAR 9: assigned [mem 0x6024c00000000-0x60251ffffffff 64bit pref]
[    0.378568] pci 0004:02:02.0: BAR 9: assigned [mem 0x6025200000000-0x602523fffffff 64bit pref]
[    0.378689] pci 0004:02:0a.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.378831] pci 0004:02:0b.0: BAR 8: assigned [mem 0x600c201000000-0x600c201ffffff]
[    0.378963] pci 0004:02:0c.0: BAR 8: assigned [mem 0x600c202000000-0x600c202ffffff]
[    0.379087] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c203000000-0x600c2037fffff]
[    0.379204] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.379320] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.379427] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.379519] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.379641] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c203000000-0x600c2030007ff]
[    0.379758] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c203010000-0x600c20301ffff pref]
[    0.379900] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.380007] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.380086] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.380207] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.380323] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.380427] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.380511] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.380576] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.380694] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.380821] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.380964] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.381317] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.381618] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.387319] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.387414] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.387505] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.387629] pci 0004:02:02.0:   bridge window [mem 0x600c203000000-0x600c2037fffff]
[    0.387770] pci 0004:02:02.0:   bridge window [mem 0x6025200000000-0x602523fffffff 64bit pref]
[    0.387898] pci 0004:04:00.0: BAR 1: assigned [mem 0x6024000000000-0x60243ffffffff 64bit pref]
[    0.388079] pci 0004:04:00.0: BAR 3: assigned [mem 0x6024400000000-0x6024401ffffff 64bit pref]
[    0.388248] pci 0004:04:00.0: BAR 0: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.388400] pci 0004:04     : [PE# 00] Secondary bus 4 associated with PE#0
[    0.388882] pci 0004:04     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.394559] pci 0004:04     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.394655] pci 0004:04     : [PE# 00] Enabling 64-bit DMA bypass
[    0.394734] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.394859] pci 0004:02:0a.0:   bridge window [mem 0x600c200000000-0x600c200ffffff]
[    0.395016] pci 0004:02:0a.0:   bridge window [mem 0x6024000000000-0x60245ffffffff 64bit pref]
[    0.395155] pci 0004:05:00.0: BAR 1: assigned [mem 0x6024800000000-0x6024bffffffff 64bit pref]
[    0.395273] pci 0004:05:00.0: BAR 3: assigned [mem 0x6024600000000-0x6024601ffffff 64bit pref]
[    0.395449] pci 0004:05:00.0: BAR 0: assigned [mem 0x600c201000000-0x600c201ffffff]
[    0.395645] pci 0004:05     : [PE# 18] Secondary bus 5 associated with PE#18
[    0.396139] pci 0004:05     : [PE# 18] Setting up 32-bit TCE table at 0..80000000
[    0.401832] pci 0004:05     : [PE# 18] Setting up window#0 0..7fffffff pg=1000
[    0.401925] pci 0004:05     : [PE# 18] Enabling 64-bit DMA bypass
[    0.402017] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.402110] pci 0004:02:0b.0:   bridge window [mem 0x600c201000000-0x600c201ffffff]
[    0.402257] pci 0004:02:0b.0:   bridge window [mem 0x6024600000000-0x6024bffffffff 64bit pref]
[    0.402404] pci 0004:06:00.0: BAR 1: assigned [mem 0x6024c00000000-0x6024fffffffff 64bit pref]
[    0.402588] pci 0004:06:00.0: BAR 3: assigned [mem 0x6025000000000-0x6025001ffffff 64bit pref]
[    0.402755] pci 0004:06:00.0: BAR 0: assigned [mem 0x600c202000000-0x600c202ffffff]
[    0.402919] pci 0004:06     : [PE# 30] Secondary bus 6 associated with PE#30
[    0.403380] pci 0004:06     : [PE# 30] Setting up 32-bit TCE table at 0..80000000
[    0.409082] pci 0004:06     : [PE# 30] Setting up window#0 0..7fffffff pg=1000
[    0.409188] pci 0004:06     : [PE# 30] Enabling 64-bit DMA bypass
[    0.409307] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.409404] pci 0004:02:0c.0:   bridge window [mem 0x600c202000000-0x600c202ffffff]
[    0.409539] pci 0004:02:0c.0:   bridge window [mem 0x6024c00000000-0x60251ffffffff 64bit pref]
[    0.409698] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.410040] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.410111] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.410245] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.410419] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.410758] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.416453] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.416547] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.416626] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.416747] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.416900] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.417058] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.417278] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.417424] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.417585] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.417732] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.417897] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.418060] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.418225] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.418394] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.418747] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.419062] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.424775] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.424867] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.424959] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.425052] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.425238] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.425591] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.425687] pci 0033:00:00.0: BAR 9: assigned [mem 0x6220000000000-0x622003fffffff 64bit pref]
[    0.425824] pci 0033:01:00.0: BAR 0: assigned [mem 0x6220000000000-0x622001fffffff 64bit pref]
[    0.426040] pci 0033:01:00.1: BAR 0: assigned [mem 0x6220020000000-0x622003fffffff 64bit pref]
[    0.426236] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.426586] pci 0033:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.426883] pci 0033:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.432505] pci 0033:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.432664] pci 0033:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.432770] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.432869] pci 0033:00:00.0:   bridge window [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.433048] pci 0034:00:00.0: BAR 9: assigned [mem 0x6224000000000-0x622403fffffff 64bit pref]
[    0.433198] pci 0034:00:00.0: BAR 8: assigned [mem 0x620c200000000-0x620c2007fffff]
[    0.433344] pci 0034:01:00.0: BAR 6: assigned [mem 0x620c200000000-0x620c20007ffff pref]
[    0.433443] pci 0034:01:00.1: BAR 6: assigned [mem 0x620c200080000-0x620c2000fffff pref]
[    0.433591] pci 0034:01:00.2: BAR 6: assigned [mem 0x620c200100000-0x620c20017ffff pref]
[    0.433711] pci 0034:01:00.3: BAR 6: assigned [mem 0x620c200180000-0x620c2001fffff pref]
[    0.433852] pci 0034:01:00.0: BAR 0: assigned [mem 0x6224000000000-0x622400000ffff 64bit pref]
[    0.434026] pci 0034:01:00.0: BAR 2: assigned [mem 0x6224000010000-0x622400001ffff 64bit pref]
[    0.434194] pci 0034:01:00.0: BAR 4: assigned [mem 0x6224000020000-0x622400002ffff 64bit pref]
[    0.434363] pci 0034:01:00.1: BAR 0: assigned [mem 0x6224000030000-0x622400003ffff 64bit pref]
[    0.434501] pci 0034:01:00.1: BAR 2: assigned [mem 0x6224000040000-0x622400004ffff 64bit pref]
[    0.434688] pci 0034:01:00.1: BAR 4: assigned [mem 0x6224000050000-0x622400005ffff 64bit pref]
[    0.434832] pci 0034:01:00.2: BAR 0: assigned [mem 0x6224000060000-0x622400006ffff 64bit pref]
[    0.434998] pci 0034:01:00.2: BAR 2: assigned [mem 0x6224000070000-0x622400007ffff 64bit pref]
[    0.435138] pci 0034:01:00.2: BAR 4: assigned [mem 0x6224000080000-0x622400008ffff 64bit pref]
[    0.435305] pci 0034:01:00.3: BAR 0: assigned [mem 0x6224000090000-0x622400009ffff 64bit pref]
[    0.435465] pci 0034:01:00.3: BAR 2: assigned [mem 0x62240000a0000-0x62240000affff 64bit pref]
[    0.435609] pci 0034:01:00.3: BAR 4: assigned [mem 0x62240000b0000-0x62240000bffff 64bit pref]
[    0.435785] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.436143] pci 0034:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.436438] pci 0034:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.442041] pci 0034:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.442131] pci 0034:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.442221] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.442311] pci 0034:00:00.0:   bridge window [mem 0x620c200000000-0x620c27fefffff]
[    0.442460] pci 0034:00:00.0:   bridge window [mem 0x6224000000000-0x6227f7ff0ffff 64bit pref]
[    0.442624] pci 0035:00:00.0: BAR 9: assigned [mem 0x6228000000000-0x62291ffffffff 64bit pref]
[    0.442770] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c2837fffff]
[    0.442919] pci 0035:01:00.0: BAR 9: assigned [mem 0x6228000000000-0x62291ffffffff 64bit pref]
[    0.443058] pci 0035:01:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c282ffffff]
[    0.443190] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c283000000-0x620c28303ffff]
[    0.443348] pci 0035:02:04.0: BAR 9: assigned [mem 0x6228000000000-0x62285ffffffff 64bit pref]
[    0.443500] pci 0035:02:05.0: BAR 9: assigned [mem 0x6228600000000-0x6228bffffffff 64bit pref]
[    0.443652] pci 0035:02:0d.0: BAR 9: assigned [mem 0x6228c00000000-0x62291ffffffff 64bit pref]
[    0.443802] pci 0035:02:04.0: BAR 8: assigned [mem 0x620c280000000-0x620c280ffffff]
[    0.443938] pci 0035:02:05.0: BAR 8: assigned [mem 0x620c281000000-0x620c281ffffff]
[    0.444071] pci 0035:02:0d.0: BAR 8: assigned [mem 0x620c282000000-0x620c282ffffff]
[    0.444181] pci 0035:03:00.0: BAR 1: assigned [mem 0x6228000000000-0x62283ffffffff 64bit pref]
[    0.444332] pci 0035:03:00.0: BAR 3: assigned [mem 0x6228400000000-0x6228401ffffff 64bit pref]
[    0.444497] pci 0035:03:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c280ffffff]
[    0.444644] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.445017] pci 0035:03     : [PE# 00] Secondary bus 3 associated with PE#0
[    0.445462] pci 0035:03     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.451061] pci 0035:03     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.451150] pci 0035:03     : [PE# 00] Enabling 64-bit DMA bypass
[    0.451275] pci 0035:02:04.0: PCI bridge to [bus 03]
[    0.451364] pci 0035:02:04.0:   bridge window [mem 0x620c280000000-0x620c280ffffff]
[    0.451504] pci 0035:02:04.0:   bridge window [mem 0x6228000000000-0x62285ffffffff 64bit pref]
[    0.451658] pci 0035:04:00.0: BAR 1: assigned [mem 0x6228800000000-0x6228bffffffff 64bit pref]
[    0.451805] pci 0035:04:00.0: BAR 3: assigned [mem 0x6228600000000-0x6228601ffffff 64bit pref]
[    0.451965] pci 0035:04:00.0: BAR 0: assigned [mem 0x620c281000000-0x620c281ffffff]
[    0.452118] pci 0035:04     : [PE# 18] Secondary bus 4 associated with PE#18
[    0.452597] pci 0035:04     : [PE# 18] Setting up 32-bit TCE table at 0..80000000
[    0.458220] pci 0035:04     : [PE# 18] Setting up window#0 0..7fffffff pg=1000
[    0.458296] pci 0035:04     : [PE# 18] Enabling 64-bit DMA bypass
[    0.458350] pci 0035:02:05.0: PCI bridge to [bus 04]
[    0.458416] pci 0035:02:05.0:   bridge window [mem 0x620c281000000-0x620c281ffffff]
[    0.458594] pci 0035:02:05.0:   bridge window [mem 0x6228600000000-0x6228bffffffff 64bit pref]
[    0.458773] pci 0035:05:00.0: BAR 1: assigned [mem 0x6228c00000000-0x6228fffffffff 64bit pref]
[    0.458949] pci 0035:05:00.0: BAR 3: assigned [mem 0x6229000000000-0x6229001ffffff 64bit pref]
[    0.459117] pci 0035:05:00.0: BAR 0: assigned [mem 0x620c282000000-0x620c282ffffff]
[    0.459233] pci 0035:05     : [PE# 30] Secondary bus 5 associated with PE#30
[    0.459732] pci 0035:05     : [PE# 30] Setting up 32-bit TCE table at 0..80000000
[    0.465326] pci 0035:05     : [PE# 30] Setting up window#0 0..7fffffff pg=1000
[    0.465450] pci 0035:05     : [PE# 30] Enabling 64-bit DMA bypass
[    0.465541] pci 0035:02:0d.0: PCI bridge to [bus 05]
[    0.465631] pci 0035:02:0d.0:   bridge window [mem 0x620c282000000-0x620c282ffffff]
[    0.465765] pci 0035:02:0d.0:   bridge window [mem 0x6228c00000000-0x62291ffffffff 64bit pref]
[    0.465923] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.466259] pci 0035:01:00.0: PCI bridge to [bus 02-05]
[    0.466337] pci 0035:01:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.466477] pci 0035:01:00.0:   bridge window [mem 0x6228000000000-0x622bf7ff0ffff 64bit pref]
[    0.466599] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.466952] pci 0035:00:00.0: PCI bridge to [bus 01-05]
[    0.467034] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.467177] pci 0035:00:00.0:   bridge window [mem 0x6228000000000-0x622bf7ff0ffff 64bit pref]
[    0.467375] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.467569] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.467755] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.467938] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.468091] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.468291] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.468471] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.468647] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.468830] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.469014] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.469194] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.469376] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.469574] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.469755] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.469930] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.470101] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.470285] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.470468] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.470610] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.470804] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.470986] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.471163] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.471343] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.471524] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.471748] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.471866] pci 0006:00:00.1: Associating to existing PE d
[    0.471972] pci 0006:00:01.0: [PE# 0c] Associated device to PE
[    0.472087] pci 0006:00:01.1: Associating to existing PE c
[    0.472199] pci 0006:00:02.0: [PE# 0b] Associated device to PE
[    0.472316] pci 0006:00:02.1: Associating to existing PE b
[    0.472617] NPU6: Found 1 MMIO ATSD registers
[    0.472630] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.472829] pci 0007:00:00.1: Associating to existing PE d
[    0.472932] pci 0007:00:01.0: [PE# 0c] Associated device to PE
[    0.473051] pci 0007:00:01.1: Associating to existing PE c
[    0.473159] pci 0007:00:02.0: [PE# 0b] Associated device to PE
[    0.473277] pci 0007:00:02.1: Associating to existing PE b
[    0.473523] NPU7: Found 1 MMIO ATSD registers
[    0.480348] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.487912] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.488040] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.488119] vgaarb: loaded
[    0.488288] SCSI subsystem initialized
[    0.488455] usbcore: registered new interface driver usbfs
[    0.488539] usbcore: registered new interface driver hub
[    0.488904] usbcore: registered new device driver usb
[    0.489016] pps_core: LinuxPPS API ver. 1 registered
[    0.489103] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.489261] PTP clock support registered
[    0.489866] clocksource: Switched to clocksource timebase
[    0.492687] NET: Registered protocol family 2
[    0.493027] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.495562] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.496083] TCP: Hash tables configured (established 524288 bind 65536)
[    0.496350] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.497234] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.498418] NET: Registered protocol family 1
[    0.498525] pci 0001:00:00.0: enabling device (0105 -&gt; 0107)
[    0.498631] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[    2.853524] Initialise system trusted keyrings
[    2.853698] workingset: timestamp_bits=54 max_order=23 bucket_order=0
[    2.857680] Key type asymmetric registered
[    2.857722] Asymmetric key parser 'x509' registered
[    2.857996] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    2.858113] io scheduler noop registered
[    2.858532] io scheduler cfq registered (default)
[    2.858596] io scheduler mq-deadline registered
[    2.858676] io scheduler kyber registered
[    2.860379] ipmi message handler version 39.2
[    2.860444] ipmi device interface
[    2.860546] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[   10.470915] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[   10.483365] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[   10.483445] hvc0: No interrupts property, using OPAL event
[   10.483859] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[   10.484379] [drm] radeon kernel modesetting enabled.
[   10.488256] brd: module loaded
[   10.492180] loop: module loaded
[   10.492385] pci 0004:00:00.0: enabling device (0105 -&gt; 0107)
[   10.492467] pci 0004:01:00.0: enabling device (0545 -&gt; 0547)
[   10.492573] pci 0004:02:02.0: enabling device (0545 -&gt; 0547)
[   10.492664] ahci 0004:03:00.0: enabling device (0141 -&gt; 0143)
[   10.492871] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[   10.503013] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[   10.503077] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[   10.503729] scsi host0: ahci
[   10.503901] scsi host1: ahci
[   10.504084] scsi host2: ahci
[   10.504234] scsi host3: ahci
[   10.504319] ata1: SATA max UDMA/133 abar m2048@0x600c203000000 port 0x600c203000100 irq 88
[   10.504380] ata2: SATA max UDMA/133 abar m2048@0x600c203000000 port 0x600c203000180 irq 88
[   10.504440] ata3: SATA max UDMA/133 abar m2048@0x600c203000000 port 0x600c203000200 irq 88
[   10.504500] ata4: SATA max UDMA/133 abar m2048@0x600c203000000 port 0x600c203000280 irq 88
[   10.504723] libphy: Fixed MDIO Bus: probed
[   10.504790] tg3.c:v3.137 (May 11, 2014)
[   10.504832] pci 0005:00:00.0: enabling device (0105 -&gt; 0107)
[   10.504882] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[   10.535154] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[   10.535559] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:2a:09
[   10.535636] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   10.535710] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[   10.535769] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[   10.535910] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[   10.566599] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[   10.567042] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:2a:0a
[   10.567145] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   10.567297] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[   10.567429] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[   10.567624] pci 0034:00:00.0: enabling device (0105 -&gt; 0107)
[   10.567732] tg3 0034:01:00.0: enabling device (0140 -&gt; 0142)
[   10.596891] tg3 0034:01:00.0: Using 64-bit DMA iommu bypass
[   10.597354] tg3 0034:01:00.0 eth2: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b0
[   10.597465] tg3 0034:01:00.0 eth2: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   10.597654] tg3 0034:01:00.0 eth2: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[   10.597765] tg3 0034:01:00.0 eth2: dma_rwctrl[00000000] dma_mask[64-bit]
[   10.597992] tg3 0034:01:00.1: enabling device (0140 -&gt; 0142)
[   10.638816] tg3 0034:01:00.1: Using 64-bit DMA iommu bypass
[   10.639194] tg3 0034:01:00.1 eth3: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b1
[   10.639302] tg3 0034:01:00.1 eth3: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   10.639517] tg3 0034:01:00.1 eth3: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[   10.639646] tg3 0034:01:00.1 eth3: dma_rwctrl[00000000] dma_mask[64-bit]
[   10.639827] tg3 0034:01:00.2: enabling device (0140 -&gt; 0142)
[   10.688884] tg3 0034:01:00.2: Using 64-bit DMA iommu bypass
[   10.689252] tg3 0034:01:00.2 eth4: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b2
[   10.689394] tg3 0034:01:00.2 eth4: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   10.689473] tg3 0034:01:00.2 eth4: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[   10.689537] tg3 0034:01:00.2 eth4: dma_rwctrl[00000000] dma_mask[64-bit]
[   10.689683] tg3 0034:01:00.3: enabling device (0140 -&gt; 0142)
[   10.728935] tg3 0034:01:00.3: Using 64-bit DMA iommu bypass
[   10.729293] tg3 0034:01:00.3 eth5: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b3
[   10.729412] tg3 0034:01:00.3 eth5: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[   10.729603] tg3 0034:01:00.3 eth5: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[   10.729725] tg3 0034:01:00.3 eth5: dma_rwctrl[00000000] dma_mask[64-bit]
[   10.730018] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[   10.730095] ehci-pci: EHCI PCI platform driver
[   10.730217] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[   10.730316] ohci-pci: OHCI PCI platform driver
[   10.730499] xhci_hcd 0001:01:00.0: xHCI Host Controller
[   10.730603] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[   10.730799] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[   10.730924] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[   10.731639] hub 1-0:1.0: USB hub found
[   10.731689] hub 1-0:1.0: 4 ports detected
[   10.731886] xhci_hcd 0001:01:00.0: xHCI Host Controller
[   10.732003] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[   10.732141] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[   10.732396] hub 2-0:1.0: USB hub found
[   10.732446] hub 2-0:1.0: 4 ports detected
[   10.732673] usbcore: registered new interface driver usb-storage
[   10.779853] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[   10.779933] i2c /dev entries driver
[   10.781812] at24 0-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.782158] at24 1-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.782498] at24 2-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.793820] at24 3-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.794157] at24 4-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.809353] at24 5-0052: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.809620] at24 5-0053: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.809887] at24 5-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.810176] at24 5-0055: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.810527] at24 6-0052: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.810808] at24 6-0053: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.811088] at24 6-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.811370] at24 6-0055: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.817261] at24 7-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.817609] at24 8-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.817949] at24 9-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.829272] at24 10-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   10.831091] ata4: SATA link down (SStatus 0 SControl 300)
[   10.850801] ata3: SATA link down (SStatus 0 SControl 300)
[   11.019815] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[   11.027121] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[   11.028160] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[   11.028263] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[   11.028399] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[   11.028525] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[   11.029153] ata2.00: configured for UDMA/133
[   11.048830] ata1.00: configured for UDMA/133
[   11.049075] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   11.049565] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   11.132896] powernv-cpufreq: cpufreq pstate min 108 nominal 54 max 0
[   11.132977] powernv-cpufreq: Workload Optimized Frequency is enabled in the platform
[   11.139029] usbcore: registered new interface driver usbhid
[   11.139091] usbhid: USB HID core driver
[   11.139395] ipip: IPv4 and MPLS over IPv4 tunneling driver
[   11.139632] NET: Registered protocol family 17
[   11.139716] Key type dns_resolver registered
[   11.141522] registered taskstats version 1
[   11.141575] Loading compiled-in X.509 certificates
[   11.147510] Loaded X.509 cert 'Build time autogenerated kernel key: 01b5359645346f08e23569692801facc43c80ea0'
[   11.151815] Key type encrypted registered
[   11.151893] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[   11.152093] evm: HMAC attrs: 0x1
[   11.199876] rtc-opal opal-rtc: setting system clock to 2017-10-26 13:29:28 UTC (1509024568)
[   11.201364] Freeing unused kernel memory: 11328K
[   11.218559] udevd[2427]: starting version 3.2.2
[   11.222780] udevd[2428]: starting eudev-3.2.2
[   11.266764] nvme nvme0: pci function 0000:01:00.0
[   11.267446] pci 0000:00:00.0: enabling device (0105 -&gt; 0107)
[   11.267523] nvme 0000:01:00.0: enabling device (0140 -&gt; 0142)
[   11.267595] nvme 0000:01:00.0: Using 64-bit DMA iommu bypass
[   11.271446] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[   11.271777] pci 0002:00:00.0: enabling device (0105 -&gt; 0107)
[   11.271861] pci 0002:01:00.0: enabling device (0145 -&gt; 0147)
[   11.271948] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[   11.272469] [drm] platform has no IO space, trying MMIO
[   11.272530] [drm] VGA not enabled on entry, requesting chip POST
[   11.272619] [drm] Using P2A bridge for configuration
[   11.272676] [drm] AST 2500 detected
[   11.272722] [drm] Analog VGA only
[   11.272807] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[   11.275001] [TTM] Zone  kernel: Available graphics memory: 268062624 kiB
[   11.275112] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[   11.275174] [TTM] Initializing pool allocator
[   11.275469] scsi 0:0:0:0: Attached scsi generic sg0 type 0
[   11.275632] scsi 1:0:0:0: Attached scsi generic sg1 type 0
[   11.280022] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[   11.280037] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[   11.280040] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[   11.280058] sd 1:0:0:0: [sdb] Write Protect is off
[   11.280088] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[   11.280313] sd 0:0:0:0: [sda] 4096-byte physical blocks
[   11.280372] sd 0:0:0:0: [sda] Write Protect is off
[   11.280453] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[   11.282027] pci 0003:00:00.0: enabling device (0105 -&gt; 0107)
[   11.282080] mlx5_core 0003:01:00.0: enabling device (0140 -&gt; 0142)
[   11.282164] mlx5_core 0003:01:00.0: Using 64-bit DMA iommu bypass

[1;24r[0;10m[4l[?7h[?25l[?1c[H[J[H[J Petitboot (v1.6.0-p3dc37e1)[2d \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80[4;3HSystem information[5;3HSystem configuration[6;3HSystem status log[7;3HLanguage[8;3HRescan devices[9;3HRetrieve config from URL[10;3HPlugins (0)[11d *[0;10;7mExit to shell           [22;2H[0;10m\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80[23d Enter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[24d Welcome to Petitboot[J[1;47H'8335-GTW000000' '1318AAA0000000'[24d [3;21r[3;1H[2L[1;24r[3;3H[Disk: sda2 / d88f908d-cac5-443e-82fa-12fe2159e34b][4;5HRed Hat Enterprise Linux Server (4.11.0-39.el7a.ppc64le) 7.4 (Pegas)[13;27H[0;10;7m                                              [24;2H[0;10m[4;21r[4;1HM[1;24r[4;5HRed Hat Enterprise Linux Server (4.11.0-34.el7a.ppc64le) 7.4 (Pegas)[24d [4;21r[4;1HM[1;24r[4;5HRed Hat Enterprise Linux Server (0-rescue-c66dca449c274d939961bc85e5b8ec19)[15;73H[0;10;7m       [24;2H[0;10m[enP5p1s0f0] Configuring with static address (ip: 9.5.180.48/24) Booting in 9 sec: [sda2] Red Hat Enterprise Linux Server (4.11.0-39.el7a.ppc64[?7ll[?7h[24;13H8[80G[24;13H7[80G[24;13H6[80G[24;13H5[80G[24;13H4[80G[24;13H3[80G[J[14d *[0;10;7mPlugins (0)                                                                  [15;2H[0;10m Exit to shell[K[A[24d Default boot cancelled[J[13d *[0;10;7mRetrieve config from URL                                                     [14;2H[0;10m Plugins (0)[K[A[A *[0;10;7mRescan devices                                                               [13;2H[0;10m Retrieve config from URL[K[A[A *[0;10;7mLanguage                                                                     [12;2H[0;10m Rescan devices[K[A[A *[0;10;7mSystem status log                                                            [11;2H[0;10m Language[K[A[A *[0;10;7mSystem configuration                                                         [10;2H[0;10m System status log[K[A[A *[0;10;7mSystem information                                                           [9;2H[0;10m System configuration[K[A[3d System type: '8335-GTW000000'[K[4d System id:   '1318AAA0000000'[K[5d[K[6d Primary platform versions:[K[7;9HIBM-witherspoon-ibm-OP9_v1.19_1.62[8;8H[1K op-build-v1.7-1471-g8043efb[K[9;8H[1K buildroot-2017.08-8-g5e23247[10;8H[1K skiboot-v5.8-150-gabb1d4e81f33-p74eca7d[11;8H[1K hostboot-b01e6bb[12;8H[1K linux-4.13.5-openpower1-pd2c0bbb[13;8H[1K petitboot-v1.6.0-p3dc37e1[14;8H[1K machine-xml-389c56f[15;8H[1K occ-ba4e81e[16;9Hhostboot-binaries-0886586[17;9Hcapp-ucode-p9-dd2-v2[18;9Hsbe-374add4[20d BMC current side:[21;9HDevice ID: 0x0[H[J Petitboot System Information[2d \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80[3d System type: '8335-GTW000000'[4d System id:   '1318AAA0000000'[6d Primary platform versions:[7;9HIBM-witherspoon-ibm-OP9_v1.19_1.62[8;9Hop-build-v1.7-1471-g8043efb[9;9Hbuildroot-2017.08-8-g5e23247[10;9Hskiboot-v5.8-150-gabb1d4e81f33-p74eca7d[11;9Hhostboot-b01e6bb[12;9Hlinux-4.13.5-openpower1-pd2c0bbb[13;9Hpetitboot-v1.6.0-p3dc37e1[14;9Hmachine-xml-389c56f[15;9Hocc-ba4e81e[16;9Hhostboot-binaries-0886586[17;9Hcapp-ucode-p9-dd2-v2[18;9Hsbe-374add4[20d BMC current side:[21;9HDevice ID: 0x0[22d \xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80[23d x=exit, h=help[24d [1;12H(v1.6.0-p3dc37e1) [1;47H'8335-GTW000000' '1318AAA0000000'[3d  [Disk: sda2 / d88f908d-cac5-443e-82fa-12fe2159e34b][4d    Red Hat Enterprise Linux Server (0-rescue-c66dca449c274d939961bc85e5b8ec19)[5;5HRed Hat Enterprise Linux Server (4.11.0-34.el7a.ppc64le) 7.4 (Pegas)[6d    Red Hat Enterprise Linux Server (4.11.0-39.el7a.ppc64le) 7.4 (Pegas)[7d[K[8d *[0;10;7mSystem information                                                           [9;3H[0;10mSystem configuration[K[10;3HSystem status log[K[11;3HLanguage[K[12;3HRescan devices[K[13;3HRetrieve config from URL[K[14;3HPlugins (0)[K[15;3HExit to shell[K[16d[K[17d[K[18d[K[20d[K[21d[K[23d Enter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[24d [  145.304024406,5] IPMI: Soft shutdown requested
The system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
Requesting system poweroff
[  134.929801] reboot: Power down
[  156.034091299,5] OPAL: Shutdown request type 0x0...
Connection to 9.5.180.47 closed by remote host.
Connection to 9.5.180.47 closed.
</msg>
<status starttime="20171026 13:38:51.607" endtime="20171026 13:38:51.697" status="PASS"></status>
</kw>
<status starttime="20171026 13:37:08.187" endtime="20171026 13:38:51.698" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20171026 13:22:43.158" endtime="20171026 13:38:51.698" status="FAIL" critical="yes">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</status>
</test>
<test id="s1-s2-t2" name="Check For Application Failures">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.701">${default_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:38:51.701" endtime="20171026 13:38:51.701" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.702">${log_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:38:51.702" endtime="20171026 13:38:51.702" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:51.703">${log_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:38:51.701" endtime="20171026 13:38:51.703" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.704">${default_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:38:51.704" endtime="20171026 13:38:51.704" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.705">${log_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:38:51.705" endtime="20171026 13:38:51.705" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:51.705">${log_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:38:51.703" endtime="20171026 13:38:51.705" status="PASS"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.706">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw'</msg>
<status starttime="20171026 13:38:51.706" endtime="20171026 13:38:51.706" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:38:51.707" endtime="20171026 13:38:51.707" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.713">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw''.</msg>
<msg level="INFO" timestamp="20171026 13:38:51.717">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:38:51.717">${output} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:38:51.707" endtime="20171026 13:38:51.717" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171026 13:38:51.719" endtime="20171026 13:38:51.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:51.721">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status starttime="20171026 13:38:51.720" endtime="20171026 13:38:51.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.721">${ssh_pw_file_path} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:38:51.721" endtime="20171026 13:38:51.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.722">${cmd_buf} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:38:51.722" endtime="20171026 13:38:51.723" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:51.723">${search_string} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:38:51.706" endtime="20171026 13:38:51.723" status="PASS"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.724">${search_string} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47</msg>
<status starttime="20171026 13:38:51.723" endtime="20171026 13:38:51.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.725">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20171026 13:38:51.724" endtime="20171026 13:38:51.725" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:38:51.725" endtime="20171026 13:38:51.725" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.731">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171026 13:38:51.738">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:38:51.739">${os_con_pid} = </msg>
<status starttime="20171026 13:38:51.726" endtime="20171026 13:38:51.739" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20171026 13:38:51.741" endtime="20171026 13:38:51.742" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:51.742">${os_con_pid} = </msg>
<status starttime="20171026 13:38:51.705" endtime="20171026 13:38:51.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.743">${cmd_buf} = kill -9 </msg>
<status starttime="20171026 13:38:51.743" endtime="20171026 13:38:51.743" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:38:51.744" endtime="20171026 13:38:51.745" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.747">${rc} = None</msg>
<msg level="INFO" timestamp="20171026 13:38:51.747">${output} = None</msg>
<status starttime="20171026 13:38:51.745" endtime="20171026 13:38:51.747" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171026 13:38:51.747" endtime="20171026 13:38:51.748" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:51.751">Copied file from '&lt;a href="file:///tmp/9.5.180.47_os_console.txt"&gt;/tmp/9.5.180.47_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/9.5.180.47_os_console.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/9.5.180.47_os_console.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:38:51.749" endtime="20171026 13:38:51.752" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:51.749" endtime="20171026 13:38:51.752" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:51.748" endtime="20171026 13:38:51.752" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.752">${output} = </msg>
<status starttime="20171026 13:38:51.752" endtime="20171026 13:38:51.752" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.753">${loc_quiet} = 1</msg>
<status starttime="20171026 13:38:51.753" endtime="20171026 13:38:51.753" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<status starttime="20171026 13:38:51.754" endtime="20171026 13:38:51.797" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:51.798">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:38:51.869">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.5.180.47
Warning: Permanently added '[9.5.180.47]:2200' (RSA) to the list of known hosts.
root@9.5.180.47's password: 


--== Welcome to Host...</msg>
<status starttime="20171026 13:38:51.753" endtime="20171026 13:38:51.869" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:51.974">${log_output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.5.180.47
Warning: Permanently added '[9.5.180.47]:2200' (RSA) to the list of known hosts.
root@9.5.180.47's password: 


--== Welcome to Host...</msg>
<status starttime="20171026 13:38:51.703" endtime="20171026 13:38:51.974" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:51.977">Created file '&lt;a href="file:///tmp/9.5.180.47_os_console.txt"&gt;/tmp/9.5.180.47_os_console.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:38:51.976" endtime="20171026 13:38:51.977" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.978">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw'</msg>
<status starttime="20171026 13:38:51.978" endtime="20171026 13:38:51.979" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:38:51.979" endtime="20171026 13:38:51.979" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.984">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw''.</msg>
<msg level="INFO" timestamp="20171026 13:38:51.987">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:38:51.988">${output} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:38:51.979" endtime="20171026 13:38:51.988" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171026 13:38:51.990" endtime="20171026 13:38:51.991" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:51.991">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status starttime="20171026 13:38:51.991" endtime="20171026 13:38:51.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.992">${ssh_pw_file_path} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:38:51.992" endtime="20171026 13:38:51.992" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.993">${cmd_buf} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:38:51.993" endtime="20171026 13:38:51.994" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:51.994">${sub_cmd_buf} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:38:51.977" endtime="20171026 13:38:51.994" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:51.995">${cmd_buf} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47 &gt; /tmp/9.5.180.47_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status starttime="20171026 13:38:51.994" endtime="20171026 13:38:51.995" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:38:51.995" endtime="20171026 13:38:51.995" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:52.000">Running command '/tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47 &gt; /tmp/9.5.180.47_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20171026 13:38:52.004">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:38:52.004">${output} = </msg>
<status starttime="20171026 13:38:51.996" endtime="20171026 13:38:52.004" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20171026 13:38:52.006" endtime="20171026 13:38:52.007" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Sleep">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:53.008">Slept 1 second</msg>
<status starttime="20171026 13:38:52.008" endtime="20171026 13:38:53.008" status="PASS"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:53.011">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw'</msg>
<status starttime="20171026 13:38:53.010" endtime="20171026 13:38:53.011" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:38:53.011" endtime="20171026 13:38:53.011" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:53.015">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw''.</msg>
<msg level="INFO" timestamp="20171026 13:38:53.019">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:38:53.019">${output} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:38:53.012" endtime="20171026 13:38:53.019" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171026 13:38:53.022" endtime="20171026 13:38:53.022" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:53.025">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status starttime="20171026 13:38:53.023" endtime="20171026 13:38:53.025" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:53.026">${ssh_pw_file_path} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:38:53.026" endtime="20171026 13:38:53.026" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:53.027">${cmd_buf} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:38:53.026" endtime="20171026 13:38:53.027" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:53.027">${search_string} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:38:53.010" endtime="20171026 13:38:53.027" status="PASS"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:53.028">${search_string} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47</msg>
<status starttime="20171026 13:38:53.028" endtime="20171026 13:38:53.028" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:53.029">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20171026 13:38:53.029" endtime="20171026 13:38:53.029" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:38:53.029" endtime="20171026 13:38:53.030" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:53.034">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171026 13:38:53.044">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:38:53.044">${os_con_pid} = 246</msg>
<status starttime="20171026 13:38:53.030" endtime="20171026 13:38:53.044" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20171026 13:38:53.046" endtime="20171026 13:38:53.047" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:53.048">${os_con_pid} = 246</msg>
<status starttime="20171026 13:38:53.009" endtime="20171026 13:38:53.048" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:53.049">Length is 3</msg>
<status starttime="20171026 13:38:53.048" endtime="20171026 13:38:53.049" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:51.700" endtime="20171026 13:38:53.049" status="PASS"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:38:53.052">Dictionary does not contain key 'host'.</msg>
<status starttime="20171026 13:38:53.052" endtime="20171026 13:38:53.052" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:53.053">${has_host} = False</msg>
<status starttime="20171026 13:38:53.051" endtime="20171026 13:38:53.053" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20171026 13:38:53.054" endtime="20171026 13:38:53.054" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:53.053" endtime="20171026 13:38:53.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:53.056">${port_num} = 22</msg>
<status starttime="20171026 13:38:53.055" endtime="20171026 13:38:53.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:53.056">${SSH_PORT} = 22</msg>
<status starttime="20171026 13:38:53.056" endtime="20171026 13:38:53.056" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:53.057">${https_num} = 443</msg>
<status starttime="20171026 13:38:53.057" endtime="20171026 13:38:53.057" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:53.058">${AUTH_URI} = https://9.5.180.47:443</msg>
<status starttime="20171026 13:38:53.057" endtime="20171026 13:38:53.058" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:53.055" endtime="20171026 13:38:53.058" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:53.054" endtime="20171026 13:38:53.058" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20171026 13:38:53.059">Dictionary does not contain key 'port'.</msg>
<status starttime="20171026 13:38:53.059" endtime="20171026 13:38:53.059" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:53.059">${has_port} = False</msg>
<status starttime="20171026 13:38:53.058" endtime="20171026 13:38:53.060" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20171026 13:38:53.061" endtime="20171026 13:38:53.062" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20171026 13:38:53.062" endtime="20171026 13:38:53.063" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:53.061" endtime="20171026 13:38:53.063" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:53.060" endtime="20171026 13:38:53.063" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:53.063">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171026 13:38:55.974">Read output: root@witherspoon:~#</msg>
<status starttime="20171026 13:38:53.063" endtime="20171026 13:38:55.974" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:53.050" endtime="20171026 13:38:55.974" status="PASS"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>journalctl --no-pager | egrep '${ERROR_REGEX}'</arg>
</arguments>
<assign>
<var>${journal_log}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:55.976">Executing command 'journalctl --no-pager | egrep 'SEGV|core-dump''.</msg>
<msg level="INFO" timestamp="20171026 13:38:57.730">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20171026 13:38:57.731">${stdout} = </msg>
<msg level="INFO" timestamp="20171026 13:38:57.731">${stderr} = </msg>
<status starttime="20171026 13:38:55.975" endtime="20171026 13:38:57.731" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:57.732">Length is 0</msg>
<status starttime="20171026 13:38:57.731" endtime="20171026 13:38:57.732" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:57.732">${journal_log} = </msg>
<status starttime="20171026 13:38:55.975" endtime="20171026 13:38:57.732" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${journal_log}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:57.732">Length is 0</msg>
<status starttime="20171026 13:38:57.732" endtime="20171026 13:38:57.732" status="PASS"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20171026 13:38:57.734" endtime="20171026 13:38:57.734" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.746">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20171026 13:38:57.735" endtime="20171026 13:38:57.746" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.747">${FFDC_DIR_PATH} = /tmp/fspcibld/18314/obmc-robot/logs/20171026133711300819_TestsTestBasicPoweron/20171026133711300819_PowerOnTest/</msg>
<status starttime="20171026 13:38:57.746" endtime="20171026 13:38:57.747" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20171026 13:38:57.747" endtime="20171026 13:38:57.747" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20171026 13:38:57.748" endtime="20171026 13:38:57.748" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:57.749">Directory '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs"&gt;/tmp/fspcibld/18314/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20171026 13:38:57.748" endtime="20171026 13:38:57.749" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:57.750">File '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20171026 13:38:57.749" endtime="20171026 13:38:57.750" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:57.750">${exist} = True</msg>
<status starttime="20171026 13:38:57.749" endtime="20171026 13:38:57.750" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20171026 13:38:57.750" endtime="20171026 13:38:57.751" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20171026 13:38:57.751" endtime="20171026 13:38:57.751" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.752">${cur_time} = 2017-10-26 13:38:57:752273</msg>
<status starttime="20171026 13:38:57.752" endtime="20171026 13:38:57.752" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.753">${cur_time} = 20171026133857752273</msg>
<status starttime="20171026 13:38:57.753" endtime="20171026 13:38:57.753" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:57.753">${cur_time} = 20171026133857752273</msg>
<status starttime="20171026 13:38:57.752" endtime="20171026 13:38:57.753" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:57.754">Appended to file '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:38:57.754" endtime="20171026 13:38:57.754" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:57.734" endtime="20171026 13:38:57.754" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status starttime="20171026 13:38:57.755" endtime="20171026 13:38:57.755" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:57.733" endtime="20171026 13:38:57.755" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.757">${default_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:38:57.756" endtime="20171026 13:38:57.757" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.761">${log_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:38:57.757" endtime="20171026 13:38:57.761" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:57.761">${log_file_path} = /tmp/9.5.180.47_os_console.txt</msg>
<status starttime="20171026 13:38:57.756" endtime="20171026 13:38:57.761" status="PASS"></status>
</kw>
<kw library="utils" name="Get SOL Console Pid">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.763">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw'</msg>
<status starttime="20171026 13:38:57.762" endtime="20171026 13:38:57.763" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:38:57.763" endtime="20171026 13:38:57.763" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.768">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/18314/obmc-robot -name 'ssh_pw''.</msg>
<msg level="INFO" timestamp="20171026 13:38:57.772">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:38:57.772">${output} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:38:57.764" endtime="20171026 13:38:57.772" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171026 13:38:57.775" endtime="20171026 13:38:57.776" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Integers">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:57.776">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status starttime="20171026 13:38:57.776" endtime="20171026 13:38:57.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.777">${ssh_pw_file_path} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20171026 13:38:57.777" endtime="20171026 13:38:57.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.779">${cmd_buf} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:38:57.778" endtime="20171026 13:38:57.779" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:57.780">${search_string} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.5.180.47</msg>
<status starttime="20171026 13:38:57.762" endtime="20171026 13:38:57.780" status="PASS"></status>
</kw>
<kw library="String" name="Replace String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.781">${search_string} = /tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47</msg>
<status starttime="20171026 13:38:57.780" endtime="20171026 13:38:57.781" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps awwo user,pid,cmd | egrep</arg>
<arg>'${search_string}' | egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.781">${cmd_buf} = echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20171026 13:38:57.781" endtime="20171026 13:38:57.781" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:38:57.782" endtime="20171026 13:38:57.782" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.786">Running command 'echo $(ps awwo user,pid,cmd | egrep '/tmp/fspcibld/18314/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.5.180.47' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171026 13:38:57.801">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:38:57.801">${os_con_pid} = 246</msg>
<status starttime="20171026 13:38:57.782" endtime="20171026 13:38:57.801" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20171026 13:38:57.803" endtime="20171026 13:38:57.804" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:57.805">${os_con_pid} = 246</msg>
<status starttime="20171026 13:38:57.762" endtime="20171026 13:38:57.805" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.805">${cmd_buf} = kill -9 246</msg>
<status starttime="20171026 13:38:57.805" endtime="20171026 13:38:57.806" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20171026 13:38:57.807" endtime="20171026 13:38:57.808" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:57.806" endtime="20171026 13:38:57.808" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:57.812">Running command 'kill -9 246 2&gt;&amp;1'.</msg>
<status starttime="20171026 13:38:57.809" endtime="20171026 13:38:57.816" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:57.816">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:38:57.817">${output} = </msg>
<status starttime="20171026 13:38:57.808" endtime="20171026 13:38:57.817" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20171026 13:38:57.820" endtime="20171026 13:38:57.821" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:57.819" endtime="20171026 13:38:57.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20171026 13:38:57.825">Copied file from '&lt;a href="file:///tmp/9.5.180.47_os_console.txt"&gt;/tmp/9.5.180.47_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/18314/obmc-robot/logs/9.5.180.47_os_console.txt"&gt;/tmp/fspcibld/18314/obmc-robot/logs/9.5.180.47_os_console.txt&lt;/a&gt;'.</msg>
<status starttime="20171026 13:38:57.823" endtime="20171026 13:38:57.825" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:57.822" endtime="20171026 13:38:57.825" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:57.821" endtime="20171026 13:38:57.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.826">${output} = </msg>
<status starttime="20171026 13:38:57.825" endtime="20171026 13:38:57.826" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20171026 13:38:57.826">${loc_quiet} = 1</msg>
<status starttime="20171026 13:38:57.826" endtime="20171026 13:38:57.826" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<status starttime="20171026 13:38:57.827" endtime="20171026 13:38:57.865" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:57.867">${rc} = 0</msg>
<msg level="INFO" timestamp="20171026 13:38:57.867">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.5.180.47
root@9.5.180.47's password: 
[[32m  OK  [0m] Reached target Local File Systems.
[    2.061021] systemd[1]: Reached target Local File ...</msg>
<status starttime="20171026 13:38:57.827" endtime="20171026 13:38:57.867" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20171026 13:38:57.868">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.5.180.47
root@9.5.180.47's password: 
[[32m  OK  [0m] Reached target Local File Systems.
[    2.061021] systemd[1]: Reached target Local File ...</msg>
<status starttime="20171026 13:38:57.755" endtime="20171026 13:38:57.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20171026 13:38:57.871">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.5.180.47
root@9.5.180.47's password: 
[[32m  OK  [0m] Reached target Local File Systems.
[    2.061021] systemd[1]: Reached target Local File Systems.
[    2.061102] systemd[1]: Starting Local File Systems.
[[32m  OK  [0m] Created slice Root Slice.
[    2.061692] systemd[1]: Created slice Root Slice.
[    2.061758] systemd[1]: Starting Root Slice.
[[32m  OK  [0m] Created slice System Slice.
[    2.062011] systemd[1]: Created slice System Slice.
[    2.062077] systemd[1]: Starting System Slice.
[[32m  OK  [0m] Reached target Timers.
[[32m  OK  [0m] Reached target Slices.
[[32m  OK  [0m] Listening on Journal Socket.
         Starting Journal Service...
         Starting Create list of required st... nodes for the current kernel...
         Starting Apply Kernel Variables...
         Starting dracut cmdline hook...
[[32m  OK  [0m] Listening on udev Control Socket.
[[32m  OK  [0m] Reached target Swap.
[[32m  OK  [0m] Listening on udev Kernel Socket.
[[32m  OK  [0m] Reached target Sockets.
         Starting Setup Virtual Console...
[[32m  OK  [0m] Started Create list of required sta...ce nodes for the current kernel.
[[32m  OK  [0m] Started Apply Kernel Variables.
         Starting Create Static Device Nodes in /dev...
[[32m  OK  [0m] Started Create Static Device Nodes in /dev.
[[32m  OK  [0m] Started Journal Service.
[[32m  OK  [0m] Started Setup Virtual Console.
[[32m  OK  [0m] Started dracut cmdline hook.
         Starting dracut pre-udev hook...
[    2.288052] alg: No test for pkcs1pad(rsa,sha256) (pkcs1pad(rsa-generic,sha256))
[    2.291968] device-mapper: uevent: version 1.0.3
[    2.293134] device-mapper: ioctl: 4.35.0-ioctl (2016-06-23) initialised: dm-devel@redhat.com
[[32m  OK  [0m] Started dracut pre-udev hook.
         Starting udev Kernel Device Manager...
[[32m  OK  [0m] Started udev Kernel Device Manager.
         Starting udev Coldplug all Devices...
         Mounting Configuration File System...
[[32m  OK  [0m] Mounted Configuration File System.
[    2.404036] pps_core: LinuxPPS API ver. 1 registered
[    2.404099] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    2.405444] PTP clock support registered
[    2.405747] nvme nvme0: pci function 0000:01:00.0
[    2.405855] nvme 0000:01:00.0: Using 64-bit DMA iommu bypass
[    2.412219] tg3.c:v3.137 (May 11, 2014)
[    2.420153] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    2.421701] mlx5_core 0003:01:00.0: Using 64-bit DMA iommu bypass
[    2.421831] mlx5_core 0003:01:00.0: firmware version: 16.21.62
[    2.430564] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    2.430620] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    2.431413] [drm] platform has no IO space, trying MMIO
[    2.431472] [drm] Using P2A bridge for configuration
[    2.431521] [drm] AST 2500 detected
[    2.431564] [drm] Analog VGA only
[    2.431608] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    2.431746] [TTM] Zone  kernel: Available graphics memory: 268025280 kiB
[    2.431833] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    2.431847] scsi host0: ahci
[    2.431957] [TTM] Initializing pool allocator
[    2.432053] scsi host1: ahci
[    2.432624] scsi host2: ahci
[    2.432880] scsi host3: ahci
[    2.432996] ata1: SATA max UDMA/133 abar m2048@0x600c203010000 port 0x600c203010100 irq 93
[    2.433059] ata2: SATA max UDMA/133 abar m2048@0x600c203010000 port 0x600c203010180 irq 93
[    2.433124] ata3: SATA max UDMA/133 abar m2048@0x600c203010000 port 0x600c203010200 irq 93
[    2.433223] ata4: SATA max UDMA/133 abar m2048@0x600c203010000 port 0x600c203010280 irq 93
[    2.434863] fb: switching to astdrmfb from OFfb vga
[    2.434918] Console: switching to colour dummy device 80x25
[    2.452403] Console: switching to colour frame buffer device 128x48
[    2.453374] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    2.453832] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:2a:09
[    2.453834] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.453836] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    2.453837] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.469055] nouveau 0004:04:00.0: enabling device (0140 -&gt; 0142)
[    2.469109] nouveau 0004:04:00.0: unknown chipset (140000a1)
[    2.469407] nouveau: probe of 0004:04:00.0 failed with error -12
[    2.469429] nouveau 0004:05:00.0: enabling device (0140 -&gt; 0142)
[    2.469447] nouveau 0004:05:00.0: unknown chipset (140000a1)
[    2.469479] nouveau: probe of 0004:05:00.0 failed with error -12
[    2.469515] nouveau 0004:06:00.0: enabling device (0140 -&gt; 0142)
[    2.469530] nouveau 0004:06:00.0: unknown chipset (140000a1)
[    2.469553] nouveau: probe of 0004:06:00.0 failed with error -12
[    2.469584] nouveau 0035:03:00.0: enabling device (0140 -&gt; 0142)
[    2.469608] nouveau 0035:03:00.0: unknown chipset (140000a1)
[    2.469611] nouveau: probe of 0035:03:00.0 failed with error -12
[    2.469632] nouveau 0035:04:00.0: enabling device (0140 -&gt; 0142)
[    2.469645] nouveau 0035:04:00.0: unknown chipset (140000a1)
[    2.469653] nouveau: probe of 0035:04:00.0 failed with error -12
[    2.469664] nouveau 0035:05:00.0: enabling device (0140 -&gt; 0142)
[    2.469677] nouveau 0035:05:00.0: unknown chipset (140000a1)
[    2.469680] nouveau: probe of 0035:05:00.0 failed with error -12
[    2.471778] ast 0002:02:00.0: fb0: astdrmfb frame buffer device
[[32m  OK  [0m] Started udev Coldplug all Devices.
[[32m  OK  [0m] Reached target System Initialization.
         Starting Show Plymouth Boot Screen...
         Starting dracut initqueue hook...
[[32m  OK  [0m] Started Show Plymouth Boot Screen.
[[32m  OK  [0m] Reached target Paths.
[[32m  OK  [0m] Reached target Basic System.
[    2.495131] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    2.495488] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:2a:0a
[    2.495610] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.495672] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    2.495751] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
%G%G[    2.568541] [drm] Initialized ast 0.1.0 20120228 for 0002:02:00.0 on minor 0
[    2.585673] tg3 0034:01:00.0: Using 64-bit DMA iommu bypass
[    2.586683] tg3 0034:01:00.0 eth2: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b0
[    2.586756] tg3 0034:01:00.0 eth2: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.586825] tg3 0034:01:00.0 eth2: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    2.586876] tg3 0034:01:00.0 eth2: dma_rwctrl[00000000] dma_mask[64-bit]
%G[    2.707614] tg3 0034:01:00.1: Using 64-bit DMA iommu bypass
[    2.708098] tg3 0034:01:00.1 eth3: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b1
[    2.708245] tg3 0034:01:00.1 eth3: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.708422] tg3 0034:01:00.1 eth3: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    2.708548] tg3 0034:01:00.1 eth3: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.759363] ata3: SATA link down (SStatus 0 SControl 300)
[    2.763624] ata4: SATA link down (SStatus 0 SControl 300)
[    2.817603] tg3 0034:01:00.2: Using 64-bit DMA iommu bypass
[    2.818452] tg3 0034:01:00.2 eth4: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b2
[    2.818593] tg3 0034:01:00.2 eth4: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.818768] tg3 0034:01:00.2 eth4: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    2.818899] tg3 0034:01:00.2 eth4: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.928093] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    2.928581] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    2.930198] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    2.930276] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    2.930379] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    2.930493] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    2.931772] ata1.00: configured for UDMA/133
[    2.931923] ata2.00: configured for UDMA/133
[    2.933130] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    2.937589] tg3 0034:01:00.3: Using 64-bit DMA iommu bypass
[    2.938480] tg3 0034:01:00.3 eth5: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:06:9e:b3
[    2.938548] tg3 0034:01:00.3 eth5: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    2.938613] tg3 0034:01:00.3 eth5: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    2.938662] tg3 0034:01:00.3 eth5: dma_rwctrl[00000000] dma_mask[64-bit]
[    2.942589] tg3 0034:01:00.3 enP52p1s0f3: renamed from eth5
[    3.009817] mlx5_core 0003:01:00.0: Port module event: module 0, Cable plugged
[    3.046701] mlx5_core 0003:01:00.1: Using 64-bit DMA iommu bypass
[    3.047085] mlx5_core 0003:01:00.1: firmware version: 16.21.62
[    3.058856] tg3 0034:01:00.2 enP52p1s0f2: renamed from eth4
[    3.090043] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    3.149294] tg3 0005:01:00.0 enP5p1s0f0: renamed from eth0
[    3.261215] sd 0:0:0:0: [sda] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    3.261217] sd 1:0:0:0: [sdb] 1953525168 512-byte logical blocks: (1.00 TB/932 GiB)
[    3.261220] sd 1:0:0:0: [sdb] 4096-byte physical blocks
[    3.261242] sd 1:0:0:0: [sdb] Write Protect is off
[    3.261288] sd 1:0:0:0: [sdb] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    3.261699] sd 0:0:0:0: [sda] 4096-byte physical blocks
[    3.261807] sd 0:0:0:0: [sda] Write Protect is off
[    3.261937] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn't support DPO or FUA
[    3.279225] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[    3.282278]  sda: sda1 sda2 sda3
[    3.282884] sd 0:0:0:0: [sda] Attached SCSI removable disk
[    3.289500] sd 1:0:0:0: [sdb] Attached SCSI removable disk
[    3.338777] tg3 0034:01:00.1 enP52p1s0f1: renamed from eth3
[    3.468823] tg3 0034:01:00.0 enP52p1s0f0: renamed from eth2
[    3.672620] mlx5_core 0003:01:00.1: Port module event: module 1, Cable plugged
[    3.861367] mlx5_core 0033:01:00.0: Using 64-bit DMA iommu bypass
[    3.862536] mlx5_core 0033:01:00.0: firmware version: 16.21.62
[    4.480939] mlx5_core 0033:01:00.0: Port module event: module 0, Cable plugged
[    4.612877] mlx5_core 0033:01:00.1: Using 64-bit DMA iommu bypass
[    4.614315] mlx5_core 0033:01:00.1: firmware version: 16.21.62
[    5.233698] mlx5_core 0033:01:00.1: Port module event: module 1, Cable plugged
[[32m  OK  [0m] Found device /dev/mapper/rhel_yc02pvos-root.
         Starting File System Check on /dev/mapper/rhel_yc02pvos-root...
[[32m  OK  [0m] Started File System Check on /dev/mapper/rhel_yc02pvos-root.
[[32m  OK  [0m] Started dracut initqueue hook.
         Mounting /sysroot...
[[32m  OK  [0m] Reached target Remote File Systems (Pre).
[[32m  OK  [0m] Reached target Remote File Systems.
[    5.831910] SGI XFS with ACLs, security attributes, no debug enabled
[    5.840524] XFS (dm-0): Mounting V5 Filesystem
[    5.982867] XFS (dm-0): Ending clean mount
[[32m  OK  [0m] Mounted /sysroot.
[[32m  OK  [0m] Reached target Initrd Root File System.
         Starting Reload Configuration from the Real Root...
[[32m  OK  [0m] Started Reload Configuration from the Real Root.
[[32m  OK  [0m] Reached target Initrd File Systems.
[[32m  OK  [0m] Reached target Initrd Default Target.
         Starting dracut pre-pivot and cleanup hook...
</msg>
<status starttime="20171026 13:38:57.870" endtime="20171026 13:38:57.871" status="PASS"></status>
</kw>
<status starttime="20171026 13:38:57.733" endtime="20171026 13:38:57.872" status="PASS"></status>
</kw>
<doc>Parse the journal log and check for failures.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Check_For_Application_Failures</tag>
</tags>
<status starttime="20171026 13:38:51.699" endtime="20171026 13:38:57.872" status="PASS" critical="yes"></status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20171026 13:22:43.121" endtime="20171026 13:38:57.873" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20171026 13:22:31.099" endtime="20171026 13:38:57.878" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="2" fail="1">Critical Tests</stat>
<stat pass="2" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="1">chassisboot</stat>
<stat pass="1" fail="0">Check_For_Application_Failures</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="2" id="s1" name="Tests" fail="1">Tests</stat>
<stat pass="1" id="s1-s1" name="Security" fail="0">Tests.Security</stat>
<stat pass="1" id="s1-s1-s1" name="Test Ssl" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="1" id="s1-s2" name="Test Basic Poweron" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
<msg level="WARN" timestamp="20171026 13:22:59.093">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="WARN" timestamp="20171026 13:32:26.630">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa6e5f250&gt;, 'Connection to 9.5.180.47 timed out. (connect timeout=10.0)')': /login</msg>
<msg level="WARN" timestamp="20171026 13:32:36.841">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa7156fd0&gt;, 'Connection to 9.5.180.47 timed out. (connect timeout=10.0)')': /login</msg>
<msg level="WARN" timestamp="20171026 13:32:47.253">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa6f92c10&gt;, 'Connection to 9.5.180.47 timed out. (connect timeout=10.0)')': /login</msg>
<msg level="WARN" timestamp="20171026 13:38:22.858">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.5.180.47', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/sensors/enumerate</msg>
</errors>
</robot>
