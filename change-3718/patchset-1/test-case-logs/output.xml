<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170417 18:15:20.751">
<suite name="Tests" id="s1" source="/tmp/root/22219/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:15:21.260">Dictionary does not contain key 'host'.</msg>
<status starttime="20170417 18:15:21.260" status="FAIL" endtime="20170417 18:15:21.260"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:21.260">${has_host} = False</msg>
<status starttime="20170417 18:15:21.259" status="PASS" endtime="20170417 18:15:21.260"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170417 18:15:21.261" status="PASS" endtime="20170417 18:15:21.261"></status>
</kw>
<status starttime="20170417 18:15:21.261" status="PASS" endtime="20170417 18:15:21.261"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:21.263">${port_num} = 22</msg>
<status starttime="20170417 18:15:21.262" status="PASS" endtime="20170417 18:15:21.263"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:21.263">${SSH_PORT} = 22</msg>
<status starttime="20170417 18:15:21.263" status="PASS" endtime="20170417 18:15:21.263"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:21.264">${https_num} = 443</msg>
<status starttime="20170417 18:15:21.264" status="PASS" endtime="20170417 18:15:21.264"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:21.265">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170417 18:15:21.264" status="PASS" endtime="20170417 18:15:21.265"></status>
</kw>
<status starttime="20170417 18:15:21.262" status="PASS" endtime="20170417 18:15:21.265"></status>
</kw>
<status starttime="20170417 18:15:21.262" status="PASS" endtime="20170417 18:15:21.265"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:15:21.266">Dictionary does not contain key 'port'.</msg>
<status starttime="20170417 18:15:21.265" status="FAIL" endtime="20170417 18:15:21.266"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:21.266">${has_port} = False</msg>
<status starttime="20170417 18:15:21.265" status="PASS" endtime="20170417 18:15:21.266"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170417 18:15:21.267" status="PASS" endtime="20170417 18:15:21.267"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170417 18:15:21.268" status="PASS" endtime="20170417 18:15:21.268"></status>
</kw>
<status starttime="20170417 18:15:21.267" status="PASS" endtime="20170417 18:15:21.268"></status>
</kw>
<status starttime="20170417 18:15:21.266" status="PASS" endtime="20170417 18:15:21.268"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:21.269">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170417 18:15:23.146">Read output: root@witherspoon:~#</msg>
<status starttime="20170417 18:15:21.268" status="PASS" endtime="20170417 18:15:23.146"></status>
</kw>
<status starttime="20170417 18:15:21.259" status="PASS" endtime="20170417 18:15:23.146"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:23.148">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170417 18:15:23.214">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:15:23.215">${output} = VERSION_ID="v1.99.4-25-g12a2fed"</msg>
<msg level="INFO" timestamp="20170417 18:15:23.215">${stderr} = </msg>
<status starttime="20170417 18:15:23.148" status="PASS" endtime="20170417 18:15:23.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:23.215">Length is 0</msg>
<status starttime="20170417 18:15:23.215" status="PASS" endtime="20170417 18:15:23.215"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:23.216">VERSION_ID="v1.99.4-25-g12a2fed"</msg>
<status starttime="20170417 18:15:23.215" status="PASS" endtime="20170417 18:15:23.216"></status>
</kw>
<status starttime="20170417 18:15:23.147" status="PASS" endtime="20170417 18:15:23.216"></status>
</kw>
<status starttime="20170417 18:15:23.147" status="PASS" endtime="20170417 18:15:23.216"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:23.217">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170417 18:15:23.352">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:15:23.352">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg level="INFO" timestamp="20170417 18:15:23.352">${stderr} = </msg>
<status starttime="20170417 18:15:23.217" status="PASS" endtime="20170417 18:15:23.353"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:23.353">Length is 0</msg>
<status starttime="20170417 18:15:23.353" status="PASS" endtime="20170417 18:15:23.353"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:23.353">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status starttime="20170417 18:15:23.217" status="PASS" endtime="20170417 18:15:23.353"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:23.354">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status starttime="20170417 18:15:23.353" status="PASS" endtime="20170417 18:15:23.355"></status>
</kw>
<status starttime="20170417 18:15:23.216" status="PASS" endtime="20170417 18:15:23.355"></status>
</kw>
<status starttime="20170417 18:15:23.216" status="PASS" endtime="20170417 18:15:23.355"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:23.356">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170417 18:15:23.451">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:15:23.451">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170417 18:15:23.451">${stderr} = </msg>
<status starttime="20170417 18:15:23.356" status="PASS" endtime="20170417 18:15:23.451"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:23.452">Length is 0</msg>
<status starttime="20170417 18:15:23.451" status="PASS" endtime="20170417 18:15:23.452"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:23.452">Length is 11</msg>
<status starttime="20170417 18:15:23.452" status="PASS" endtime="20170417 18:15:23.452"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:23.452">${bmc_model} = Witherspoon</msg>
<status starttime="20170417 18:15:23.356" status="PASS" endtime="20170417 18:15:23.452"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:23.453">BMC Model=Witherspoon</msg>
<status starttime="20170417 18:15:23.453" status="PASS" endtime="20170417 18:15:23.453"></status>
</kw>
<status starttime="20170417 18:15:23.355" status="PASS" endtime="20170417 18:15:23.453"></status>
</kw>
<status starttime="20170417 18:15:23.355" status="PASS" endtime="20170417 18:15:23.453"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:15:23.455">Dictionary does not contain key 'host'.</msg>
<status starttime="20170417 18:15:23.455" status="FAIL" endtime="20170417 18:15:23.455"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:23.455">${has_host} = False</msg>
<status starttime="20170417 18:15:23.455" status="PASS" endtime="20170417 18:15:23.455"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170417 18:15:23.456" status="PASS" endtime="20170417 18:15:23.456"></status>
</kw>
<status starttime="20170417 18:15:23.456" status="PASS" endtime="20170417 18:15:23.457"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:23.458">${port_num} = 22</msg>
<status starttime="20170417 18:15:23.458" status="PASS" endtime="20170417 18:15:23.458"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:23.458">${SSH_PORT} = 22</msg>
<status starttime="20170417 18:15:23.458" status="PASS" endtime="20170417 18:15:23.458"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:23.459">${https_num} = 443</msg>
<status starttime="20170417 18:15:23.459" status="PASS" endtime="20170417 18:15:23.459"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:23.460">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170417 18:15:23.459" status="PASS" endtime="20170417 18:15:23.460"></status>
</kw>
<status starttime="20170417 18:15:23.457" status="PASS" endtime="20170417 18:15:23.460"></status>
</kw>
<status starttime="20170417 18:15:23.457" status="PASS" endtime="20170417 18:15:23.460"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:15:23.461">Dictionary does not contain key 'port'.</msg>
<status starttime="20170417 18:15:23.460" status="FAIL" endtime="20170417 18:15:23.461"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:23.461">${has_port} = False</msg>
<status starttime="20170417 18:15:23.460" status="PASS" endtime="20170417 18:15:23.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170417 18:15:23.462" status="PASS" endtime="20170417 18:15:23.462"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170417 18:15:23.463" status="PASS" endtime="20170417 18:15:23.463"></status>
</kw>
<status starttime="20170417 18:15:23.462" status="PASS" endtime="20170417 18:15:23.463"></status>
</kw>
<status starttime="20170417 18:15:23.461" status="PASS" endtime="20170417 18:15:23.463"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:23.464">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170417 18:15:25.107">Read output: root@witherspoon:~#</msg>
<status starttime="20170417 18:15:23.463" status="PASS" endtime="20170417 18:15:25.107"></status>
</kw>
<status starttime="20170417 18:15:23.454" status="PASS" endtime="20170417 18:15:25.107"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.108">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170417 18:15:25.185">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:15:25.185">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170417 18:15:25.185">${stderr} = </msg>
<status starttime="20170417 18:15:25.108" status="PASS" endtime="20170417 18:15:25.185"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:25.186">Length is 0</msg>
<status starttime="20170417 18:15:25.185" status="PASS" endtime="20170417 18:15:25.186"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.186">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170417 18:15:25.107" status="PASS" endtime="20170417 18:15:25.186"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170417 18:15:25.186" status="PASS" endtime="20170417 18:15:25.186"></status>
</kw>
<status starttime="20170417 18:15:23.454" status="PASS" endtime="20170417 18:15:25.186"></status>
</kw>
<status starttime="20170417 18:15:23.453" status="PASS" endtime="20170417 18:15:25.187"></status>
</kw>
<status starttime="20170417 18:15:21.258" status="PASS" endtime="20170417 18:15:25.187"></status>
</kw>
<suite name="Security" id="s1-s1" source="/tmp/root/22219/obmc-robot/tests/security">
<suite name="Test Ssl" id="s1-s1-s1" source="/tmp/root/22219/obmc-robot/tests/security/test_ssl.robot">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:25.261">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:15:25.261" status="PASS" endtime="20170417 18:15:25.261"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.262">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:15:25.261" status="PASS" endtime="20170417 18:15:25.262"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.263">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:15:25.262" status="PASS" endtime="20170417 18:15:25.263"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.263">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:15:25.263" status="PASS" endtime="20170417 18:15:25.263"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:25.466">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:15:25.264" status="PASS" endtime="20170417 18:15:25.467"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.467">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:15:25.467">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:25.264" status="PASS" endtime="20170417 18:15:25.467"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:25.467">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:25.467" status="PASS" endtime="20170417 18:15:25.468"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:25.468">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:25.468" status="PASS" endtime="20170417 18:15:25.468"></status>
</kw>
<status starttime="20170417 18:15:25.260" status="PASS" endtime="20170417 18:15:25.468"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:25.475">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:15:25.473" status="PASS" endtime="20170417 18:15:25.476"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.476">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:15:25.476" status="PASS" endtime="20170417 18:15:25.476"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.477">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:15:25.477" status="PASS" endtime="20170417 18:15:25.477"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.478">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:15:25.477" status="PASS" endtime="20170417 18:15:25.478"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:25.659">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:15:25.478" status="PASS" endtime="20170417 18:15:25.660"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.660">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:15:25.660">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:25.478" status="PASS" endtime="20170417 18:15:25.660"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:25.661">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:25.660" status="PASS" endtime="20170417 18:15:25.661"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:25.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:25.661" status="PASS" endtime="20170417 18:15:25.661"></status>
</kw>
<status starttime="20170417 18:15:25.473" status="PASS" endtime="20170417 18:15:25.661"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.662">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170417 18:15:25.662" status="PASS" endtime="20170417 18:15:25.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.664">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170417 18:15:25.663" status="PASS" endtime="20170417 18:15:25.664"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:25.665">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170417 18:15:25.665" status="PASS" endtime="20170417 18:15:25.665"></status>
</kw>
<status starttime="20170417 18:15:25.664" status="PASS" endtime="20170417 18:15:25.665"></status>
</kw>
<status starttime="20170417 18:15:25.663" status="PASS" endtime="20170417 18:15:25.666"></status>
</kw>
<status starttime="20170417 18:15:25.662" status="PASS" endtime="20170417 18:15:25.666"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.727">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:15:25.727">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:25.666" status="PASS" endtime="20170417 18:15:25.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.729">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:25.729" status="PASS" endtime="20170417 18:15:25.729"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:25.730">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:25.730" status="PASS" endtime="20170417 18:15:25.730"></status>
</kw>
<status starttime="20170417 18:15:25.729" status="PASS" endtime="20170417 18:15:25.730"></status>
</kw>
<status starttime="20170417 18:15:25.728" status="PASS" endtime="20170417 18:15:25.730"></status>
</kw>
<status starttime="20170417 18:15:25.728" status="PASS" endtime="20170417 18:15:25.730"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.730">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:25.472" status="PASS" endtime="20170417 18:15:25.731"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:25.731">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:25.731" status="PASS" endtime="20170417 18:15:25.731"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.732">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:15:25.732">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:15:25.732">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status starttime="20170417 18:15:25.731" status="PASS" endtime="20170417 18:15:25.732"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.732">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170417 18:15:25.470" status="PASS" endtime="20170417 18:15:25.732"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.733">${host_state} = Off</msg>
<status starttime="20170417 18:15:25.469" status="PASS" endtime="20170417 18:15:25.733"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:15:25.734">Off != Quiesced</msg>
<status starttime="20170417 18:15:25.733" status="FAIL" endtime="20170417 18:15:25.734"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.734">${status} = False</msg>
<status starttime="20170417 18:15:25.733" status="PASS" endtime="20170417 18:15:25.734"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.734">${status} = False</msg>
<status starttime="20170417 18:15:25.469" status="PASS" endtime="20170417 18:15:25.734"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170417 18:15:25.734" status="PASS" endtime="20170417 18:15:25.735"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170417 18:15:25.735" status="PASS" endtime="20170417 18:15:25.735"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:15:25.736">Created directory '&lt;a href="file:///tmp/root/22219/obmc-robot/logs"&gt;/tmp/root/22219/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170417 18:15:25.736" status="PASS" endtime="20170417 18:15:25.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:15:25.737">File '/tmp/root/22219/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170417 18:15:25.737" status="FAIL" endtime="20170417 18:15:25.737"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.737">${exist} = False</msg>
<status starttime="20170417 18:15:25.736" status="PASS" endtime="20170417 18:15:25.737"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:15:25.738">Created file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/test_history.txt"&gt;/tmp/root/22219/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:15:25.738" status="PASS" endtime="20170417 18:15:25.739"></status>
</kw>
<status starttime="20170417 18:15:25.738" status="PASS" endtime="20170417 18:15:25.739"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.740">${cur_time} = 2017-04-17 18:15:25:739430</msg>
<status starttime="20170417 18:15:25.739" status="PASS" endtime="20170417 18:15:25.740"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.740">${cur_time} = 20170417181525739430</msg>
<status starttime="20170417 18:15:25.740" status="PASS" endtime="20170417 18:15:25.740"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.740">${cur_time} = 20170417181525739430</msg>
<status starttime="20170417 18:15:25.739" status="PASS" endtime="20170417 18:15:25.740"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:15:25.741">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/test_history.txt"&gt;/tmp/root/22219/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:15:25.741" status="PASS" endtime="20170417 18:15:25.741"></status>
</kw>
<status starttime="20170417 18:15:25.735" status="PASS" endtime="20170417 18:15:25.741"></status>
</kw>
<status starttime="20170417 18:15:25.469" status="PASS" endtime="20170417 18:15:25.742"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170417 18:15:25.259" critical="yes" status="PASS" endtime="20170417 18:15:25.742"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170417 18:15:25.742">Delete All Sessions</msg>
<status starttime="20170417 18:15:25.742" status="PASS" endtime="20170417 18:15:25.742"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170417 18:15:25.189" status="PASS" endtime="20170417 18:15:25.743"></status>
</suite>
<status starttime="20170417 18:15:25.187" status="PASS" endtime="20170417 18:15:25.744"></status>
</suite>
<suite name="Test Basic Poweron" id="s1-s2" source="/tmp/root/22219/obmc-robot/tests/test_basic_poweron.robot">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.776">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170417 18:15:25.776" status="PASS" endtime="20170417 18:15:25.776"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.777">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170417 18:15:25.777" status="PASS" endtime="20170417 18:15:25.777"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.777">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170417 18:15:25.776" status="PASS" endtime="20170417 18:15:25.777"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.779">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170417 18:15:25.779" status="PASS" endtime="20170417 18:15:25.779"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.780">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170417 18:15:25.779" status="PASS" endtime="20170417 18:15:25.780"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.780">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170417 18:15:25.778" status="PASS" endtime="20170417 18:15:25.780"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.781">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170417 18:15:25.781" status="PASS" endtime="20170417 18:15:25.782"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170417 18:15:25.782" status="PASS" endtime="20170417 18:15:25.792"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.796">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170417 18:15:25.799">${rc} = 0</msg>
<msg level="INFO" timestamp="20170417 18:15:25.799">${output} = /tmp/root/22219/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170417 18:15:25.793" status="PASS" endtime="20170417 18:15:25.799"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170417 18:15:25.801" status="PASS" endtime="20170417 18:15:25.810"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170417 18:15:25.810" status="PASS" endtime="20170417 18:15:25.810"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.811">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170417 18:15:25.811" status="PASS" endtime="20170417 18:15:25.811"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.811">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170417 18:15:25.781" status="PASS" endtime="20170417 18:15:25.811"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.812">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170417 18:15:25.812" status="PASS" endtime="20170417 18:15:25.812"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170417 18:15:25.812" status="PASS" endtime="20170417 18:15:25.819"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.822">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170417 18:15:25.829">${rc} = 0</msg>
<msg level="INFO" timestamp="20170417 18:15:25.829">${os_con_pid} = </msg>
<status starttime="20170417 18:15:25.819" status="PASS" endtime="20170417 18:15:25.830"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170417 18:15:25.831" status="PASS" endtime="20170417 18:15:25.839"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.840">${cmd_buf} = kill -9 </msg>
<status starttime="20170417 18:15:25.840" status="PASS" endtime="20170417 18:15:25.840"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170417 18:15:25.840" status="PASS" endtime="20170417 18:15:25.841"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.841">${rc} = None</msg>
<msg level="INFO" timestamp="20170417 18:15:25.842">${output} = None</msg>
<status starttime="20170417 18:15:25.841" status="PASS" endtime="20170417 18:15:25.842"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170417 18:15:25.842" status="PASS" endtime="20170417 18:15:25.842"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.843">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status starttime="20170417 18:15:25.843" status="PASS" endtime="20170417 18:15:25.843"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170417 18:15:25.843" status="PASS" endtime="20170417 18:15:25.850"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.854">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170417 18:15:25.858">${rc} = 1</msg>
<msg level="INFO" timestamp="20170417 18:15:25.858">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status starttime="20170417 18:15:25.850" status="PASS" endtime="20170417 18:15:25.858"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170417 18:15:25.860" status="PASS" endtime="20170417 18:15:25.868"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170417 18:15:25.868" status="PASS" endtime="20170417 18:15:25.869"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.869">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status starttime="20170417 18:15:25.777" status="PASS" endtime="20170417 18:15:25.869"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:15:25.870">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170417 18:15:25.870" status="PASS" endtime="20170417 18:15:25.870"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.871">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170417 18:15:25.871" status="PASS" endtime="20170417 18:15:25.871"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170417 18:15:25.872" status="PASS" endtime="20170417 18:15:25.878"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.882">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170417 18:15:25.885">${rc} = 0</msg>
<msg level="INFO" timestamp="20170417 18:15:25.885">${output} = /tmp/root/22219/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170417 18:15:25.878" status="PASS" endtime="20170417 18:15:25.885"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170417 18:15:25.887" status="PASS" endtime="20170417 18:15:25.897"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170417 18:15:25.897" status="PASS" endtime="20170417 18:15:25.898"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.899">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170417 18:15:25.898" status="PASS" endtime="20170417 18:15:25.899"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:25.899">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170417 18:15:25.871" status="PASS" endtime="20170417 18:15:25.899"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.900">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170417 18:15:25.900" status="PASS" endtime="20170417 18:15:25.900"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170417 18:15:25.900" status="PASS" endtime="20170417 18:15:25.911"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.915">Running command 'ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170417 18:15:25.918">${rc} = 0</msg>
<msg level="INFO" timestamp="20170417 18:15:25.918">${output} = </msg>
<status starttime="20170417 18:15:25.912" status="PASS" endtime="20170417 18:15:25.918"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170417 18:15:25.920" status="PASS" endtime="20170417 18:15:25.922"></status>
</kw>
<status starttime="20170417 18:15:25.775" status="PASS" endtime="20170417 18:15:25.922"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:25.923">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.925">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170417 18:15:25.925" status="PASS" endtime="20170417 18:15:25.925"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.926">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170417 18:15:25.926" status="PASS" endtime="20170417 18:15:25.926"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:25.928">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:15:25.928" status="PASS" endtime="20170417 18:15:25.929"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.930">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:15:25.930" status="PASS" endtime="20170417 18:15:25.930"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.931">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:15:25.930" status="PASS" endtime="20170417 18:15:25.931"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:25.932">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:15:25.931" status="PASS" endtime="20170417 18:15:25.932"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:26.400">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:15:25.933" status="PASS" endtime="20170417 18:15:26.400"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:26.400">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:15:26.400">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:25.932" status="PASS" endtime="20170417 18:15:26.400"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:26.401">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:26.401" status="PASS" endtime="20170417 18:15:26.401"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:26.402">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:26.401" status="PASS" endtime="20170417 18:15:26.402"></status>
</kw>
<status starttime="20170417 18:15:25.927" status="PASS" endtime="20170417 18:15:26.402"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:26.402">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170417 18:15:26.402" status="PASS" endtime="20170417 18:15:26.402"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:26.403">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:15:26.403" status="PASS" endtime="20170417 18:15:26.403"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170417 18:15:26.403" status="PASS" endtime="20170417 18:15:26.404"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:26.405">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170417 18:15:26.404" status="PASS" endtime="20170417 18:15:26.405"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:26.406">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170417 18:15:26.406" status="PASS" endtime="20170417 18:15:26.406"></status>
</kw>
<status starttime="20170417 18:15:26.405" status="PASS" endtime="20170417 18:15:26.406"></status>
</kw>
<status starttime="20170417 18:15:26.404" status="PASS" endtime="20170417 18:15:26.406"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:26.756">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170417 18:15:26.756">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:26.406" status="PASS" endtime="20170417 18:15:26.757"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:26.758">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:26.757" status="PASS" endtime="20170417 18:15:26.758"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:26.759">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:26.758" status="PASS" endtime="20170417 18:15:26.759"></status>
</kw>
<status starttime="20170417 18:15:26.758" status="PASS" endtime="20170417 18:15:26.759"></status>
</kw>
<status starttime="20170417 18:15:26.757" status="PASS" endtime="20170417 18:15:26.759"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:26.759">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:25.927" status="PASS" endtime="20170417 18:15:26.759"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:26.760">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:26.760" status="PASS" endtime="20170417 18:15:26.760"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:26.760">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:15:26.760">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:15:26.761">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status starttime="20170417 18:15:26.760" status="PASS" endtime="20170417 18:15:26.761"></status>
</kw>
<status starttime="20170417 18:15:25.925" status="PASS" endtime="20170417 18:15:26.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170417 18:15:26.761" status="PASS" endtime="20170417 18:15:26.761"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:26.765">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:15:26.765" status="PASS" endtime="20170417 18:15:26.765"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:26.766">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:15:26.765" status="PASS" endtime="20170417 18:15:26.766"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:26.766">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:15:26.766" status="PASS" endtime="20170417 18:15:26.766"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:26.767">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:15:26.767" status="PASS" endtime="20170417 18:15:26.767"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:27.487">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:15:26.768" status="PASS" endtime="20170417 18:15:27.487"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:27.487">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:15:27.487">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:26.767" status="PASS" endtime="20170417 18:15:27.487"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:27.488">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:27.487" status="PASS" endtime="20170417 18:15:27.488"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:27.488">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:27.488" status="PASS" endtime="20170417 18:15:27.488"></status>
</kw>
<status starttime="20170417 18:15:26.764" status="PASS" endtime="20170417 18:15:27.489"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:27.489">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170417 18:15:27.489" status="PASS" endtime="20170417 18:15:27.489"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:27.491">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170417 18:15:27.490" status="PASS" endtime="20170417 18:15:27.491"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:27.492">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170417 18:15:27.492" status="PASS" endtime="20170417 18:15:27.492"></status>
</kw>
<status starttime="20170417 18:15:27.491" status="PASS" endtime="20170417 18:15:27.492"></status>
</kw>
<status starttime="20170417 18:15:27.490" status="PASS" endtime="20170417 18:15:27.493"></status>
</kw>
<status starttime="20170417 18:15:27.489" status="PASS" endtime="20170417 18:15:27.493"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:28.000">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:15:28.000">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:27.493" status="PASS" endtime="20170417 18:15:28.001"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:28.003">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:28.002" status="PASS" endtime="20170417 18:15:28.003"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:28.004">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:28.003" status="PASS" endtime="20170417 18:15:28.004"></status>
</kw>
<status starttime="20170417 18:15:28.003" status="PASS" endtime="20170417 18:15:28.004"></status>
</kw>
<status starttime="20170417 18:15:28.001" status="PASS" endtime="20170417 18:15:28.004"></status>
</kw>
<status starttime="20170417 18:15:28.001" status="PASS" endtime="20170417 18:15:28.004"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:28.004">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:26.763" status="PASS" endtime="20170417 18:15:28.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:28.005">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:28.004" status="PASS" endtime="20170417 18:15:28.005"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:28.005">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:15:28.005">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:15:28.006">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status starttime="20170417 18:15:28.005" status="PASS" endtime="20170417 18:15:28.006"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:28.006">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170417 18:15:26.763" status="PASS" endtime="20170417 18:15:28.006"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:28.006">${host_state} = Off</msg>
<status starttime="20170417 18:15:26.762" status="PASS" endtime="20170417 18:15:28.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170417 18:15:28.006" status="PASS" endtime="20170417 18:15:28.007"></status>
</kw>
<status starttime="20170417 18:15:26.762" status="PASS" endtime="20170417 18:15:28.007"></status>
</kw>
<status starttime="20170417 18:15:26.762" status="PASS" endtime="20170417 18:15:28.007"></status>
</kw>
<status starttime="20170417 18:15:25.924" status="PASS" endtime="20170417 18:15:28.007"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw library="utils" name="Is OS Off">
<doc>Check if boot progress is "Off".</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:28.010">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:15:28.010" status="PASS" endtime="20170417 18:15:28.011"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:28.011">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:15:28.011" status="PASS" endtime="20170417 18:15:28.011"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:28.012">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:15:28.012" status="PASS" endtime="20170417 18:15:28.012"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:28.013">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:15:28.012" status="PASS" endtime="20170417 18:15:28.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:28.859">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:15:28.013" status="PASS" endtime="20170417 18:15:28.860"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:28.860">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:15:28.860">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:28.013" status="PASS" endtime="20170417 18:15:28.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:28.860">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:28.860" status="PASS" endtime="20170417 18:15:28.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:28.861">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:28.861" status="PASS" endtime="20170417 18:15:28.861"></status>
</kw>
<status starttime="20170417 18:15:28.010" status="PASS" endtime="20170417 18:15:28.861"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:28.862">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:15:28.861" status="PASS" endtime="20170417 18:15:28.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:28.864">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:15:28.863" status="PASS" endtime="20170417 18:15:28.864"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:28.865">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:15:28.865" status="PASS" endtime="20170417 18:15:28.865"></status>
</kw>
<status starttime="20170417 18:15:28.864" status="PASS" endtime="20170417 18:15:28.865"></status>
</kw>
<status starttime="20170417 18:15:28.863" status="PASS" endtime="20170417 18:15:28.865"></status>
</kw>
<status starttime="20170417 18:15:28.862" status="PASS" endtime="20170417 18:15:28.865"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:29.366">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:15:29.366">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:28.866" status="PASS" endtime="20170417 18:15:29.366"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:29.368">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:29.367" status="PASS" endtime="20170417 18:15:29.368"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:29.368">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:29.368" status="PASS" endtime="20170417 18:15:29.369"></status>
</kw>
<status starttime="20170417 18:15:29.368" status="PASS" endtime="20170417 18:15:29.369"></status>
</kw>
<status starttime="20170417 18:15:29.367" status="PASS" endtime="20170417 18:15:29.369"></status>
</kw>
<status starttime="20170417 18:15:29.366" status="PASS" endtime="20170417 18:15:29.369"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:29.369">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:28.009" status="PASS" endtime="20170417 18:15:29.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:29.370">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:29.369" status="PASS" endtime="20170417 18:15:29.370"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:29.370">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:15:29.370">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:15:29.370">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:15:29.370" status="PASS" endtime="20170417 18:15:29.371"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:29.371">${state} = Off</msg>
<status starttime="20170417 18:15:28.008" status="PASS" endtime="20170417 18:15:29.371"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:29.371">${boot_progress} = Off</msg>
<status starttime="20170417 18:15:28.008" status="PASS" endtime="20170417 18:15:29.371"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20170417 18:15:29.371" status="PASS" endtime="20170417 18:15:29.372"></status>
</kw>
<status starttime="20170417 18:15:28.008" status="PASS" endtime="20170417 18:15:29.372"></status>
</kw>
<status starttime="20170417 18:15:28.007" status="PASS" endtime="20170417 18:15:29.372"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:29.373">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170417 18:15:29.372" status="PASS" endtime="20170417 18:15:29.373"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:29.374">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170417 18:15:29.374" status="PASS" endtime="20170417 18:15:29.374"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:29.376">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:15:29.376" status="PASS" endtime="20170417 18:15:29.377"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:29.377">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:15:29.377" status="PASS" endtime="20170417 18:15:29.377"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:29.378">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:15:29.378" status="PASS" endtime="20170417 18:15:29.378"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:29.379">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:15:29.379" status="PASS" endtime="20170417 18:15:29.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:29.919">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:15:29.380" status="PASS" endtime="20170417 18:15:29.919"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:29.919">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:15:29.920">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:29.380" status="PASS" endtime="20170417 18:15:29.920"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:29.920">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:29.920" status="PASS" endtime="20170417 18:15:29.920"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:29.921">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:29.921" status="PASS" endtime="20170417 18:15:29.921"></status>
</kw>
<status starttime="20170417 18:15:29.375" status="PASS" endtime="20170417 18:15:29.922"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:29.923">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170417 18:15:29.922" status="PASS" endtime="20170417 18:15:29.923"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:29.923">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:15:29.923" status="PASS" endtime="20170417 18:15:29.923"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170417 18:15:29.924" status="PASS" endtime="20170417 18:15:29.924"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:29.926">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status starttime="20170417 18:15:29.925" status="PASS" endtime="20170417 18:15:29.926"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:29.927">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170417 18:15:29.926" status="PASS" endtime="20170417 18:15:29.927"></status>
</kw>
<status starttime="20170417 18:15:29.926" status="PASS" endtime="20170417 18:15:29.927"></status>
</kw>
<status starttime="20170417 18:15:29.924" status="PASS" endtime="20170417 18:15:29.927"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:30.509">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170417 18:15:30.510">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:29.927" status="PASS" endtime="20170417 18:15:30.510"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:30.511">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:30.510" status="PASS" endtime="20170417 18:15:30.511"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:30.512">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:30.511" status="PASS" endtime="20170417 18:15:30.512"></status>
</kw>
<status starttime="20170417 18:15:30.511" status="PASS" endtime="20170417 18:15:30.512"></status>
</kw>
<status starttime="20170417 18:15:30.510" status="PASS" endtime="20170417 18:15:30.512"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:30.512">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:29.374" status="PASS" endtime="20170417 18:15:30.512"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:30.513">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:30.513" status="PASS" endtime="20170417 18:15:30.513"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:30.514">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:15:30.514">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:15:30.514">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status starttime="20170417 18:15:30.514" status="PASS" endtime="20170417 18:15:30.514"></status>
</kw>
<status starttime="20170417 18:15:29.373" status="PASS" endtime="20170417 18:15:30.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170417 18:15:30.515" status="PASS" endtime="20170417 18:15:30.515"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:30.519">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:15:30.519" status="PASS" endtime="20170417 18:15:30.519"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:30.520">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:15:30.520" status="PASS" endtime="20170417 18:15:30.520"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:30.521">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:15:30.520" status="PASS" endtime="20170417 18:15:30.521"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:30.521">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:15:30.521" status="PASS" endtime="20170417 18:15:30.521"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:31.449">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:15:30.522" status="PASS" endtime="20170417 18:15:31.449"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:31.449">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:15:31.449">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:30.522" status="PASS" endtime="20170417 18:15:31.449"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:31.450">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:31.449" status="PASS" endtime="20170417 18:15:31.450"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:31.450">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:31.450" status="PASS" endtime="20170417 18:15:31.451"></status>
</kw>
<status starttime="20170417 18:15:30.518" status="PASS" endtime="20170417 18:15:31.451"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:31.451">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170417 18:15:31.451" status="PASS" endtime="20170417 18:15:31.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:31.453">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170417 18:15:31.453" status="PASS" endtime="20170417 18:15:31.453"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:31.454">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170417 18:15:31.454" status="PASS" endtime="20170417 18:15:31.454"></status>
</kw>
<status starttime="20170417 18:15:31.453" status="PASS" endtime="20170417 18:15:31.454"></status>
</kw>
<status starttime="20170417 18:15:31.452" status="PASS" endtime="20170417 18:15:31.454"></status>
</kw>
<status starttime="20170417 18:15:31.451" status="PASS" endtime="20170417 18:15:31.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:32.293">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:15:32.294">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:31.455" status="PASS" endtime="20170417 18:15:32.294"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:32.295">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:32.295" status="PASS" endtime="20170417 18:15:32.296"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:32.297">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:32.297" status="PASS" endtime="20170417 18:15:32.297"></status>
</kw>
<status starttime="20170417 18:15:32.296" status="PASS" endtime="20170417 18:15:32.297"></status>
</kw>
<status starttime="20170417 18:15:32.295" status="PASS" endtime="20170417 18:15:32.297"></status>
</kw>
<status starttime="20170417 18:15:32.294" status="PASS" endtime="20170417 18:15:32.298"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:32.298">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:30.517" status="PASS" endtime="20170417 18:15:32.298"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:32.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:32.298" status="PASS" endtime="20170417 18:15:32.298"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:32.299">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:15:32.299">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:15:32.299">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status starttime="20170417 18:15:32.299" status="PASS" endtime="20170417 18:15:32.299"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:32.300">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170417 18:15:30.517" status="PASS" endtime="20170417 18:15:32.300"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:32.300">${host_state} = Off</msg>
<status starttime="20170417 18:15:30.516" status="PASS" endtime="20170417 18:15:32.300"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:15:32.300">Running != Off</msg>
<status starttime="20170417 18:15:32.300" status="FAIL" endtime="20170417 18:15:32.301"></status>
</kw>
<status starttime="20170417 18:15:30.516" status="FAIL" endtime="20170417 18:15:32.301"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:42.304">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:15:42.304" status="PASS" endtime="20170417 18:15:42.305"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:42.305">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:15:42.305" status="PASS" endtime="20170417 18:15:42.305"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:42.306">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:15:42.306" status="PASS" endtime="20170417 18:15:42.306"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:42.307">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:15:42.306" status="PASS" endtime="20170417 18:15:42.307"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:43.207">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:15:42.307" status="PASS" endtime="20170417 18:15:43.207"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:43.207">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:15:43.207">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:42.307" status="PASS" endtime="20170417 18:15:43.207"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:43.208">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:43.207" status="PASS" endtime="20170417 18:15:43.208"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:43.208">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:43.208" status="PASS" endtime="20170417 18:15:43.209"></status>
</kw>
<status starttime="20170417 18:15:42.303" status="PASS" endtime="20170417 18:15:43.209"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:43.209">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170417 18:15:43.209" status="PASS" endtime="20170417 18:15:43.209"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:43.212">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170417 18:15:43.211" status="PASS" endtime="20170417 18:15:43.212"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:43.213">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170417 18:15:43.212" status="PASS" endtime="20170417 18:15:43.213"></status>
</kw>
<status starttime="20170417 18:15:43.212" status="PASS" endtime="20170417 18:15:43.213"></status>
</kw>
<status starttime="20170417 18:15:43.210" status="PASS" endtime="20170417 18:15:43.213"></status>
</kw>
<status starttime="20170417 18:15:43.209" status="PASS" endtime="20170417 18:15:43.213"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:43.364">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:15:43.364">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:43.213" status="PASS" endtime="20170417 18:15:43.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:43.366">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:43.365" status="PASS" endtime="20170417 18:15:43.366"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:43.366">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:43.366" status="PASS" endtime="20170417 18:15:43.367"></status>
</kw>
<status starttime="20170417 18:15:43.366" status="PASS" endtime="20170417 18:15:43.367"></status>
</kw>
<status starttime="20170417 18:15:43.365" status="PASS" endtime="20170417 18:15:43.367"></status>
</kw>
<status starttime="20170417 18:15:43.364" status="PASS" endtime="20170417 18:15:43.367"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:43.367">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:42.303" status="PASS" endtime="20170417 18:15:43.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:43.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:43.367" status="PASS" endtime="20170417 18:15:43.368"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:43.368">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:15:43.368">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:15:43.368">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status starttime="20170417 18:15:43.368" status="PASS" endtime="20170417 18:15:43.368"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:43.369">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170417 18:15:42.302" status="PASS" endtime="20170417 18:15:43.369"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:43.369">${host_state} = Off</msg>
<status starttime="20170417 18:15:42.302" status="PASS" endtime="20170417 18:15:43.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:15:43.370">Running != Off</msg>
<status starttime="20170417 18:15:43.369" status="FAIL" endtime="20170417 18:15:43.370"></status>
</kw>
<status starttime="20170417 18:15:42.301" status="FAIL" endtime="20170417 18:15:43.370"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:53.374">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:15:53.373" status="PASS" endtime="20170417 18:15:53.374"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:53.375">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:15:53.374" status="PASS" endtime="20170417 18:15:53.375"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:53.375">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:15:53.375" status="PASS" endtime="20170417 18:15:53.375"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:53.376">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:15:53.375" status="PASS" endtime="20170417 18:15:53.376"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:53.612">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:15:53.377" status="PASS" endtime="20170417 18:15:53.612"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:53.612">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:15:53.612">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:53.376" status="PASS" endtime="20170417 18:15:53.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:53.613">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:53.612" status="PASS" endtime="20170417 18:15:53.613"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:53.613">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:53.613" status="PASS" endtime="20170417 18:15:53.614"></status>
</kw>
<status starttime="20170417 18:15:53.373" status="PASS" endtime="20170417 18:15:53.614"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:53.614">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170417 18:15:53.614" status="PASS" endtime="20170417 18:15:53.614"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:53.616">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170417 18:15:53.616" status="PASS" endtime="20170417 18:15:53.616"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:53.617">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170417 18:15:53.617" status="PASS" endtime="20170417 18:15:53.617"></status>
</kw>
<status starttime="20170417 18:15:53.616" status="PASS" endtime="20170417 18:15:53.617"></status>
</kw>
<status starttime="20170417 18:15:53.615" status="PASS" endtime="20170417 18:15:53.617"></status>
</kw>
<status starttime="20170417 18:15:53.614" status="PASS" endtime="20170417 18:15:53.617"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:53.679">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:15:53.680">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:53.618" status="PASS" endtime="20170417 18:15:53.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:53.681">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:53.681" status="PASS" endtime="20170417 18:15:53.681"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:53.682">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:53.682" status="PASS" endtime="20170417 18:15:53.682"></status>
</kw>
<status starttime="20170417 18:15:53.681" status="PASS" endtime="20170417 18:15:53.682"></status>
</kw>
<status starttime="20170417 18:15:53.680" status="PASS" endtime="20170417 18:15:53.683"></status>
</kw>
<status starttime="20170417 18:15:53.680" status="PASS" endtime="20170417 18:15:53.683"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:53.683">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:53.372" status="PASS" endtime="20170417 18:15:53.683"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:53.684">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:53.683" status="PASS" endtime="20170417 18:15:53.684"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:53.684">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:15:53.684">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:15:53.684">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170417 18:15:53.684" status="PASS" endtime="20170417 18:15:53.684"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:53.685">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170417 18:15:53.371" status="PASS" endtime="20170417 18:15:53.685"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:53.685">${host_state} = Running</msg>
<status starttime="20170417 18:15:53.371" status="PASS" endtime="20170417 18:15:53.685"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170417 18:15:53.685" status="PASS" endtime="20170417 18:15:53.685"></status>
</kw>
<status starttime="20170417 18:15:53.370" status="PASS" endtime="20170417 18:15:53.686"></status>
</kw>
<status starttime="20170417 18:15:30.516" status="PASS" endtime="20170417 18:15:53.686"></status>
</kw>
<status starttime="20170417 18:15:29.372" status="PASS" endtime="20170417 18:15:53.686"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:53.689">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:15:53.689" status="PASS" endtime="20170417 18:15:53.690"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:53.690">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:15:53.690" status="PASS" endtime="20170417 18:15:53.690"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:53.691">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:15:53.691" status="PASS" endtime="20170417 18:15:53.691"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:53.691">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:15:53.691" status="PASS" endtime="20170417 18:15:53.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:53.926">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:15:53.692" status="PASS" endtime="20170417 18:15:53.926"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:53.926">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:15:53.926">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:53.692" status="PASS" endtime="20170417 18:15:53.926"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:53.927">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:53.926" status="PASS" endtime="20170417 18:15:53.927"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:53.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:53.927" status="PASS" endtime="20170417 18:15:53.927"></status>
</kw>
<status starttime="20170417 18:15:53.688" status="PASS" endtime="20170417 18:15:53.928"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:53.928">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:15:53.928" status="PASS" endtime="20170417 18:15:53.928"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:53.930">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:15:53.929" status="PASS" endtime="20170417 18:15:53.930"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:53.931">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:15:53.931" status="PASS" endtime="20170417 18:15:53.931"></status>
</kw>
<status starttime="20170417 18:15:53.930" status="PASS" endtime="20170417 18:15:53.931"></status>
</kw>
<status starttime="20170417 18:15:53.929" status="PASS" endtime="20170417 18:15:53.931"></status>
</kw>
<status starttime="20170417 18:15:53.928" status="PASS" endtime="20170417 18:15:53.931"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:54.028">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:15:54.028">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:53.932" status="PASS" endtime="20170417 18:15:54.028"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:54.030">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:54.029" status="PASS" endtime="20170417 18:15:54.030"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:54.031">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:15:54.031" status="PASS" endtime="20170417 18:15:54.031"></status>
</kw>
<status starttime="20170417 18:15:54.030" status="PASS" endtime="20170417 18:15:54.031"></status>
</kw>
<status starttime="20170417 18:15:54.029" status="PASS" endtime="20170417 18:15:54.031"></status>
</kw>
<status starttime="20170417 18:15:54.028" status="PASS" endtime="20170417 18:15:54.031"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:54.032">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:15:53.688" status="PASS" endtime="20170417 18:15:54.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:15:54.032">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:15:54.032" status="PASS" endtime="20170417 18:15:54.032"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:15:54.033">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:15:54.033">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:15:54.033">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:15:54.033" status="PASS" endtime="20170417 18:15:54.033"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:54.033">${state} = Off</msg>
<status starttime="20170417 18:15:53.687" status="PASS" endtime="20170417 18:15:54.033"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:15:54.034">${boot_progress} = Off</msg>
<status starttime="20170417 18:15:53.687" status="PASS" endtime="20170417 18:15:54.034"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:15:54.034">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:15:54.034" status="FAIL" endtime="20170417 18:15:54.034"></status>
</kw>
<status starttime="20170417 18:15:53.686" status="FAIL" endtime="20170417 18:15:54.034"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:04.038">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:16:04.038" status="PASS" endtime="20170417 18:16:04.039"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:04.039">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:16:04.039" status="PASS" endtime="20170417 18:16:04.039"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:04.040">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:16:04.039" status="PASS" endtime="20170417 18:16:04.040"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:04.040">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:16:04.040" status="PASS" endtime="20170417 18:16:04.040"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:04.924">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:16:04.041" status="PASS" endtime="20170417 18:16:04.924"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:04.925">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:16:04.925">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:04.041" status="PASS" endtime="20170417 18:16:04.925"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:04.925">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:04.925" status="PASS" endtime="20170417 18:16:04.925"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:04.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:04.926" status="PASS" endtime="20170417 18:16:04.926"></status>
</kw>
<status starttime="20170417 18:16:04.037" status="PASS" endtime="20170417 18:16:04.926"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:04.927">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:16:04.926" status="PASS" endtime="20170417 18:16:04.927"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:04.929">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:16:04.928" status="PASS" endtime="20170417 18:16:04.929"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:04.930">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:16:04.930" status="PASS" endtime="20170417 18:16:04.930"></status>
</kw>
<status starttime="20170417 18:16:04.929" status="PASS" endtime="20170417 18:16:04.930"></status>
</kw>
<status starttime="20170417 18:16:04.928" status="PASS" endtime="20170417 18:16:04.930"></status>
</kw>
<status starttime="20170417 18:16:04.927" status="PASS" endtime="20170417 18:16:04.930"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:05.029">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:16:05.029">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:04.931" status="PASS" endtime="20170417 18:16:05.029"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:05.031">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:16:05.031" status="PASS" endtime="20170417 18:16:05.031"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:05.032">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:16:05.032" status="PASS" endtime="20170417 18:16:05.032"></status>
</kw>
<status starttime="20170417 18:16:05.031" status="PASS" endtime="20170417 18:16:05.032"></status>
</kw>
<status starttime="20170417 18:16:05.030" status="PASS" endtime="20170417 18:16:05.032"></status>
</kw>
<status starttime="20170417 18:16:05.030" status="PASS" endtime="20170417 18:16:05.032"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:05.033">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:04.037" status="PASS" endtime="20170417 18:16:05.033"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:05.033">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:05.033" status="PASS" endtime="20170417 18:16:05.033"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:05.034">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:16:05.034">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:16:05.034">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:16:05.034" status="PASS" endtime="20170417 18:16:05.034"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:05.035">${state} = Off</msg>
<status starttime="20170417 18:16:04.036" status="PASS" endtime="20170417 18:16:05.035"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:05.035">${boot_progress} = Off</msg>
<status starttime="20170417 18:16:04.036" status="PASS" endtime="20170417 18:16:05.035"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:16:05.036">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:16:05.036" status="FAIL" endtime="20170417 18:16:05.036"></status>
</kw>
<status starttime="20170417 18:16:04.035" status="FAIL" endtime="20170417 18:16:05.036"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:15.041">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:16:15.040" status="PASS" endtime="20170417 18:16:15.041"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:15.041">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:16:15.041" status="PASS" endtime="20170417 18:16:15.042"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:15.042">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:16:15.042" status="PASS" endtime="20170417 18:16:15.042"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:15.043">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:16:15.042" status="PASS" endtime="20170417 18:16:15.043"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:15.282">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:16:15.043" status="PASS" endtime="20170417 18:16:15.283"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:15.283">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:16:15.283">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:15.043" status="PASS" endtime="20170417 18:16:15.283"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:15.284">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:15.283" status="PASS" endtime="20170417 18:16:15.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:15.284">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:15.284" status="PASS" endtime="20170417 18:16:15.284"></status>
</kw>
<status starttime="20170417 18:16:15.040" status="PASS" endtime="20170417 18:16:15.284"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:15.285">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:16:15.285" status="PASS" endtime="20170417 18:16:15.285"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:15.288">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:16:15.287" status="PASS" endtime="20170417 18:16:15.288"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:15.289">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:16:15.288" status="PASS" endtime="20170417 18:16:15.289"></status>
</kw>
<status starttime="20170417 18:16:15.288" status="PASS" endtime="20170417 18:16:15.289"></status>
</kw>
<status starttime="20170417 18:16:15.286" status="PASS" endtime="20170417 18:16:15.289"></status>
</kw>
<status starttime="20170417 18:16:15.285" status="PASS" endtime="20170417 18:16:15.289"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:15.386">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:16:15.386">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:15.289" status="PASS" endtime="20170417 18:16:15.386"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:15.388">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:16:15.387" status="PASS" endtime="20170417 18:16:15.388"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:15.388">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:16:15.388" status="PASS" endtime="20170417 18:16:15.389"></status>
</kw>
<status starttime="20170417 18:16:15.388" status="PASS" endtime="20170417 18:16:15.389"></status>
</kw>
<status starttime="20170417 18:16:15.387" status="PASS" endtime="20170417 18:16:15.389"></status>
</kw>
<status starttime="20170417 18:16:15.386" status="PASS" endtime="20170417 18:16:15.389"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:15.389">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:15.039" status="PASS" endtime="20170417 18:16:15.389"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:15.390">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:15.389" status="PASS" endtime="20170417 18:16:15.390"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:15.391">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:16:15.391">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:16:15.391">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:16:15.391" status="PASS" endtime="20170417 18:16:15.391"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:15.392">${state} = Off</msg>
<status starttime="20170417 18:16:15.038" status="PASS" endtime="20170417 18:16:15.392"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:15.392">${boot_progress} = Off</msg>
<status starttime="20170417 18:16:15.038" status="PASS" endtime="20170417 18:16:15.392"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:16:15.393">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:16:15.392" status="FAIL" endtime="20170417 18:16:15.393"></status>
</kw>
<status starttime="20170417 18:16:15.037" status="FAIL" endtime="20170417 18:16:15.393"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:25.397">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:16:25.397" status="PASS" endtime="20170417 18:16:25.398"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:25.398">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:16:25.398" status="PASS" endtime="20170417 18:16:25.398"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:25.399">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:16:25.399" status="PASS" endtime="20170417 18:16:25.399"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:25.400">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:16:25.399" status="PASS" endtime="20170417 18:16:25.400"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:25.622">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:16:25.400" status="PASS" endtime="20170417 18:16:25.623"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:25.623">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:16:25.623">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:25.400" status="PASS" endtime="20170417 18:16:25.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:25.623">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:25.623" status="PASS" endtime="20170417 18:16:25.624"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:25.624">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:25.624" status="PASS" endtime="20170417 18:16:25.624"></status>
</kw>
<status starttime="20170417 18:16:25.396" status="PASS" endtime="20170417 18:16:25.624"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:25.625">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:16:25.625" status="PASS" endtime="20170417 18:16:25.625"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:25.627">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:16:25.626" status="PASS" endtime="20170417 18:16:25.627"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:25.628">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:16:25.628" status="PASS" endtime="20170417 18:16:25.628"></status>
</kw>
<status starttime="20170417 18:16:25.627" status="PASS" endtime="20170417 18:16:25.628"></status>
</kw>
<status starttime="20170417 18:16:25.626" status="PASS" endtime="20170417 18:16:25.628"></status>
</kw>
<status starttime="20170417 18:16:25.625" status="PASS" endtime="20170417 18:16:25.628"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:25.696">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:16:25.697">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:25.629" status="PASS" endtime="20170417 18:16:25.697"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:25.698">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:16:25.698" status="PASS" endtime="20170417 18:16:25.698"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:25.699">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:16:25.699" status="PASS" endtime="20170417 18:16:25.700"></status>
</kw>
<status starttime="20170417 18:16:25.698" status="PASS" endtime="20170417 18:16:25.700"></status>
</kw>
<status starttime="20170417 18:16:25.697" status="PASS" endtime="20170417 18:16:25.700"></status>
</kw>
<status starttime="20170417 18:16:25.697" status="PASS" endtime="20170417 18:16:25.700"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:25.700">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:25.395" status="PASS" endtime="20170417 18:16:25.700"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:25.701">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:25.700" status="PASS" endtime="20170417 18:16:25.701"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:25.701">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:16:25.701">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:16:25.701">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:16:25.701" status="PASS" endtime="20170417 18:16:25.701"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:25.702">${state} = Off</msg>
<status starttime="20170417 18:16:25.395" status="PASS" endtime="20170417 18:16:25.702"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:25.702">${boot_progress} = Off</msg>
<status starttime="20170417 18:16:25.394" status="PASS" endtime="20170417 18:16:25.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:16:25.702">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:16:25.702" status="FAIL" endtime="20170417 18:16:25.703"></status>
</kw>
<status starttime="20170417 18:16:25.394" status="FAIL" endtime="20170417 18:16:25.703"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:35.707">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:16:35.706" status="PASS" endtime="20170417 18:16:35.707"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:35.708">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:16:35.707" status="PASS" endtime="20170417 18:16:35.708"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:35.708">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:16:35.708" status="PASS" endtime="20170417 18:16:35.708"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:35.709">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:16:35.709" status="PASS" endtime="20170417 18:16:35.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:35.948">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:16:35.710" status="PASS" endtime="20170417 18:16:35.948"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:35.948">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:16:35.948">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:35.709" status="PASS" endtime="20170417 18:16:35.948"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:35.949">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:35.948" status="PASS" endtime="20170417 18:16:35.949"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:35.949">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:35.949" status="PASS" endtime="20170417 18:16:35.950"></status>
</kw>
<status starttime="20170417 18:16:35.706" status="PASS" endtime="20170417 18:16:35.950"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:35.950">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:16:35.950" status="PASS" endtime="20170417 18:16:35.950"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:35.953">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:16:35.952" status="PASS" endtime="20170417 18:16:35.953"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:35.954">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:16:35.953" status="PASS" endtime="20170417 18:16:35.954"></status>
</kw>
<status starttime="20170417 18:16:35.953" status="PASS" endtime="20170417 18:16:35.954"></status>
</kw>
<status starttime="20170417 18:16:35.951" status="PASS" endtime="20170417 18:16:35.954"></status>
</kw>
<status starttime="20170417 18:16:35.951" status="PASS" endtime="20170417 18:16:35.954"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:36.052">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:16:36.053">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:35.954" status="PASS" endtime="20170417 18:16:36.053"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:36.054">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:16:36.054" status="PASS" endtime="20170417 18:16:36.055"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:36.055">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:16:36.055" status="PASS" endtime="20170417 18:16:36.055"></status>
</kw>
<status starttime="20170417 18:16:36.055" status="PASS" endtime="20170417 18:16:36.056"></status>
</kw>
<status starttime="20170417 18:16:36.054" status="PASS" endtime="20170417 18:16:36.056"></status>
</kw>
<status starttime="20170417 18:16:36.053" status="PASS" endtime="20170417 18:16:36.056"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:36.056">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:35.705" status="PASS" endtime="20170417 18:16:36.056"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:36.057">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:36.056" status="PASS" endtime="20170417 18:16:36.057"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:36.057">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:16:36.057">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:16:36.057">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:16:36.057" status="PASS" endtime="20170417 18:16:36.057"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:36.058">${state} = Off</msg>
<status starttime="20170417 18:16:35.704" status="PASS" endtime="20170417 18:16:36.058"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:36.058">${boot_progress} = Off</msg>
<status starttime="20170417 18:16:35.704" status="PASS" endtime="20170417 18:16:36.058"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:16:36.059">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:16:36.058" status="FAIL" endtime="20170417 18:16:36.059"></status>
</kw>
<status starttime="20170417 18:16:35.703" status="FAIL" endtime="20170417 18:16:36.059"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:46.063">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:16:46.062" status="PASS" endtime="20170417 18:16:46.063"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:46.064">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:16:46.063" status="PASS" endtime="20170417 18:16:46.064"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:46.064">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:16:46.064" status="PASS" endtime="20170417 18:16:46.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:46.065">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:16:46.064" status="PASS" endtime="20170417 18:16:46.065"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:46.296">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:16:46.065" status="PASS" endtime="20170417 18:16:46.296"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:46.296">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:16:46.296">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:46.065" status="PASS" endtime="20170417 18:16:46.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:46.297">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:46.297" status="PASS" endtime="20170417 18:16:46.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:46.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:46.297" status="PASS" endtime="20170417 18:16:46.298"></status>
</kw>
<status starttime="20170417 18:16:46.062" status="PASS" endtime="20170417 18:16:46.298"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:46.298">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:16:46.298" status="PASS" endtime="20170417 18:16:46.298"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:46.300">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:16:46.300" status="PASS" endtime="20170417 18:16:46.300"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:46.302">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:16:46.301" status="PASS" endtime="20170417 18:16:46.302"></status>
</kw>
<status starttime="20170417 18:16:46.301" status="PASS" endtime="20170417 18:16:46.302"></status>
</kw>
<status starttime="20170417 18:16:46.299" status="PASS" endtime="20170417 18:16:46.302"></status>
</kw>
<status starttime="20170417 18:16:46.299" status="PASS" endtime="20170417 18:16:46.302"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:46.403">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:16:46.404">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:46.302" status="PASS" endtime="20170417 18:16:46.404"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:46.405">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:16:46.405" status="PASS" endtime="20170417 18:16:46.405"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:46.406">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:16:46.406" status="PASS" endtime="20170417 18:16:46.406"></status>
</kw>
<status starttime="20170417 18:16:46.405" status="PASS" endtime="20170417 18:16:46.407"></status>
</kw>
<status starttime="20170417 18:16:46.404" status="PASS" endtime="20170417 18:16:46.407"></status>
</kw>
<status starttime="20170417 18:16:46.404" status="PASS" endtime="20170417 18:16:46.407"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:46.407">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:46.061" status="PASS" endtime="20170417 18:16:46.407"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:46.407">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:46.407" status="PASS" endtime="20170417 18:16:46.408"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:46.408">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:16:46.408">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:16:46.408">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:16:46.408" status="PASS" endtime="20170417 18:16:46.408"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:46.408">${state} = Off</msg>
<status starttime="20170417 18:16:46.060" status="PASS" endtime="20170417 18:16:46.409"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:46.409">${boot_progress} = Off</msg>
<status starttime="20170417 18:16:46.060" status="PASS" endtime="20170417 18:16:46.409"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:16:46.409">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:16:46.409" status="FAIL" endtime="20170417 18:16:46.409"></status>
</kw>
<status starttime="20170417 18:16:46.059" status="FAIL" endtime="20170417 18:16:46.410"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:56.413">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:16:56.413" status="PASS" endtime="20170417 18:16:56.414"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:56.415">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:16:56.414" status="PASS" endtime="20170417 18:16:56.415"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:56.415">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:16:56.415" status="PASS" endtime="20170417 18:16:56.415"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:56.416">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:16:56.416" status="PASS" endtime="20170417 18:16:56.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:56.590">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:16:56.417" status="PASS" endtime="20170417 18:16:56.590"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:56.590">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:16:56.590">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:56.417" status="PASS" endtime="20170417 18:16:56.590"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:56.591">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:56.590" status="PASS" endtime="20170417 18:16:56.591"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:56.591">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:56.591" status="PASS" endtime="20170417 18:16:56.592"></status>
</kw>
<status starttime="20170417 18:16:56.412" status="PASS" endtime="20170417 18:16:56.592"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:56.592">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:16:56.592" status="PASS" endtime="20170417 18:16:56.592"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:56.594">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:16:56.594" status="PASS" endtime="20170417 18:16:56.594"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:56.595">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:16:56.595" status="PASS" endtime="20170417 18:16:56.595"></status>
</kw>
<status starttime="20170417 18:16:56.594" status="PASS" endtime="20170417 18:16:56.595"></status>
</kw>
<status starttime="20170417 18:16:56.593" status="PASS" endtime="20170417 18:16:56.595"></status>
</kw>
<status starttime="20170417 18:16:56.592" status="PASS" endtime="20170417 18:16:56.596"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:56.659">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:16:56.660">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:56.596" status="PASS" endtime="20170417 18:16:56.660"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:56.661">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:16:56.661" status="PASS" endtime="20170417 18:16:56.661"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:56.662">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:16:56.662" status="PASS" endtime="20170417 18:16:56.662"></status>
</kw>
<status starttime="20170417 18:16:56.661" status="PASS" endtime="20170417 18:16:56.662"></status>
</kw>
<status starttime="20170417 18:16:56.660" status="PASS" endtime="20170417 18:16:56.663"></status>
</kw>
<status starttime="20170417 18:16:56.660" status="PASS" endtime="20170417 18:16:56.663"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:56.663">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:16:56.412" status="PASS" endtime="20170417 18:16:56.663"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:16:56.664">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:16:56.663" status="PASS" endtime="20170417 18:16:56.664"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:16:56.664">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:16:56.664">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:16:56.664">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:16:56.664" status="PASS" endtime="20170417 18:16:56.665"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:56.665">${state} = Off</msg>
<status starttime="20170417 18:16:56.411" status="PASS" endtime="20170417 18:16:56.665"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:16:56.665">${boot_progress} = Off</msg>
<status starttime="20170417 18:16:56.411" status="PASS" endtime="20170417 18:16:56.665"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:16:56.666">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:16:56.665" status="FAIL" endtime="20170417 18:16:56.666"></status>
</kw>
<status starttime="20170417 18:16:56.410" status="FAIL" endtime="20170417 18:16:56.666"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:06.670">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:17:06.670" status="PASS" endtime="20170417 18:17:06.671"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:06.671">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:17:06.671" status="PASS" endtime="20170417 18:17:06.671"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:06.672">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:17:06.672" status="PASS" endtime="20170417 18:17:06.672"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:06.673">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:17:06.672" status="PASS" endtime="20170417 18:17:06.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:07.007">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:17:06.673" status="PASS" endtime="20170417 18:17:07.007"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:07.007">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:17:07.007">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:06.673" status="PASS" endtime="20170417 18:17:07.008"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:07.008">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:07.008" status="PASS" endtime="20170417 18:17:07.008"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:07.009">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:07.009" status="PASS" endtime="20170417 18:17:07.009"></status>
</kw>
<status starttime="20170417 18:17:06.669" status="PASS" endtime="20170417 18:17:07.009"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:07.010">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:17:07.009" status="PASS" endtime="20170417 18:17:07.010"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:07.012">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:17:07.011" status="PASS" endtime="20170417 18:17:07.012"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:07.013">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:17:07.013" status="PASS" endtime="20170417 18:17:07.013"></status>
</kw>
<status starttime="20170417 18:17:07.012" status="PASS" endtime="20170417 18:17:07.013"></status>
</kw>
<status starttime="20170417 18:17:07.010" status="PASS" endtime="20170417 18:17:07.013"></status>
</kw>
<status starttime="20170417 18:17:07.010" status="PASS" endtime="20170417 18:17:07.013"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:07.292">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:17:07.292">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:07.014" status="PASS" endtime="20170417 18:17:07.292"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:07.294">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:17:07.293" status="PASS" endtime="20170417 18:17:07.294"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:07.295">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:17:07.295" status="PASS" endtime="20170417 18:17:07.295"></status>
</kw>
<status starttime="20170417 18:17:07.294" status="PASS" endtime="20170417 18:17:07.295"></status>
</kw>
<status starttime="20170417 18:17:07.293" status="PASS" endtime="20170417 18:17:07.295"></status>
</kw>
<status starttime="20170417 18:17:07.293" status="PASS" endtime="20170417 18:17:07.295"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:07.296">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:06.669" status="PASS" endtime="20170417 18:17:07.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:07.296">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:07.296" status="PASS" endtime="20170417 18:17:07.296"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:07.297">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:17:07.297">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:17:07.297">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:17:07.296" status="PASS" endtime="20170417 18:17:07.297"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:07.297">${state} = Off</msg>
<status starttime="20170417 18:17:06.668" status="PASS" endtime="20170417 18:17:07.297"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:07.297">${boot_progress} = Off</msg>
<status starttime="20170417 18:17:06.667" status="PASS" endtime="20170417 18:17:07.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:17:07.298">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:17:07.298" status="FAIL" endtime="20170417 18:17:07.298"></status>
</kw>
<status starttime="20170417 18:17:06.666" status="FAIL" endtime="20170417 18:17:07.298"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:17.302">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:17:17.302" status="PASS" endtime="20170417 18:17:17.303"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:17.303">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:17:17.303" status="PASS" endtime="20170417 18:17:17.303"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:17.304">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:17:17.303" status="PASS" endtime="20170417 18:17:17.304"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:17.304">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:17:17.304" status="PASS" endtime="20170417 18:17:17.304"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:17.481">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:17:17.305" status="PASS" endtime="20170417 18:17:17.481"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:17.481">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:17:17.481">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:17.305" status="PASS" endtime="20170417 18:17:17.481"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:17.482">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:17.482" status="PASS" endtime="20170417 18:17:17.482"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:17.483">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:17.482" status="PASS" endtime="20170417 18:17:17.483"></status>
</kw>
<status starttime="20170417 18:17:17.301" status="PASS" endtime="20170417 18:17:17.483"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:17.483">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:17:17.483" status="PASS" endtime="20170417 18:17:17.483"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:17.485">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:17:17.485" status="PASS" endtime="20170417 18:17:17.485"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:17.486">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:17:17.486" status="PASS" endtime="20170417 18:17:17.486"></status>
</kw>
<status starttime="20170417 18:17:17.486" status="PASS" endtime="20170417 18:17:17.487"></status>
</kw>
<status starttime="20170417 18:17:17.484" status="PASS" endtime="20170417 18:17:17.487"></status>
</kw>
<status starttime="20170417 18:17:17.484" status="PASS" endtime="20170417 18:17:17.487"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:17.551">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:17:17.552">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:17.487" status="PASS" endtime="20170417 18:17:17.552"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:17.553">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:17:17.553" status="PASS" endtime="20170417 18:17:17.553"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:17.554">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:17:17.554" status="PASS" endtime="20170417 18:17:17.554"></status>
</kw>
<status starttime="20170417 18:17:17.554" status="PASS" endtime="20170417 18:17:17.555"></status>
</kw>
<status starttime="20170417 18:17:17.552" status="PASS" endtime="20170417 18:17:17.555"></status>
</kw>
<status starttime="20170417 18:17:17.552" status="PASS" endtime="20170417 18:17:17.555"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:17.555">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:17.300" status="PASS" endtime="20170417 18:17:17.555"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:17.556">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:17.555" status="PASS" endtime="20170417 18:17:17.556"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:17.556">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:17:17.556">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:17:17.556">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:17:17.556" status="PASS" endtime="20170417 18:17:17.556"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:17.557">${state} = Off</msg>
<status starttime="20170417 18:17:17.300" status="PASS" endtime="20170417 18:17:17.557"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:17.557">${boot_progress} = Off</msg>
<status starttime="20170417 18:17:17.299" status="PASS" endtime="20170417 18:17:17.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:17:17.557">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:17:17.557" status="FAIL" endtime="20170417 18:17:17.558"></status>
</kw>
<status starttime="20170417 18:17:17.299" status="FAIL" endtime="20170417 18:17:17.558"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:27.562">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:17:27.562" status="PASS" endtime="20170417 18:17:27.564"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:27.564">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:17:27.564" status="PASS" endtime="20170417 18:17:27.564"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:27.565">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:17:27.565" status="PASS" endtime="20170417 18:17:27.565"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:27.565">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:17:27.565" status="PASS" endtime="20170417 18:17:27.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:27.746">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:17:27.566" status="PASS" endtime="20170417 18:17:27.746"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:27.747">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:17:27.747">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:27.566" status="PASS" endtime="20170417 18:17:27.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:27.747">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:27.747" status="PASS" endtime="20170417 18:17:27.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:27.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:27.748" status="PASS" endtime="20170417 18:17:27.748"></status>
</kw>
<status starttime="20170417 18:17:27.561" status="PASS" endtime="20170417 18:17:27.748"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:27.749">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:17:27.748" status="PASS" endtime="20170417 18:17:27.749"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:27.751">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:17:27.750" status="PASS" endtime="20170417 18:17:27.751"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:27.752">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:17:27.751" status="PASS" endtime="20170417 18:17:27.752"></status>
</kw>
<status starttime="20170417 18:17:27.751" status="PASS" endtime="20170417 18:17:27.752"></status>
</kw>
<status starttime="20170417 18:17:27.749" status="PASS" endtime="20170417 18:17:27.752"></status>
</kw>
<status starttime="20170417 18:17:27.749" status="PASS" endtime="20170417 18:17:27.752"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:27.817">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:17:27.817">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:27.752" status="PASS" endtime="20170417 18:17:27.817"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:27.819">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:17:27.818" status="PASS" endtime="20170417 18:17:27.819"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:27.820">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:17:27.819" status="PASS" endtime="20170417 18:17:27.820"></status>
</kw>
<status starttime="20170417 18:17:27.819" status="PASS" endtime="20170417 18:17:27.820"></status>
</kw>
<status starttime="20170417 18:17:27.818" status="PASS" endtime="20170417 18:17:27.820"></status>
</kw>
<status starttime="20170417 18:17:27.817" status="PASS" endtime="20170417 18:17:27.820"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:27.820">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:27.560" status="PASS" endtime="20170417 18:17:27.820"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:27.821">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:27.821" status="PASS" endtime="20170417 18:17:27.821"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:27.821">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:17:27.822">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:17:27.822">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:17:27.821" status="PASS" endtime="20170417 18:17:27.822"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:27.822">${state} = Off</msg>
<status starttime="20170417 18:17:27.559" status="PASS" endtime="20170417 18:17:27.822"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:27.822">${boot_progress} = Off</msg>
<status starttime="20170417 18:17:27.559" status="PASS" endtime="20170417 18:17:27.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:17:27.823">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:17:27.822" status="FAIL" endtime="20170417 18:17:27.823"></status>
</kw>
<status starttime="20170417 18:17:27.558" status="FAIL" endtime="20170417 18:17:27.823"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:37.827">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:17:37.827" status="PASS" endtime="20170417 18:17:37.828"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:37.828">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:17:37.828" status="PASS" endtime="20170417 18:17:37.828"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:37.829">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:17:37.829" status="PASS" endtime="20170417 18:17:37.829"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:37.830">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:17:37.829" status="PASS" endtime="20170417 18:17:37.830"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:38.005">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:17:37.830" status="PASS" endtime="20170417 18:17:38.005"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:38.005">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:17:38.005">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:37.830" status="PASS" endtime="20170417 18:17:38.005"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:38.006">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:38.005" status="PASS" endtime="20170417 18:17:38.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:38.006">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:38.006" status="PASS" endtime="20170417 18:17:38.006"></status>
</kw>
<status starttime="20170417 18:17:37.826" status="PASS" endtime="20170417 18:17:38.006"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:38.007">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:17:38.007" status="PASS" endtime="20170417 18:17:38.007"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:38.009">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:17:38.008" status="PASS" endtime="20170417 18:17:38.009"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:38.010">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:17:38.010" status="PASS" endtime="20170417 18:17:38.010"></status>
</kw>
<status starttime="20170417 18:17:38.009" status="PASS" endtime="20170417 18:17:38.011"></status>
</kw>
<status starttime="20170417 18:17:38.008" status="PASS" endtime="20170417 18:17:38.011"></status>
</kw>
<status starttime="20170417 18:17:38.007" status="PASS" endtime="20170417 18:17:38.011"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:38.076">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:17:38.076">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:38.011" status="PASS" endtime="20170417 18:17:38.076"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:38.078">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:17:38.078" status="PASS" endtime="20170417 18:17:38.078"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:38.079">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:17:38.079" status="PASS" endtime="20170417 18:17:38.079"></status>
</kw>
<status starttime="20170417 18:17:38.078" status="PASS" endtime="20170417 18:17:38.079"></status>
</kw>
<status starttime="20170417 18:17:38.077" status="PASS" endtime="20170417 18:17:38.079"></status>
</kw>
<status starttime="20170417 18:17:38.077" status="PASS" endtime="20170417 18:17:38.079"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:38.080">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:37.826" status="PASS" endtime="20170417 18:17:38.080"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:38.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:38.080" status="PASS" endtime="20170417 18:17:38.080"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:38.081">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:17:38.081">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:17:38.081">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:17:38.080" status="PASS" endtime="20170417 18:17:38.081"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:38.081">${state} = Off</msg>
<status starttime="20170417 18:17:37.825" status="PASS" endtime="20170417 18:17:38.081"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:38.081">${boot_progress} = Off</msg>
<status starttime="20170417 18:17:37.824" status="PASS" endtime="20170417 18:17:38.081"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:17:38.082">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:17:38.082" status="FAIL" endtime="20170417 18:17:38.082"></status>
</kw>
<status starttime="20170417 18:17:37.824" status="FAIL" endtime="20170417 18:17:38.082"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:48.086">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:17:48.086" status="PASS" endtime="20170417 18:17:48.087"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:48.087">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:17:48.087" status="PASS" endtime="20170417 18:17:48.088"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:48.088">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:17:48.088" status="PASS" endtime="20170417 18:17:48.088"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:48.089">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:17:48.088" status="PASS" endtime="20170417 18:17:48.089"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:48.264">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:17:48.090" status="PASS" endtime="20170417 18:17:48.265"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:48.265">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:17:48.265">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:48.089" status="PASS" endtime="20170417 18:17:48.265"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:48.265">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:48.265" status="PASS" endtime="20170417 18:17:48.266"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:48.266">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:48.266" status="PASS" endtime="20170417 18:17:48.266"></status>
</kw>
<status starttime="20170417 18:17:48.085" status="PASS" endtime="20170417 18:17:48.266"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:48.267">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:17:48.267" status="PASS" endtime="20170417 18:17:48.267"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:48.269">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:17:48.268" status="PASS" endtime="20170417 18:17:48.269"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:48.270">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:17:48.270" status="PASS" endtime="20170417 18:17:48.270"></status>
</kw>
<status starttime="20170417 18:17:48.269" status="PASS" endtime="20170417 18:17:48.270"></status>
</kw>
<status starttime="20170417 18:17:48.268" status="PASS" endtime="20170417 18:17:48.270"></status>
</kw>
<status starttime="20170417 18:17:48.267" status="PASS" endtime="20170417 18:17:48.270"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:48.334">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:17:48.335">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:48.270" status="PASS" endtime="20170417 18:17:48.335"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:48.336">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:17:48.336" status="PASS" endtime="20170417 18:17:48.336"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:48.337">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:17:48.337" status="PASS" endtime="20170417 18:17:48.337"></status>
</kw>
<status starttime="20170417 18:17:48.336" status="PASS" endtime="20170417 18:17:48.337"></status>
</kw>
<status starttime="20170417 18:17:48.335" status="PASS" endtime="20170417 18:17:48.337"></status>
</kw>
<status starttime="20170417 18:17:48.335" status="PASS" endtime="20170417 18:17:48.338"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:48.338">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:48.085" status="PASS" endtime="20170417 18:17:48.338"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:48.338">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:48.338" status="PASS" endtime="20170417 18:17:48.339"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:48.339">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:17:48.339">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:17:48.339">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:17:48.339" status="PASS" endtime="20170417 18:17:48.339"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:48.339">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:17:48.084" status="PASS" endtime="20170417 18:17:48.340"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:48.340">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:17:48.084" status="PASS" endtime="20170417 18:17:48.340"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:17:48.340">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:17:48.340" status="FAIL" endtime="20170417 18:17:48.340"></status>
</kw>
<status starttime="20170417 18:17:48.083" status="FAIL" endtime="20170417 18:17:48.341"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:58.345">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:17:58.344" status="PASS" endtime="20170417 18:17:58.346"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:58.346">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:17:58.346" status="PASS" endtime="20170417 18:17:58.346"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:58.347">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:17:58.346" status="PASS" endtime="20170417 18:17:58.347"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:58.347">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:17:58.347" status="PASS" endtime="20170417 18:17:58.347"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:58.637">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:17:58.348" status="PASS" endtime="20170417 18:17:58.637"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:58.637">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:17:58.637">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:58.348" status="PASS" endtime="20170417 18:17:58.637"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:58.638">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:58.637" status="PASS" endtime="20170417 18:17:58.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:58.638">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:58.638" status="PASS" endtime="20170417 18:17:58.638"></status>
</kw>
<status starttime="20170417 18:17:58.344" status="PASS" endtime="20170417 18:17:58.638"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:58.639">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:17:58.639" status="PASS" endtime="20170417 18:17:58.639"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:58.641">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:17:58.640" status="PASS" endtime="20170417 18:17:58.641"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:58.642">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:17:58.642" status="PASS" endtime="20170417 18:17:58.642"></status>
</kw>
<status starttime="20170417 18:17:58.641" status="PASS" endtime="20170417 18:17:58.642"></status>
</kw>
<status starttime="20170417 18:17:58.640" status="PASS" endtime="20170417 18:17:58.642"></status>
</kw>
<status starttime="20170417 18:17:58.639" status="PASS" endtime="20170417 18:17:58.642"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:58.776">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:17:58.776">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:58.643" status="PASS" endtime="20170417 18:17:58.776"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:58.778">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:17:58.778" status="PASS" endtime="20170417 18:17:58.778"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:58.779">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:17:58.779" status="PASS" endtime="20170417 18:17:58.779"></status>
</kw>
<status starttime="20170417 18:17:58.778" status="PASS" endtime="20170417 18:17:58.779"></status>
</kw>
<status starttime="20170417 18:17:58.777" status="PASS" endtime="20170417 18:17:58.779"></status>
</kw>
<status starttime="20170417 18:17:58.777" status="PASS" endtime="20170417 18:17:58.779"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:58.779">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:17:58.343" status="PASS" endtime="20170417 18:17:58.780"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:17:58.780">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:17:58.780" status="PASS" endtime="20170417 18:17:58.780"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:17:58.781">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:17:58.781">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:17:58.781">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:17:58.780" status="PASS" endtime="20170417 18:17:58.781"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:58.781">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:17:58.342" status="PASS" endtime="20170417 18:17:58.781"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:17:58.781">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:17:58.342" status="PASS" endtime="20170417 18:17:58.781"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:17:58.782">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:17:58.782" status="FAIL" endtime="20170417 18:17:58.782"></status>
</kw>
<status starttime="20170417 18:17:58.341" status="FAIL" endtime="20170417 18:17:58.782"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:08.786">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:18:08.786" status="PASS" endtime="20170417 18:18:08.787"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:08.787">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:18:08.787" status="PASS" endtime="20170417 18:18:08.787"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:08.788">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:18:08.788" status="PASS" endtime="20170417 18:18:08.788"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:08.789">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:18:08.788" status="PASS" endtime="20170417 18:18:08.789"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:08.962">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:18:08.789" status="PASS" endtime="20170417 18:18:08.962"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:08.963">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:18:08.963">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:08.789" status="PASS" endtime="20170417 18:18:08.963"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:08.963">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:08.963" status="PASS" endtime="20170417 18:18:08.963"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:08.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:08.964" status="PASS" endtime="20170417 18:18:08.964"></status>
</kw>
<status starttime="20170417 18:18:08.785" status="PASS" endtime="20170417 18:18:08.964"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:08.965">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:18:08.964" status="PASS" endtime="20170417 18:18:08.965"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:08.967">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:18:08.966" status="PASS" endtime="20170417 18:18:08.967"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:08.968">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:18:08.968" status="PASS" endtime="20170417 18:18:08.968"></status>
</kw>
<status starttime="20170417 18:18:08.967" status="PASS" endtime="20170417 18:18:08.968"></status>
</kw>
<status starttime="20170417 18:18:08.965" status="PASS" endtime="20170417 18:18:08.968"></status>
</kw>
<status starttime="20170417 18:18:08.965" status="PASS" endtime="20170417 18:18:08.968"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:09.032">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:18:09.033">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:08.969" status="PASS" endtime="20170417 18:18:09.033"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:09.034">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:18:09.034" status="PASS" endtime="20170417 18:18:09.034"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:09.035">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:18:09.035" status="PASS" endtime="20170417 18:18:09.035"></status>
</kw>
<status starttime="20170417 18:18:09.035" status="PASS" endtime="20170417 18:18:09.036"></status>
</kw>
<status starttime="20170417 18:18:09.033" status="PASS" endtime="20170417 18:18:09.036"></status>
</kw>
<status starttime="20170417 18:18:09.033" status="PASS" endtime="20170417 18:18:09.036"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:09.036">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:08.785" status="PASS" endtime="20170417 18:18:09.036"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:09.037">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:09.036" status="PASS" endtime="20170417 18:18:09.037"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:09.037">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:18:09.037">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:18:09.037">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:18:09.037" status="PASS" endtime="20170417 18:18:09.037"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:09.038">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:18:08.784" status="PASS" endtime="20170417 18:18:09.038"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:09.038">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:18:08.783" status="PASS" endtime="20170417 18:18:09.038"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:18:09.039">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:18:09.038" status="FAIL" endtime="20170417 18:18:09.039"></status>
</kw>
<status starttime="20170417 18:18:08.783" status="FAIL" endtime="20170417 18:18:09.039"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:19.043">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:18:19.042" status="PASS" endtime="20170417 18:18:19.043"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:19.044">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:18:19.043" status="PASS" endtime="20170417 18:18:19.044"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:19.044">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:18:19.044" status="PASS" endtime="20170417 18:18:19.044"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:19.045">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:18:19.044" status="PASS" endtime="20170417 18:18:19.045"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:19.220">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:18:19.046" status="PASS" endtime="20170417 18:18:19.220"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:19.220">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:18:19.220">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:19.045" status="PASS" endtime="20170417 18:18:19.220"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:19.221">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:19.220" status="PASS" endtime="20170417 18:18:19.221"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:19.221">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:19.221" status="PASS" endtime="20170417 18:18:19.221"></status>
</kw>
<status starttime="20170417 18:18:19.042" status="PASS" endtime="20170417 18:18:19.221"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:19.222">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:18:19.222" status="PASS" endtime="20170417 18:18:19.222"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:19.224">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:18:19.223" status="PASS" endtime="20170417 18:18:19.224"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:19.225">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:18:19.225" status="PASS" endtime="20170417 18:18:19.225"></status>
</kw>
<status starttime="20170417 18:18:19.224" status="PASS" endtime="20170417 18:18:19.225"></status>
</kw>
<status starttime="20170417 18:18:19.223" status="PASS" endtime="20170417 18:18:19.225"></status>
</kw>
<status starttime="20170417 18:18:19.222" status="PASS" endtime="20170417 18:18:19.225"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:19.290">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:18:19.290">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:19.226" status="PASS" endtime="20170417 18:18:19.290"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:19.292">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:18:19.291" status="PASS" endtime="20170417 18:18:19.292"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:19.293">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:18:19.293" status="PASS" endtime="20170417 18:18:19.293"></status>
</kw>
<status starttime="20170417 18:18:19.292" status="PASS" endtime="20170417 18:18:19.293"></status>
</kw>
<status starttime="20170417 18:18:19.291" status="PASS" endtime="20170417 18:18:19.293"></status>
</kw>
<status starttime="20170417 18:18:19.291" status="PASS" endtime="20170417 18:18:19.293"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:19.293">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:19.041" status="PASS" endtime="20170417 18:18:19.293"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:19.294">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:19.294" status="PASS" endtime="20170417 18:18:19.294"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:19.295">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:18:19.295">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:18:19.295">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:18:19.294" status="PASS" endtime="20170417 18:18:19.295"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:19.295">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:18:19.040" status="PASS" endtime="20170417 18:18:19.295"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:19.295">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:18:19.040" status="PASS" endtime="20170417 18:18:19.295"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:18:19.296">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:18:19.296" status="FAIL" endtime="20170417 18:18:19.296"></status>
</kw>
<status starttime="20170417 18:18:19.039" status="FAIL" endtime="20170417 18:18:19.296"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:29.300">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:18:29.300" status="PASS" endtime="20170417 18:18:29.301"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:29.301">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:18:29.301" status="PASS" endtime="20170417 18:18:29.301"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:29.302">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:18:29.302" status="PASS" endtime="20170417 18:18:29.302"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:29.303">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:18:29.302" status="PASS" endtime="20170417 18:18:29.303"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:29.510">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:18:29.303" status="PASS" endtime="20170417 18:18:29.511"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:29.511">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:18:29.511">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:29.303" status="PASS" endtime="20170417 18:18:29.511"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:29.512">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:29.511" status="PASS" endtime="20170417 18:18:29.512"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:29.512">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:29.512" status="PASS" endtime="20170417 18:18:29.512"></status>
</kw>
<status starttime="20170417 18:18:29.299" status="PASS" endtime="20170417 18:18:29.512"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:29.513">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:18:29.513" status="PASS" endtime="20170417 18:18:29.513"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:29.515">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:18:29.514" status="PASS" endtime="20170417 18:18:29.515"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:29.516">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:18:29.516" status="PASS" endtime="20170417 18:18:29.516"></status>
</kw>
<status starttime="20170417 18:18:29.515" status="PASS" endtime="20170417 18:18:29.516"></status>
</kw>
<status starttime="20170417 18:18:29.514" status="PASS" endtime="20170417 18:18:29.516"></status>
</kw>
<status starttime="20170417 18:18:29.513" status="PASS" endtime="20170417 18:18:29.516"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:29.582">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:18:29.582">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:29.517" status="PASS" endtime="20170417 18:18:29.582"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:29.583">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:18:29.583" status="PASS" endtime="20170417 18:18:29.583"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:29.584">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:18:29.584" status="PASS" endtime="20170417 18:18:29.584"></status>
</kw>
<status starttime="20170417 18:18:29.584" status="PASS" endtime="20170417 18:18:29.585"></status>
</kw>
<status starttime="20170417 18:18:29.582" status="PASS" endtime="20170417 18:18:29.585"></status>
</kw>
<status starttime="20170417 18:18:29.582" status="PASS" endtime="20170417 18:18:29.585"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:29.585">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:29.298" status="PASS" endtime="20170417 18:18:29.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:29.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:29.585" status="PASS" endtime="20170417 18:18:29.586"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:29.586">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:18:29.586">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:18:29.586">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:18:29.586" status="PASS" endtime="20170417 18:18:29.586"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:29.587">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:18:29.298" status="PASS" endtime="20170417 18:18:29.587"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:29.587">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:18:29.297" status="PASS" endtime="20170417 18:18:29.587"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:18:29.587">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:18:29.587" status="FAIL" endtime="20170417 18:18:29.588"></status>
</kw>
<status starttime="20170417 18:18:29.297" status="FAIL" endtime="20170417 18:18:29.588"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:39.593">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:18:39.593" status="PASS" endtime="20170417 18:18:39.594"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:39.594">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:18:39.594" status="PASS" endtime="20170417 18:18:39.595"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:39.595">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:18:39.595" status="PASS" endtime="20170417 18:18:39.595"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:39.596">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:18:39.596" status="PASS" endtime="20170417 18:18:39.596"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:39.800">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:18:39.597" status="PASS" endtime="20170417 18:18:39.800"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:39.800">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:18:39.800">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:39.597" status="PASS" endtime="20170417 18:18:39.801"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:39.801">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:39.801" status="PASS" endtime="20170417 18:18:39.801"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:39.802">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:39.801" status="PASS" endtime="20170417 18:18:39.802"></status>
</kw>
<status starttime="20170417 18:18:39.592" status="PASS" endtime="20170417 18:18:39.802"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:39.803">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:18:39.802" status="PASS" endtime="20170417 18:18:39.803"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:39.805">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:18:39.804" status="PASS" endtime="20170417 18:18:39.805"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:39.806">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:18:39.806" status="PASS" endtime="20170417 18:18:39.806"></status>
</kw>
<status starttime="20170417 18:18:39.805" status="PASS" endtime="20170417 18:18:39.806"></status>
</kw>
<status starttime="20170417 18:18:39.803" status="PASS" endtime="20170417 18:18:39.806"></status>
</kw>
<status starttime="20170417 18:18:39.803" status="PASS" endtime="20170417 18:18:39.806"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:39.871">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:18:39.871">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:39.806" status="PASS" endtime="20170417 18:18:39.871"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:39.873">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:18:39.872" status="PASS" endtime="20170417 18:18:39.873"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:39.874">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:18:39.873" status="PASS" endtime="20170417 18:18:39.874"></status>
</kw>
<status starttime="20170417 18:18:39.873" status="PASS" endtime="20170417 18:18:39.874"></status>
</kw>
<status starttime="20170417 18:18:39.872" status="PASS" endtime="20170417 18:18:39.874"></status>
</kw>
<status starttime="20170417 18:18:39.871" status="PASS" endtime="20170417 18:18:39.874"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:39.874">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:39.591" status="PASS" endtime="20170417 18:18:39.874"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:39.875">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:39.874" status="PASS" endtime="20170417 18:18:39.875"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:39.875">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:18:39.876">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:18:39.876">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:18:39.875" status="PASS" endtime="20170417 18:18:39.876"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:39.876">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:18:39.590" status="PASS" endtime="20170417 18:18:39.876"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:39.876">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:18:39.589" status="PASS" endtime="20170417 18:18:39.876"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:18:39.877">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:18:39.876" status="FAIL" endtime="20170417 18:18:39.877"></status>
</kw>
<status starttime="20170417 18:18:39.588" status="FAIL" endtime="20170417 18:18:39.877"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:49.880">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:18:49.880" status="PASS" endtime="20170417 18:18:49.881"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:49.881">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:18:49.881" status="PASS" endtime="20170417 18:18:49.882"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:49.882">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:18:49.882" status="PASS" endtime="20170417 18:18:49.882"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:49.883">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:18:49.882" status="PASS" endtime="20170417 18:18:49.883"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:50.057">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:18:49.883" status="PASS" endtime="20170417 18:18:50.057"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:50.058">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:18:50.058">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:49.883" status="PASS" endtime="20170417 18:18:50.058"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:50.058">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:50.058" status="PASS" endtime="20170417 18:18:50.058"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:50.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:50.059" status="PASS" endtime="20170417 18:18:50.059"></status>
</kw>
<status starttime="20170417 18:18:49.880" status="PASS" endtime="20170417 18:18:50.059"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:50.060">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:18:50.059" status="PASS" endtime="20170417 18:18:50.060"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:50.062">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:18:50.061" status="PASS" endtime="20170417 18:18:50.062"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:50.063">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:18:50.062" status="PASS" endtime="20170417 18:18:50.063"></status>
</kw>
<status starttime="20170417 18:18:50.062" status="PASS" endtime="20170417 18:18:50.063"></status>
</kw>
<status starttime="20170417 18:18:50.061" status="PASS" endtime="20170417 18:18:50.063"></status>
</kw>
<status starttime="20170417 18:18:50.060" status="PASS" endtime="20170417 18:18:50.063"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:50.159">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:18:50.159">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:50.063" status="PASS" endtime="20170417 18:18:50.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:50.160">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:18:50.160" status="PASS" endtime="20170417 18:18:50.161"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:50.161">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:18:50.161" status="PASS" endtime="20170417 18:18:50.162"></status>
</kw>
<status starttime="20170417 18:18:50.161" status="PASS" endtime="20170417 18:18:50.162"></status>
</kw>
<status starttime="20170417 18:18:50.159" status="PASS" endtime="20170417 18:18:50.162"></status>
</kw>
<status starttime="20170417 18:18:50.159" status="PASS" endtime="20170417 18:18:50.162"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:50.162">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:18:49.879" status="PASS" endtime="20170417 18:18:50.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:18:50.163">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:18:50.162" status="PASS" endtime="20170417 18:18:50.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:18:50.163">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:18:50.163">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:18:50.163">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:18:50.163" status="PASS" endtime="20170417 18:18:50.163"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:50.164">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:18:49.878" status="PASS" endtime="20170417 18:18:50.164"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:18:50.164">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:18:49.878" status="PASS" endtime="20170417 18:18:50.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:18:50.165">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:18:50.164" status="FAIL" endtime="20170417 18:18:50.165"></status>
</kw>
<status starttime="20170417 18:18:49.877" status="FAIL" endtime="20170417 18:18:50.165"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:00.169">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:19:00.168" status="PASS" endtime="20170417 18:19:00.169"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:00.170">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:19:00.170" status="PASS" endtime="20170417 18:19:00.170"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:00.171">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:19:00.170" status="PASS" endtime="20170417 18:19:00.171"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:00.171">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:19:00.171" status="PASS" endtime="20170417 18:19:00.171"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:00.345">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:19:00.172" status="PASS" endtime="20170417 18:19:00.345"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:00.345">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:19:00.345">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:00.171" status="PASS" endtime="20170417 18:19:00.346"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:00.346">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:00.346" status="PASS" endtime="20170417 18:19:00.346"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:00.347">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:00.346" status="PASS" endtime="20170417 18:19:00.347"></status>
</kw>
<status starttime="20170417 18:19:00.167" status="PASS" endtime="20170417 18:19:00.347"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:00.348">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:19:00.347" status="PASS" endtime="20170417 18:19:00.348"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:00.350">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:19:00.349" status="PASS" endtime="20170417 18:19:00.350"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:00.351">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:19:00.350" status="PASS" endtime="20170417 18:19:00.351"></status>
</kw>
<status starttime="20170417 18:19:00.350" status="PASS" endtime="20170417 18:19:00.351"></status>
</kw>
<status starttime="20170417 18:19:00.349" status="PASS" endtime="20170417 18:19:00.351"></status>
</kw>
<status starttime="20170417 18:19:00.348" status="PASS" endtime="20170417 18:19:00.351"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:00.416">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:19:00.416">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:00.351" status="PASS" endtime="20170417 18:19:00.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:00.418">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:19:00.417" status="PASS" endtime="20170417 18:19:00.418"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:00.419">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:19:00.419" status="PASS" endtime="20170417 18:19:00.419"></status>
</kw>
<status starttime="20170417 18:19:00.418" status="PASS" endtime="20170417 18:19:00.419"></status>
</kw>
<status starttime="20170417 18:19:00.417" status="PASS" endtime="20170417 18:19:00.420"></status>
</kw>
<status starttime="20170417 18:19:00.416" status="PASS" endtime="20170417 18:19:00.420"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:00.420">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:00.167" status="PASS" endtime="20170417 18:19:00.420"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:00.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:00.420" status="PASS" endtime="20170417 18:19:00.421"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:00.421">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:19:00.421">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:19:00.421">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:19:00.421" status="PASS" endtime="20170417 18:19:00.421"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:00.422">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:19:00.166" status="PASS" endtime="20170417 18:19:00.422"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:00.422">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:19:00.166" status="PASS" endtime="20170417 18:19:00.422"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:19:00.423">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:19:00.422" status="FAIL" endtime="20170417 18:19:00.423"></status>
</kw>
<status starttime="20170417 18:19:00.165" status="FAIL" endtime="20170417 18:19:00.423"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:10.427">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:19:10.427" status="PASS" endtime="20170417 18:19:10.428"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:10.428">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:19:10.428" status="PASS" endtime="20170417 18:19:10.428"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:10.429">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:19:10.428" status="PASS" endtime="20170417 18:19:10.429"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:10.429">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:19:10.429" status="PASS" endtime="20170417 18:19:10.429"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:10.603">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:19:10.430" status="PASS" endtime="20170417 18:19:10.603"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:10.603">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:19:10.603">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:10.430" status="PASS" endtime="20170417 18:19:10.603"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:10.604">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:10.604" status="PASS" endtime="20170417 18:19:10.604"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:10.605">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:10.604" status="PASS" endtime="20170417 18:19:10.605"></status>
</kw>
<status starttime="20170417 18:19:10.426" status="PASS" endtime="20170417 18:19:10.605"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:10.606">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:19:10.606" status="PASS" endtime="20170417 18:19:10.606"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:10.608">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:19:10.608" status="PASS" endtime="20170417 18:19:10.608"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:10.610">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:19:10.609" status="PASS" endtime="20170417 18:19:10.610"></status>
</kw>
<status starttime="20170417 18:19:10.609" status="PASS" endtime="20170417 18:19:10.610"></status>
</kw>
<status starttime="20170417 18:19:10.607" status="PASS" endtime="20170417 18:19:10.610"></status>
</kw>
<status starttime="20170417 18:19:10.607" status="PASS" endtime="20170417 18:19:10.610"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:10.674">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:19:10.674">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:10.610" status="PASS" endtime="20170417 18:19:10.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:10.676">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:19:10.675" status="PASS" endtime="20170417 18:19:10.676"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:10.677">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:19:10.677" status="PASS" endtime="20170417 18:19:10.677"></status>
</kw>
<status starttime="20170417 18:19:10.676" status="PASS" endtime="20170417 18:19:10.677"></status>
</kw>
<status starttime="20170417 18:19:10.675" status="PASS" endtime="20170417 18:19:10.677"></status>
</kw>
<status starttime="20170417 18:19:10.675" status="PASS" endtime="20170417 18:19:10.677"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:10.677">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:10.425" status="PASS" endtime="20170417 18:19:10.678"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:10.678">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:10.678" status="PASS" endtime="20170417 18:19:10.678"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:10.679">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:19:10.679">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:19:10.679">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:19:10.678" status="PASS" endtime="20170417 18:19:10.679"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:10.679">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:19:10.425" status="PASS" endtime="20170417 18:19:10.679"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:10.679">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:19:10.424" status="PASS" endtime="20170417 18:19:10.679"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:19:10.680">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:19:10.680" status="FAIL" endtime="20170417 18:19:10.680"></status>
</kw>
<status starttime="20170417 18:19:10.423" status="FAIL" endtime="20170417 18:19:10.680"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:20.684">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:19:20.684" status="PASS" endtime="20170417 18:19:20.684"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:20.685">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:19:20.685" status="PASS" endtime="20170417 18:19:20.685"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:20.686">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:19:20.685" status="PASS" endtime="20170417 18:19:20.686"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:20.687">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:19:20.686" status="PASS" endtime="20170417 18:19:20.687"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:20.929">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:19:20.687" status="PASS" endtime="20170417 18:19:20.930"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:20.930">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:19:20.930">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:20.687" status="PASS" endtime="20170417 18:19:20.930"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:20.930">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:20.930" status="PASS" endtime="20170417 18:19:20.931"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:20.931">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:20.931" status="PASS" endtime="20170417 18:19:20.931"></status>
</kw>
<status starttime="20170417 18:19:20.683" status="PASS" endtime="20170417 18:19:20.931"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:20.932">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:19:20.932" status="PASS" endtime="20170417 18:19:20.932"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:20.934">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:19:20.933" status="PASS" endtime="20170417 18:19:20.934"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:20.935">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:19:20.935" status="PASS" endtime="20170417 18:19:20.935"></status>
</kw>
<status starttime="20170417 18:19:20.934" status="PASS" endtime="20170417 18:19:20.935"></status>
</kw>
<status starttime="20170417 18:19:20.933" status="PASS" endtime="20170417 18:19:20.935"></status>
</kw>
<status starttime="20170417 18:19:20.932" status="PASS" endtime="20170417 18:19:20.935"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:21.000">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:19:21.000">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:20.935" status="PASS" endtime="20170417 18:19:21.000"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:21.002">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:19:21.002" status="PASS" endtime="20170417 18:19:21.002"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:21.003">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:19:21.003" status="PASS" endtime="20170417 18:19:21.003"></status>
</kw>
<status starttime="20170417 18:19:21.002" status="PASS" endtime="20170417 18:19:21.003"></status>
</kw>
<status starttime="20170417 18:19:21.001" status="PASS" endtime="20170417 18:19:21.003"></status>
</kw>
<status starttime="20170417 18:19:21.001" status="PASS" endtime="20170417 18:19:21.003"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:21.004">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:20.682" status="PASS" endtime="20170417 18:19:21.004"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:21.004">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:21.004" status="PASS" endtime="20170417 18:19:21.004"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:21.005">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:19:21.005">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:19:21.005">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:19:21.005" status="PASS" endtime="20170417 18:19:21.005"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:21.005">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:19:20.682" status="PASS" endtime="20170417 18:19:21.005"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:21.006">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:19:20.681" status="PASS" endtime="20170417 18:19:21.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:19:21.006">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:19:21.006" status="FAIL" endtime="20170417 18:19:21.006"></status>
</kw>
<status starttime="20170417 18:19:20.681" status="FAIL" endtime="20170417 18:19:21.007"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:31.010">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:19:31.010" status="PASS" endtime="20170417 18:19:31.042"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:31.043">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:19:31.042" status="PASS" endtime="20170417 18:19:31.043"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:31.044">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:19:31.043" status="PASS" endtime="20170417 18:19:31.044"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:31.045">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:19:31.044" status="PASS" endtime="20170417 18:19:31.045"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:31.227">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:19:31.046" status="PASS" endtime="20170417 18:19:31.227"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:31.227">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:19:31.227">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:31.045" status="PASS" endtime="20170417 18:19:31.227"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:31.228">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:31.228" status="PASS" endtime="20170417 18:19:31.228"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:31.229">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:31.228" status="PASS" endtime="20170417 18:19:31.229"></status>
</kw>
<status starttime="20170417 18:19:31.009" status="PASS" endtime="20170417 18:19:31.229"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:31.229">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:19:31.229" status="PASS" endtime="20170417 18:19:31.229"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:31.231">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:19:31.231" status="PASS" endtime="20170417 18:19:31.232"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:31.232">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:19:31.232" status="PASS" endtime="20170417 18:19:31.232"></status>
</kw>
<status starttime="20170417 18:19:31.232" status="PASS" endtime="20170417 18:19:31.233"></status>
</kw>
<status starttime="20170417 18:19:31.230" status="PASS" endtime="20170417 18:19:31.233"></status>
</kw>
<status starttime="20170417 18:19:31.230" status="PASS" endtime="20170417 18:19:31.233"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:31.297">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:19:31.298">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:31.233" status="PASS" endtime="20170417 18:19:31.298"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:31.300">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:19:31.299" status="PASS" endtime="20170417 18:19:31.300"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:31.301">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:19:31.300" status="PASS" endtime="20170417 18:19:31.301"></status>
</kw>
<status starttime="20170417 18:19:31.300" status="PASS" endtime="20170417 18:19:31.301"></status>
</kw>
<status starttime="20170417 18:19:31.299" status="PASS" endtime="20170417 18:19:31.301"></status>
</kw>
<status starttime="20170417 18:19:31.298" status="PASS" endtime="20170417 18:19:31.301"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:31.301">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:31.009" status="PASS" endtime="20170417 18:19:31.301"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:31.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:31.302" status="PASS" endtime="20170417 18:19:31.302"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:31.302">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:19:31.303">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:19:31.303">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:19:31.302" status="PASS" endtime="20170417 18:19:31.303"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:31.303">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:19:31.008" status="PASS" endtime="20170417 18:19:31.303"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:31.303">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:19:31.008" status="PASS" endtime="20170417 18:19:31.303"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:19:31.304">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:19:31.303" status="FAIL" endtime="20170417 18:19:31.304"></status>
</kw>
<status starttime="20170417 18:19:31.007" status="FAIL" endtime="20170417 18:19:31.304"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:41.308">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:19:41.308" status="PASS" endtime="20170417 18:19:41.309"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:41.309">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:19:41.309" status="PASS" endtime="20170417 18:19:41.309"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:41.310">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:19:41.309" status="PASS" endtime="20170417 18:19:41.310"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:41.310">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:19:41.310" status="PASS" endtime="20170417 18:19:41.311"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:41.556">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:19:41.311" status="PASS" endtime="20170417 18:19:41.556"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:41.556">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:19:41.556">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:41.311" status="PASS" endtime="20170417 18:19:41.556"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:41.557">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:41.556" status="PASS" endtime="20170417 18:19:41.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:41.557">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:41.557" status="PASS" endtime="20170417 18:19:41.557"></status>
</kw>
<status starttime="20170417 18:19:41.307" status="PASS" endtime="20170417 18:19:41.558"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:41.558">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:19:41.558" status="PASS" endtime="20170417 18:19:41.558"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:41.561">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:19:41.560" status="PASS" endtime="20170417 18:19:41.561"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:41.561">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:19:41.561" status="PASS" endtime="20170417 18:19:41.562"></status>
</kw>
<status starttime="20170417 18:19:41.561" status="PASS" endtime="20170417 18:19:41.562"></status>
</kw>
<status starttime="20170417 18:19:41.559" status="PASS" endtime="20170417 18:19:41.562"></status>
</kw>
<status starttime="20170417 18:19:41.558" status="PASS" endtime="20170417 18:19:41.562"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:41.662">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:19:41.662">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:41.562" status="PASS" endtime="20170417 18:19:41.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:41.664">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:19:41.663" status="PASS" endtime="20170417 18:19:41.664"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:41.665">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:19:41.664" status="PASS" endtime="20170417 18:19:41.665"></status>
</kw>
<status starttime="20170417 18:19:41.664" status="PASS" endtime="20170417 18:19:41.665"></status>
</kw>
<status starttime="20170417 18:19:41.663" status="PASS" endtime="20170417 18:19:41.665"></status>
</kw>
<status starttime="20170417 18:19:41.662" status="PASS" endtime="20170417 18:19:41.665"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:41.665">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:41.306" status="PASS" endtime="20170417 18:19:41.665"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:41.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:41.665" status="PASS" endtime="20170417 18:19:41.666"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:41.667">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:19:41.667">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:19:41.667">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:19:41.666" status="PASS" endtime="20170417 18:19:41.667"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:41.667">${state} = Off</msg>
<status starttime="20170417 18:19:41.306" status="PASS" endtime="20170417 18:19:41.667"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:41.667">${boot_progress} = Off</msg>
<status starttime="20170417 18:19:41.305" status="PASS" endtime="20170417 18:19:41.668"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:19:41.668">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:19:41.668" status="FAIL" endtime="20170417 18:19:41.668"></status>
</kw>
<status starttime="20170417 18:19:41.305" status="FAIL" endtime="20170417 18:19:41.668"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:51.672">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:19:51.672" status="PASS" endtime="20170417 18:19:51.672"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:51.673">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:19:51.673" status="PASS" endtime="20170417 18:19:51.673"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:51.674">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:19:51.673" status="PASS" endtime="20170417 18:19:51.674"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:51.675">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:19:51.674" status="PASS" endtime="20170417 18:19:51.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:51.887">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:19:51.675" status="PASS" endtime="20170417 18:19:51.887"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:51.887">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:19:51.888">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:51.675" status="PASS" endtime="20170417 18:19:51.888"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:51.888">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:51.888" status="PASS" endtime="20170417 18:19:51.889"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:51.889">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:51.889" status="PASS" endtime="20170417 18:19:51.890"></status>
</kw>
<status starttime="20170417 18:19:51.671" status="PASS" endtime="20170417 18:19:51.890"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:51.891">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:19:51.890" status="PASS" endtime="20170417 18:19:51.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:51.893">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:19:51.892" status="PASS" endtime="20170417 18:19:51.893"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:51.895">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:19:51.894" status="PASS" endtime="20170417 18:19:51.895"></status>
</kw>
<status starttime="20170417 18:19:51.894" status="PASS" endtime="20170417 18:19:51.895"></status>
</kw>
<status starttime="20170417 18:19:51.892" status="PASS" endtime="20170417 18:19:51.895"></status>
</kw>
<status starttime="20170417 18:19:51.891" status="PASS" endtime="20170417 18:19:51.895"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:51.993">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:19:51.994">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:51.895" status="PASS" endtime="20170417 18:19:51.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:51.996">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:19:51.995" status="PASS" endtime="20170417 18:19:51.996"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:51.997">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:19:51.997" status="PASS" endtime="20170417 18:19:51.997"></status>
</kw>
<status starttime="20170417 18:19:51.996" status="PASS" endtime="20170417 18:19:51.997"></status>
</kw>
<status starttime="20170417 18:19:51.994" status="PASS" endtime="20170417 18:19:51.997"></status>
</kw>
<status starttime="20170417 18:19:51.994" status="PASS" endtime="20170417 18:19:51.997"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:51.998">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:19:51.670" status="PASS" endtime="20170417 18:19:51.998"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:19:51.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:19:51.998" status="PASS" endtime="20170417 18:19:51.998"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:19:51.999">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:19:51.999">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:19:51.999">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:19:51.998" status="PASS" endtime="20170417 18:19:51.999"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:51.999">${state} = Off</msg>
<status starttime="20170417 18:19:51.670" status="PASS" endtime="20170417 18:19:52.000"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:19:52.000">${boot_progress} = Off</msg>
<status starttime="20170417 18:19:51.669" status="PASS" endtime="20170417 18:19:52.000"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:19:52.001">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:19:52.000" status="FAIL" endtime="20170417 18:19:52.001"></status>
</kw>
<status starttime="20170417 18:19:51.669" status="FAIL" endtime="20170417 18:19:52.001"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:02.005">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:20:02.005" status="PASS" endtime="20170417 18:20:02.006"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:02.006">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:20:02.006" status="PASS" endtime="20170417 18:20:02.006"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:02.007">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:20:02.007" status="PASS" endtime="20170417 18:20:02.007"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:02.008">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:20:02.007" status="PASS" endtime="20170417 18:20:02.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:02.227">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:20:02.008" status="PASS" endtime="20170417 18:20:02.227"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:02.227">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:20:02.227">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:02.008" status="PASS" endtime="20170417 18:20:02.227"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:02.228">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:02.228" status="PASS" endtime="20170417 18:20:02.228"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:02.229">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:02.228" status="PASS" endtime="20170417 18:20:02.229"></status>
</kw>
<status starttime="20170417 18:20:02.004" status="PASS" endtime="20170417 18:20:02.229"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:02.230">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:20:02.229" status="PASS" endtime="20170417 18:20:02.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:02.232">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:20:02.231" status="PASS" endtime="20170417 18:20:02.232"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:02.233">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:20:02.232" status="PASS" endtime="20170417 18:20:02.233"></status>
</kw>
<status starttime="20170417 18:20:02.232" status="PASS" endtime="20170417 18:20:02.233"></status>
</kw>
<status starttime="20170417 18:20:02.230" status="PASS" endtime="20170417 18:20:02.233"></status>
</kw>
<status starttime="20170417 18:20:02.230" status="PASS" endtime="20170417 18:20:02.233"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:02.300">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:20:02.300">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:02.233" status="PASS" endtime="20170417 18:20:02.300"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:02.301">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:20:02.301" status="PASS" endtime="20170417 18:20:02.301"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:02.302">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:20:02.302" status="PASS" endtime="20170417 18:20:02.302"></status>
</kw>
<status starttime="20170417 18:20:02.302" status="PASS" endtime="20170417 18:20:02.302"></status>
</kw>
<status starttime="20170417 18:20:02.300" status="PASS" endtime="20170417 18:20:02.303"></status>
</kw>
<status starttime="20170417 18:20:02.300" status="PASS" endtime="20170417 18:20:02.303"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:02.303">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:02.004" status="PASS" endtime="20170417 18:20:02.303"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:02.303">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:02.303" status="PASS" endtime="20170417 18:20:02.303"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:02.304">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:20:02.304">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:20:02.304">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:20:02.304" status="PASS" endtime="20170417 18:20:02.304"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:02.304">${state} = Off</msg>
<status starttime="20170417 18:20:02.003" status="PASS" endtime="20170417 18:20:02.304"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:02.305">${boot_progress} = Off</msg>
<status starttime="20170417 18:20:02.002" status="PASS" endtime="20170417 18:20:02.305"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:20:02.305">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:20:02.305" status="FAIL" endtime="20170417 18:20:02.305"></status>
</kw>
<status starttime="20170417 18:20:02.002" status="FAIL" endtime="20170417 18:20:02.306"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:12.309">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:20:12.309" status="PASS" endtime="20170417 18:20:12.310"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:12.310">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:20:12.310" status="PASS" endtime="20170417 18:20:12.310"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:12.311">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:20:12.311" status="PASS" endtime="20170417 18:20:12.311"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:12.312">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:20:12.311" status="PASS" endtime="20170417 18:20:12.312"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:12.497">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:20:12.312" status="PASS" endtime="20170417 18:20:12.497"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:12.497">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:20:12.497">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:12.312" status="PASS" endtime="20170417 18:20:12.497"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:12.498">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:12.498" status="PASS" endtime="20170417 18:20:12.498"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:12.499">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:12.498" status="PASS" endtime="20170417 18:20:12.499"></status>
</kw>
<status starttime="20170417 18:20:12.308" status="PASS" endtime="20170417 18:20:12.499"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:12.499">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:20:12.499" status="PASS" endtime="20170417 18:20:12.499"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:12.501">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:20:12.501" status="PASS" endtime="20170417 18:20:12.501"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:12.502">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:20:12.502" status="PASS" endtime="20170417 18:20:12.502"></status>
</kw>
<status starttime="20170417 18:20:12.502" status="PASS" endtime="20170417 18:20:12.502"></status>
</kw>
<status starttime="20170417 18:20:12.500" status="PASS" endtime="20170417 18:20:12.503"></status>
</kw>
<status starttime="20170417 18:20:12.500" status="PASS" endtime="20170417 18:20:12.503"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:12.574">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:20:12.574">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:12.503" status="PASS" endtime="20170417 18:20:12.574"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:12.576">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:20:12.575" status="PASS" endtime="20170417 18:20:12.576"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:12.577">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:20:12.576" status="PASS" endtime="20170417 18:20:12.577"></status>
</kw>
<status starttime="20170417 18:20:12.576" status="PASS" endtime="20170417 18:20:12.577"></status>
</kw>
<status starttime="20170417 18:20:12.575" status="PASS" endtime="20170417 18:20:12.577"></status>
</kw>
<status starttime="20170417 18:20:12.574" status="PASS" endtime="20170417 18:20:12.577"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:12.577">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:12.308" status="PASS" endtime="20170417 18:20:12.577"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:12.578">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:12.578" status="PASS" endtime="20170417 18:20:12.578"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:12.579">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:20:12.579">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:20:12.579">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:20:12.578" status="PASS" endtime="20170417 18:20:12.579"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:12.579">${state} = Off</msg>
<status starttime="20170417 18:20:12.307" status="PASS" endtime="20170417 18:20:12.579"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:12.579">${boot_progress} = Off</msg>
<status starttime="20170417 18:20:12.307" status="PASS" endtime="20170417 18:20:12.579"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:20:12.580">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:20:12.580" status="FAIL" endtime="20170417 18:20:12.580"></status>
</kw>
<status starttime="20170417 18:20:12.306" status="FAIL" endtime="20170417 18:20:12.580"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:22.584">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:20:22.584" status="PASS" endtime="20170417 18:20:22.585"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:22.585">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:20:22.585" status="PASS" endtime="20170417 18:20:22.585"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:22.586">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:20:22.586" status="PASS" endtime="20170417 18:20:22.586"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:22.587">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:20:22.586" status="PASS" endtime="20170417 18:20:22.587"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:22.991">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:20:22.587" status="PASS" endtime="20170417 18:20:22.991"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:22.991">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:20:22.991">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:22.587" status="PASS" endtime="20170417 18:20:22.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:22.992">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:22.992" status="PASS" endtime="20170417 18:20:22.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:22.993">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:22.993" status="PASS" endtime="20170417 18:20:22.993"></status>
</kw>
<status starttime="20170417 18:20:22.583" status="PASS" endtime="20170417 18:20:22.993"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:22.994">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:20:22.993" status="PASS" endtime="20170417 18:20:22.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:22.996">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:20:22.995" status="PASS" endtime="20170417 18:20:22.996"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:22.997">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:20:22.997" status="PASS" endtime="20170417 18:20:22.997"></status>
</kw>
<status starttime="20170417 18:20:22.996" status="PASS" endtime="20170417 18:20:22.997"></status>
</kw>
<status starttime="20170417 18:20:22.995" status="PASS" endtime="20170417 18:20:22.997"></status>
</kw>
<status starttime="20170417 18:20:22.994" status="PASS" endtime="20170417 18:20:22.997"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:23.165">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:20:23.165">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:22.997" status="PASS" endtime="20170417 18:20:23.166"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:23.167">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:20:23.167" status="PASS" endtime="20170417 18:20:23.167"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:23.168">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:20:23.168" status="PASS" endtime="20170417 18:20:23.169"></status>
</kw>
<status starttime="20170417 18:20:23.167" status="PASS" endtime="20170417 18:20:23.169"></status>
</kw>
<status starttime="20170417 18:20:23.166" status="PASS" endtime="20170417 18:20:23.169"></status>
</kw>
<status starttime="20170417 18:20:23.166" status="PASS" endtime="20170417 18:20:23.169"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:23.169">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:22.582" status="PASS" endtime="20170417 18:20:23.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:23.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:23.169" status="PASS" endtime="20170417 18:20:23.170"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:23.170">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:20:23.170">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:20:23.170">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:20:23.170" status="PASS" endtime="20170417 18:20:23.171"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:23.171">${state} = Off</msg>
<status starttime="20170417 18:20:22.582" status="PASS" endtime="20170417 18:20:23.171"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:23.171">${boot_progress} = Off</msg>
<status starttime="20170417 18:20:22.581" status="PASS" endtime="20170417 18:20:23.171"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:20:23.172">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:20:23.171" status="FAIL" endtime="20170417 18:20:23.172"></status>
</kw>
<status starttime="20170417 18:20:22.581" status="FAIL" endtime="20170417 18:20:23.172"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:33.176">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:20:33.175" status="PASS" endtime="20170417 18:20:33.176"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:33.177">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:20:33.177" status="PASS" endtime="20170417 18:20:33.177"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:33.178">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:20:33.177" status="PASS" endtime="20170417 18:20:33.178"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:33.178">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:20:33.178" status="PASS" endtime="20170417 18:20:33.178"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:33.407">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:20:33.179" status="PASS" endtime="20170417 18:20:33.408"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:33.408">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:20:33.408">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:33.179" status="PASS" endtime="20170417 18:20:33.408"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:33.408">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:33.408" status="PASS" endtime="20170417 18:20:33.408"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:33.409">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:33.409" status="PASS" endtime="20170417 18:20:33.409"></status>
</kw>
<status starttime="20170417 18:20:33.175" status="PASS" endtime="20170417 18:20:33.409"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:33.410">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:20:33.410" status="PASS" endtime="20170417 18:20:33.410"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:33.412">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:20:33.412" status="PASS" endtime="20170417 18:20:33.412"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:33.413">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:20:33.413" status="PASS" endtime="20170417 18:20:33.413"></status>
</kw>
<status starttime="20170417 18:20:33.412" status="PASS" endtime="20170417 18:20:33.413"></status>
</kw>
<status starttime="20170417 18:20:33.411" status="PASS" endtime="20170417 18:20:33.413"></status>
</kw>
<status starttime="20170417 18:20:33.410" status="PASS" endtime="20170417 18:20:33.414"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:33.478">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:20:33.478">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:33.414" status="PASS" endtime="20170417 18:20:33.478"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:33.480">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:20:33.479" status="PASS" endtime="20170417 18:20:33.480"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:33.481">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:20:33.481" status="PASS" endtime="20170417 18:20:33.481"></status>
</kw>
<status starttime="20170417 18:20:33.480" status="PASS" endtime="20170417 18:20:33.481"></status>
</kw>
<status starttime="20170417 18:20:33.479" status="PASS" endtime="20170417 18:20:33.481"></status>
</kw>
<status starttime="20170417 18:20:33.478" status="PASS" endtime="20170417 18:20:33.481"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:33.481">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:33.174" status="PASS" endtime="20170417 18:20:33.481"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:33.482">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:33.482" status="PASS" endtime="20170417 18:20:33.482"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:33.483">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:20:33.483">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:20:33.483">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:20:33.482" status="PASS" endtime="20170417 18:20:33.483"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:33.483">${state} = Off</msg>
<status starttime="20170417 18:20:33.174" status="PASS" endtime="20170417 18:20:33.483"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:33.483">${boot_progress} = Off</msg>
<status starttime="20170417 18:20:33.173" status="PASS" endtime="20170417 18:20:33.483"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:20:33.484">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:20:33.484" status="FAIL" endtime="20170417 18:20:33.484"></status>
</kw>
<status starttime="20170417 18:20:33.173" status="FAIL" endtime="20170417 18:20:33.484"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:43.488">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:20:43.488" status="PASS" endtime="20170417 18:20:43.488"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:43.489">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:20:43.489" status="PASS" endtime="20170417 18:20:43.489"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:43.490">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:20:43.489" status="PASS" endtime="20170417 18:20:43.490"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:43.490">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:20:43.490" status="PASS" endtime="20170417 18:20:43.490"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:43.666">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:20:43.491" status="PASS" endtime="20170417 18:20:43.666"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:43.666">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:20:43.666">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:43.491" status="PASS" endtime="20170417 18:20:43.666"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:43.667">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:43.666" status="PASS" endtime="20170417 18:20:43.667"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:43.668">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:43.667" status="PASS" endtime="20170417 18:20:43.669"></status>
</kw>
<status starttime="20170417 18:20:43.487" status="PASS" endtime="20170417 18:20:43.669"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:43.670">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:20:43.669" status="PASS" endtime="20170417 18:20:43.670"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:43.673">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:20:43.672" status="PASS" endtime="20170417 18:20:43.673"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:43.674">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:20:43.674" status="PASS" endtime="20170417 18:20:43.674"></status>
</kw>
<status starttime="20170417 18:20:43.673" status="PASS" endtime="20170417 18:20:43.674"></status>
</kw>
<status starttime="20170417 18:20:43.671" status="PASS" endtime="20170417 18:20:43.674"></status>
</kw>
<status starttime="20170417 18:20:43.670" status="PASS" endtime="20170417 18:20:43.674"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:43.739">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:20:43.739">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:43.674" status="PASS" endtime="20170417 18:20:43.740"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:43.741">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:20:43.741" status="PASS" endtime="20170417 18:20:43.741"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:43.742">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:20:43.742" status="PASS" endtime="20170417 18:20:43.742"></status>
</kw>
<status starttime="20170417 18:20:43.741" status="PASS" endtime="20170417 18:20:43.742"></status>
</kw>
<status starttime="20170417 18:20:43.740" status="PASS" endtime="20170417 18:20:43.742"></status>
</kw>
<status starttime="20170417 18:20:43.740" status="PASS" endtime="20170417 18:20:43.742"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:43.743">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:43.486" status="PASS" endtime="20170417 18:20:43.743"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:43.743">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:43.743" status="PASS" endtime="20170417 18:20:43.743"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:43.744">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:20:43.744">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:20:43.744">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:20:43.744" status="PASS" endtime="20170417 18:20:43.744"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:43.744">${state} = Off</msg>
<status starttime="20170417 18:20:43.486" status="PASS" endtime="20170417 18:20:43.744"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:43.745">${boot_progress} = Off</msg>
<status starttime="20170417 18:20:43.485" status="PASS" endtime="20170417 18:20:43.745"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:20:43.745">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:20:43.745" status="FAIL" endtime="20170417 18:20:43.745"></status>
</kw>
<status starttime="20170417 18:20:43.485" status="FAIL" endtime="20170417 18:20:43.745"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:53.750">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:20:53.749" status="PASS" endtime="20170417 18:20:53.750"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:53.751">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:20:53.750" status="PASS" endtime="20170417 18:20:53.751"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:53.751">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:20:53.751" status="PASS" endtime="20170417 18:20:53.751"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:53.752">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:20:53.752" status="PASS" endtime="20170417 18:20:53.752"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:53.930">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:20:53.753" status="PASS" endtime="20170417 18:20:53.930"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:53.930">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:20:53.930">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:53.752" status="PASS" endtime="20170417 18:20:53.930"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:53.931">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:53.931" status="PASS" endtime="20170417 18:20:53.931"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:53.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:53.931" status="PASS" endtime="20170417 18:20:53.932"></status>
</kw>
<status starttime="20170417 18:20:53.749" status="PASS" endtime="20170417 18:20:53.932"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:53.932">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:20:53.932" status="PASS" endtime="20170417 18:20:53.932"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:53.934">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:20:53.934" status="PASS" endtime="20170417 18:20:53.935"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:53.935">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:20:53.935" status="PASS" endtime="20170417 18:20:53.936"></status>
</kw>
<status starttime="20170417 18:20:53.935" status="PASS" endtime="20170417 18:20:53.936"></status>
</kw>
<status starttime="20170417 18:20:53.933" status="PASS" endtime="20170417 18:20:53.936"></status>
</kw>
<status starttime="20170417 18:20:53.933" status="PASS" endtime="20170417 18:20:53.936"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:54.000">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:20:54.000">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:53.936" status="PASS" endtime="20170417 18:20:54.000"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:54.003">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:20:54.003" status="PASS" endtime="20170417 18:20:54.003"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:54.004">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:20:54.004" status="PASS" endtime="20170417 18:20:54.004"></status>
</kw>
<status starttime="20170417 18:20:54.003" status="PASS" endtime="20170417 18:20:54.004"></status>
</kw>
<status starttime="20170417 18:20:54.001" status="PASS" endtime="20170417 18:20:54.004"></status>
</kw>
<status starttime="20170417 18:20:54.000" status="PASS" endtime="20170417 18:20:54.005"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:54.005">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:20:53.748" status="PASS" endtime="20170417 18:20:54.005"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:20:54.005">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:20:54.005" status="PASS" endtime="20170417 18:20:54.005"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:20:54.006">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:20:54.006">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:20:54.006">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:20:54.006" status="PASS" endtime="20170417 18:20:54.006"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:54.006">${state} = Off</msg>
<status starttime="20170417 18:20:53.747" status="PASS" endtime="20170417 18:20:54.006"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:20:54.007">${boot_progress} = Off</msg>
<status starttime="20170417 18:20:53.747" status="PASS" endtime="20170417 18:20:54.007"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:20:54.007">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:20:54.007" status="FAIL" endtime="20170417 18:20:54.007"></status>
</kw>
<status starttime="20170417 18:20:53.746" status="FAIL" endtime="20170417 18:20:54.008"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:04.011">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:21:04.011" status="PASS" endtime="20170417 18:21:04.012"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:04.012">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:21:04.012" status="PASS" endtime="20170417 18:21:04.012"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:04.013">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:21:04.012" status="PASS" endtime="20170417 18:21:04.013"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:04.013">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:21:04.013" status="PASS" endtime="20170417 18:21:04.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:04.235">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:21:04.014" status="PASS" endtime="20170417 18:21:04.236"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:04.236">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:21:04.236">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:04.014" status="PASS" endtime="20170417 18:21:04.236"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:04.236">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:04.236" status="PASS" endtime="20170417 18:21:04.237"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:04.237">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:04.237" status="PASS" endtime="20170417 18:21:04.237"></status>
</kw>
<status starttime="20170417 18:21:04.010" status="PASS" endtime="20170417 18:21:04.237"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:04.238">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:21:04.238" status="PASS" endtime="20170417 18:21:04.238"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:04.240">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:21:04.240" status="PASS" endtime="20170417 18:21:04.240"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:04.241">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:21:04.241" status="PASS" endtime="20170417 18:21:04.241"></status>
</kw>
<status starttime="20170417 18:21:04.241" status="PASS" endtime="20170417 18:21:04.242"></status>
</kw>
<status starttime="20170417 18:21:04.239" status="PASS" endtime="20170417 18:21:04.242"></status>
</kw>
<status starttime="20170417 18:21:04.238" status="PASS" endtime="20170417 18:21:04.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:04.351">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:21:04.351">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:04.242" status="PASS" endtime="20170417 18:21:04.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:04.353">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:21:04.352" status="PASS" endtime="20170417 18:21:04.353"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:04.354">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:21:04.353" status="PASS" endtime="20170417 18:21:04.354"></status>
</kw>
<status starttime="20170417 18:21:04.353" status="PASS" endtime="20170417 18:21:04.354"></status>
</kw>
<status starttime="20170417 18:21:04.352" status="PASS" endtime="20170417 18:21:04.354"></status>
</kw>
<status starttime="20170417 18:21:04.351" status="PASS" endtime="20170417 18:21:04.354"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:04.354">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:04.010" status="PASS" endtime="20170417 18:21:04.354"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:04.355">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:04.354" status="PASS" endtime="20170417 18:21:04.355"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:04.355">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:21:04.355">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:21:04.356">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:21:04.355" status="PASS" endtime="20170417 18:21:04.356"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:04.356">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:21:04.009" status="PASS" endtime="20170417 18:21:04.356"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:04.356">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:21:04.009" status="PASS" endtime="20170417 18:21:04.356"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:21:04.357">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:21:04.356" status="FAIL" endtime="20170417 18:21:04.357"></status>
</kw>
<status starttime="20170417 18:21:04.008" status="FAIL" endtime="20170417 18:21:04.357"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:14.361">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:21:14.360" status="PASS" endtime="20170417 18:21:14.361"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:14.362">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:21:14.361" status="PASS" endtime="20170417 18:21:14.362"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:14.362">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:21:14.362" status="PASS" endtime="20170417 18:21:14.362"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:14.363">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:21:14.363" status="PASS" endtime="20170417 18:21:14.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:14.546">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:21:14.364" status="PASS" endtime="20170417 18:21:14.546"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:14.546">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:21:14.546">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:14.363" status="PASS" endtime="20170417 18:21:14.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:14.547">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:14.546" status="PASS" endtime="20170417 18:21:14.547"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:14.547">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:14.547" status="PASS" endtime="20170417 18:21:14.547"></status>
</kw>
<status starttime="20170417 18:21:14.360" status="PASS" endtime="20170417 18:21:14.548"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:14.548">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:21:14.548" status="PASS" endtime="20170417 18:21:14.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:14.550">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:21:14.550" status="PASS" endtime="20170417 18:21:14.550"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:14.551">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:21:14.551" status="PASS" endtime="20170417 18:21:14.551"></status>
</kw>
<status starttime="20170417 18:21:14.550" status="PASS" endtime="20170417 18:21:14.551"></status>
</kw>
<status starttime="20170417 18:21:14.549" status="PASS" endtime="20170417 18:21:14.551"></status>
</kw>
<status starttime="20170417 18:21:14.548" status="PASS" endtime="20170417 18:21:14.552"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:14.618">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:21:14.618">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:14.552" status="PASS" endtime="20170417 18:21:14.618"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:14.620">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:21:14.619" status="PASS" endtime="20170417 18:21:14.620"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:14.621">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:21:14.620" status="PASS" endtime="20170417 18:21:14.621"></status>
</kw>
<status starttime="20170417 18:21:14.620" status="PASS" endtime="20170417 18:21:14.621"></status>
</kw>
<status starttime="20170417 18:21:14.619" status="PASS" endtime="20170417 18:21:14.621"></status>
</kw>
<status starttime="20170417 18:21:14.618" status="PASS" endtime="20170417 18:21:14.621"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:14.621">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:14.359" status="PASS" endtime="20170417 18:21:14.622"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:14.622">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:14.622" status="PASS" endtime="20170417 18:21:14.622"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:14.623">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:21:14.623">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:21:14.623">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:21:14.622" status="PASS" endtime="20170417 18:21:14.623"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:14.623">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:21:14.359" status="PASS" endtime="20170417 18:21:14.623"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:14.623">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:21:14.358" status="PASS" endtime="20170417 18:21:14.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:21:14.624">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:21:14.624" status="FAIL" endtime="20170417 18:21:14.624"></status>
</kw>
<status starttime="20170417 18:21:14.357" status="FAIL" endtime="20170417 18:21:14.624"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:24.628">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:21:24.628" status="PASS" endtime="20170417 18:21:24.629"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:24.629">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:21:24.629" status="PASS" endtime="20170417 18:21:24.630"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:24.630">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:21:24.630" status="PASS" endtime="20170417 18:21:24.630"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:24.631">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:21:24.630" status="PASS" endtime="20170417 18:21:24.631"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:24.826">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:21:24.631" status="PASS" endtime="20170417 18:21:24.826"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:24.826">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:21:24.826">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:24.631" status="PASS" endtime="20170417 18:21:24.826"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:24.827">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:24.826" status="PASS" endtime="20170417 18:21:24.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:24.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:24.827" status="PASS" endtime="20170417 18:21:24.827"></status>
</kw>
<status starttime="20170417 18:21:24.627" status="PASS" endtime="20170417 18:21:24.828"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:24.828">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:21:24.828" status="PASS" endtime="20170417 18:21:24.828"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:24.830">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:21:24.830" status="PASS" endtime="20170417 18:21:24.830"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:24.831">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:21:24.831" status="PASS" endtime="20170417 18:21:24.831"></status>
</kw>
<status starttime="20170417 18:21:24.830" status="PASS" endtime="20170417 18:21:24.831"></status>
</kw>
<status starttime="20170417 18:21:24.829" status="PASS" endtime="20170417 18:21:24.831"></status>
</kw>
<status starttime="20170417 18:21:24.828" status="PASS" endtime="20170417 18:21:24.832"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:24.896">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:21:24.896">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:24.832" status="PASS" endtime="20170417 18:21:24.896"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:24.898">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:21:24.898" status="PASS" endtime="20170417 18:21:24.898"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:24.899">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:21:24.899" status="PASS" endtime="20170417 18:21:24.900"></status>
</kw>
<status starttime="20170417 18:21:24.898" status="PASS" endtime="20170417 18:21:24.900"></status>
</kw>
<status starttime="20170417 18:21:24.897" status="PASS" endtime="20170417 18:21:24.900"></status>
</kw>
<status starttime="20170417 18:21:24.897" status="PASS" endtime="20170417 18:21:24.900"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:24.900">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:24.626" status="PASS" endtime="20170417 18:21:24.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:24.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:24.900" status="PASS" endtime="20170417 18:21:24.901"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:24.901">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:21:24.901">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:21:24.901">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:21:24.901" status="PASS" endtime="20170417 18:21:24.901"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:24.902">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:21:24.626" status="PASS" endtime="20170417 18:21:24.902"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:24.902">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:21:24.625" status="PASS" endtime="20170417 18:21:24.902"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:21:24.903">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:21:24.902" status="FAIL" endtime="20170417 18:21:24.903"></status>
</kw>
<status starttime="20170417 18:21:24.625" status="FAIL" endtime="20170417 18:21:24.903"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:34.907">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:21:34.906" status="PASS" endtime="20170417 18:21:34.907"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:34.908">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:21:34.907" status="PASS" endtime="20170417 18:21:34.908"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:34.908">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:21:34.908" status="PASS" endtime="20170417 18:21:34.908"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:34.909">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:21:34.908" status="PASS" endtime="20170417 18:21:34.909"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:35.287">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:21:34.910" status="PASS" endtime="20170417 18:21:35.287"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:35.287">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:21:35.288">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:34.909" status="PASS" endtime="20170417 18:21:35.288"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:35.288">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:35.288" status="PASS" endtime="20170417 18:21:35.288"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:35.289">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:35.289" status="PASS" endtime="20170417 18:21:35.289"></status>
</kw>
<status starttime="20170417 18:21:34.906" status="PASS" endtime="20170417 18:21:35.289"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:35.290">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:21:35.290" status="PASS" endtime="20170417 18:21:35.290"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:35.292">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:21:35.292" status="PASS" endtime="20170417 18:21:35.292"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:35.293">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:21:35.293" status="PASS" endtime="20170417 18:21:35.293"></status>
</kw>
<status starttime="20170417 18:21:35.293" status="PASS" endtime="20170417 18:21:35.293"></status>
</kw>
<status starttime="20170417 18:21:35.291" status="PASS" endtime="20170417 18:21:35.294"></status>
</kw>
<status starttime="20170417 18:21:35.290" status="PASS" endtime="20170417 18:21:35.294"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:35.397">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:21:35.397">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:35.294" status="PASS" endtime="20170417 18:21:35.397"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:35.399">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:21:35.398" status="PASS" endtime="20170417 18:21:35.399"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:35.400">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:21:35.400" status="PASS" endtime="20170417 18:21:35.400"></status>
</kw>
<status starttime="20170417 18:21:35.399" status="PASS" endtime="20170417 18:21:35.400"></status>
</kw>
<status starttime="20170417 18:21:35.398" status="PASS" endtime="20170417 18:21:35.400"></status>
</kw>
<status starttime="20170417 18:21:35.397" status="PASS" endtime="20170417 18:21:35.400"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:35.400">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:34.905" status="PASS" endtime="20170417 18:21:35.400"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:35.401">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:35.401" status="PASS" endtime="20170417 18:21:35.401"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:35.402">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:21:35.402">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:21:35.402">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:21:35.401" status="PASS" endtime="20170417 18:21:35.402"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:35.402">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:21:34.904" status="PASS" endtime="20170417 18:21:35.402"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:35.402">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:21:34.904" status="PASS" endtime="20170417 18:21:35.402"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:21:35.403">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:21:35.403" status="FAIL" endtime="20170417 18:21:35.403"></status>
</kw>
<status starttime="20170417 18:21:34.903" status="FAIL" endtime="20170417 18:21:35.403"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:45.407">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:21:45.407" status="PASS" endtime="20170417 18:21:45.408"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:45.408">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:21:45.408" status="PASS" endtime="20170417 18:21:45.408"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:45.409">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:21:45.408" status="PASS" endtime="20170417 18:21:45.409"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:45.409">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:21:45.409" status="PASS" endtime="20170417 18:21:45.409"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:45.751">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:21:45.410" status="PASS" endtime="20170417 18:21:45.751"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:45.751">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:21:45.751">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:45.410" status="PASS" endtime="20170417 18:21:45.751"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:45.752">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:45.752" status="PASS" endtime="20170417 18:21:45.752"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:45.753">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:45.752" status="PASS" endtime="20170417 18:21:45.753"></status>
</kw>
<status starttime="20170417 18:21:45.406" status="PASS" endtime="20170417 18:21:45.753"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:45.754">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:21:45.753" status="PASS" endtime="20170417 18:21:45.754"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:45.756">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:21:45.755" status="PASS" endtime="20170417 18:21:45.756"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:45.756">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:21:45.756" status="PASS" endtime="20170417 18:21:45.757"></status>
</kw>
<status starttime="20170417 18:21:45.756" status="PASS" endtime="20170417 18:21:45.757"></status>
</kw>
<status starttime="20170417 18:21:45.754" status="PASS" endtime="20170417 18:21:45.757"></status>
</kw>
<status starttime="20170417 18:21:45.754" status="PASS" endtime="20170417 18:21:45.757"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:45.823">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:21:45.823">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:45.757" status="PASS" endtime="20170417 18:21:45.823"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:45.825">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:21:45.824" status="PASS" endtime="20170417 18:21:45.825"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:45.826">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:21:45.825" status="PASS" endtime="20170417 18:21:45.826"></status>
</kw>
<status starttime="20170417 18:21:45.825" status="PASS" endtime="20170417 18:21:45.826"></status>
</kw>
<status starttime="20170417 18:21:45.824" status="PASS" endtime="20170417 18:21:45.826"></status>
</kw>
<status starttime="20170417 18:21:45.823" status="PASS" endtime="20170417 18:21:45.826"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:45.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:45.405" status="PASS" endtime="20170417 18:21:45.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:45.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:45.827" status="PASS" endtime="20170417 18:21:45.827"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:45.828">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:21:45.828">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:21:45.828">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:21:45.827" status="PASS" endtime="20170417 18:21:45.828"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:45.828">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:21:45.405" status="PASS" endtime="20170417 18:21:45.828"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:45.828">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:21:45.404" status="PASS" endtime="20170417 18:21:45.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:21:45.829">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:21:45.829" status="FAIL" endtime="20170417 18:21:45.829"></status>
</kw>
<status starttime="20170417 18:21:45.404" status="FAIL" endtime="20170417 18:21:45.829"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:55.833">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:21:55.833" status="PASS" endtime="20170417 18:21:55.834"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:55.835">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:21:55.834" status="PASS" endtime="20170417 18:21:55.835"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:55.835">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:21:55.835" status="PASS" endtime="20170417 18:21:55.835"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:55.836">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:21:55.835" status="PASS" endtime="20170417 18:21:55.836"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:56.009">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:21:55.836" status="PASS" endtime="20170417 18:21:56.009"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:56.009">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:21:56.010">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:55.836" status="PASS" endtime="20170417 18:21:56.010"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:56.010">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:56.010" status="PASS" endtime="20170417 18:21:56.010"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:56.011">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:56.011" status="PASS" endtime="20170417 18:21:56.011"></status>
</kw>
<status starttime="20170417 18:21:55.832" status="PASS" endtime="20170417 18:21:56.011"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:56.012">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:21:56.011" status="PASS" endtime="20170417 18:21:56.012"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:56.014">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:21:56.013" status="PASS" endtime="20170417 18:21:56.014"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:56.015">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:21:56.015" status="PASS" endtime="20170417 18:21:56.015"></status>
</kw>
<status starttime="20170417 18:21:56.014" status="PASS" endtime="20170417 18:21:56.015"></status>
</kw>
<status starttime="20170417 18:21:56.013" status="PASS" endtime="20170417 18:21:56.015"></status>
</kw>
<status starttime="20170417 18:21:56.012" status="PASS" endtime="20170417 18:21:56.015"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:56.081">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:21:56.081">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:56.015" status="PASS" endtime="20170417 18:21:56.081"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:56.083">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:21:56.082" status="PASS" endtime="20170417 18:21:56.083"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:56.084">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:21:56.083" status="PASS" endtime="20170417 18:21:56.084"></status>
</kw>
<status starttime="20170417 18:21:56.083" status="PASS" endtime="20170417 18:21:56.084"></status>
</kw>
<status starttime="20170417 18:21:56.082" status="PASS" endtime="20170417 18:21:56.084"></status>
</kw>
<status starttime="20170417 18:21:56.081" status="PASS" endtime="20170417 18:21:56.084"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:56.084">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:21:55.831" status="PASS" endtime="20170417 18:21:56.084"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:21:56.085">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:21:56.085" status="PASS" endtime="20170417 18:21:56.085"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:21:56.086">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:21:56.086">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:21:56.086">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:21:56.085" status="PASS" endtime="20170417 18:21:56.086"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:56.086">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:21:55.831" status="PASS" endtime="20170417 18:21:56.086"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:21:56.086">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:21:55.830" status="PASS" endtime="20170417 18:21:56.086"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:21:56.087">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:21:56.087" status="FAIL" endtime="20170417 18:21:56.087"></status>
</kw>
<status starttime="20170417 18:21:55.830" status="FAIL" endtime="20170417 18:21:56.087"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:06.091">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:22:06.091" status="PASS" endtime="20170417 18:22:06.092"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:06.092">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:22:06.092" status="PASS" endtime="20170417 18:22:06.092"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:06.093">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:22:06.093" status="PASS" endtime="20170417 18:22:06.093"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:06.094">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:22:06.093" status="PASS" endtime="20170417 18:22:06.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:06.274">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:22:06.095" status="PASS" endtime="20170417 18:22:06.274"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:06.274">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:22:06.274">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:06.094" status="PASS" endtime="20170417 18:22:06.274"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:06.275">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:06.274" status="PASS" endtime="20170417 18:22:06.275"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:06.275">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:06.275" status="PASS" endtime="20170417 18:22:06.275"></status>
</kw>
<status starttime="20170417 18:22:06.090" status="PASS" endtime="20170417 18:22:06.275"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:06.276">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:22:06.276" status="PASS" endtime="20170417 18:22:06.276"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:06.278">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:22:06.278" status="PASS" endtime="20170417 18:22:06.278"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:06.279">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:22:06.279" status="PASS" endtime="20170417 18:22:06.279"></status>
</kw>
<status starttime="20170417 18:22:06.279" status="PASS" endtime="20170417 18:22:06.280"></status>
</kw>
<status starttime="20170417 18:22:06.277" status="PASS" endtime="20170417 18:22:06.280"></status>
</kw>
<status starttime="20170417 18:22:06.276" status="PASS" endtime="20170417 18:22:06.280"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:06.344">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:22:06.344">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:06.280" status="PASS" endtime="20170417 18:22:06.344"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:06.346">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:22:06.345" status="PASS" endtime="20170417 18:22:06.346"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:06.347">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:22:06.347" status="PASS" endtime="20170417 18:22:06.347"></status>
</kw>
<status starttime="20170417 18:22:06.346" status="PASS" endtime="20170417 18:22:06.347"></status>
</kw>
<status starttime="20170417 18:22:06.345" status="PASS" endtime="20170417 18:22:06.347"></status>
</kw>
<status starttime="20170417 18:22:06.345" status="PASS" endtime="20170417 18:22:06.347"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:06.347">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:06.089" status="PASS" endtime="20170417 18:22:06.347"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:06.348">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:06.348" status="PASS" endtime="20170417 18:22:06.348"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:06.349">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:22:06.349">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:22:06.349">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:22:06.348" status="PASS" endtime="20170417 18:22:06.349"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:06.349">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:22:06.089" status="PASS" endtime="20170417 18:22:06.349"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:06.349">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:22:06.088" status="PASS" endtime="20170417 18:22:06.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:22:06.350">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:22:06.350" status="FAIL" endtime="20170417 18:22:06.350"></status>
</kw>
<status starttime="20170417 18:22:06.088" status="FAIL" endtime="20170417 18:22:06.350"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:16.354">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:22:16.354" status="PASS" endtime="20170417 18:22:16.355"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:16.355">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:22:16.355" status="PASS" endtime="20170417 18:22:16.355"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:16.356">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:22:16.356" status="PASS" endtime="20170417 18:22:16.356"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:16.357">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:22:16.356" status="PASS" endtime="20170417 18:22:16.357"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:16.569">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:22:16.357" status="PASS" endtime="20170417 18:22:16.569"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:16.569">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:22:16.570">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:16.357" status="PASS" endtime="20170417 18:22:16.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:16.570">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:16.570" status="PASS" endtime="20170417 18:22:16.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:16.571">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:16.571" status="PASS" endtime="20170417 18:22:16.571"></status>
</kw>
<status starttime="20170417 18:22:16.353" status="PASS" endtime="20170417 18:22:16.571"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:16.572">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:22:16.571" status="PASS" endtime="20170417 18:22:16.572"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:16.574">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:22:16.573" status="PASS" endtime="20170417 18:22:16.574"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:16.575">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:22:16.575" status="PASS" endtime="20170417 18:22:16.575"></status>
</kw>
<status starttime="20170417 18:22:16.574" status="PASS" endtime="20170417 18:22:16.575"></status>
</kw>
<status starttime="20170417 18:22:16.572" status="PASS" endtime="20170417 18:22:16.575"></status>
</kw>
<status starttime="20170417 18:22:16.572" status="PASS" endtime="20170417 18:22:16.575"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:16.640">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:22:16.640">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:16.575" status="PASS" endtime="20170417 18:22:16.640"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:16.642">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:22:16.641" status="PASS" endtime="20170417 18:22:16.642"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:16.643">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:22:16.643" status="PASS" endtime="20170417 18:22:16.643"></status>
</kw>
<status starttime="20170417 18:22:16.642" status="PASS" endtime="20170417 18:22:16.643"></status>
</kw>
<status starttime="20170417 18:22:16.641" status="PASS" endtime="20170417 18:22:16.643"></status>
</kw>
<status starttime="20170417 18:22:16.640" status="PASS" endtime="20170417 18:22:16.643"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:16.643">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:16.353" status="PASS" endtime="20170417 18:22:16.643"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:16.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:16.644" status="PASS" endtime="20170417 18:22:16.644"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:16.645">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:22:16.645">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:22:16.645">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:22:16.644" status="PASS" endtime="20170417 18:22:16.645"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:16.645">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:22:16.352" status="PASS" endtime="20170417 18:22:16.645"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:16.645">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:22:16.352" status="PASS" endtime="20170417 18:22:16.645"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:22:16.646">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:22:16.645" status="FAIL" endtime="20170417 18:22:16.646"></status>
</kw>
<status starttime="20170417 18:22:16.351" status="FAIL" endtime="20170417 18:22:16.646"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:26.650">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:22:26.650" status="PASS" endtime="20170417 18:22:26.651"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:26.651">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:22:26.651" status="PASS" endtime="20170417 18:22:26.651"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:26.652">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:22:26.652" status="PASS" endtime="20170417 18:22:26.652"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:26.653">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:22:26.652" status="PASS" endtime="20170417 18:22:26.653"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:26.845">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:22:26.653" status="PASS" endtime="20170417 18:22:26.845"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:26.845">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:22:26.845">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:26.653" status="PASS" endtime="20170417 18:22:26.845"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:26.846">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:26.846" status="PASS" endtime="20170417 18:22:26.846"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:26.847">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:26.846" status="PASS" endtime="20170417 18:22:26.847"></status>
</kw>
<status starttime="20170417 18:22:26.649" status="PASS" endtime="20170417 18:22:26.847"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:26.848">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:22:26.847" status="PASS" endtime="20170417 18:22:26.848"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:26.850">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:22:26.849" status="PASS" endtime="20170417 18:22:26.850"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:26.851">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:22:26.850" status="PASS" endtime="20170417 18:22:26.851"></status>
</kw>
<status starttime="20170417 18:22:26.850" status="PASS" endtime="20170417 18:22:26.851"></status>
</kw>
<status starttime="20170417 18:22:26.848" status="PASS" endtime="20170417 18:22:26.851"></status>
</kw>
<status starttime="20170417 18:22:26.848" status="PASS" endtime="20170417 18:22:26.851"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:26.938">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:22:26.939">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:26.851" status="PASS" endtime="20170417 18:22:26.939"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:26.943">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:22:26.942" status="PASS" endtime="20170417 18:22:26.943"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:26.943">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:22:26.943" status="PASS" endtime="20170417 18:22:26.944"></status>
</kw>
<status starttime="20170417 18:22:26.943" status="PASS" endtime="20170417 18:22:26.944"></status>
</kw>
<status starttime="20170417 18:22:26.939" status="PASS" endtime="20170417 18:22:26.944"></status>
</kw>
<status starttime="20170417 18:22:26.939" status="PASS" endtime="20170417 18:22:26.944"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:26.944">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:26.648" status="PASS" endtime="20170417 18:22:26.944"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:26.945">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:26.944" status="PASS" endtime="20170417 18:22:26.945"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:26.945">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:22:26.945">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:22:26.945">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:22:26.945" status="PASS" endtime="20170417 18:22:26.945"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:26.946">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:22:26.648" status="PASS" endtime="20170417 18:22:26.946"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:26.946">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:22:26.647" status="PASS" endtime="20170417 18:22:26.946"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:22:26.947">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:22:26.946" status="FAIL" endtime="20170417 18:22:26.947"></status>
</kw>
<status starttime="20170417 18:22:26.647" status="FAIL" endtime="20170417 18:22:26.947"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:36.951">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:22:36.950" status="PASS" endtime="20170417 18:22:36.951"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:36.952">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:22:36.951" status="PASS" endtime="20170417 18:22:36.952"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:36.952">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:22:36.952" status="PASS" endtime="20170417 18:22:36.952"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:36.953">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:22:36.953" status="PASS" endtime="20170417 18:22:36.953"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:37.126">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:22:36.954" status="PASS" endtime="20170417 18:22:37.126"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:37.126">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:22:37.126">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:36.953" status="PASS" endtime="20170417 18:22:37.126"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:37.127">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:37.127" status="PASS" endtime="20170417 18:22:37.127"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:37.128">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:37.127" status="PASS" endtime="20170417 18:22:37.128"></status>
</kw>
<status starttime="20170417 18:22:36.950" status="PASS" endtime="20170417 18:22:37.128"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:37.129">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:22:37.128" status="PASS" endtime="20170417 18:22:37.129"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:37.131">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:22:37.130" status="PASS" endtime="20170417 18:22:37.131"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:37.132">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:22:37.132" status="PASS" endtime="20170417 18:22:37.132"></status>
</kw>
<status starttime="20170417 18:22:37.131" status="PASS" endtime="20170417 18:22:37.132"></status>
</kw>
<status starttime="20170417 18:22:37.129" status="PASS" endtime="20170417 18:22:37.132"></status>
</kw>
<status starttime="20170417 18:22:37.129" status="PASS" endtime="20170417 18:22:37.132"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:37.196">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:22:37.196">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:37.133" status="PASS" endtime="20170417 18:22:37.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:37.198">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:22:37.197" status="PASS" endtime="20170417 18:22:37.198"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:37.199">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:22:37.199" status="PASS" endtime="20170417 18:22:37.199"></status>
</kw>
<status starttime="20170417 18:22:37.198" status="PASS" endtime="20170417 18:22:37.199"></status>
</kw>
<status starttime="20170417 18:22:37.197" status="PASS" endtime="20170417 18:22:37.199"></status>
</kw>
<status starttime="20170417 18:22:37.196" status="PASS" endtime="20170417 18:22:37.199"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:37.199">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:36.949" status="PASS" endtime="20170417 18:22:37.199"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:37.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:37.200" status="PASS" endtime="20170417 18:22:37.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:37.201">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:22:37.201">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:22:37.201">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:22:37.200" status="PASS" endtime="20170417 18:22:37.201"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:37.201">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:22:36.948" status="PASS" endtime="20170417 18:22:37.201"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:37.201">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:22:36.948" status="PASS" endtime="20170417 18:22:37.201"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:22:37.202">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:22:37.202" status="FAIL" endtime="20170417 18:22:37.202"></status>
</kw>
<status starttime="20170417 18:22:36.947" status="FAIL" endtime="20170417 18:22:37.202"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:47.206">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:22:47.205" status="PASS" endtime="20170417 18:22:47.206"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:47.207">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:22:47.207" status="PASS" endtime="20170417 18:22:47.207"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:47.207">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:22:47.207" status="PASS" endtime="20170417 18:22:47.208"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:47.208">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:22:47.208" status="PASS" endtime="20170417 18:22:47.208"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:47.382">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:22:47.209" status="PASS" endtime="20170417 18:22:47.382"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:47.382">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:22:47.382">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:47.208" status="PASS" endtime="20170417 18:22:47.383"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:47.383">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:47.383" status="PASS" endtime="20170417 18:22:47.383"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:47.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:47.384" status="PASS" endtime="20170417 18:22:47.384"></status>
</kw>
<status starttime="20170417 18:22:47.205" status="PASS" endtime="20170417 18:22:47.384"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:47.385">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:22:47.384" status="PASS" endtime="20170417 18:22:47.385"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:47.387">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:22:47.386" status="PASS" endtime="20170417 18:22:47.387"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:47.388">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:22:47.387" status="PASS" endtime="20170417 18:22:47.388"></status>
</kw>
<status starttime="20170417 18:22:47.387" status="PASS" endtime="20170417 18:22:47.388"></status>
</kw>
<status starttime="20170417 18:22:47.385" status="PASS" endtime="20170417 18:22:47.388"></status>
</kw>
<status starttime="20170417 18:22:47.385" status="PASS" endtime="20170417 18:22:47.388"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:47.452">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:22:47.452">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:47.388" status="PASS" endtime="20170417 18:22:47.453"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:47.454">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:22:47.454" status="PASS" endtime="20170417 18:22:47.454"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:47.456">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:22:47.455" status="PASS" endtime="20170417 18:22:47.456"></status>
</kw>
<status starttime="20170417 18:22:47.455" status="PASS" endtime="20170417 18:22:47.456"></status>
</kw>
<status starttime="20170417 18:22:47.453" status="PASS" endtime="20170417 18:22:47.456"></status>
</kw>
<status starttime="20170417 18:22:47.453" status="PASS" endtime="20170417 18:22:47.456"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:47.456">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:47.204" status="PASS" endtime="20170417 18:22:47.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:47.457">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:47.456" status="PASS" endtime="20170417 18:22:47.457"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:47.457">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:22:47.457">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:22:47.458">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:22:47.457" status="PASS" endtime="20170417 18:22:47.458"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:47.458">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:22:47.204" status="PASS" endtime="20170417 18:22:47.458"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:47.458">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:22:47.203" status="PASS" endtime="20170417 18:22:47.458"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:22:47.459">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:22:47.458" status="FAIL" endtime="20170417 18:22:47.459"></status>
</kw>
<status starttime="20170417 18:22:47.203" status="FAIL" endtime="20170417 18:22:47.459"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:57.463">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:22:57.462" status="PASS" endtime="20170417 18:22:57.464"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:57.464">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:22:57.464" status="PASS" endtime="20170417 18:22:57.464"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:57.465">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:22:57.464" status="PASS" endtime="20170417 18:22:57.465"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:57.465">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:22:57.465" status="PASS" endtime="20170417 18:22:57.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:57.642">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:22:57.466" status="PASS" endtime="20170417 18:22:57.642"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:57.642">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:22:57.642">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:57.466" status="PASS" endtime="20170417 18:22:57.642"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:57.643">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:57.643" status="PASS" endtime="20170417 18:22:57.643"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:57.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:57.643" status="PASS" endtime="20170417 18:22:57.644"></status>
</kw>
<status starttime="20170417 18:22:57.462" status="PASS" endtime="20170417 18:22:57.644"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:57.644">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:22:57.644" status="PASS" endtime="20170417 18:22:57.644"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:57.646">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:22:57.646" status="PASS" endtime="20170417 18:22:57.646"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:57.647">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:22:57.647" status="PASS" endtime="20170417 18:22:57.647"></status>
</kw>
<status starttime="20170417 18:22:57.647" status="PASS" endtime="20170417 18:22:57.648"></status>
</kw>
<status starttime="20170417 18:22:57.645" status="PASS" endtime="20170417 18:22:57.648"></status>
</kw>
<status starttime="20170417 18:22:57.645" status="PASS" endtime="20170417 18:22:57.648"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:57.720">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:22:57.720">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:57.648" status="PASS" endtime="20170417 18:22:57.720"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:57.722">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:22:57.721" status="PASS" endtime="20170417 18:22:57.722"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:57.723">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:22:57.722" status="PASS" endtime="20170417 18:22:57.723"></status>
</kw>
<status starttime="20170417 18:22:57.722" status="PASS" endtime="20170417 18:22:57.723"></status>
</kw>
<status starttime="20170417 18:22:57.721" status="PASS" endtime="20170417 18:22:57.723"></status>
</kw>
<status starttime="20170417 18:22:57.720" status="PASS" endtime="20170417 18:22:57.723"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:57.724">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:22:57.461" status="PASS" endtime="20170417 18:22:57.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:22:57.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:22:57.724" status="PASS" endtime="20170417 18:22:57.724"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:22:57.725">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:22:57.725">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:22:57.725">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:22:57.724" status="PASS" endtime="20170417 18:22:57.725"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:57.725">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:22:57.461" status="PASS" endtime="20170417 18:22:57.725"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:22:57.725">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:22:57.460" status="PASS" endtime="20170417 18:22:57.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:22:57.726">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:22:57.726" status="FAIL" endtime="20170417 18:22:57.726"></status>
</kw>
<status starttime="20170417 18:22:57.459" status="FAIL" endtime="20170417 18:22:57.726"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:07.730">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:23:07.730" status="PASS" endtime="20170417 18:23:07.731"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:07.731">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:23:07.731" status="PASS" endtime="20170417 18:23:07.731"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:07.732">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:23:07.731" status="PASS" endtime="20170417 18:23:07.732"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:07.732">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:23:07.732" status="PASS" endtime="20170417 18:23:07.732"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:07.907">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:23:07.733" status="PASS" endtime="20170417 18:23:07.907"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:07.907">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:23:07.907">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:07.733" status="PASS" endtime="20170417 18:23:07.907"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:07.908">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:07.908" status="PASS" endtime="20170417 18:23:07.908"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:07.909">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:07.908" status="PASS" endtime="20170417 18:23:07.909"></status>
</kw>
<status starttime="20170417 18:23:07.729" status="PASS" endtime="20170417 18:23:07.909"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:07.909">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:23:07.909" status="PASS" endtime="20170417 18:23:07.910"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:07.912">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:23:07.911" status="PASS" endtime="20170417 18:23:07.912"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:07.913">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:23:07.913" status="PASS" endtime="20170417 18:23:07.913"></status>
</kw>
<status starttime="20170417 18:23:07.912" status="PASS" endtime="20170417 18:23:07.913"></status>
</kw>
<status starttime="20170417 18:23:07.910" status="PASS" endtime="20170417 18:23:07.913"></status>
</kw>
<status starttime="20170417 18:23:07.910" status="PASS" endtime="20170417 18:23:07.913"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:07.977">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:23:07.978">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:07.914" status="PASS" endtime="20170417 18:23:07.978"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:07.979">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:23:07.979" status="PASS" endtime="20170417 18:23:07.979"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:07.980">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:23:07.980" status="PASS" endtime="20170417 18:23:07.980"></status>
</kw>
<status starttime="20170417 18:23:07.979" status="PASS" endtime="20170417 18:23:07.980"></status>
</kw>
<status starttime="20170417 18:23:07.978" status="PASS" endtime="20170417 18:23:07.981"></status>
</kw>
<status starttime="20170417 18:23:07.978" status="PASS" endtime="20170417 18:23:07.981"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:07.981">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:07.729" status="PASS" endtime="20170417 18:23:07.981"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:07.981">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:07.981" status="PASS" endtime="20170417 18:23:07.981"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:07.982">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:23:07.982">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:23:07.982">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:23:07.982" status="PASS" endtime="20170417 18:23:07.982"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:07.982">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:23:07.728" status="PASS" endtime="20170417 18:23:07.983"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:07.983">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:23:07.728" status="PASS" endtime="20170417 18:23:07.983"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:23:07.984">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:23:07.983" status="FAIL" endtime="20170417 18:23:07.984"></status>
</kw>
<status starttime="20170417 18:23:07.727" status="FAIL" endtime="20170417 18:23:07.984"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:17.988">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:23:17.988" status="PASS" endtime="20170417 18:23:17.988"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:17.989">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:23:17.989" status="PASS" endtime="20170417 18:23:17.989"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:17.990">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:23:17.989" status="PASS" endtime="20170417 18:23:17.990"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:17.990">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:23:17.990" status="PASS" endtime="20170417 18:23:17.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:18.167">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:23:17.991" status="PASS" endtime="20170417 18:23:18.167"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:18.167">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:23:18.167">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:17.991" status="PASS" endtime="20170417 18:23:18.168"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:18.168">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:18.168" status="PASS" endtime="20170417 18:23:18.168"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:18.169">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:18.168" status="PASS" endtime="20170417 18:23:18.169"></status>
</kw>
<status starttime="20170417 18:23:17.987" status="PASS" endtime="20170417 18:23:18.169"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:18.170">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:23:18.169" status="PASS" endtime="20170417 18:23:18.170"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:18.172">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:23:18.171" status="PASS" endtime="20170417 18:23:18.172"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:18.173">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:23:18.172" status="PASS" endtime="20170417 18:23:18.173"></status>
</kw>
<status starttime="20170417 18:23:18.172" status="PASS" endtime="20170417 18:23:18.173"></status>
</kw>
<status starttime="20170417 18:23:18.170" status="PASS" endtime="20170417 18:23:18.173"></status>
</kw>
<status starttime="20170417 18:23:18.170" status="PASS" endtime="20170417 18:23:18.173"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:18.238">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:23:18.238">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:18.173" status="PASS" endtime="20170417 18:23:18.238"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:18.240">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:23:18.239" status="PASS" endtime="20170417 18:23:18.240"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:18.241">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:23:18.240" status="PASS" endtime="20170417 18:23:18.241"></status>
</kw>
<status starttime="20170417 18:23:18.240" status="PASS" endtime="20170417 18:23:18.241"></status>
</kw>
<status starttime="20170417 18:23:18.239" status="PASS" endtime="20170417 18:23:18.241"></status>
</kw>
<status starttime="20170417 18:23:18.238" status="PASS" endtime="20170417 18:23:18.241"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:18.241">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:17.986" status="PASS" endtime="20170417 18:23:18.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:18.242">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:18.242" status="PASS" endtime="20170417 18:23:18.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:18.243">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:23:18.243">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:23:18.243">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:23:18.242" status="PASS" endtime="20170417 18:23:18.243"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:18.243">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:23:17.986" status="PASS" endtime="20170417 18:23:18.243"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:18.243">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:23:17.985" status="PASS" endtime="20170417 18:23:18.243"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:23:18.244">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:23:18.244" status="FAIL" endtime="20170417 18:23:18.244"></status>
</kw>
<status starttime="20170417 18:23:17.985" status="FAIL" endtime="20170417 18:23:18.244"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:28.249">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:23:28.248" status="PASS" endtime="20170417 18:23:28.250"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:28.250">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:23:28.250" status="PASS" endtime="20170417 18:23:28.250"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:28.251">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:23:28.251" status="PASS" endtime="20170417 18:23:28.251"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:28.252">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:23:28.251" status="PASS" endtime="20170417 18:23:28.252"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:28.427">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:23:28.252" status="PASS" endtime="20170417 18:23:28.427"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:28.427">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:23:28.427">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:28.252" status="PASS" endtime="20170417 18:23:28.427"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:28.428">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:28.427" status="PASS" endtime="20170417 18:23:28.428"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:28.428">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:28.428" status="PASS" endtime="20170417 18:23:28.428"></status>
</kw>
<status starttime="20170417 18:23:28.247" status="PASS" endtime="20170417 18:23:28.429"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:28.429">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:23:28.429" status="PASS" endtime="20170417 18:23:28.429"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:28.431">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:23:28.431" status="PASS" endtime="20170417 18:23:28.431"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:28.432">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:23:28.432" status="PASS" endtime="20170417 18:23:28.432"></status>
</kw>
<status starttime="20170417 18:23:28.432" status="PASS" endtime="20170417 18:23:28.433"></status>
</kw>
<status starttime="20170417 18:23:28.430" status="PASS" endtime="20170417 18:23:28.433"></status>
</kw>
<status starttime="20170417 18:23:28.429" status="PASS" endtime="20170417 18:23:28.433"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:28.497">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:23:28.497">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:28.433" status="PASS" endtime="20170417 18:23:28.497"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:28.499">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:23:28.499" status="PASS" endtime="20170417 18:23:28.499"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:28.500">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:23:28.500" status="PASS" endtime="20170417 18:23:28.500"></status>
</kw>
<status starttime="20170417 18:23:28.499" status="PASS" endtime="20170417 18:23:28.500"></status>
</kw>
<status starttime="20170417 18:23:28.498" status="PASS" endtime="20170417 18:23:28.501"></status>
</kw>
<status starttime="20170417 18:23:28.498" status="PASS" endtime="20170417 18:23:28.501"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:28.501">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:28.247" status="PASS" endtime="20170417 18:23:28.501"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:28.501">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:28.501" status="PASS" endtime="20170417 18:23:28.502"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:28.502">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:23:28.502">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:23:28.502">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:23:28.502" status="PASS" endtime="20170417 18:23:28.502"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:28.503">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:23:28.246" status="PASS" endtime="20170417 18:23:28.503"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:28.503">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:23:28.246" status="PASS" endtime="20170417 18:23:28.503"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:23:28.503">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:23:28.503" status="FAIL" endtime="20170417 18:23:28.503"></status>
</kw>
<status starttime="20170417 18:23:28.245" status="FAIL" endtime="20170417 18:23:28.504"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:38.508">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:23:38.507" status="PASS" endtime="20170417 18:23:38.508"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:38.509">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:23:38.508" status="PASS" endtime="20170417 18:23:38.509"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:38.509">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:23:38.509" status="PASS" endtime="20170417 18:23:38.509"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:38.510">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:23:38.510" status="PASS" endtime="20170417 18:23:38.510"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:38.685">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:23:38.511" status="PASS" endtime="20170417 18:23:38.686"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:38.686">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:23:38.686">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:38.510" status="PASS" endtime="20170417 18:23:38.686"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:38.686">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:38.686" status="PASS" endtime="20170417 18:23:38.687"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:38.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:38.687" status="PASS" endtime="20170417 18:23:38.687"></status>
</kw>
<status starttime="20170417 18:23:38.507" status="PASS" endtime="20170417 18:23:38.687"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:38.688">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:23:38.688" status="PASS" endtime="20170417 18:23:38.688"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:38.690">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:23:38.690" status="PASS" endtime="20170417 18:23:38.690"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:38.691">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:23:38.691" status="PASS" endtime="20170417 18:23:38.691"></status>
</kw>
<status starttime="20170417 18:23:38.691" status="PASS" endtime="20170417 18:23:38.692"></status>
</kw>
<status starttime="20170417 18:23:38.689" status="PASS" endtime="20170417 18:23:38.692"></status>
</kw>
<status starttime="20170417 18:23:38.688" status="PASS" endtime="20170417 18:23:38.692"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:38.756">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:23:38.756">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:38.692" status="PASS" endtime="20170417 18:23:38.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:38.758">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:23:38.758" status="PASS" endtime="20170417 18:23:38.758"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:38.759">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:23:38.759" status="PASS" endtime="20170417 18:23:38.759"></status>
</kw>
<status starttime="20170417 18:23:38.759" status="PASS" endtime="20170417 18:23:38.760"></status>
</kw>
<status starttime="20170417 18:23:38.757" status="PASS" endtime="20170417 18:23:38.760"></status>
</kw>
<status starttime="20170417 18:23:38.757" status="PASS" endtime="20170417 18:23:38.760"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:38.760">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:38.506" status="PASS" endtime="20170417 18:23:38.760"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:38.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:38.760" status="PASS" endtime="20170417 18:23:38.761"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:38.761">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:23:38.761">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:23:38.761">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:23:38.761" status="PASS" endtime="20170417 18:23:38.762"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:38.762">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:23:38.505" status="PASS" endtime="20170417 18:23:38.762"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:38.762">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:23:38.505" status="PASS" endtime="20170417 18:23:38.762"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:23:38.763">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:23:38.762" status="FAIL" endtime="20170417 18:23:38.763"></status>
</kw>
<status starttime="20170417 18:23:38.504" status="FAIL" endtime="20170417 18:23:38.763"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:48.767">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:23:48.766" status="PASS" endtime="20170417 18:23:48.767"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:48.768">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:23:48.767" status="PASS" endtime="20170417 18:23:48.768"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:48.768">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:23:48.768" status="PASS" endtime="20170417 18:23:48.768"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:48.769">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:23:48.769" status="PASS" endtime="20170417 18:23:48.769"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:48.943">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:23:48.770" status="PASS" endtime="20170417 18:23:48.943"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:48.943">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:23:48.944">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:48.769" status="PASS" endtime="20170417 18:23:48.944"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:48.944">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:48.944" status="PASS" endtime="20170417 18:23:48.944"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:48.945">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:48.944" status="PASS" endtime="20170417 18:23:48.945"></status>
</kw>
<status starttime="20170417 18:23:48.766" status="PASS" endtime="20170417 18:23:48.945"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:48.946">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:23:48.945" status="PASS" endtime="20170417 18:23:48.946"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:48.948">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:23:48.947" status="PASS" endtime="20170417 18:23:48.948"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:48.949">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:23:48.948" status="PASS" endtime="20170417 18:23:48.949"></status>
</kw>
<status starttime="20170417 18:23:48.948" status="PASS" endtime="20170417 18:23:48.949"></status>
</kw>
<status starttime="20170417 18:23:48.946" status="PASS" endtime="20170417 18:23:48.949"></status>
</kw>
<status starttime="20170417 18:23:48.946" status="PASS" endtime="20170417 18:23:48.949"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:49.019">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:23:49.020">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:48.949" status="PASS" endtime="20170417 18:23:49.020"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:49.021">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:23:49.021" status="PASS" endtime="20170417 18:23:49.022"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:49.022">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:23:49.022" status="PASS" endtime="20170417 18:23:49.022"></status>
</kw>
<status starttime="20170417 18:23:49.022" status="PASS" endtime="20170417 18:23:49.023"></status>
</kw>
<status starttime="20170417 18:23:49.020" status="PASS" endtime="20170417 18:23:49.023"></status>
</kw>
<status starttime="20170417 18:23:49.020" status="PASS" endtime="20170417 18:23:49.023"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:49.023">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:48.765" status="PASS" endtime="20170417 18:23:49.023"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:49.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:49.023" status="PASS" endtime="20170417 18:23:49.024"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:49.024">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:23:49.024">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:23:49.024">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:23:49.024" status="PASS" endtime="20170417 18:23:49.024"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:49.025">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:23:48.764" status="PASS" endtime="20170417 18:23:49.025"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:49.025">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:23:48.764" status="PASS" endtime="20170417 18:23:49.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:23:49.025">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:23:49.025" status="FAIL" endtime="20170417 18:23:49.026"></status>
</kw>
<status starttime="20170417 18:23:48.763" status="FAIL" endtime="20170417 18:23:49.026"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:59.031">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:23:59.030" status="PASS" endtime="20170417 18:23:59.031"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:59.032">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:23:59.031" status="PASS" endtime="20170417 18:23:59.032"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:59.032">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:23:59.032" status="PASS" endtime="20170417 18:23:59.033"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:59.033">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:23:59.033" status="PASS" endtime="20170417 18:23:59.033"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:59.210">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:23:59.034" status="PASS" endtime="20170417 18:23:59.210"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:59.210">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:23:59.210">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:59.033" status="PASS" endtime="20170417 18:23:59.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:59.211">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:59.211" status="PASS" endtime="20170417 18:23:59.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:59.212">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:59.211" status="PASS" endtime="20170417 18:23:59.212"></status>
</kw>
<status starttime="20170417 18:23:59.029" status="PASS" endtime="20170417 18:23:59.212"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:59.213">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:23:59.212" status="PASS" endtime="20170417 18:23:59.213"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:59.215">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:23:59.214" status="PASS" endtime="20170417 18:23:59.215"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:59.216">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:23:59.216" status="PASS" endtime="20170417 18:23:59.216"></status>
</kw>
<status starttime="20170417 18:23:59.215" status="PASS" endtime="20170417 18:23:59.216"></status>
</kw>
<status starttime="20170417 18:23:59.213" status="PASS" endtime="20170417 18:23:59.216"></status>
</kw>
<status starttime="20170417 18:23:59.213" status="PASS" endtime="20170417 18:23:59.216"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:59.281">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:23:59.281">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:59.217" status="PASS" endtime="20170417 18:23:59.281"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:59.285">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:23:59.282" status="PASS" endtime="20170417 18:23:59.285"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:59.286">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:23:59.285" status="PASS" endtime="20170417 18:23:59.286"></status>
</kw>
<status starttime="20170417 18:23:59.285" status="PASS" endtime="20170417 18:23:59.286"></status>
</kw>
<status starttime="20170417 18:23:59.282" status="PASS" endtime="20170417 18:23:59.286"></status>
</kw>
<status starttime="20170417 18:23:59.281" status="PASS" endtime="20170417 18:23:59.286"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:59.286">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:23:59.028" status="PASS" endtime="20170417 18:23:59.286"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:23:59.287">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:23:59.287" status="PASS" endtime="20170417 18:23:59.287"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:23:59.287">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:23:59.288">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:23:59.288">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:23:59.287" status="PASS" endtime="20170417 18:23:59.288"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:59.288">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:23:59.028" status="PASS" endtime="20170417 18:23:59.288"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:23:59.288">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:23:59.027" status="PASS" endtime="20170417 18:23:59.288"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:23:59.289">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:23:59.289" status="FAIL" endtime="20170417 18:23:59.289"></status>
</kw>
<status starttime="20170417 18:23:59.026" status="FAIL" endtime="20170417 18:23:59.289"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:09.293">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:24:09.293" status="PASS" endtime="20170417 18:24:09.293"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:09.294">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:24:09.294" status="PASS" endtime="20170417 18:24:09.294"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:09.295">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:24:09.294" status="PASS" endtime="20170417 18:24:09.295"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:09.295">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:24:09.295" status="PASS" endtime="20170417 18:24:09.295"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:09.469">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:24:09.296" status="PASS" endtime="20170417 18:24:09.469"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:09.469">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:24:09.469">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:09.296" status="PASS" endtime="20170417 18:24:09.469"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:09.470">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:09.470" status="PASS" endtime="20170417 18:24:09.470"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:09.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:09.470" status="PASS" endtime="20170417 18:24:09.471"></status>
</kw>
<status starttime="20170417 18:24:09.292" status="PASS" endtime="20170417 18:24:09.471"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:09.471">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:24:09.471" status="PASS" endtime="20170417 18:24:09.471"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:09.474">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:24:09.473" status="PASS" endtime="20170417 18:24:09.474"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:09.475">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:24:09.474" status="PASS" endtime="20170417 18:24:09.475"></status>
</kw>
<status starttime="20170417 18:24:09.474" status="PASS" endtime="20170417 18:24:09.475"></status>
</kw>
<status starttime="20170417 18:24:09.472" status="PASS" endtime="20170417 18:24:09.475"></status>
</kw>
<status starttime="20170417 18:24:09.472" status="PASS" endtime="20170417 18:24:09.475"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:09.540">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:24:09.540">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:09.475" status="PASS" endtime="20170417 18:24:09.540"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:09.542">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:24:09.541" status="PASS" endtime="20170417 18:24:09.542"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:09.543">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:24:09.542" status="PASS" endtime="20170417 18:24:09.543"></status>
</kw>
<status starttime="20170417 18:24:09.542" status="PASS" endtime="20170417 18:24:09.543"></status>
</kw>
<status starttime="20170417 18:24:09.541" status="PASS" endtime="20170417 18:24:09.543"></status>
</kw>
<status starttime="20170417 18:24:09.540" status="PASS" endtime="20170417 18:24:09.543"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:09.543">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:09.291" status="PASS" endtime="20170417 18:24:09.543"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:09.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:09.544" status="PASS" endtime="20170417 18:24:09.544"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:09.544">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:24:09.545">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:24:09.545">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:24:09.544" status="PASS" endtime="20170417 18:24:09.545"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:09.545">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:24:09.291" status="PASS" endtime="20170417 18:24:09.545"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:09.545">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:24:09.290" status="PASS" endtime="20170417 18:24:09.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:24:09.546">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:24:09.545" status="FAIL" endtime="20170417 18:24:09.546"></status>
</kw>
<status starttime="20170417 18:24:09.290" status="FAIL" endtime="20170417 18:24:09.546"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:19.550">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:24:19.549" status="PASS" endtime="20170417 18:24:19.550"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:19.551">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:24:19.551" status="PASS" endtime="20170417 18:24:19.551"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:19.551">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:24:19.551" status="PASS" endtime="20170417 18:24:19.552"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:19.552">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:24:19.552" status="PASS" endtime="20170417 18:24:19.552"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:19.726">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:24:19.553" status="PASS" endtime="20170417 18:24:19.726"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:19.726">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:24:19.726">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:19.552" status="PASS" endtime="20170417 18:24:19.726"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:19.727">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:19.727" status="PASS" endtime="20170417 18:24:19.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:19.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:19.727" status="PASS" endtime="20170417 18:24:19.728"></status>
</kw>
<status starttime="20170417 18:24:19.549" status="PASS" endtime="20170417 18:24:19.728"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:19.728">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:24:19.728" status="PASS" endtime="20170417 18:24:19.728"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:19.730">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:24:19.730" status="PASS" endtime="20170417 18:24:19.731"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:19.731">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:24:19.731" status="PASS" endtime="20170417 18:24:19.731"></status>
</kw>
<status starttime="20170417 18:24:19.731" status="PASS" endtime="20170417 18:24:19.732"></status>
</kw>
<status starttime="20170417 18:24:19.729" status="PASS" endtime="20170417 18:24:19.732"></status>
</kw>
<status starttime="20170417 18:24:19.729" status="PASS" endtime="20170417 18:24:19.732"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:19.796">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:24:19.796">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:19.732" status="PASS" endtime="20170417 18:24:19.796"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:19.798">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:24:19.797" status="PASS" endtime="20170417 18:24:19.798"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:19.799">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:24:19.799" status="PASS" endtime="20170417 18:24:19.799"></status>
</kw>
<status starttime="20170417 18:24:19.798" status="PASS" endtime="20170417 18:24:19.799"></status>
</kw>
<status starttime="20170417 18:24:19.797" status="PASS" endtime="20170417 18:24:19.799"></status>
</kw>
<status starttime="20170417 18:24:19.796" status="PASS" endtime="20170417 18:24:19.799"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:19.800">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:19.548" status="PASS" endtime="20170417 18:24:19.800"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:19.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:19.800" status="PASS" endtime="20170417 18:24:19.800"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:19.801">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:24:19.801">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:24:19.801">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:24:19.801" status="PASS" endtime="20170417 18:24:19.801"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:19.801">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:24:19.548" status="PASS" endtime="20170417 18:24:19.801"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:19.801">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:24:19.547" status="PASS" endtime="20170417 18:24:19.802"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:24:19.802">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:24:19.802" status="FAIL" endtime="20170417 18:24:19.802"></status>
</kw>
<status starttime="20170417 18:24:19.547" status="FAIL" endtime="20170417 18:24:19.802"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:29.807">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:24:29.806" status="PASS" endtime="20170417 18:24:29.808"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:29.808">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:24:29.808" status="PASS" endtime="20170417 18:24:29.808"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:29.809">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:24:29.808" status="PASS" endtime="20170417 18:24:29.809"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:29.809">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:24:29.809" status="PASS" endtime="20170417 18:24:29.809"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:30.007">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:24:29.810" status="PASS" endtime="20170417 18:24:30.007"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:30.007">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:24:30.007">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:29.810" status="PASS" endtime="20170417 18:24:30.008"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:30.008">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:30.008" status="PASS" endtime="20170417 18:24:30.008"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:30.009">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:30.008" status="PASS" endtime="20170417 18:24:30.009"></status>
</kw>
<status starttime="20170417 18:24:29.806" status="PASS" endtime="20170417 18:24:30.009"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:30.010">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:24:30.009" status="PASS" endtime="20170417 18:24:30.010"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:30.012">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:24:30.011" status="PASS" endtime="20170417 18:24:30.012"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:30.013">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:24:30.012" status="PASS" endtime="20170417 18:24:30.013"></status>
</kw>
<status starttime="20170417 18:24:30.012" status="PASS" endtime="20170417 18:24:30.013"></status>
</kw>
<status starttime="20170417 18:24:30.010" status="PASS" endtime="20170417 18:24:30.013"></status>
</kw>
<status starttime="20170417 18:24:30.010" status="PASS" endtime="20170417 18:24:30.013"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:30.077">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:24:30.078">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:30.013" status="PASS" endtime="20170417 18:24:30.078"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:30.079">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:24:30.079" status="PASS" endtime="20170417 18:24:30.079"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:30.080">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:24:30.080" status="PASS" endtime="20170417 18:24:30.080"></status>
</kw>
<status starttime="20170417 18:24:30.080" status="PASS" endtime="20170417 18:24:30.080"></status>
</kw>
<status starttime="20170417 18:24:30.078" status="PASS" endtime="20170417 18:24:30.081"></status>
</kw>
<status starttime="20170417 18:24:30.078" status="PASS" endtime="20170417 18:24:30.081"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:30.081">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:29.805" status="PASS" endtime="20170417 18:24:30.081"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:30.081">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:30.081" status="PASS" endtime="20170417 18:24:30.081"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:30.082">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:24:30.082">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:24:30.082">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:24:30.082" status="PASS" endtime="20170417 18:24:30.082"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:30.083">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:24:29.804" status="PASS" endtime="20170417 18:24:30.083"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:30.083">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:24:29.804" status="PASS" endtime="20170417 18:24:30.083"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:24:30.083">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:24:30.083" status="FAIL" endtime="20170417 18:24:30.084"></status>
</kw>
<status starttime="20170417 18:24:29.803" status="FAIL" endtime="20170417 18:24:30.084"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:40.088">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:24:40.088" status="PASS" endtime="20170417 18:24:40.088"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:40.089">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:24:40.089" status="PASS" endtime="20170417 18:24:40.089"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:40.090">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:24:40.089" status="PASS" endtime="20170417 18:24:40.090"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:40.090">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:24:40.090" status="PASS" endtime="20170417 18:24:40.090"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:40.282">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:24:40.091" status="PASS" endtime="20170417 18:24:40.282"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:40.282">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:24:40.282">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:40.090" status="PASS" endtime="20170417 18:24:40.282"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:40.283">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:40.283" status="PASS" endtime="20170417 18:24:40.283"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:40.284">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:40.283" status="PASS" endtime="20170417 18:24:40.284"></status>
</kw>
<status starttime="20170417 18:24:40.087" status="PASS" endtime="20170417 18:24:40.284"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:40.285">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:24:40.284" status="PASS" endtime="20170417 18:24:40.285"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:40.287">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:24:40.286" status="PASS" endtime="20170417 18:24:40.287"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:40.288">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:24:40.287" status="PASS" endtime="20170417 18:24:40.288"></status>
</kw>
<status starttime="20170417 18:24:40.287" status="PASS" endtime="20170417 18:24:40.288"></status>
</kw>
<status starttime="20170417 18:24:40.285" status="PASS" endtime="20170417 18:24:40.288"></status>
</kw>
<status starttime="20170417 18:24:40.285" status="PASS" endtime="20170417 18:24:40.288"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:40.366">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:24:40.366">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:40.288" status="PASS" endtime="20170417 18:24:40.366"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:40.367">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:24:40.367" status="PASS" endtime="20170417 18:24:40.367"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:40.368">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:24:40.368" status="PASS" endtime="20170417 18:24:40.368"></status>
</kw>
<status starttime="20170417 18:24:40.368" status="PASS" endtime="20170417 18:24:40.369"></status>
</kw>
<status starttime="20170417 18:24:40.367" status="PASS" endtime="20170417 18:24:40.369"></status>
</kw>
<status starttime="20170417 18:24:40.366" status="PASS" endtime="20170417 18:24:40.369"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:40.369">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:40.086" status="PASS" endtime="20170417 18:24:40.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:40.369">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:40.369" status="PASS" endtime="20170417 18:24:40.370"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:40.370">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:24:40.370">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:24:40.370">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:24:40.370" status="PASS" endtime="20170417 18:24:40.370"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:40.371">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:24:40.086" status="PASS" endtime="20170417 18:24:40.371"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:40.371">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:24:40.085" status="PASS" endtime="20170417 18:24:40.371"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:24:40.371">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:24:40.371" status="FAIL" endtime="20170417 18:24:40.372"></status>
</kw>
<status starttime="20170417 18:24:40.084" status="FAIL" endtime="20170417 18:24:40.372"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:50.375">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:24:50.375" status="PASS" endtime="20170417 18:24:50.376"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:50.376">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:24:50.376" status="PASS" endtime="20170417 18:24:50.376"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:50.377">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:24:50.377" status="PASS" endtime="20170417 18:24:50.377"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:50.378">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:24:50.377" status="PASS" endtime="20170417 18:24:50.378"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:50.591">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:24:50.378" status="PASS" endtime="20170417 18:24:50.591"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:50.591">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:24:50.591">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:50.378" status="PASS" endtime="20170417 18:24:50.591"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:50.592">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:50.592" status="PASS" endtime="20170417 18:24:50.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:50.593">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:50.592" status="PASS" endtime="20170417 18:24:50.593"></status>
</kw>
<status starttime="20170417 18:24:50.374" status="PASS" endtime="20170417 18:24:50.593"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:50.594">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:24:50.593" status="PASS" endtime="20170417 18:24:50.594"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:50.596">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:24:50.595" status="PASS" endtime="20170417 18:24:50.596"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:50.597">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:24:50.596" status="PASS" endtime="20170417 18:24:50.597"></status>
</kw>
<status starttime="20170417 18:24:50.596" status="PASS" endtime="20170417 18:24:50.597"></status>
</kw>
<status starttime="20170417 18:24:50.594" status="PASS" endtime="20170417 18:24:50.597"></status>
</kw>
<status starttime="20170417 18:24:50.594" status="PASS" endtime="20170417 18:24:50.597"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:50.661">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:24:50.661">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:50.597" status="PASS" endtime="20170417 18:24:50.661"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:50.663">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:24:50.663" status="PASS" endtime="20170417 18:24:50.663"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:50.664">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:24:50.664" status="PASS" endtime="20170417 18:24:50.664"></status>
</kw>
<status starttime="20170417 18:24:50.663" status="PASS" endtime="20170417 18:24:50.664"></status>
</kw>
<status starttime="20170417 18:24:50.662" status="PASS" endtime="20170417 18:24:50.664"></status>
</kw>
<status starttime="20170417 18:24:50.662" status="PASS" endtime="20170417 18:24:50.664"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:50.665">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:24:50.374" status="PASS" endtime="20170417 18:24:50.665"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:24:50.665">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:24:50.665" status="PASS" endtime="20170417 18:24:50.665"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:24:50.666">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:24:50.666">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:24:50.666">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Baseboard Init'}</msg>
<status starttime="20170417 18:24:50.666" status="PASS" endtime="20170417 18:24:50.666"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:50.666">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:24:50.373" status="PASS" endtime="20170417 18:24:50.666"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:24:50.667">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170417 18:24:50.373" status="PASS" endtime="20170417 18:24:50.667"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:24:50.667">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170417 18:24:50.667" status="FAIL" endtime="20170417 18:24:50.667"></status>
</kw>
<status starttime="20170417 18:24:50.372" status="FAIL" endtime="20170417 18:24:50.667"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:00.671">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:25:00.671" status="PASS" endtime="20170417 18:25:00.672"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:00.673">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:25:00.672" status="PASS" endtime="20170417 18:25:00.673"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:00.673">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:25:00.673" status="PASS" endtime="20170417 18:25:00.673"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:00.674">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:25:00.674" status="PASS" endtime="20170417 18:25:00.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:00.929">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:25:00.675" status="PASS" endtime="20170417 18:25:00.929"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:00.929">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:25:00.929">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:00.674" status="PASS" endtime="20170417 18:25:00.929"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:00.930">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:00.929" status="PASS" endtime="20170417 18:25:00.930"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:00.930">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:00.930" status="PASS" endtime="20170417 18:25:00.930"></status>
</kw>
<status starttime="20170417 18:25:00.670" status="PASS" endtime="20170417 18:25:00.930"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:00.931">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:25:00.931" status="PASS" endtime="20170417 18:25:00.931"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:00.933">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:25:00.933" status="PASS" endtime="20170417 18:25:00.933"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:00.934">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:25:00.934" status="PASS" endtime="20170417 18:25:00.934"></status>
</kw>
<status starttime="20170417 18:25:00.933" status="PASS" endtime="20170417 18:25:00.934"></status>
</kw>
<status starttime="20170417 18:25:00.932" status="PASS" endtime="20170417 18:25:00.934"></status>
</kw>
<status starttime="20170417 18:25:00.931" status="PASS" endtime="20170417 18:25:00.935"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:01.034">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:25:01.034">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:00.935" status="PASS" endtime="20170417 18:25:01.035"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:01.036">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:25:01.036" status="PASS" endtime="20170417 18:25:01.036"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:01.038">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:25:01.037" status="PASS" endtime="20170417 18:25:01.038"></status>
</kw>
<status starttime="20170417 18:25:01.037" status="PASS" endtime="20170417 18:25:01.038"></status>
</kw>
<status starttime="20170417 18:25:01.035" status="PASS" endtime="20170417 18:25:01.038"></status>
</kw>
<status starttime="20170417 18:25:01.035" status="PASS" endtime="20170417 18:25:01.038"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:01.038">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:00.670" status="PASS" endtime="20170417 18:25:01.038"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:01.039">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:01.038" status="PASS" endtime="20170417 18:25:01.039"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:01.039">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:25:01.039">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:25:01.040">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:25:01.039" status="PASS" endtime="20170417 18:25:01.040"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:01.040">${state} = Off</msg>
<status starttime="20170417 18:25:00.669" status="PASS" endtime="20170417 18:25:01.040"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:01.040">${boot_progress} = Off</msg>
<status starttime="20170417 18:25:00.669" status="PASS" endtime="20170417 18:25:01.040"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:25:01.041">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:25:01.040" status="FAIL" endtime="20170417 18:25:01.041"></status>
</kw>
<status starttime="20170417 18:25:00.668" status="FAIL" endtime="20170417 18:25:01.041"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:11.044">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:25:11.044" status="PASS" endtime="20170417 18:25:11.045"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:11.045">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:25:11.045" status="PASS" endtime="20170417 18:25:11.046"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:11.046">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:25:11.046" status="PASS" endtime="20170417 18:25:11.046"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:11.047">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:25:11.047" status="PASS" endtime="20170417 18:25:11.047"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:11.727">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:25:11.048" status="PASS" endtime="20170417 18:25:11.727"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:11.727">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:25:11.727">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:11.047" status="PASS" endtime="20170417 18:25:11.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:11.728">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:11.728" status="PASS" endtime="20170417 18:25:11.728"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:11.729">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:11.728" status="PASS" endtime="20170417 18:25:11.729"></status>
</kw>
<status starttime="20170417 18:25:11.044" status="PASS" endtime="20170417 18:25:11.729"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:11.729">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:25:11.729" status="PASS" endtime="20170417 18:25:11.730"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:11.732">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:25:11.731" status="PASS" endtime="20170417 18:25:11.732"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:11.733">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:25:11.733" status="PASS" endtime="20170417 18:25:11.733"></status>
</kw>
<status starttime="20170417 18:25:11.732" status="PASS" endtime="20170417 18:25:11.733"></status>
</kw>
<status starttime="20170417 18:25:11.730" status="PASS" endtime="20170417 18:25:11.733"></status>
</kw>
<status starttime="20170417 18:25:11.730" status="PASS" endtime="20170417 18:25:11.733"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:11.831">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:25:11.831">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:11.733" status="PASS" endtime="20170417 18:25:11.831"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:11.832">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:25:11.832" status="PASS" endtime="20170417 18:25:11.833"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:11.833">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:25:11.833" status="PASS" endtime="20170417 18:25:11.834"></status>
</kw>
<status starttime="20170417 18:25:11.833" status="PASS" endtime="20170417 18:25:11.834"></status>
</kw>
<status starttime="20170417 18:25:11.832" status="PASS" endtime="20170417 18:25:11.834"></status>
</kw>
<status starttime="20170417 18:25:11.831" status="PASS" endtime="20170417 18:25:11.834"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:11.834">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:11.043" status="PASS" endtime="20170417 18:25:11.834"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:11.835">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:11.834" status="PASS" endtime="20170417 18:25:11.835"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:11.836">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:25:11.836">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:25:11.836">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:25:11.835" status="PASS" endtime="20170417 18:25:11.836"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:11.836">${state} = Off</msg>
<status starttime="20170417 18:25:11.042" status="PASS" endtime="20170417 18:25:11.836"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:11.836">${boot_progress} = Off</msg>
<status starttime="20170417 18:25:11.042" status="PASS" endtime="20170417 18:25:11.836"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:25:11.837">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:25:11.837" status="FAIL" endtime="20170417 18:25:11.837"></status>
</kw>
<status starttime="20170417 18:25:11.041" status="FAIL" endtime="20170417 18:25:11.837"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:21.841">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:25:21.841" status="PASS" endtime="20170417 18:25:21.842"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:21.842">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:25:21.842" status="PASS" endtime="20170417 18:25:21.842"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:21.843">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:25:21.843" status="PASS" endtime="20170417 18:25:21.843"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:21.844">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:25:21.843" status="PASS" endtime="20170417 18:25:21.844"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:22.050">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:25:21.844" status="PASS" endtime="20170417 18:25:22.050"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:22.051">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:25:22.051">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:21.844" status="PASS" endtime="20170417 18:25:22.051"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:22.051">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:22.051" status="PASS" endtime="20170417 18:25:22.051"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:22.052">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:22.052" status="PASS" endtime="20170417 18:25:22.052"></status>
</kw>
<status starttime="20170417 18:25:21.840" status="PASS" endtime="20170417 18:25:22.052"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:22.053">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:25:22.052" status="PASS" endtime="20170417 18:25:22.053"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:22.055">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:25:22.054" status="PASS" endtime="20170417 18:25:22.055"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:22.056">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:25:22.056" status="PASS" endtime="20170417 18:25:22.056"></status>
</kw>
<status starttime="20170417 18:25:22.055" status="PASS" endtime="20170417 18:25:22.056"></status>
</kw>
<status starttime="20170417 18:25:22.054" status="PASS" endtime="20170417 18:25:22.056"></status>
</kw>
<status starttime="20170417 18:25:22.053" status="PASS" endtime="20170417 18:25:22.056"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:22.154">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:25:22.154">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:22.057" status="PASS" endtime="20170417 18:25:22.154"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:22.155">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:25:22.155" status="PASS" endtime="20170417 18:25:22.156"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:22.156">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:25:22.156" status="PASS" endtime="20170417 18:25:22.156"></status>
</kw>
<status starttime="20170417 18:25:22.156" status="PASS" endtime="20170417 18:25:22.157"></status>
</kw>
<status starttime="20170417 18:25:22.154" status="PASS" endtime="20170417 18:25:22.157"></status>
</kw>
<status starttime="20170417 18:25:22.154" status="PASS" endtime="20170417 18:25:22.157"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:22.157">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:21.840" status="PASS" endtime="20170417 18:25:22.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:22.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:22.157" status="PASS" endtime="20170417 18:25:22.158"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:22.158">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:25:22.158">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:25:22.158">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:25:22.158" status="PASS" endtime="20170417 18:25:22.158"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:22.159">${state} = Off</msg>
<status starttime="20170417 18:25:21.839" status="PASS" endtime="20170417 18:25:22.159"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:22.159">${boot_progress} = Off</msg>
<status starttime="20170417 18:25:21.839" status="PASS" endtime="20170417 18:25:22.159"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:25:22.160">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:25:22.159" status="FAIL" endtime="20170417 18:25:22.160"></status>
</kw>
<status starttime="20170417 18:25:21.838" status="FAIL" endtime="20170417 18:25:22.160"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:32.164">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:25:32.164" status="PASS" endtime="20170417 18:25:32.165"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:32.165">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:25:32.165" status="PASS" endtime="20170417 18:25:32.165"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:32.166">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:25:32.166" status="PASS" endtime="20170417 18:25:32.166"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:32.167">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:25:32.166" status="PASS" endtime="20170417 18:25:32.167"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:33.105">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:25:32.167" status="PASS" endtime="20170417 18:25:33.106"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:33.106">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:25:33.106">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:32.167" status="PASS" endtime="20170417 18:25:33.106"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:33.107">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:33.106" status="PASS" endtime="20170417 18:25:33.107"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:33.108">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:33.107" status="PASS" endtime="20170417 18:25:33.108"></status>
</kw>
<status starttime="20170417 18:25:32.163" status="PASS" endtime="20170417 18:25:33.108"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:33.109">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:25:33.108" status="PASS" endtime="20170417 18:25:33.109"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:33.112">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:25:33.111" status="PASS" endtime="20170417 18:25:33.112"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:33.113">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:25:33.113" status="PASS" endtime="20170417 18:25:33.113"></status>
</kw>
<status starttime="20170417 18:25:33.112" status="PASS" endtime="20170417 18:25:33.113"></status>
</kw>
<status starttime="20170417 18:25:33.110" status="PASS" endtime="20170417 18:25:33.113"></status>
</kw>
<status starttime="20170417 18:25:33.109" status="PASS" endtime="20170417 18:25:33.114"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:33.209">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:25:33.209">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:33.114" status="PASS" endtime="20170417 18:25:33.209"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:33.213">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:25:33.210" status="PASS" endtime="20170417 18:25:33.213"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:33.214">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:25:33.214" status="PASS" endtime="20170417 18:25:33.214"></status>
</kw>
<status starttime="20170417 18:25:33.213" status="PASS" endtime="20170417 18:25:33.214"></status>
</kw>
<status starttime="20170417 18:25:33.210" status="PASS" endtime="20170417 18:25:33.215"></status>
</kw>
<status starttime="20170417 18:25:33.209" status="PASS" endtime="20170417 18:25:33.215"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:33.215">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:32.162" status="PASS" endtime="20170417 18:25:33.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:33.215">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:33.215" status="PASS" endtime="20170417 18:25:33.215"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:33.216">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:25:33.216">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:25:33.216">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:25:33.216" status="PASS" endtime="20170417 18:25:33.216"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:33.216">${state} = Off</msg>
<status starttime="20170417 18:25:32.162" status="PASS" endtime="20170417 18:25:33.216"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:33.217">${boot_progress} = Off</msg>
<status starttime="20170417 18:25:32.161" status="PASS" endtime="20170417 18:25:33.217"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:25:33.217">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:25:33.217" status="FAIL" endtime="20170417 18:25:33.217"></status>
</kw>
<status starttime="20170417 18:25:32.161" status="FAIL" endtime="20170417 18:25:33.218"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:43.221">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:25:43.221" status="PASS" endtime="20170417 18:25:43.222"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:43.222">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:25:43.222" status="PASS" endtime="20170417 18:25:43.222"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:43.223">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:25:43.223" status="PASS" endtime="20170417 18:25:43.223"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:43.224">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:25:43.223" status="PASS" endtime="20170417 18:25:43.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:43.404">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:25:43.224" status="PASS" endtime="20170417 18:25:43.405"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:43.405">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:25:43.405">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:43.224" status="PASS" endtime="20170417 18:25:43.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:43.405">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:43.405" status="PASS" endtime="20170417 18:25:43.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:43.406">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:43.406" status="PASS" endtime="20170417 18:25:43.406"></status>
</kw>
<status starttime="20170417 18:25:43.220" status="PASS" endtime="20170417 18:25:43.406"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:43.407">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:25:43.406" status="PASS" endtime="20170417 18:25:43.407"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:43.409">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:25:43.408" status="PASS" endtime="20170417 18:25:43.409"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:43.410">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:25:43.410" status="PASS" endtime="20170417 18:25:43.410"></status>
</kw>
<status starttime="20170417 18:25:43.409" status="PASS" endtime="20170417 18:25:43.410"></status>
</kw>
<status starttime="20170417 18:25:43.408" status="PASS" endtime="20170417 18:25:43.411"></status>
</kw>
<status starttime="20170417 18:25:43.407" status="PASS" endtime="20170417 18:25:43.411"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:43.475">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:25:43.475">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:43.411" status="PASS" endtime="20170417 18:25:43.475"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:43.477">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:25:43.476" status="PASS" endtime="20170417 18:25:43.477"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:43.478">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:25:43.478" status="PASS" endtime="20170417 18:25:43.478"></status>
</kw>
<status starttime="20170417 18:25:43.477" status="PASS" endtime="20170417 18:25:43.478"></status>
</kw>
<status starttime="20170417 18:25:43.476" status="PASS" endtime="20170417 18:25:43.478"></status>
</kw>
<status starttime="20170417 18:25:43.475" status="PASS" endtime="20170417 18:25:43.478"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:43.478">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:43.220" status="PASS" endtime="20170417 18:25:43.478"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:43.479">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:43.479" status="PASS" endtime="20170417 18:25:43.479"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:43.480">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:25:43.480">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:25:43.480">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:25:43.479" status="PASS" endtime="20170417 18:25:43.480"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:43.480">${state} = Off</msg>
<status starttime="20170417 18:25:43.219" status="PASS" endtime="20170417 18:25:43.480"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:43.480">${boot_progress} = Off</msg>
<status starttime="20170417 18:25:43.219" status="PASS" endtime="20170417 18:25:43.480"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:25:43.481">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:25:43.481" status="FAIL" endtime="20170417 18:25:43.481"></status>
</kw>
<status starttime="20170417 18:25:43.218" status="FAIL" endtime="20170417 18:25:43.481"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:53.485">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:25:53.484" status="PASS" endtime="20170417 18:25:53.485"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:53.486">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:25:53.485" status="PASS" endtime="20170417 18:25:53.486"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:53.486">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:25:53.486" status="PASS" endtime="20170417 18:25:53.486"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:53.487">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:25:53.487" status="PASS" endtime="20170417 18:25:53.487"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:54.470">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:25:53.488" status="PASS" endtime="20170417 18:25:54.470"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:54.471">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:25:54.471">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:53.487" status="PASS" endtime="20170417 18:25:54.471"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:54.471">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:54.471" status="PASS" endtime="20170417 18:25:54.471"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:54.472">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:54.472" status="PASS" endtime="20170417 18:25:54.472"></status>
</kw>
<status starttime="20170417 18:25:53.484" status="PASS" endtime="20170417 18:25:54.472"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:54.473">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170417 18:25:54.473" status="PASS" endtime="20170417 18:25:54.473"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:54.475">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:25:54.474" status="PASS" endtime="20170417 18:25:54.475"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:54.476">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170417 18:25:54.476" status="PASS" endtime="20170417 18:25:54.476"></status>
</kw>
<status starttime="20170417 18:25:54.475" status="PASS" endtime="20170417 18:25:54.476"></status>
</kw>
<status starttime="20170417 18:25:54.474" status="PASS" endtime="20170417 18:25:54.476"></status>
</kw>
<status starttime="20170417 18:25:54.473" status="PASS" endtime="20170417 18:25:54.476"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:55.627">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:25:55.627">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:54.476" status="PASS" endtime="20170417 18:25:55.627"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:55.629">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:25:55.629" status="PASS" endtime="20170417 18:25:55.629"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:55.630">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:25:55.630" status="PASS" endtime="20170417 18:25:55.630"></status>
</kw>
<status starttime="20170417 18:25:55.630" status="PASS" endtime="20170417 18:25:55.631"></status>
</kw>
<status starttime="20170417 18:25:55.628" status="PASS" endtime="20170417 18:25:55.631"></status>
</kw>
<status starttime="20170417 18:25:55.628" status="PASS" endtime="20170417 18:25:55.631"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:55.631">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:53.483" status="PASS" endtime="20170417 18:25:55.631"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:55.632">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:55.631" status="PASS" endtime="20170417 18:25:55.632"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:55.632">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:25:55.632">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:25:55.632">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status starttime="20170417 18:25:55.632" status="PASS" endtime="20170417 18:25:55.632"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:55.633">${state} = Off</msg>
<status starttime="20170417 18:25:53.483" status="PASS" endtime="20170417 18:25:55.633"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:55.633">${boot_progress} = Off</msg>
<status starttime="20170417 18:25:53.482" status="PASS" endtime="20170417 18:25:55.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:25:55.634">Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:25:55.633" status="FAIL" endtime="20170417 18:25:55.634"></status>
</kw>
<status starttime="20170417 18:25:53.482" status="FAIL" endtime="20170417 18:25:55.634"></status>
</kw>
<msg level="FAIL" timestamp="20170417 18:25:55.634">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</msg>
<status starttime="20170417 18:15:53.686" status="FAIL" endtime="20170417 18:25:55.634"></status>
</kw>
<status starttime="20170417 18:15:25.923" status="FAIL" endtime="20170417 18:25:55.634"></status>
</kw>
<status starttime="20170417 18:15:25.923" status="FAIL" endtime="20170417 18:25:55.634"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:55.639">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:25:55.638" status="PASS" endtime="20170417 18:25:55.639"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:55.640">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:25:55.640" status="PASS" endtime="20170417 18:25:55.640"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:55.641">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:25:55.640" status="PASS" endtime="20170417 18:25:55.641"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:55.641">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:25:55.641" status="PASS" endtime="20170417 18:25:55.641"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:55.816">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:25:55.642" status="PASS" endtime="20170417 18:25:55.816"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:55.817">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:25:55.817">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:55.642" status="PASS" endtime="20170417 18:25:55.817"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:55.817">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:55.817" status="PASS" endtime="20170417 18:25:55.817"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:55.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:55.818" status="PASS" endtime="20170417 18:25:55.818"></status>
</kw>
<status starttime="20170417 18:25:55.638" status="PASS" endtime="20170417 18:25:55.818"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:55.819">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170417 18:25:55.818" status="PASS" endtime="20170417 18:25:55.819"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:55.821">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170417 18:25:55.820" status="PASS" endtime="20170417 18:25:55.821"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:55.822">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170417 18:25:55.822" status="PASS" endtime="20170417 18:25:55.822"></status>
</kw>
<status starttime="20170417 18:25:55.821" status="PASS" endtime="20170417 18:25:55.822"></status>
</kw>
<status starttime="20170417 18:25:55.820" status="PASS" endtime="20170417 18:25:55.822"></status>
</kw>
<status starttime="20170417 18:25:55.819" status="PASS" endtime="20170417 18:25:55.822"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:55.896">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:25:55.896">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:55.822" status="PASS" endtime="20170417 18:25:55.896"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:55.898">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:25:55.897" status="PASS" endtime="20170417 18:25:55.898"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:55.899">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170417 18:25:55.898" status="PASS" endtime="20170417 18:25:55.899"></status>
</kw>
<status starttime="20170417 18:25:55.898" status="PASS" endtime="20170417 18:25:55.899"></status>
</kw>
<status starttime="20170417 18:25:55.897" status="PASS" endtime="20170417 18:25:55.899"></status>
</kw>
<status starttime="20170417 18:25:55.896" status="PASS" endtime="20170417 18:25:55.899"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:55.900">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:25:55.637" status="PASS" endtime="20170417 18:25:55.900"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:55.900">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:25:55.900" status="PASS" endtime="20170417 18:25:55.900"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:55.901">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:25:55.901">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:25:55.901">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status starttime="20170417 18:25:55.901" status="PASS" endtime="20170417 18:25:55.901"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:55.901">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170417 18:25:55.636" status="PASS" endtime="20170417 18:25:55.901"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:55.902">${host_state} = Off</msg>
<status starttime="20170417 18:25:55.636" status="PASS" endtime="20170417 18:25:55.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:25:55.903">Off != Quiesced</msg>
<status starttime="20170417 18:25:55.902" status="FAIL" endtime="20170417 18:25:55.903"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:55.903">${status} = False</msg>
<status starttime="20170417 18:25:55.902" status="PASS" endtime="20170417 18:25:55.903"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:55.903">${status} = False</msg>
<status starttime="20170417 18:25:55.636" status="PASS" endtime="20170417 18:25:55.903"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:55.905">Length is 12</msg>
<status starttime="20170417 18:25:55.905" status="PASS" endtime="20170417 18:25:55.905"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:55.918">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170417 18:25:58.921">${RC} = 0</msg>
<msg level="INFO" timestamp="20170417 18:25:58.921">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.40 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.689 ms
64 bytes from 9.41.166.169...</msg>
<status starttime="20170417 18:25:55.906" status="PASS" endtime="20170417 18:25:58.921"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:58.924">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.40 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.689 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.649 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.666 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.649/0.851/1.401/0.318 ms</msg>
<status starttime="20170417 18:25:58.923" status="PASS" endtime="20170417 18:25:58.924"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170417 18:25:58.924" status="PASS" endtime="20170417 18:25:58.925"></status>
</kw>
<status starttime="20170417 18:25:55.905" status="PASS" endtime="20170417 18:25:58.925"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:25:59.288">Dictionary does not contain key 'host'.</msg>
<status starttime="20170417 18:25:59.288" status="FAIL" endtime="20170417 18:25:59.288"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:59.289">${has_host} = False</msg>
<status starttime="20170417 18:25:59.288" status="PASS" endtime="20170417 18:25:59.289"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170417 18:25:59.289" status="PASS" endtime="20170417 18:25:59.292"></status>
</kw>
<status starttime="20170417 18:25:59.289" status="PASS" endtime="20170417 18:25:59.292"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:59.294">${port_num} = 22</msg>
<status starttime="20170417 18:25:59.294" status="PASS" endtime="20170417 18:25:59.294"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:59.295">${SSH_PORT} = 22</msg>
<status starttime="20170417 18:25:59.295" status="PASS" endtime="20170417 18:25:59.295"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:25:59.295">${https_num} = 443</msg>
<status starttime="20170417 18:25:59.295" status="PASS" endtime="20170417 18:25:59.295"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:59.296">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170417 18:25:59.296" status="PASS" endtime="20170417 18:25:59.296"></status>
</kw>
<status starttime="20170417 18:25:59.293" status="PASS" endtime="20170417 18:25:59.296"></status>
</kw>
<status starttime="20170417 18:25:59.293" status="PASS" endtime="20170417 18:25:59.297"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:25:59.298">Dictionary does not contain key 'port'.</msg>
<status starttime="20170417 18:25:59.297" status="FAIL" endtime="20170417 18:25:59.298"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:25:59.298">${has_port} = False</msg>
<status starttime="20170417 18:25:59.297" status="PASS" endtime="20170417 18:25:59.298"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170417 18:25:59.299" status="PASS" endtime="20170417 18:25:59.299"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170417 18:25:59.300" status="PASS" endtime="20170417 18:25:59.300"></status>
</kw>
<status starttime="20170417 18:25:59.299" status="PASS" endtime="20170417 18:25:59.300"></status>
</kw>
<status starttime="20170417 18:25:59.298" status="PASS" endtime="20170417 18:25:59.300"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:25:59.301">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170417 18:26:00.947">Read output: root@witherspoon:~#</msg>
<status starttime="20170417 18:25:59.301" status="PASS" endtime="20170417 18:26:00.947"></status>
</kw>
<status starttime="20170417 18:25:59.287" status="PASS" endtime="20170417 18:26:00.947"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:00.966">${cur_time} = 2017-04-17 18:26:00:965872</msg>
<status starttime="20170417 18:26:00.966" status="PASS" endtime="20170417 18:26:00.966"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:00.967">${cur_time} = 20170417182600965872</msg>
<status starttime="20170417 18:26:00.966" status="PASS" endtime="20170417 18:26:00.967"></status>
</kw>
<status starttime="20170417 18:26:00.965" status="PASS" endtime="20170417 18:26:00.967"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:00.972">${FFDC_TIME} = 20170417182600965872</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:00.980">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170417 18:26:00.980" status="PASS" endtime="20170417 18:26:00.980"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:00.981">${suite_name} = 20170417182600965872_TestsTestBasicPoweron</msg>
<status starttime="20170417 18:26:00.981" status="PASS" endtime="20170417 18:26:00.981"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:00.982">${test_name} = PowerOnTest</msg>
<status starttime="20170417 18:26:00.981" status="PASS" endtime="20170417 18:26:00.982"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:00.983">${test_name} = 20170417182600965872_PowerOnTest</msg>
<status starttime="20170417 18:26:00.982" status="PASS" endtime="20170417 18:26:00.983"></status>
</kw>
<status starttime="20170417 18:26:00.980" status="PASS" endtime="20170417 18:26:00.983"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:01.009">${LOG_PREFIX} = /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.011">Created directory '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.010" status="PASS" endtime="20170417 18:26:01.011"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:01.015">${FFDC_FILE_PATH} = /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.017">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.016" status="PASS" endtime="20170417 18:26:01.017"></status>
</kw>
<status starttime="20170417 18:26:01.016" status="PASS" endtime="20170417 18:26:01.017"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.020">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.019" status="PASS" endtime="20170417 18:26:01.020"></status>
</kw>
<status starttime="20170417 18:26:01.017" status="PASS" endtime="20170417 18:26:01.020"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.021">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.021" status="PASS" endtime="20170417 18:26:01.021"></status>
</kw>
<status starttime="20170417 18:26:01.020" status="PASS" endtime="20170417 18:26:01.021"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.022">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.022" status="PASS" endtime="20170417 18:26:01.022"></status>
</kw>
<status starttime="20170417 18:26:01.021" status="PASS" endtime="20170417 18:26:01.023"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.024">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.023" status="PASS" endtime="20170417 18:26:01.024"></status>
</kw>
<status starttime="20170417 18:26:01.023" status="PASS" endtime="20170417 18:26:01.024"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.025">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.025" status="PASS" endtime="20170417 18:26:01.025"></status>
</kw>
<status starttime="20170417 18:26:01.024" status="PASS" endtime="20170417 18:26:01.025"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.027">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.026" status="PASS" endtime="20170417 18:26:01.027"></status>
</kw>
<status starttime="20170417 18:26:01.025" status="PASS" endtime="20170417 18:26:01.027"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.028">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.028" status="PASS" endtime="20170417 18:26:01.028"></status>
</kw>
<status starttime="20170417 18:26:01.027" status="PASS" endtime="20170417 18:26:01.028"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.029">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.029" status="PASS" endtime="20170417 18:26:01.029"></status>
</kw>
<status starttime="20170417 18:26:01.028" status="PASS" endtime="20170417 18:26:01.029"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.031">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.031" status="PASS" endtime="20170417 18:26:01.031"></status>
</kw>
<status starttime="20170417 18:26:01.030" status="PASS" endtime="20170417 18:26:01.031"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.032">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.032" status="PASS" endtime="20170417 18:26:01.032"></status>
</kw>
<status starttime="20170417 18:26:01.031" status="PASS" endtime="20170417 18:26:01.033"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.034">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.033" status="PASS" endtime="20170417 18:26:01.034"></status>
</kw>
<status starttime="20170417 18:26:01.033" status="PASS" endtime="20170417 18:26:01.034"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.035">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.035" status="PASS" endtime="20170417 18:26:01.035"></status>
</kw>
<status starttime="20170417 18:26:01.034" status="PASS" endtime="20170417 18:26:01.035"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:01.036">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170417 18:26:01.103">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:26:01.103">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170417 18:26:01.103">${stderr} = </msg>
<status starttime="20170417 18:26:01.036" status="PASS" endtime="20170417 18:26:01.103"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:01.103">Length is 0</msg>
<status starttime="20170417 18:26:01.103" status="PASS" endtime="20170417 18:26:01.103"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:01.104">Length is 11</msg>
<status starttime="20170417 18:26:01.104" status="PASS" endtime="20170417 18:26:01.104"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:01.104">${model_name} = Witherspoon</msg>
<status starttime="20170417 18:26:01.035" status="PASS" endtime="20170417 18:26:01.104"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.106">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.105" status="PASS" endtime="20170417 18:26:01.106"></status>
</kw>
<status starttime="20170417 18:26:01.104" status="PASS" endtime="20170417 18:26:01.106"></status>
</kw>
<status starttime="20170417 18:26:01.030" status="PASS" endtime="20170417 18:26:01.106"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.107">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.107" status="PASS" endtime="20170417 18:26:01.107"></status>
</kw>
<status starttime="20170417 18:26:01.106" status="PASS" endtime="20170417 18:26:01.107"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:01.108">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170417 18:26:01.107" status="PASS" endtime="20170417 18:26:01.108"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.109">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.109" status="PASS" endtime="20170417 18:26:01.109"></status>
</kw>
<status starttime="20170417 18:26:01.108" status="PASS" endtime="20170417 18:26:01.109"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.110">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.110" status="PASS" endtime="20170417 18:26:01.110"></status>
</kw>
<status starttime="20170417 18:26:01.109" status="PASS" endtime="20170417 18:26:01.111"></status>
</kw>
<status starttime="20170417 18:26:01.108" status="PASS" endtime="20170417 18:26:01.111"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.112">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.111" status="PASS" endtime="20170417 18:26:01.112"></status>
</kw>
<status starttime="20170417 18:26:01.111" status="PASS" endtime="20170417 18:26:01.112"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.113">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.113" status="PASS" endtime="20170417 18:26:01.114"></status>
</kw>
<status starttime="20170417 18:26:01.112" status="PASS" endtime="20170417 18:26:01.114"></status>
</kw>
<status starttime="20170417 18:26:01.111" status="PASS" endtime="20170417 18:26:01.114"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.115">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.115" status="PASS" endtime="20170417 18:26:01.115"></status>
</kw>
<status starttime="20170417 18:26:01.114" status="PASS" endtime="20170417 18:26:01.115"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.116">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.116" status="PASS" endtime="20170417 18:26:01.116"></status>
</kw>
<status starttime="20170417 18:26:01.115" status="PASS" endtime="20170417 18:26:01.116"></status>
</kw>
<status starttime="20170417 18:26:01.114" status="PASS" endtime="20170417 18:26:01.116"></status>
</kw>
<status starttime="20170417 18:26:01.108" status="PASS" endtime="20170417 18:26:01.116"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:01.118">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:01.117" status="PASS" endtime="20170417 18:26:01.118"></status>
</kw>
<status starttime="20170417 18:26:01.117" status="PASS" endtime="20170417 18:26:01.118"></status>
</kw>
<status starttime="20170417 18:26:01.015" status="PASS" endtime="20170417 18:26:01.118"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:01.119">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170417 18:26:01.119" status="PASS" endtime="20170417 18:26:01.119"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:01.120">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('FFDC Generic Report', 'BMC FFDC Man...</msg>
<status starttime="20170417 18:26:01.120" status="PASS" endtime="20170417 18:26:01.120"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:26:01.123">Dictionary does not contain key 'host'.</msg>
<status starttime="20170417 18:26:01.123" status="FAIL" endtime="20170417 18:26:01.123"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:01.123">${has_host} = False</msg>
<status starttime="20170417 18:26:01.122" status="PASS" endtime="20170417 18:26:01.123"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170417 18:26:01.124" status="PASS" endtime="20170417 18:26:01.124"></status>
</kw>
<status starttime="20170417 18:26:01.124" status="PASS" endtime="20170417 18:26:01.125"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:01.126">${port_num} = 22</msg>
<status starttime="20170417 18:26:01.126" status="PASS" endtime="20170417 18:26:01.126"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:01.127">${SSH_PORT} = 22</msg>
<status starttime="20170417 18:26:01.127" status="PASS" endtime="20170417 18:26:01.127"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:01.127">${https_num} = 443</msg>
<status starttime="20170417 18:26:01.127" status="PASS" endtime="20170417 18:26:01.127"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:01.128">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170417 18:26:01.128" status="PASS" endtime="20170417 18:26:01.128"></status>
</kw>
<status starttime="20170417 18:26:01.125" status="PASS" endtime="20170417 18:26:01.128"></status>
</kw>
<status starttime="20170417 18:26:01.125" status="PASS" endtime="20170417 18:26:01.128"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:26:01.129">Dictionary does not contain key 'port'.</msg>
<status starttime="20170417 18:26:01.129" status="FAIL" endtime="20170417 18:26:01.129"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:01.130">${has_port} = False</msg>
<status starttime="20170417 18:26:01.129" status="PASS" endtime="20170417 18:26:01.130"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170417 18:26:01.131" status="PASS" endtime="20170417 18:26:01.131"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170417 18:26:01.132" status="PASS" endtime="20170417 18:26:01.132"></status>
</kw>
<status starttime="20170417 18:26:01.131" status="PASS" endtime="20170417 18:26:01.132"></status>
</kw>
<status starttime="20170417 18:26:01.130" status="PASS" endtime="20170417 18:26:01.132"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:01.133">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170417 18:26:02.809">Read output: root@witherspoon:~#</msg>
<status starttime="20170417 18:26:01.132" status="PASS" endtime="20170417 18:26:02.810"></status>
</kw>
<status starttime="20170417 18:26:01.122" status="PASS" endtime="20170417 18:26:02.810"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:02.810">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170417 18:26:02.810" status="PASS" endtime="20170417 18:26:02.810"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>echo ${OPENBMC_HOST} | sed 's/\(\.\)/\\\1/g'</arg>
</arguments>
<assign>
<var>${OPENBMC_HOST_REGEX}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:02.816">Running command 'echo 9.41.166.169 | sed 's/(.)/\1/g' 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170417 18:26:02.820">${OPENBMC_HOST_REGEX} = sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS</msg>
<status starttime="20170417 18:26:02.812" status="PASS" endtime="20170417 18:26:02.820"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:02.823">@{cmd_list} = [ ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status starttime="20170417 18:26:02.822" status="PASS" endtime="20170417 18:26:02.823"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:02.824">${logpath} = /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_dmesg.txt</msg>
<status starttime="20170417 18:26:02.824" status="PASS" endtime="20170417 18:26:02.824"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170417 18:26:02.827" status="PASS" endtime="20170417 18:26:02.828"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:02.829">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170417 18:26:02.927">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:26:02.927">${stdout} = i2c_aspeed i2c-5: i2c bus 5 registered, irq 263
i2c_aspeed i2c-9: i2c bus 9 registered, irq 267
i2c_aspeed i2c-10: i2c bus 10 registered, irq 268
rtc-rv8803 11-0032: Voltage low, temperature compensat...</msg>
<msg level="INFO" timestamp="20170417 18:26:02.927">${stderr} = </msg>
<status starttime="20170417 18:26:02.828" status="PASS" endtime="20170417 18:26:02.927"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:02.934">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_dmesg.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:02.933" status="PASS" endtime="20170417 18:26:02.934"></status>
</kw>
<status starttime="20170417 18:26:02.932" status="PASS" endtime="20170417 18:26:02.934"></status>
</kw>
<status starttime="20170417 18:26:02.928" status="PASS" endtime="20170417 18:26:02.934"></status>
</kw>
<status starttime="20170417 18:26:02.825" status="PASS" endtime="20170417 18:26:02.934"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:02.938">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_dmesg.txt 2&gt;&amp;1'.</msg>
<status starttime="20170417 18:26:02.934" status="PASS" endtime="20170417 18:26:02.942"></status>
</kw>
<status starttime="20170417 18:26:02.823" status="PASS" endtime="20170417 18:26:02.942"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:02.945">${logpath} = /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_procinfo.txt</msg>
<status starttime="20170417 18:26:02.944" status="PASS" endtime="20170417 18:26:02.945"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170417 18:26:02.947" status="PASS" endtime="20170417 18:26:02.948"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:02.948">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170417 18:26:03.020">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:26:03.020">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170417 18:26:03.020">${stderr} = </msg>
<status starttime="20170417 18:26:02.948" status="PASS" endtime="20170417 18:26:03.020"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:03.026">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_procinfo.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:03.026" status="PASS" endtime="20170417 18:26:03.026"></status>
</kw>
<status starttime="20170417 18:26:03.025" status="PASS" endtime="20170417 18:26:03.027"></status>
</kw>
<status starttime="20170417 18:26:03.021" status="PASS" endtime="20170417 18:26:03.027"></status>
</kw>
<status starttime="20170417 18:26:02.946" status="PASS" endtime="20170417 18:26:03.027"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:03.031">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_procinfo.txt 2&gt;&amp;1'.</msg>
<status starttime="20170417 18:26:03.027" status="PASS" endtime="20170417 18:26:03.033"></status>
</kw>
<status starttime="20170417 18:26:02.943" status="PASS" endtime="20170417 18:26:03.034"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:03.037">${logpath} = /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_proc_list.txt</msg>
<status starttime="20170417 18:26:03.036" status="PASS" endtime="20170417 18:26:03.037"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170417 18:26:03.039" status="PASS" endtime="20170417 18:26:03.040"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:03.040">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170417 18:26:03.318">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:26:03.318">${stdout} = Mem: 146108K used, 286824K free, 15212K shrd, 10324K buff, 49364K cached
CPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 2.99 2.05 1.53 1/125 2094
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170417 18:26:03.318">${stderr} = </msg>
<status starttime="20170417 18:26:03.040" status="PASS" endtime="20170417 18:26:03.318"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:03.325">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_proc_list.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:03.324" status="PASS" endtime="20170417 18:26:03.325"></status>
</kw>
<status starttime="20170417 18:26:03.323" status="PASS" endtime="20170417 18:26:03.325"></status>
</kw>
<status starttime="20170417 18:26:03.319" status="PASS" endtime="20170417 18:26:03.325"></status>
</kw>
<status starttime="20170417 18:26:03.038" status="PASS" endtime="20170417 18:26:03.325"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:03.330">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_proc_list.txt 2&gt;&amp;1'.</msg>
<status starttime="20170417 18:26:03.325" status="PASS" endtime="20170417 18:26:03.333"></status>
</kw>
<status starttime="20170417 18:26:03.035" status="PASS" endtime="20170417 18:26:03.334"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:03.337">${logpath} = /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_meminfo.txt</msg>
<status starttime="20170417 18:26:03.336" status="PASS" endtime="20170417 18:26:03.337"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170417 18:26:03.339" status="PASS" endtime="20170417 18:26:03.340"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:03.345">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170417 18:26:03.453">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:26:03.453">${stdout} = MemTotal:         432932 kB
MemFree:          286824 kB
MemAvailable:     326956 kB
Buffers:           10324 kB
Cached:            49364 kB
SwapCached:            0 kB
Active:            96272 kB
Inac...</msg>
<msg level="INFO" timestamp="20170417 18:26:03.454">${stderr} = </msg>
<status starttime="20170417 18:26:03.340" status="PASS" endtime="20170417 18:26:03.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:03.462">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_meminfo.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:03.461" status="PASS" endtime="20170417 18:26:03.462"></status>
</kw>
<status starttime="20170417 18:26:03.460" status="PASS" endtime="20170417 18:26:03.462"></status>
</kw>
<status starttime="20170417 18:26:03.454" status="PASS" endtime="20170417 18:26:03.462"></status>
</kw>
<status starttime="20170417 18:26:03.337" status="PASS" endtime="20170417 18:26:03.462"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:03.468">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_meminfo.txt 2&gt;&amp;1'.</msg>
<status starttime="20170417 18:26:03.462" status="PASS" endtime="20170417 18:26:03.476"></status>
</kw>
<status starttime="20170417 18:26:03.334" status="PASS" endtime="20170417 18:26:03.476"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:03.479">${logpath} = /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_journalctl.txt</msg>
<status starttime="20170417 18:26:03.478" status="PASS" endtime="20170417 18:26:03.479"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170417 18:26:03.481" status="PASS" endtime="20170417 18:26:03.481"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:03.482">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170417 18:26:06.601">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:26:06.603">${stdout} = -- Logs begin at Mon 2017-04-17 18:05:21 UTC, end at Mon 2017-04-17 18:26:02 UTC. --
Apr 17 18:05:21 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 17 18:05:21 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170417 18:26:06.603">${stderr} = </msg>
<status starttime="20170417 18:26:03.482" status="PASS" endtime="20170417 18:26:06.603"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:06.612">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_journalctl.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:06.611" status="PASS" endtime="20170417 18:26:06.612"></status>
</kw>
<status starttime="20170417 18:26:06.608" status="PASS" endtime="20170417 18:26:06.613"></status>
</kw>
<status starttime="20170417 18:26:06.604" status="PASS" endtime="20170417 18:26:06.613"></status>
</kw>
<status starttime="20170417 18:26:03.479" status="PASS" endtime="20170417 18:26:06.613"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:06.621">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_journalctl.txt 2&gt;&amp;1'.</msg>
<status starttime="20170417 18:26:06.613" status="PASS" endtime="20170417 18:26:06.631"></status>
</kw>
<status starttime="20170417 18:26:03.476" status="PASS" endtime="20170417 18:26:06.632"></status>
</kw>
<status starttime="20170417 18:26:02.823" status="PASS" endtime="20170417 18:26:06.632"></status>
</kw>
<status starttime="20170417 18:26:02.811" status="PASS" endtime="20170417 18:26:06.633"></status>
</kw>
<status starttime="20170417 18:26:02.811" status="PASS" endtime="20170417 18:26:06.633"></status>
</kw>
<status starttime="20170417 18:26:02.811" status="PASS" endtime="20170417 18:26:06.633"></status>
</kw>
<status starttime="20170417 18:26:01.121" status="PASS" endtime="20170417 18:26:06.633"></status>
</kw>
<status starttime="20170417 18:26:01.121" status="PASS" endtime="20170417 18:26:06.634"></status>
</kw>
<status starttime="20170417 18:26:01.120" status="PASS" endtime="20170417 18:26:06.634"></status>
</kw>
<status starttime="20170417 18:26:01.120" status="PASS" endtime="20170417 18:26:06.634"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:26:06.640">Dictionary does not contain key 'host'.</msg>
<status starttime="20170417 18:26:06.639" status="FAIL" endtime="20170417 18:26:06.640"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:06.640">${has_host} = False</msg>
<status starttime="20170417 18:26:06.639" status="PASS" endtime="20170417 18:26:06.640"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170417 18:26:06.641" status="PASS" endtime="20170417 18:26:06.641"></status>
</kw>
<status starttime="20170417 18:26:06.640" status="PASS" endtime="20170417 18:26:06.641"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:06.643">${port_num} = 22</msg>
<status starttime="20170417 18:26:06.643" status="PASS" endtime="20170417 18:26:06.643"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:06.644">${SSH_PORT} = 22</msg>
<status starttime="20170417 18:26:06.643" status="PASS" endtime="20170417 18:26:06.644"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:06.644">${https_num} = 443</msg>
<status starttime="20170417 18:26:06.644" status="PASS" endtime="20170417 18:26:06.644"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:06.645">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170417 18:26:06.645" status="PASS" endtime="20170417 18:26:06.645"></status>
</kw>
<status starttime="20170417 18:26:06.642" status="PASS" endtime="20170417 18:26:06.645"></status>
</kw>
<status starttime="20170417 18:26:06.642" status="PASS" endtime="20170417 18:26:06.645"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:26:06.646">Dictionary does not contain key 'port'.</msg>
<status starttime="20170417 18:26:06.646" status="FAIL" endtime="20170417 18:26:06.646"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:06.647">${has_port} = False</msg>
<status starttime="20170417 18:26:06.646" status="PASS" endtime="20170417 18:26:06.647"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170417 18:26:06.648" status="PASS" endtime="20170417 18:26:06.649"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170417 18:26:06.650" status="PASS" endtime="20170417 18:26:06.650"></status>
</kw>
<status starttime="20170417 18:26:06.648" status="PASS" endtime="20170417 18:26:06.650"></status>
</kw>
<status starttime="20170417 18:26:06.647" status="PASS" endtime="20170417 18:26:06.650"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:06.651">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170417 18:26:08.298">Read output: root@witherspoon:~#</msg>
<status starttime="20170417 18:26:06.651" status="PASS" endtime="20170417 18:26:08.299"></status>
</kw>
<status starttime="20170417 18:26:06.638" status="PASS" endtime="20170417 18:26:08.299"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:08.299">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170417 18:26:08.299" status="PASS" endtime="20170417 18:26:08.299"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:08.301">@{cmd_list} = [ ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/o...</msg>
<status starttime="20170417 18:26:08.301" status="PASS" endtime="20170417 18:26:08.301"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:08.302">${logpath} = /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_inventory.txt</msg>
<status starttime="20170417 18:26:08.301" status="PASS" endtime="20170417 18:26:08.302"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:08.304">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:26:08.304" status="PASS" endtime="20170417 18:26:08.305"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:08.306">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:26:08.305" status="PASS" endtime="20170417 18:26:08.306"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:08.307">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:26:08.306" status="PASS" endtime="20170417 18:26:08.307"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:08.308">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:26:08.307" status="PASS" endtime="20170417 18:26:08.308"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:08.846">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:26:08.309" status="PASS" endtime="20170417 18:26:08.846"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:08.847">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:26:08.847">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:08.308" status="PASS" endtime="20170417 18:26:08.847"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:08.847">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:08.847" status="PASS" endtime="20170417 18:26:08.847"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:08.848">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:08.848" status="PASS" endtime="20170417 18:26:08.848"></status>
</kw>
<status starttime="20170417 18:26:08.303" status="PASS" endtime="20170417 18:26:08.848"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:08.849">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170417 18:26:08.849" status="PASS" endtime="20170417 18:26:08.849"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170417 18:26:08.849" status="PASS" endtime="20170417 18:26:08.850"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:10.440">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:26:10.441">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:08.850" status="PASS" endtime="20170417 18:26:10.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170417 18:26:10.441" status="PASS" endtime="20170417 18:26:10.441"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:10.442">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:08.302" status="PASS" endtime="20170417 18:26:10.442"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:10.443">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:10.442" status="PASS" endtime="20170417 18:26:10.443"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:10.443">${status} = True</msg>
<status starttime="20170417 18:26:10.442" status="PASS" endtime="20170417 18:26:10.443"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170417 18:26:10.443" status="PASS" endtime="20170417 18:26:10.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:10.447">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "2", 
      "PartNumber": "0000000000000000", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "0000000", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:26:10.447">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170417 18:26:10.447">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
 ...</msg>
<status starttime="20170417 18:26:10.444" status="PASS" endtime="20170417 18:26:10.447"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:10.449">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_inventory.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:10.448" status="PASS" endtime="20170417 18:26:10.449"></status>
</kw>
<status starttime="20170417 18:26:10.447" status="PASS" endtime="20170417 18:26:10.449"></status>
</kw>
<status starttime="20170417 18:26:08.301" status="PASS" endtime="20170417 18:26:10.449"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:10.450">${logpath} = /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_led.txt</msg>
<status starttime="20170417 18:26:10.450" status="PASS" endtime="20170417 18:26:10.450"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:10.452">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:26:10.451" status="PASS" endtime="20170417 18:26:10.452"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:10.453">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:26:10.452" status="PASS" endtime="20170417 18:26:10.453"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:10.453">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:26:10.453" status="PASS" endtime="20170417 18:26:10.453"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:10.454">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:26:10.454" status="PASS" endtime="20170417 18:26:10.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:10.854">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:26:10.455" status="PASS" endtime="20170417 18:26:10.854"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:10.855">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:26:10.855">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:10.454" status="PASS" endtime="20170417 18:26:10.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:10.855">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:10.855" status="PASS" endtime="20170417 18:26:10.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:10.856">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:10.856" status="PASS" endtime="20170417 18:26:10.856"></status>
</kw>
<status starttime="20170417 18:26:10.451" status="PASS" endtime="20170417 18:26:10.856"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:10.857">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170417 18:26:10.856" status="PASS" endtime="20170417 18:26:10.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170417 18:26:10.857" status="PASS" endtime="20170417 18:26:10.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:10.990">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:26:10.991">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:10.858" status="PASS" endtime="20170417 18:26:10.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170417 18:26:10.991" status="PASS" endtime="20170417 18:26:10.991"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:10.992">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:10.450" status="PASS" endtime="20170417 18:26:10.992"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:10.993">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:10.992" status="PASS" endtime="20170417 18:26:10.993"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:10.993">${status} = True</msg>
<status starttime="20170417 18:26:10.992" status="PASS" endtime="20170417 18:26:10.993"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170417 18:26:10.993" status="PASS" endtime="20170417 18:26:10.993"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:10.994">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:26:10.994">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170417 18:26:10.994">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status starttime="20170417 18:26:10.993" status="PASS" endtime="20170417 18:26:10.994"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:10.995">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_led.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:10.995" status="PASS" endtime="20170417 18:26:10.996"></status>
</kw>
<status starttime="20170417 18:26:10.994" status="PASS" endtime="20170417 18:26:10.996"></status>
</kw>
<status starttime="20170417 18:26:10.449" status="PASS" endtime="20170417 18:26:10.996"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:10.996">${logpath} = /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_record_log.txt</msg>
<status starttime="20170417 18:26:10.996" status="PASS" endtime="20170417 18:26:10.996"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:10.998">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:26:10.998" status="PASS" endtime="20170417 18:26:10.998"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:10.999">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:26:10.999" status="PASS" endtime="20170417 18:26:10.999"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:11.000">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:26:10.999" status="PASS" endtime="20170417 18:26:11.000"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:11.000">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:26:11.000" status="PASS" endtime="20170417 18:26:11.000"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:11.387">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:26:11.001" status="PASS" endtime="20170417 18:26:11.387"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:11.387">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:26:11.387">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:11.001" status="PASS" endtime="20170417 18:26:11.387"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:11.388">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:11.387" status="PASS" endtime="20170417 18:26:11.388"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:11.388">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:11.388" status="PASS" endtime="20170417 18:26:11.389"></status>
</kw>
<status starttime="20170417 18:26:10.997" status="PASS" endtime="20170417 18:26:11.389"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:11.389">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170417 18:26:11.389" status="PASS" endtime="20170417 18:26:11.389"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170417 18:26:11.390" status="PASS" endtime="20170417 18:26:11.390"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:11.486">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:26:11.486">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170417 18:26:11.391" status="PASS" endtime="20170417 18:26:11.486"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170417 18:26:11.486" status="PASS" endtime="20170417 18:26:11.487"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:11.487">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170417 18:26:10.997" status="PASS" endtime="20170417 18:26:11.487"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:11.488">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170417 18:26:11.488">404 != 200</msg>
<status starttime="20170417 18:26:11.488" status="FAIL" endtime="20170417 18:26:11.488"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:11.488">${status} = False</msg>
<status starttime="20170417 18:26:11.487" status="PASS" endtime="20170417 18:26:11.488"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170417 18:26:11.489">Continuing for loop from the next iteration.</msg>
<status starttime="20170417 18:26:11.489" status="PASS" endtime="20170417 18:26:11.489"></status>
</kw>
<status starttime="20170417 18:26:11.489" status="PASS" endtime="20170417 18:26:11.489"></status>
</kw>
<status starttime="20170417 18:26:10.996" status="PASS" endtime="20170417 18:26:11.490"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:11.490">${logpath} = /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_elog.txt</msg>
<status starttime="20170417 18:26:11.490" status="PASS" endtime="20170417 18:26:11.490"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:11.492">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:26:11.492" status="PASS" endtime="20170417 18:26:11.492"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:11.493">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:26:11.493" status="PASS" endtime="20170417 18:26:11.493"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:11.493">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:26:11.493" status="PASS" endtime="20170417 18:26:11.493"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:11.494">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:26:11.494" status="PASS" endtime="20170417 18:26:11.494"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:11.901">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:26:11.495" status="PASS" endtime="20170417 18:26:11.901"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:11.902">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:26:11.902">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:11.494" status="PASS" endtime="20170417 18:26:11.902"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:11.902">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:11.902" status="PASS" endtime="20170417 18:26:11.903"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:11.903">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:11.903" status="PASS" endtime="20170417 18:26:11.903"></status>
</kw>
<status starttime="20170417 18:26:11.491" status="PASS" endtime="20170417 18:26:11.903"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:11.904">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170417 18:26:11.904" status="PASS" endtime="20170417 18:26:11.904"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170417 18:26:11.904" status="PASS" endtime="20170417 18:26:11.905"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:12.118">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:26:12.119">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:11.905" status="PASS" endtime="20170417 18:26:12.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170417 18:26:12.119" status="PASS" endtime="20170417 18:26:12.119"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:12.120">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:11.490" status="PASS" endtime="20170417 18:26:12.120"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:12.121">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:12.120" status="PASS" endtime="20170417 18:26:12.121"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:12.121">${status} = True</msg>
<status starttime="20170417 18:26:12.120" status="PASS" endtime="20170417 18:26:12.121"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170417 18:26:12.121" status="PASS" endtime="20170417 18:26:12.121"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:12.122">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 fe cc ec b3 00 00 00 05 fe ce 24 c9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 08 90 00 00 08 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492453093307, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 6d 90 b8 6d 00 00 00 06 6d 95 01 d5 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 35 35 c0 35 ad 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 35 35 c3 48 19 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 35 35 c3 59 57 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 35 35 c3 8b fa 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 35 36 f2 c2 8b 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492453096446, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 6d 90 b8 6d 00 00 00 06 6d 95 01 d5 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 35 35 c0 35 ad 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 35 35 c3 48 19 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 35 35 c3 59 57 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 35 35 c3 8b fa 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 35 36 f2 c2 8b 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492453278246, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c5 2d b7 5e 00 00 00 04 c5 2e fc e7 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 05 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 40 0d 40 bc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 3b 57 c0 b8 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 3b 5a d4 03 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 3b 5a e5 4d 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 3b 5b 17 1b 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 28 00 ed a8 1a 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492453281178, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:26:12.123">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170417 18:26:12.123">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00...</msg>
<status starttime="20170417 18:26:12.122" status="PASS" endtime="20170417 18:26:12.123"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:12.124">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_elog.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_elog.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:12.124" status="PASS" endtime="20170417 18:26:12.124"></status>
</kw>
<status starttime="20170417 18:26:12.123" status="PASS" endtime="20170417 18:26:12.125"></status>
</kw>
<status starttime="20170417 18:26:11.490" status="PASS" endtime="20170417 18:26:12.125"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:12.125">${logpath} = /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_sensor_list.txt</msg>
<status starttime="20170417 18:26:12.125" status="PASS" endtime="20170417 18:26:12.125"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:12.128">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:26:12.127" status="PASS" endtime="20170417 18:26:12.128"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:12.129">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:26:12.129" status="PASS" endtime="20170417 18:26:12.129"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:12.130">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:26:12.129" status="PASS" endtime="20170417 18:26:12.130"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:12.131">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:26:12.130" status="PASS" endtime="20170417 18:26:12.131"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:12.361">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:26:12.132" status="PASS" endtime="20170417 18:26:12.361"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:12.361">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:26:12.361">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:12.131" status="PASS" endtime="20170417 18:26:12.361"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:12.362">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:12.361" status="PASS" endtime="20170417 18:26:12.362"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:12.362">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:12.362" status="PASS" endtime="20170417 18:26:12.362"></status>
</kw>
<status starttime="20170417 18:26:12.127" status="PASS" endtime="20170417 18:26:12.363"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:12.363">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170417 18:26:12.363" status="PASS" endtime="20170417 18:26:12.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170417 18:26:12.363" status="PASS" endtime="20170417 18:26:12.364"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:12.564">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:26:12.564">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:12.364" status="PASS" endtime="20170417 18:26:12.564"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170417 18:26:12.564" status="PASS" endtime="20170417 18:26:12.565"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:12.565">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:12.126" status="PASS" endtime="20170417 18:26:12.565"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:12.566">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:12.566" status="PASS" endtime="20170417 18:26:12.566"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:12.566">${status} = True</msg>
<status starttime="20170417 18:26:12.565" status="PASS" endtime="20170417 18:26:12.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170417 18:26:12.567" status="PASS" endtime="20170417 18:26:12.567"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:12.568">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:26:12.568">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170417 18:26:12.568">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170417 18:26:12.567" status="PASS" endtime="20170417 18:26:12.568"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:12.569">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_sensor_list.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:12.569" status="PASS" endtime="20170417 18:26:12.569"></status>
</kw>
<status starttime="20170417 18:26:12.568" status="PASS" endtime="20170417 18:26:12.569"></status>
</kw>
<status starttime="20170417 18:26:12.125" status="PASS" endtime="20170417 18:26:12.569"></status>
</kw>
<status starttime="20170417 18:26:08.301" status="PASS" endtime="20170417 18:26:12.570"></status>
</kw>
<status starttime="20170417 18:26:08.300" status="PASS" endtime="20170417 18:26:12.570"></status>
</kw>
<status starttime="20170417 18:26:08.300" status="PASS" endtime="20170417 18:26:12.570"></status>
</kw>
<status starttime="20170417 18:26:08.300" status="PASS" endtime="20170417 18:26:12.570"></status>
</kw>
<status starttime="20170417 18:26:06.637" status="PASS" endtime="20170417 18:26:12.570"></status>
</kw>
<status starttime="20170417 18:26:06.637" status="PASS" endtime="20170417 18:26:12.570"></status>
</kw>
<status starttime="20170417 18:26:06.635" status="PASS" endtime="20170417 18:26:12.570"></status>
</kw>
<status starttime="20170417 18:26:06.634" status="PASS" endtime="20170417 18:26:12.570"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:12.572">Returning from the enclosing user keyword.</msg>
<status starttime="20170417 18:26:12.572" status="PASS" endtime="20170417 18:26:12.572"></status>
</kw>
<status starttime="20170417 18:26:12.571" status="PASS" endtime="20170417 18:26:12.572"></status>
</kw>
<status starttime="20170417 18:26:12.571" status="PASS" endtime="20170417 18:26:12.573"></status>
</kw>
<status starttime="20170417 18:26:12.570" status="PASS" endtime="20170417 18:26:12.573"></status>
</kw>
<status starttime="20170417 18:26:12.570" status="PASS" endtime="20170417 18:26:12.573"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:26:12.576">Dictionary does not contain key 'host'.</msg>
<status starttime="20170417 18:26:12.576" status="FAIL" endtime="20170417 18:26:12.576"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:12.576">${has_host} = False</msg>
<status starttime="20170417 18:26:12.575" status="PASS" endtime="20170417 18:26:12.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170417 18:26:12.577" status="PASS" endtime="20170417 18:26:12.578"></status>
</kw>
<status starttime="20170417 18:26:12.577" status="PASS" endtime="20170417 18:26:12.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:12.580">${port_num} = 22</msg>
<status starttime="20170417 18:26:12.579" status="PASS" endtime="20170417 18:26:12.580"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:12.580">${SSH_PORT} = 22</msg>
<status starttime="20170417 18:26:12.580" status="PASS" endtime="20170417 18:26:12.580"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:12.581">${https_num} = 443</msg>
<status starttime="20170417 18:26:12.581" status="PASS" endtime="20170417 18:26:12.581"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:12.582">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170417 18:26:12.581" status="PASS" endtime="20170417 18:26:12.582"></status>
</kw>
<status starttime="20170417 18:26:12.578" status="PASS" endtime="20170417 18:26:12.582"></status>
</kw>
<status starttime="20170417 18:26:12.578" status="PASS" endtime="20170417 18:26:12.582"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:26:12.583">Dictionary does not contain key 'port'.</msg>
<status starttime="20170417 18:26:12.583" status="FAIL" endtime="20170417 18:26:12.583"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:12.583">${has_port} = False</msg>
<status starttime="20170417 18:26:12.582" status="PASS" endtime="20170417 18:26:12.583"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170417 18:26:12.585" status="PASS" endtime="20170417 18:26:12.585"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170417 18:26:12.586" status="PASS" endtime="20170417 18:26:12.586"></status>
</kw>
<status starttime="20170417 18:26:12.584" status="PASS" endtime="20170417 18:26:12.586"></status>
</kw>
<status starttime="20170417 18:26:12.583" status="PASS" endtime="20170417 18:26:12.586"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:12.587">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170417 18:26:14.238">Read output: root@witherspoon:~#</msg>
<status starttime="20170417 18:26:12.586" status="PASS" endtime="20170417 18:26:14.238"></status>
</kw>
<status starttime="20170417 18:26:12.574" status="PASS" endtime="20170417 18:26:14.239"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:14.239">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170417 18:26:14.463">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:26:14.463">${core_files} = /tmp/core_phosphor-hwmon-.1142
/tmp/core_phosphor-hwmon-.1770</msg>
<status starttime="20170417 18:26:14.239" status="PASS" endtime="20170417 18:26:14.463"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:14.464">@{core_list} = [ /tmp/core_phosphor-hwmon-.1142 | /tmp/core_phosphor-hwmon-.1770 ]</msg>
<status starttime="20170417 18:26:14.463" status="PASS" endtime="20170417 18:26:14.464"></status>
</kw>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170417 18:26:14.464" status="PASS" endtime="20170417 18:26:14.474"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170417 18:26:14.476" status="PASS" endtime="20170417 18:26:15.330"></status>
</kw>
<status starttime="20170417 18:26:14.475" status="PASS" endtime="20170417 18:26:15.330"></status>
</kw>
<status starttime="20170417 18:26:14.475" status="PASS" endtime="20170417 18:26:15.330"></status>
</kw>
<status starttime="20170417 18:26:14.464" status="PASS" endtime="20170417 18:26:15.331"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_phosphor-hwmon-.1142" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170417 18:26:15.331" status="PASS" endtime="20170417 18:26:15.616"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:15.617">Executing command 'rm /tmp/core_phosphor-hwmon-.1142'.</msg>
<msg level="INFO" timestamp="20170417 18:26:15.674">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:26:15.674">${stdout} = </msg>
<msg level="INFO" timestamp="20170417 18:26:15.674">${stderr} = </msg>
<status starttime="20170417 18:26:15.617" status="PASS" endtime="20170417 18:26:15.674"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:15.674">Length is 0</msg>
<status starttime="20170417 18:26:15.674" status="PASS" endtime="20170417 18:26:15.675"></status>
</kw>
<status starttime="20170417 18:26:15.616" status="PASS" endtime="20170417 18:26:15.675"></status>
</kw>
<status starttime="20170417 18:26:15.331" status="PASS" endtime="20170417 18:26:15.675"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-hwmon-.1770" type="foritem">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status starttime="20170417 18:26:15.675" status="PASS" endtime="20170417 18:26:15.994"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:15.996">Executing command 'rm /tmp/core_phosphor-hwmon-.1770'.</msg>
<msg level="INFO" timestamp="20170417 18:26:16.053">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:26:16.053">${stdout} = </msg>
<msg level="INFO" timestamp="20170417 18:26:16.053">${stderr} = </msg>
<status starttime="20170417 18:26:15.996" status="PASS" endtime="20170417 18:26:16.053"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:16.053">Length is 0</msg>
<status starttime="20170417 18:26:16.053" status="PASS" endtime="20170417 18:26:16.053"></status>
</kw>
<status starttime="20170417 18:26:15.995" status="PASS" endtime="20170417 18:26:16.054"></status>
</kw>
<status starttime="20170417 18:26:15.675" status="PASS" endtime="20170417 18:26:16.054"></status>
</kw>
<status starttime="20170417 18:26:15.331" status="PASS" endtime="20170417 18:26:16.054"></status>
</kw>
<status starttime="20170417 18:26:12.574" status="PASS" endtime="20170417 18:26:16.054"></status>
</kw>
<status starttime="20170417 18:26:12.574" status="PASS" endtime="20170417 18:26:16.054"></status>
</kw>
<status starttime="20170417 18:26:12.573" status="PASS" endtime="20170417 18:26:16.054"></status>
</kw>
<status starttime="20170417 18:26:12.573" status="PASS" endtime="20170417 18:26:16.054"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:26:16.057">Dictionary does not contain key 'host'.</msg>
<status starttime="20170417 18:26:16.057" status="FAIL" endtime="20170417 18:26:16.058"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:16.058">${has_host} = False</msg>
<status starttime="20170417 18:26:16.056" status="PASS" endtime="20170417 18:26:16.058"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170417 18:26:16.059" status="PASS" endtime="20170417 18:26:16.059"></status>
</kw>
<status starttime="20170417 18:26:16.058" status="PASS" endtime="20170417 18:26:16.059"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:16.060">${port_num} = 22</msg>
<status starttime="20170417 18:26:16.060" status="PASS" endtime="20170417 18:26:16.061"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:16.061">${SSH_PORT} = 22</msg>
<status starttime="20170417 18:26:16.061" status="PASS" endtime="20170417 18:26:16.061"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:16.062">${https_num} = 443</msg>
<status starttime="20170417 18:26:16.061" status="PASS" endtime="20170417 18:26:16.062"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:16.063">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170417 18:26:16.062" status="PASS" endtime="20170417 18:26:16.063"></status>
</kw>
<status starttime="20170417 18:26:16.060" status="PASS" endtime="20170417 18:26:16.063"></status>
</kw>
<status starttime="20170417 18:26:16.059" status="PASS" endtime="20170417 18:26:16.063"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:26:16.064">Dictionary does not contain key 'port'.</msg>
<status starttime="20170417 18:26:16.063" status="FAIL" endtime="20170417 18:26:16.064"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:16.064">${has_port} = False</msg>
<status starttime="20170417 18:26:16.063" status="PASS" endtime="20170417 18:26:16.064"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170417 18:26:16.065" status="PASS" endtime="20170417 18:26:16.066"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170417 18:26:16.066" status="PASS" endtime="20170417 18:26:16.066"></status>
</kw>
<status starttime="20170417 18:26:16.065" status="PASS" endtime="20170417 18:26:16.066"></status>
</kw>
<status starttime="20170417 18:26:16.064" status="PASS" endtime="20170417 18:26:16.066"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:16.067">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170417 18:26:18.092">Read output: root@witherspoon:~#</msg>
<status starttime="20170417 18:26:16.067" status="PASS" endtime="20170417 18:26:18.092"></status>
</kw>
<status starttime="20170417 18:26:16.056" status="PASS" endtime="20170417 18:26:18.092"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:18.093">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170417 18:26:18.093" status="PASS" endtime="20170417 18:26:18.093"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:18.095">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20170417 18:26:18.094" status="PASS" endtime="20170417 18:26:18.095"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:18.100">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170417 18:26:18.095" status="PASS" endtime="20170417 18:26:18.100"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:18.104">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:18.103" status="PASS" endtime="20170417 18:26:18.104"></status>
</kw>
<status starttime="20170417 18:26:18.103" status="PASS" endtime="20170417 18:26:18.104"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:18.105">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:18.105" status="PASS" endtime="20170417 18:26:18.106"></status>
</kw>
<status starttime="20170417 18:26:18.104" status="PASS" endtime="20170417 18:26:18.106"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:18.107">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:18.107" status="PASS" endtime="20170417 18:26:18.107"></status>
</kw>
<status starttime="20170417 18:26:18.106" status="PASS" endtime="20170417 18:26:18.107"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:18.108">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:18.108" status="PASS" endtime="20170417 18:26:18.108"></status>
</kw>
<status starttime="20170417 18:26:18.107" status="PASS" endtime="20170417 18:26:18.108"></status>
</kw>
<status starttime="20170417 18:26:18.102" status="PASS" endtime="20170417 18:26:18.108"></status>
</kw>
<status starttime="20170417 18:26:18.101" status="PASS" endtime="20170417 18:26:18.109"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:18.109">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170417 18:26:19.738">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:26:19.738">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg level="INFO" timestamp="20170417 18:26:19.739">${stderr} = </msg>
<status starttime="20170417 18:26:18.109" status="PASS" endtime="20170417 18:26:19.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:19.750">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:19.749" status="PASS" endtime="20170417 18:26:19.750"></status>
</kw>
<status starttime="20170417 18:26:19.747" status="PASS" endtime="20170417 18:26:19.750"></status>
</kw>
<status starttime="20170417 18:26:19.739" status="PASS" endtime="20170417 18:26:19.750"></status>
</kw>
<status starttime="20170417 18:26:18.101" status="PASS" endtime="20170417 18:26:19.750"></status>
</kw>
<status starttime="20170417 18:26:18.100" status="PASS" endtime="20170417 18:26:19.750"></status>
</kw>
<status starttime="20170417 18:26:18.100" status="PASS" endtime="20170417 18:26:19.751"></status>
</kw>
<status starttime="20170417 18:26:18.094" status="PASS" endtime="20170417 18:26:19.751"></status>
</kw>
<status starttime="20170417 18:26:18.094" status="PASS" endtime="20170417 18:26:19.751"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:19.752">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status starttime="20170417 18:26:19.752" status="PASS" endtime="20170417 18:26:19.752"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:19.753">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170417 18:26:19.753" status="PASS" endtime="20170417 18:26:19.754"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:19.759">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:19.758" status="PASS" endtime="20170417 18:26:19.759"></status>
</kw>
<status starttime="20170417 18:26:19.757" status="PASS" endtime="20170417 18:26:19.760"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:19.761">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:19.761" status="PASS" endtime="20170417 18:26:19.762"></status>
</kw>
<status starttime="20170417 18:26:19.760" status="PASS" endtime="20170417 18:26:19.762"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:19.763">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:19.763" status="PASS" endtime="20170417 18:26:19.764"></status>
</kw>
<status starttime="20170417 18:26:19.762" status="PASS" endtime="20170417 18:26:19.764"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:19.765">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:19.765" status="PASS" endtime="20170417 18:26:19.766"></status>
</kw>
<status starttime="20170417 18:26:19.764" status="PASS" endtime="20170417 18:26:19.766"></status>
</kw>
<status starttime="20170417 18:26:19.756" status="PASS" endtime="20170417 18:26:19.766"></status>
</kw>
<status starttime="20170417 18:26:19.756" status="PASS" endtime="20170417 18:26:19.766"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:19.767">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170417 18:26:20.074">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:26:20.075">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.4-25"
VERSION_ID="v1.99.4-25-g12a2fed"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170417 18:26:20.075">${stderr} = </msg>
<status starttime="20170417 18:26:19.766" status="PASS" endtime="20170417 18:26:20.075"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.081">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.080" status="PASS" endtime="20170417 18:26:20.081"></status>
</kw>
<status starttime="20170417 18:26:20.079" status="PASS" endtime="20170417 18:26:20.081"></status>
</kw>
<status starttime="20170417 18:26:20.075" status="PASS" endtime="20170417 18:26:20.081"></status>
</kw>
<status starttime="20170417 18:26:19.754" status="PASS" endtime="20170417 18:26:20.081"></status>
</kw>
<status starttime="20170417 18:26:19.754" status="PASS" endtime="20170417 18:26:20.081"></status>
</kw>
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.084">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.084" status="PASS" endtime="20170417 18:26:20.084"></status>
</kw>
<status starttime="20170417 18:26:20.083" status="PASS" endtime="20170417 18:26:20.084"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.085">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.085" status="PASS" endtime="20170417 18:26:20.086"></status>
</kw>
<status starttime="20170417 18:26:20.084" status="PASS" endtime="20170417 18:26:20.086"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.087">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.087" status="PASS" endtime="20170417 18:26:20.087"></status>
</kw>
<status starttime="20170417 18:26:20.086" status="PASS" endtime="20170417 18:26:20.087"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.090">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.088" status="PASS" endtime="20170417 18:26:20.090"></status>
</kw>
<status starttime="20170417 18:26:20.087" status="PASS" endtime="20170417 18:26:20.090"></status>
</kw>
<status starttime="20170417 18:26:20.083" status="PASS" endtime="20170417 18:26:20.090"></status>
</kw>
<status starttime="20170417 18:26:20.082" status="PASS" endtime="20170417 18:26:20.090"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:20.091">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170417 18:26:20.432">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170417 18:26:20.432">${stdout} = </msg>
<msg level="INFO" timestamp="20170417 18:26:20.432">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status starttime="20170417 18:26:20.091" status="PASS" endtime="20170417 18:26:20.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.439">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.439" status="PASS" endtime="20170417 18:26:20.440"></status>
</kw>
<status starttime="20170417 18:26:20.438" status="PASS" endtime="20170417 18:26:20.440"></status>
</kw>
<status starttime="20170417 18:26:20.432" status="PASS" endtime="20170417 18:26:20.440"></status>
</kw>
<status starttime="20170417 18:26:20.081" status="PASS" endtime="20170417 18:26:20.440"></status>
</kw>
<status starttime="20170417 18:26:20.081" status="PASS" endtime="20170417 18:26:20.440"></status>
</kw>
<status starttime="20170417 18:26:19.754" status="PASS" endtime="20170417 18:26:20.440"></status>
</kw>
<status starttime="20170417 18:26:19.751" status="PASS" endtime="20170417 18:26:20.440"></status>
</kw>
<status starttime="20170417 18:26:19.751" status="PASS" endtime="20170417 18:26:20.440"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:20.441">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170417 18:26:20.441" status="PASS" endtime="20170417 18:26:20.441"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:20.442">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170417 18:26:20.442" status="PASS" endtime="20170417 18:26:20.442"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.445">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.445" status="PASS" endtime="20170417 18:26:20.445"></status>
</kw>
<status starttime="20170417 18:26:20.444" status="PASS" endtime="20170417 18:26:20.445"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.447">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.446" status="PASS" endtime="20170417 18:26:20.447"></status>
</kw>
<status starttime="20170417 18:26:20.445" status="PASS" endtime="20170417 18:26:20.447"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.448">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.447" status="PASS" endtime="20170417 18:26:20.448"></status>
</kw>
<status starttime="20170417 18:26:20.447" status="PASS" endtime="20170417 18:26:20.448"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.449">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.449" status="PASS" endtime="20170417 18:26:20.449"></status>
</kw>
<status starttime="20170417 18:26:20.448" status="PASS" endtime="20170417 18:26:20.450"></status>
</kw>
<status starttime="20170417 18:26:20.444" status="PASS" endtime="20170417 18:26:20.450"></status>
</kw>
<status starttime="20170417 18:26:20.443" status="PASS" endtime="20170417 18:26:20.450"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:20.450">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170417 18:26:20.792">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:26:20.792">${stdout} =  18:26:21 up 21 min,  load average: 2.50, 2.00, 1.52</msg>
<msg level="INFO" timestamp="20170417 18:26:20.793">${stderr} = </msg>
<status starttime="20170417 18:26:20.450" status="PASS" endtime="20170417 18:26:20.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.799">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.798" status="PASS" endtime="20170417 18:26:20.799"></status>
</kw>
<status starttime="20170417 18:26:20.798" status="PASS" endtime="20170417 18:26:20.799"></status>
</kw>
<status starttime="20170417 18:26:20.793" status="PASS" endtime="20170417 18:26:20.799"></status>
</kw>
<status starttime="20170417 18:26:20.442" status="PASS" endtime="20170417 18:26:20.799"></status>
</kw>
<status starttime="20170417 18:26:20.442" status="PASS" endtime="20170417 18:26:20.799"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.803">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.802" status="PASS" endtime="20170417 18:26:20.803"></status>
</kw>
<status starttime="20170417 18:26:20.802" status="PASS" endtime="20170417 18:26:20.803"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.804">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.804" status="PASS" endtime="20170417 18:26:20.804"></status>
</kw>
<status starttime="20170417 18:26:20.803" status="PASS" endtime="20170417 18:26:20.804"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.805">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.805" status="PASS" endtime="20170417 18:26:20.805"></status>
</kw>
<status starttime="20170417 18:26:20.804" status="PASS" endtime="20170417 18:26:20.806"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.807">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.806" status="PASS" endtime="20170417 18:26:20.807"></status>
</kw>
<status starttime="20170417 18:26:20.806" status="PASS" endtime="20170417 18:26:20.807"></status>
</kw>
<status starttime="20170417 18:26:20.801" status="PASS" endtime="20170417 18:26:20.807"></status>
</kw>
<status starttime="20170417 18:26:20.800" status="PASS" endtime="20170417 18:26:20.807"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:20.807">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170417 18:26:20.971">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:26:20.972">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg level="INFO" timestamp="20170417 18:26:20.972">${stderr} = </msg>
<status starttime="20170417 18:26:20.807" status="PASS" endtime="20170417 18:26:20.972"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.978">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.977" status="PASS" endtime="20170417 18:26:20.978"></status>
</kw>
<status starttime="20170417 18:26:20.977" status="PASS" endtime="20170417 18:26:20.978"></status>
</kw>
<status starttime="20170417 18:26:20.972" status="PASS" endtime="20170417 18:26:20.978"></status>
</kw>
<status starttime="20170417 18:26:20.800" status="PASS" endtime="20170417 18:26:20.978"></status>
</kw>
<status starttime="20170417 18:26:20.799" status="PASS" endtime="20170417 18:26:20.978"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.981">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.981" status="PASS" endtime="20170417 18:26:20.981"></status>
</kw>
<status starttime="20170417 18:26:20.980" status="PASS" endtime="20170417 18:26:20.981"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.983">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.982" status="PASS" endtime="20170417 18:26:20.983"></status>
</kw>
<status starttime="20170417 18:26:20.982" status="PASS" endtime="20170417 18:26:20.983"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.984">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.984" status="PASS" endtime="20170417 18:26:20.984"></status>
</kw>
<status starttime="20170417 18:26:20.983" status="PASS" endtime="20170417 18:26:20.984"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:20.986">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:20.985" status="PASS" endtime="20170417 18:26:20.986"></status>
</kw>
<status starttime="20170417 18:26:20.984" status="PASS" endtime="20170417 18:26:20.986"></status>
</kw>
<status starttime="20170417 18:26:20.980" status="PASS" endtime="20170417 18:26:20.986"></status>
</kw>
<status starttime="20170417 18:26:20.979" status="PASS" endtime="20170417 18:26:20.986"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:20.987">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170417 18:26:21.082">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170417 18:26:21.083">${stdout} = Linux witherspoon 4.7.10-6786cab8778ba96d84d89c7aec34374b5f4f1968 #1 Mon Apr 17 16:57:10 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170417 18:26:21.083">${stderr} = </msg>
<status starttime="20170417 18:26:20.986" status="PASS" endtime="20170417 18:26:21.083"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:21.089">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:21.088" status="PASS" endtime="20170417 18:26:21.089"></status>
</kw>
<status starttime="20170417 18:26:21.088" status="PASS" endtime="20170417 18:26:21.089"></status>
</kw>
<status starttime="20170417 18:26:21.083" status="PASS" endtime="20170417 18:26:21.089"></status>
</kw>
<status starttime="20170417 18:26:20.979" status="PASS" endtime="20170417 18:26:21.089"></status>
</kw>
<status starttime="20170417 18:26:20.978" status="PASS" endtime="20170417 18:26:21.089"></status>
</kw>
<status starttime="20170417 18:26:20.442" status="PASS" endtime="20170417 18:26:21.089"></status>
</kw>
<status starttime="20170417 18:26:20.440" status="PASS" endtime="20170417 18:26:21.089"></status>
</kw>
<status starttime="20170417 18:26:20.440" status="PASS" endtime="20170417 18:26:21.089"></status>
</kw>
<status starttime="20170417 18:26:18.093" status="PASS" endtime="20170417 18:26:21.089"></status>
</kw>
<status starttime="20170417 18:26:16.055" status="PASS" endtime="20170417 18:26:21.090"></status>
</kw>
<status starttime="20170417 18:26:16.055" status="PASS" endtime="20170417 18:26:21.090"></status>
</kw>
<status starttime="20170417 18:26:16.054" status="PASS" endtime="20170417 18:26:21.090"></status>
</kw>
<status starttime="20170417 18:26:16.054" status="PASS" endtime="20170417 18:26:21.090"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:21.093">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:26:21.092" status="PASS" endtime="20170417 18:26:21.093"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.094">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:26:21.093" status="PASS" endtime="20170417 18:26:21.094"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.094">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:26:21.094" status="PASS" endtime="20170417 18:26:21.094"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.095">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:26:21.095" status="PASS" endtime="20170417 18:26:21.095"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:21.364">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:26:21.096" status="PASS" endtime="20170417 18:26:21.364"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:21.364">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:26:21.364">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:21.095" status="PASS" endtime="20170417 18:26:21.365"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:21.365">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:21.365" status="PASS" endtime="20170417 18:26:21.365"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:21.366">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:21.366" status="PASS" endtime="20170417 18:26:21.366"></status>
</kw>
<status starttime="20170417 18:26:21.092" status="PASS" endtime="20170417 18:26:21.366"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.367">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170417 18:26:21.366" status="PASS" endtime="20170417 18:26:21.367"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170417 18:26:21.367" status="PASS" endtime="20170417 18:26:21.367"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.542">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:26:21.542">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:21.368" status="PASS" endtime="20170417 18:26:21.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170417 18:26:21.542" status="PASS" endtime="20170417 18:26:21.543"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:21.543">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:21.091" status="PASS" endtime="20170417 18:26:21.543"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:21.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:21.544" status="PASS" endtime="20170417 18:26:21.544"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:21.544">${status} = True</msg>
<status starttime="20170417 18:26:21.543" status="PASS" endtime="20170417 18:26:21.544"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status starttime="20170417 18:26:21.544" status="PASS" endtime="20170417 18:26:21.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.545">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 fe cc ec b3 00 00 00 05 fe ce 24 c9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 08 90 00 00 08 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492453093307, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 6d 90 b8 6d 00 00 00 06 6d 95 01 d5 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 35 35 c0 35 ad 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 35 35 c3 48 19 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 35 35 c3 59 57 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 35 35 c3 8b fa 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 35 36 f2 c2 8b 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492453096446, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 6d 90 b8 6d 00 00 00 06 6d 95 01 d5 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 35 35 c0 35 ad 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 35 35 c3 48 19 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 35 35 c3 59 57 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 35 35 c3 8b fa 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 35 36 f2 c2 8b 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492453278246, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c5 2d b7 5e 00 00 00 04 c5 2e fc e7 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 05 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 40 0d 40 bc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 3b 57 c0 b8 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 3b 5a d4 03 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 3b 5a e5 4d 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 3b 5b 17 1b 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 28 00 ed a8 1a 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1492453281178, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:26:21.546">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:26:21.546">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/4': {u'Id': 4, u'Resolved': 0, u'associations': [], u'AdditionalData': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07...</msg>
<status starttime="20170417 18:26:21.545" status="PASS" endtime="20170417 18:26:21.546"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.547">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4']</msg>
<status starttime="20170417 18:26:21.546" status="PASS" endtime="20170417 18:26:21.547"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.547">${logpath} = /tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel</msg>
<status starttime="20170417 18:26:21.547" status="PASS" endtime="20170417 18:26:21.547"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:21.548">Created file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:21.547" status="PASS" endtime="20170417 18:26:21.548"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/1" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:21.550">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:26:21.550" status="PASS" endtime="20170417 18:26:21.551"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.552">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:26:21.551" status="PASS" endtime="20170417 18:26:21.552"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.552">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:26:21.552" status="PASS" endtime="20170417 18:26:21.552"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.553">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:26:21.553" status="PASS" endtime="20170417 18:26:21.553"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:21.735">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:26:21.554" status="PASS" endtime="20170417 18:26:21.735"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:21.735">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:26:21.735">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:21.554" status="PASS" endtime="20170417 18:26:21.735"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:21.736">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:21.736" status="PASS" endtime="20170417 18:26:21.736"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:21.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:21.736" status="PASS" endtime="20170417 18:26:21.737"></status>
</kw>
<status starttime="20170417 18:26:21.550" status="PASS" endtime="20170417 18:26:21.737"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.737">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status starttime="20170417 18:26:21.737" status="PASS" endtime="20170417 18:26:21.737"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170417 18:26:21.738" status="PASS" endtime="20170417 18:26:21.738"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.826">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:26:21.826">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:21.738" status="PASS" endtime="20170417 18:26:21.827"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170417 18:26:21.827" status="PASS" endtime="20170417 18:26:21.827"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:21.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:21.549" status="PASS" endtime="20170417 18:26:21.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:21.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:21.828" status="PASS" endtime="20170417 18:26:21.828"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.829">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 fe cc ec b3 00 00 00 05 fe ce 24 c9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 08 90 00 00 08 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:26:21.829">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:26:21.829">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 fe cc ec b3 00 00 00 05 fe ce 24 c9 42 00 00 07 00 00 00 ...</msg>
<status starttime="20170417 18:26:21.828" status="PASS" endtime="20170417 18:26:21.829"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:21.829">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 05 fe cc ec b3 00 00 00 05 fe ce 24 c9 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 08 90 00 00 08 ...</msg>
<status starttime="20170417 18:26:21.548" status="PASS" endtime="20170417 18:26:21.829"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.830">Length is 1</msg>
<msg level="INFO" timestamp="20170417 18:26:21.830">${length} = 1</msg>
<status starttime="20170417 18:26:21.829" status="PASS" endtime="20170417 18:26:21.830"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170417 18:26:21.830" status="PASS" endtime="20170417 18:26:21.831"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:21.838">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:21.834" status="PASS" endtime="20170417 18:26:21.838"></status>
</kw>
<status starttime="20170417 18:26:21.831" status="PASS" endtime="20170417 18:26:21.838"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:21.840">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:21.839" status="PASS" endtime="20170417 18:26:21.840"></status>
</kw>
<status starttime="20170417 18:26:21.838" status="PASS" endtime="20170417 18:26:21.840"></status>
</kw>
<status starttime="20170417 18:26:21.548" status="PASS" endtime="20170417 18:26:21.840"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:21.842">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:26:21.842" status="PASS" endtime="20170417 18:26:21.843"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.843">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:26:21.843" status="PASS" endtime="20170417 18:26:21.843"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.844">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:26:21.843" status="PASS" endtime="20170417 18:26:21.844"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:21.845">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:26:21.844" status="PASS" endtime="20170417 18:26:21.845"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:22.229">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:26:21.845" status="PASS" endtime="20170417 18:26:22.229"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:22.230">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:26:22.230">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:21.845" status="PASS" endtime="20170417 18:26:22.230"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:22.230">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:22.230" status="PASS" endtime="20170417 18:26:22.231"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:22.232">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:22.231" status="PASS" endtime="20170417 18:26:22.232"></status>
</kw>
<status starttime="20170417 18:26:21.841" status="PASS" endtime="20170417 18:26:22.232"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:22.232">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status starttime="20170417 18:26:22.232" status="PASS" endtime="20170417 18:26:22.232"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170417 18:26:22.233" status="PASS" endtime="20170417 18:26:22.233"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:22.394">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:26:22.394">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:22.233" status="PASS" endtime="20170417 18:26:22.394"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170417 18:26:22.395" status="PASS" endtime="20170417 18:26:22.395"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:22.395">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:21.841" status="PASS" endtime="20170417 18:26:22.395"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:22.396">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:22.395" status="PASS" endtime="20170417 18:26:22.396"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:22.396">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 6d 90 b8 6d 00 00 00 06 6d 95 01 d5 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 35 35 c0 35 ad 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 35 35 c3 48 19 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 35 35 c3 59 57 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 35 35 c3 8b fa 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 35 36 f2 c2 8b 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:26:22.397">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:26:22.397">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 6d 90 b8 6d 00 00 00 06 6d 95 01 d5 42 00 00 08 00 00 00 ...</msg>
<status starttime="20170417 18:26:22.396" status="PASS" endtime="20170417 18:26:22.397"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:22.397">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 6d 90 b8 6d 00 00 00 06 6d 95 01 d5 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 ...</msg>
<status starttime="20170417 18:26:21.840" status="PASS" endtime="20170417 18:26:22.397"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:22.398">Length is 1</msg>
<msg level="INFO" timestamp="20170417 18:26:22.398">${length} = 1</msg>
<status starttime="20170417 18:26:22.397" status="PASS" endtime="20170417 18:26:22.398"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170417 18:26:22.398" status="PASS" endtime="20170417 18:26:22.398"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:22.400">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:22.399" status="PASS" endtime="20170417 18:26:22.400"></status>
</kw>
<status starttime="20170417 18:26:22.399" status="PASS" endtime="20170417 18:26:22.400"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:22.401">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:22.401" status="PASS" endtime="20170417 18:26:22.401"></status>
</kw>
<status starttime="20170417 18:26:22.400" status="PASS" endtime="20170417 18:26:22.401"></status>
</kw>
<status starttime="20170417 18:26:21.840" status="PASS" endtime="20170417 18:26:22.401"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:22.403">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:26:22.403" status="PASS" endtime="20170417 18:26:22.404"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:22.405">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:26:22.404" status="PASS" endtime="20170417 18:26:22.405"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:22.405">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:26:22.405" status="PASS" endtime="20170417 18:26:22.405"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:22.406">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:26:22.406" status="PASS" endtime="20170417 18:26:22.406"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:23.019">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:26:22.407" status="PASS" endtime="20170417 18:26:23.019"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:23.020">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:26:23.020">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:22.406" status="PASS" endtime="20170417 18:26:23.020"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:23.020">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:23.020" status="PASS" endtime="20170417 18:26:23.020"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:23.021">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:23.021" status="PASS" endtime="20170417 18:26:23.021"></status>
</kw>
<status starttime="20170417 18:26:22.403" status="PASS" endtime="20170417 18:26:23.021"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.022">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status starttime="20170417 18:26:23.022" status="PASS" endtime="20170417 18:26:23.022"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170417 18:26:23.022" status="PASS" endtime="20170417 18:26:23.023"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.168">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:26:23.169">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:23.023" status="PASS" endtime="20170417 18:26:23.169"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170417 18:26:23.169" status="PASS" endtime="20170417 18:26:23.169"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:23.169">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:22.402" status="PASS" endtime="20170417 18:26:23.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:23.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:23.170" status="PASS" endtime="20170417 18:26:23.170"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.171">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 6d 90 b8 6d 00 00 00 06 6d 95 01 d5 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 06 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 35 35 c0 35 ad 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 35 35 c3 48 19 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 35 35 c3 59 57 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 35 35 c3 8b fa 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 35 36 f2 c2 8b 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:26:23.171">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:26:23.171">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 6d 90 b8 6d 00 00 00 06 6d 95 01 d5 42 00 00 08 00 00 00 ...</msg>
<status starttime="20170417 18:26:23.170" status="PASS" endtime="20170417 18:26:23.171"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:23.171">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 6d 90 b8 6d 00 00 00 06 6d 95 01 d5 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 ...</msg>
<status starttime="20170417 18:26:22.401" status="PASS" endtime="20170417 18:26:23.171"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.172">Length is 1</msg>
<msg level="INFO" timestamp="20170417 18:26:23.172">${length} = 1</msg>
<status starttime="20170417 18:26:23.172" status="PASS" endtime="20170417 18:26:23.172"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170417 18:26:23.172" status="PASS" endtime="20170417 18:26:23.173"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:23.174">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:23.173" status="PASS" endtime="20170417 18:26:23.174"></status>
</kw>
<status starttime="20170417 18:26:23.173" status="PASS" endtime="20170417 18:26:23.174"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:23.175">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:23.175" status="PASS" endtime="20170417 18:26:23.175"></status>
</kw>
<status starttime="20170417 18:26:23.174" status="PASS" endtime="20170417 18:26:23.175"></status>
</kw>
<status starttime="20170417 18:26:22.401" status="PASS" endtime="20170417 18:26:23.175"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:23.178">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170417 18:26:23.177" status="PASS" endtime="20170417 18:26:23.178"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.179">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170417 18:26:23.179" status="PASS" endtime="20170417 18:26:23.179"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.180">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170417 18:26:23.179" status="PASS" endtime="20170417 18:26:23.180"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.181">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170417 18:26:23.180" status="PASS" endtime="20170417 18:26:23.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:23.609">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170417 18:26:23.182" status="PASS" endtime="20170417 18:26:23.610"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:23.610">${status} = PASS</msg>
<msg level="INFO" timestamp="20170417 18:26:23.610">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:23.181" status="PASS" endtime="20170417 18:26:23.610"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:23.611">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:23.610" status="PASS" endtime="20170417 18:26:23.611"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:23.611">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:23.611" status="PASS" endtime="20170417 18:26:23.611"></status>
</kw>
<status starttime="20170417 18:26:23.177" status="PASS" endtime="20170417 18:26:23.611"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.612">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status starttime="20170417 18:26:23.612" status="PASS" endtime="20170417 18:26:23.612"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170417 18:26:23.612" status="PASS" endtime="20170417 18:26:23.613"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.737">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170417 18:26:23.737">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:23.613" status="PASS" endtime="20170417 18:26:23.737"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170417 18:26:23.737" status="PASS" endtime="20170417 18:26:23.737"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:23.738">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170417 18:26:23.176" status="PASS" endtime="20170417 18:26:23.738"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:23.738">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170417 18:26:23.738" status="PASS" endtime="20170417 18:26:23.738"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.739">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c5 2d b7 5e 00 00 00 04 c5 2e fc e7 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 05 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 40 0d 40 bc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 3b 57 c0 b8 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 3b 5a d4 03 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 3b 5a e5 4d 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 3b 5b 17 1b 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 28 00 ed a8 1a 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170417 18:26:23.739">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170417 18:26:23.739">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c5 2d b7 5e 00 00 00 04 c5 2e fc e7 42 00 00 08 00 00 00 ...</msg>
<status starttime="20170417 18:26:23.739" status="PASS" endtime="20170417 18:26:23.739"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:23.740">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c5 2d b7 5e 00 00 00 04 c5 2e fc e7 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c ...</msg>
<status starttime="20170417 18:26:23.176" status="PASS" endtime="20170417 18:26:23.740"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.740">Length is 1</msg>
<msg level="INFO" timestamp="20170417 18:26:23.740">${length} = 1</msg>
<status starttime="20170417 18:26:23.740" status="PASS" endtime="20170417 18:26:23.740"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status starttime="20170417 18:26:23.741" status="PASS" endtime="20170417 18:26:23.741"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:23.743">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:23.742" status="PASS" endtime="20170417 18:26:23.743"></status>
</kw>
<status starttime="20170417 18:26:23.741" status="PASS" endtime="20170417 18:26:23.743"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:23.744">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel"&gt;/tmp/root/22219/obmc-robot/logs/20170417182600965872_TestsTestBasicPoweron/20170417182600965872_PowerOnTest/20170417182600965872_esel&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:23.744" status="PASS" endtime="20170417 18:26:23.744"></status>
</kw>
<status starttime="20170417 18:26:23.743" status="PASS" endtime="20170417 18:26:23.744"></status>
</kw>
<status starttime="20170417 18:26:23.175" status="PASS" endtime="20170417 18:26:23.745"></status>
</kw>
<status starttime="20170417 18:26:21.548" status="PASS" endtime="20170417 18:26:23.745"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.749">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170417 18:26:23.752">${out} = </msg>
<status starttime="20170417 18:26:23.745" status="PASS" endtime="20170417 18:26:23.752"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170417 18:26:23.756">'' does not contain 'eSEL.pl'</msg>
<status starttime="20170417 18:26:23.755" status="FAIL" endtime="20170417 18:26:23.756"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:23.756">${status} = False</msg>
<status starttime="20170417 18:26:23.754" status="PASS" endtime="20170417 18:26:23.756"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:23.757">Returning from the enclosing user keyword.</msg>
<status starttime="20170417 18:26:23.756" status="PASS" endtime="20170417 18:26:23.757"></status>
</kw>
<status starttime="20170417 18:26:21.091" status="PASS" endtime="20170417 18:26:23.757"></status>
</kw>
<status starttime="20170417 18:26:21.091" status="PASS" endtime="20170417 18:26:23.757"></status>
</kw>
<status starttime="20170417 18:26:21.090" status="PASS" endtime="20170417 18:26:23.758"></status>
</kw>
<status starttime="20170417 18:26:21.090" status="PASS" endtime="20170417 18:26:23.758"></status>
</kw>
<status starttime="20170417 18:26:01.120" status="PASS" endtime="20170417 18:26:23.758"></status>
</kw>
<status starttime="20170417 18:26:01.119" status="PASS" endtime="20170417 18:26:23.758"></status>
</kw>
<status starttime="20170417 18:26:01.119" status="PASS" endtime="20170417 18:26:23.758"></status>
</kw>
<status starttime="20170417 18:26:01.119" status="PASS" endtime="20170417 18:26:23.758"></status>
</kw>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20170417 18:26:23.759" status="PASS" endtime="20170417 18:26:23.877"></status>
</kw>
<status starttime="20170417 18:26:01.118" status="PASS" endtime="20170417 18:26:23.877"></status>
</kw>
<status starttime="20170417 18:25:55.904" status="PASS" endtime="20170417 18:26:23.877"></status>
</kw>
<status starttime="20170417 18:25:55.903" status="PASS" endtime="20170417 18:26:23.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170417 18:26:23.878" status="PASS" endtime="20170417 18:26:23.878"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:23.880">Directory '&lt;a href="file:///tmp/root/22219/obmc-robot/logs"&gt;/tmp/root/22219/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170417 18:26:23.879" status="PASS" endtime="20170417 18:26:23.880"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:23.881">File '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/test_history.txt"&gt;/tmp/root/22219/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170417 18:26:23.881" status="PASS" endtime="20170417 18:26:23.881"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:23.881">${exist} = True</msg>
<status starttime="20170417 18:26:23.880" status="PASS" endtime="20170417 18:26:23.881"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170417 18:26:23.881" status="PASS" endtime="20170417 18:26:23.882"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.883">${cur_time} = 2017-04-17 18:26:23:882786</msg>
<status starttime="20170417 18:26:23.883" status="PASS" endtime="20170417 18:26:23.883"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.884">${cur_time} = 20170417182623882786</msg>
<status starttime="20170417 18:26:23.883" status="PASS" endtime="20170417 18:26:23.884"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:23.884">${cur_time} = 20170417182623882786</msg>
<status starttime="20170417 18:26:23.882" status="PASS" endtime="20170417 18:26:23.884"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170417 18:26:23.885">Appended to file '&lt;a href="file:///tmp/root/22219/obmc-robot/logs/test_history.txt"&gt;/tmp/root/22219/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170417 18:26:23.884" status="PASS" endtime="20170417 18:26:23.885"></status>
</kw>
<status starttime="20170417 18:26:23.879" status="PASS" endtime="20170417 18:26:23.885"></status>
</kw>
<status starttime="20170417 18:25:55.635" status="PASS" endtime="20170417 18:26:23.885"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.887">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170417 18:26:23.886" status="PASS" endtime="20170417 18:26:23.887"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.887">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170417 18:26:23.887" status="PASS" endtime="20170417 18:26:23.887"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:23.888">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170417 18:26:23.886" status="PASS" endtime="20170417 18:26:23.888"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.888">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170417 18:26:23.888" status="PASS" endtime="20170417 18:26:23.888"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170417 18:26:23.889" status="PASS" endtime="20170417 18:26:23.898"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.902">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170417 18:26:23.905">${rc} = 0</msg>
<msg level="INFO" timestamp="20170417 18:26:23.905">${output} = /tmp/root/22219/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170417 18:26:23.898" status="PASS" endtime="20170417 18:26:23.905"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170417 18:26:23.907" status="PASS" endtime="20170417 18:26:23.917"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170417 18:26:23.918" status="PASS" endtime="20170417 18:26:23.919"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.919">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170417 18:26:23.919" status="PASS" endtime="20170417 18:26:23.920"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:23.920">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170417 18:26:23.888" status="PASS" endtime="20170417 18:26:23.920"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.921">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170417 18:26:23.920" status="PASS" endtime="20170417 18:26:23.921"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170417 18:26:23.921" status="PASS" endtime="20170417 18:26:23.932"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.936">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170417 18:26:23.953">${rc} = 0</msg>
<msg level="INFO" timestamp="20170417 18:26:23.954">${os_con_pid} = 168</msg>
<status starttime="20170417 18:26:23.932" status="PASS" endtime="20170417 18:26:23.955"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170417 18:26:23.956" status="PASS" endtime="20170417 18:26:23.967"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.968">${cmd_buf} = kill -9 168</msg>
<status starttime="20170417 18:26:23.967" status="PASS" endtime="20170417 18:26:23.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170417 18:26:23.969" status="PASS" endtime="20170417 18:26:23.976"></status>
</kw>
<status starttime="20170417 18:26:23.968" status="PASS" endtime="20170417 18:26:23.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:23.980">Running command 'kill -9 168 2&gt;&amp;1'.</msg>
<status starttime="20170417 18:26:23.976" status="PASS" endtime="20170417 18:26:23.984"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:23.985">${rc} = 0</msg>
<msg level="INFO" timestamp="20170417 18:26:23.985">${output} = </msg>
<status starttime="20170417 18:26:23.976" status="PASS" endtime="20170417 18:26:23.985"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170417 18:26:23.989" status="PASS" endtime="20170417 18:26:23.998"></status>
</kw>
<status starttime="20170417 18:26:23.987" status="PASS" endtime="20170417 18:26:23.998"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:23.998">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status starttime="20170417 18:26:23.998" status="PASS" endtime="20170417 18:26:23.998"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170417 18:26:23.999" status="PASS" endtime="20170417 18:26:24.009"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170417 18:26:24.013">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170417 18:26:24.016">${rc} = 0</msg>
<msg level="INFO" timestamp="20170417 18:26:24.017">${output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status starttime="20170417 18:26:24.009" status="PASS" endtime="20170417 18:26:24.017"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170417 18:26:24.019" status="PASS" endtime="20170417 18:26:24.028"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170417 18:26:24.029" status="PASS" endtime="20170417 18:26:24.029"></status>
</kw>
<msg level="INFO" timestamp="20170417 18:26:24.030">${sol_log} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status starttime="20170417 18:26:23.885" status="PASS" endtime="20170417 18:26:24.030"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170417 18:26:24.030">spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.50169|secure|SecureROM invalid - skipping functionality
 12.08655|ISTEP  6. 5
 12.77140|ISTEP  6. 6
 12.77195|ISTEP  6. 7
 27.54885|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 27.54886|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 27.85385|ISTEP  6. 8
 27.90591|SECURE|Security Access Bit&gt; 0x0000000000000000
 27.90592|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 27.90609|ISTEP  6. 9
 28.51680|ISTEP  6.10
 28.56752|ISTEP  6.11
 28.56827|ISTEP  6.12
 28.82291|ISTEP  7. 2
 30.84132|ISTEP  7. 3
 31.48686|ISTEP  7. 4
 34.30602|ISTEP  7. 5
 34.38455|ISTEP  8. 1
 34.81498|ISTEP  8. 2
 34.86676|ISTEP  8. 3
 34.94463|ISTEP  8. 4
 45.32645|ISTEP  8. 5
 45.35243|ISTEP  8. 6
 45.35524|ISTEP  8. 7
 45.54075|ISTEP  8. 8
 45.59112|ISTEP  8. 9
 45.71889|ISTEP  8.10
 45.72081|ISTEP  8.11
 45.72200|ISTEP  8.12
 46.19753|ISTEP  8.13
 49.90442|ISTEP  8.14
 49.90692|ISTEP  8.15
 49.90860|ISTEP  8.16
 50.17181|ISTEP  8.17
 50.46781|================================================
 50.46782|Error reported by istep (0x1700) PLID 0x90000008
 50.49359|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 50.49360|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 50.49361|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 50.49362|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 50.49362|  UserData2  Target PEC HUID : 0x0000000000000000
 50.51884|------------------------------------------------
 50.51885|  Callout type             : Procedure Callout
 50.51886|  Procedure                : EPUB_PRC_HB_CODE
 50.51887|  Priority                 : SRCI_PRIORITY_HIGH
 50.51888|------------------------------------------------
 50.51888|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 50.51889|================================================
 51.51076|ISTEP  8.18
 51.51212|ISTEP  8.19
 51.52712|ISTEP  8.20
 51.53528|ISTEP  9. 1
 51.66170|ISTEP  9. 2
 52.75340|ISTEP  9. 3
 52.77954|ISTEP  9. 4
 53.12119|ISTEP  9. 5
 53.14807|ISTEP  9. 6
 53.20093|ISTEP  9. 7
 53.29037|ISTEP  9. 8
 53.32126|ISTEP 10. 1
 53.89938|ISTEP 10. 2
 53.99797|================================================
 53.99798|Error reported by i2c (0x0700) PLID 0x90000009
 54.02390|  Timed out waiting for command complete.
 54.02391|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 54.02391|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 54.05032|  UserData1  Status Register Value : 0x0001000000050001
 54.05033|  UserData2  Master Target : 0x0200ffff0190004d
 54.05034|------------------------------------------------
 54.05035|  Callout type             : Hardware Callout
 54.05035|  CPU id                   : 6
 54.05037|  Target                   : Physical:/Sys0/Node0/Proc1
 54.05037|  Deconfig State           : NO_DECONFIG
 54.05038|  GARD Error Type          : GARD_NULL
 54.05039|  Priority                 : SRCI_PRIORITY_HIGH
 54.05040|------------------------------------------------
 54.05041|  Callout type             : Procedure Callout
 54.05042|  Procedure                : EPUB_PRC_HB_CODE
 54.05042|  Priority                 : SRCI_PRIORITY_LOW
 54.05043|------------------------------------------------
 54.05044|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 54.05045|================================================
149.67069|sbe|System Rebooting To Perform SBE Update

149.67295|IPMI: Initiate power cycle
149.72741|Stopping istep dispatcher
150.36396|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.49905|secure|SecureROM invalid - skipping functionality
 12.17494|ISTEP  6. 5
 12.85892|ISTEP  6. 6
 12.85945|ISTEP  6. 7
 13.62664|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.62665|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.93125|ISTEP  6. 8
 13.98339|SECURE|Security Access Bit&gt; 0x0000000000000000
 13.98340|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 13.98357|ISTEP  6. 9
 14.61933|ISTEP  6.10
 14.67001|ISTEP  6.11
 14.67073|ISTEP  6.12
 14.92556|ISTEP  7. 2
 16.94276|ISTEP  7. 3
 17.58784|ISTEP  7. 4
 20.40655|ISTEP  7. 5
 20.48504|ISTEP  8. 1
 20.91701|ISTEP  8. 2
 20.96892|ISTEP  8. 3
 21.04718|ISTEP  8. 4
 31.43016|ISTEP  8. 5
 31.45562|ISTEP  8. 6
 31.45884|ISTEP  8. 7
 31.64470|ISTEP  8. 8
 31.69595|ISTEP  8. 9
 31.82338|ISTEP  8.10
 31.82466|ISTEP  8.11
 31.82537|ISTEP  8.12
 32.30270|ISTEP  8.13
 36.00126|ISTEP  8.14
 36.00348|ISTEP  8.15
 36.00510|ISTEP  8.16
 36.26854|ISTEP  8.17
 36.56386|================================================
 36.56387|Error reported by istep (0x1700) PLID 0x9000000B
 36.58934|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 36.58935|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 36.58936|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 36.58937|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 36.58937|  UserData2  Target PEC HUID : 0x0000000000000000
 36.61459|------------------------------------------------
 36.61460|  Callout type             : Procedure Callout
 36.61461|  Procedure                : EPUB_PRC_HB_CODE
 36.61462|  Priority                 : SRCI_PRIORITY_HIGH
 36.61463|------------------------------------------------
 36.61464|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 36.61465|================================================
 37.60781|ISTEP  8.18
 37.60937|ISTEP  8.19
 37.62423|ISTEP  8.20
 37.63255|ISTEP  9. 1
 37.75879|ISTEP  9. 2
 38.84717|ISTEP  9. 3
 38.87277|ISTEP  9. 4
 39.21595|ISTEP  9. 5
 39.24194|ISTEP  9. 6
 39.29526|ISTEP  9. 7
 39.38437|ISTEP  9. 8
 39.41524|ISTEP 10. 1
 39.99321|ISTEP 10. 2
 40.09268|================================================
 40.09269|Error reported by i2c (0x0700) PLID 0x9000000C
 40.11843|  Timed out waiting for command complete.
 40.11844|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 40.11845|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 40.14438|  UserData1  Status Register Value : 0x0001000000050001
 40.14439|  UserData2  Master Target : 0x0200ffff0190004d
 40.14439|------------------------------------------------
 40.14440|  Callout type             : Hardware Callout
 40.14441|  CPU id                   : 5
 40.14442|  Target                   : Physical:/Sys0/Node0/Proc1
 40.14443|  Deconfig State           : NO_DECONFIG
 40.14444|  GARD Error Type          : GARD_NULL
 40.14445|  Priority                 : SRCI_PRIORITY_HIGH
 40.14446|------------------------------------------------
 40.14446|  Callout type             : Procedure Callout
 40.14447|  Procedure                : EPUB_PRC_HB_CODE
 40.14448|  Priority                 : SRCI_PRIORITY_LOW
 40.14449|------------------------------------------------
 40.14450|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 40.14451|================================================
 43.70018|ISTEP 10. 3
 44.11412|ISTEP 11. 1
 44.19188|ISTEP 12. 1
 44.24444|ISTEP 13. 1
 45.36624|ISTEP 13. 2
 45.59879|ISTEP 13. 3
 45.90197|ISTEP 13. 4
 45.93710|ISTEP 13. 6
 46.14643|ISTEP 13. 7
 46.14883|ISTEP 13. 8
 48.42483|ISTEP 13. 9
 48.99849|ISTEP 13.10
 50.39756|ISTEP 13.11


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.49905|secure|SecureROM invalid - skipping functionality
  8.35782|ERRL|Dumping errors reported prior to registration
  8.50686|================================================
  8.50687|Error reported by istep (0x1700) PLID 0x9000000B
  8.53182|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
  8.53182|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
  8.53183|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
  8.53184|  UserData1  Target processor chip's HUID : 0x00050001002d0004
  8.53184|  UserData2  Target PEC HUID : 0x0000000000000000
  8.58236|------------------------------------------------
  8.58237|  Callout type             : Procedure Callout
  8.58237|  Procedure                : EPUB_PRC_HB_CODE
  8.58238|  Priority                 : SRCI_PRIORITY_HIGH
  8.58239|------------------------------------------------
  8.58239|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
  8.58240|================================================
 10.57556|================================================
 10.57557|Error reported by i2c (0x0700) PLID 0x9000000C
 10.62583|  Timed out waiting for command complete.
 10.62583|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 10.62584|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 10.67772|  UserData1  Status Register Value : 0x0001000000050001
 10.67773|  UserData2  Master Target : 0x0200ffff0190004d
 10.67774|------------------------------------------------
 10.67774|  Callout type             : Hardware Callout
 10.67775|  CPU id                   : 5
 10.67776|  Target                   : Physical:/Sys0/Node0/Proc1
 10.67777|  Deconfig State           : NO_DECONFIG
 10.67778|  GARD Error Type          : GARD_NULL
 10.67778|  Priority                 : SRCI_PRIORITY_HIGH
 10.67779|------------------------------------------------
 10.67780|  Callout type             : Procedure Callout
 10.67781|  Procedure                : EPUB_PRC_HB_CODE
 10.67781|  Priority                 : SRCI_PRIORITY_LOW
 10.67782|------------------------------------------------
 10.67783|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 10.67783|================================================
 12.54880|ISTEP  6. 5
 13.20869|ISTEP  6. 6
 13.20916|ISTEP  6. 7
 13.97575|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.97576|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 14.28062|ISTEP  6. 8
 14.33264|SECURE|Security Access Bit&gt; 0x0000000000000000
 14.33265|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 14.33282|ISTEP  6. 9
 14.96759|ISTEP  6.10
 15.01824|ISTEP  6.11
 15.01909|ISTEP  6.12
 15.27528|ISTEP  7. 2</msg>
<status starttime="20170417 18:26:24.030" status="PASS" endtime="20170417 18:26:24.031"></status>
</kw>
<status starttime="20170417 18:25:55.635" status="PASS" endtime="20170417 18:26:24.031"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170417 18:15:25.775" critical="yes" status="FAIL" endtime="20170417 18:26:24.031">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: Off != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170417 18:15:25.744" status="FAIL" endtime="20170417 18:26:24.033"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170417 18:15:20.753" status="FAIL" endtime="20170417 18:26:24.043"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat name="Tests" pass="1" fail="1" id="s1">Tests</stat>
<stat name="Security" pass="1" fail="0" id="s1-s1">Tests.Security</stat>
<stat name="Test Ssl" pass="1" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat name="Test Basic Poweron" pass="0" fail="1" id="s1-s2">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
