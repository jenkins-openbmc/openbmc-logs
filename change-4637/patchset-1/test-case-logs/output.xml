<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170607 14:01:36.963" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/tmp/fspcibld/19886/obmc-robot/tests" id="s1" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 14:01:37.822" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 14:01:37.822" starttime="20170607 14:01:37.821"></status>
</kw>
<msg timestamp="20170607 14:01:37.822" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170607 14:01:37.822" starttime="20170607 14:01:37.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:37.823" starttime="20170607 14:01:37.823"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:37.823" starttime="20170607 14:01:37.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 14:01:37.825" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 14:01:37.825" starttime="20170607 14:01:37.825"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 14:01:37.826" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 14:01:37.826" starttime="20170607 14:01:37.825"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 14:01:37.826" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 14:01:37.826" starttime="20170607 14:01:37.826"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 14:01:37.827" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 14:01:37.827" starttime="20170607 14:01:37.826"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:37.827" starttime="20170607 14:01:37.824"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:37.827" starttime="20170607 14:01:37.824"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 14:01:37.828" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 14:01:37.828" starttime="20170607 14:01:37.828"></status>
</kw>
<msg timestamp="20170607 14:01:37.828" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170607 14:01:37.828" starttime="20170607 14:01:37.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:37.830" starttime="20170607 14:01:37.830"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:37.831" starttime="20170607 14:01:37.831"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:37.831" starttime="20170607 14:01:37.829"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:37.831" starttime="20170607 14:01:37.829"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 14:01:37.832" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 14:01:40.015" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 14:01:40.015" starttime="20170607 14:01:37.831"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:40.016" starttime="20170607 14:01:37.820"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:01:40.017" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170607 14:01:40.094" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:01:40.094" level="INFO">${output} = VERSION_ID="v1.99.6-78-gfd4d3cc"</msg>
<msg timestamp="20170607 14:01:40.094" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:01:40.094" starttime="20170607 14:01:40.017"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170607 14:01:40.095" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170607 14:01:40.095" starttime="20170607 14:01:40.094"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170607 14:01:40.095" level="INFO">VERSION_ID="v1.99.6-78-gfd4d3cc"</msg>
<status status="PASS" endtime="20170607 14:01:40.095" starttime="20170607 14:01:40.095"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:40.096" starttime="20170607 14:01:40.016"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:40.096" starttime="20170607 14:01:40.016"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:01:40.097" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170607 14:01:40.234" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:01:40.234" level="INFO">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<msg timestamp="20170607 14:01:40.234" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:01:40.234" starttime="20170607 14:01:40.097"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170607 14:01:40.235" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170607 14:01:40.235" starttime="20170607 14:01:40.235"></status>
</kw>
<msg timestamp="20170607 14:01:40.235" level="INFO">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<status status="PASS" endtime="20170607 14:01:40.235" starttime="20170607 14:01:40.096"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg timestamp="20170607 14:01:40.236" level="INFO">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17_1.10
	op-build-v1.17-20-gbaac7a6-dirty
	buildroot-2017.02.2-7-g23118ce
	skiboot-d673ecc
	hostboot-dff36e4
	linux-4.11.2-openpower1-p062f2cf
	petitboot-v1.4.2-p9717304
	machine-xml-96746e9
	occ-bc34ad5
	hostboot-binaries-bc600e6
	capp-ucode-9c73e9f
	sbe-d770027
</msg>
<status status="PASS" endtime="20170607 14:01:40.237" starttime="20170607 14:01:40.235"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:40.237" starttime="20170607 14:01:40.096"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:40.237" starttime="20170607 14:01:40.096"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 14:01:40.240" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 14:01:40.240" starttime="20170607 14:01:40.239"></status>
</kw>
<msg timestamp="20170607 14:01:40.240" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170607 14:01:40.240" starttime="20170607 14:01:40.239"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:40.241" starttime="20170607 14:01:40.241"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:40.241" starttime="20170607 14:01:40.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 14:01:40.243" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 14:01:40.243" starttime="20170607 14:01:40.242"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 14:01:40.243" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 14:01:40.243" starttime="20170607 14:01:40.243"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 14:01:40.244" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 14:01:40.244" starttime="20170607 14:01:40.243"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 14:01:40.245" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 14:01:40.245" starttime="20170607 14:01:40.244"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:40.245" starttime="20170607 14:01:40.242"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:40.245" starttime="20170607 14:01:40.241"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 14:01:40.247" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 14:01:40.247" starttime="20170607 14:01:40.246"></status>
</kw>
<msg timestamp="20170607 14:01:40.247" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170607 14:01:40.247" starttime="20170607 14:01:40.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:40.249" starttime="20170607 14:01:40.249"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:40.250" starttime="20170607 14:01:40.249"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:40.250" starttime="20170607 14:01:40.248"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:40.250" starttime="20170607 14:01:40.247"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 14:01:40.250" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 14:01:42.167" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 14:01:42.167" starttime="20170607 14:01:40.250"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:42.167" starttime="20170607 14:01:40.238"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:01:42.168" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170607 14:01:42.325" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:01:42.326" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170607 14:01:42.326" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:01:42.326" starttime="20170607 14:01:42.168"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170607 14:01:42.326" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170607 14:01:42.326" starttime="20170607 14:01:42.326"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170607 14:01:42.327" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170607 14:01:42.327" starttime="20170607 14:01:42.327"></status>
</kw>
<msg timestamp="20170607 14:01:42.327" level="INFO">${bmc_model} = Witherspoon</msg>
<status status="PASS" endtime="20170607 14:01:42.327" starttime="20170607 14:01:40.238"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170607 14:01:42.328" level="INFO">BMC Model=Witherspoon</msg>
<status status="PASS" endtime="20170607 14:01:42.328" starttime="20170607 14:01:42.328"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:42.328" starttime="20170607 14:01:40.237"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:42.328" starttime="20170607 14:01:40.237"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 14:01:42.330" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 14:01:42.330" starttime="20170607 14:01:42.330"></status>
</kw>
<msg timestamp="20170607 14:01:42.330" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170607 14:01:42.330" starttime="20170607 14:01:42.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:42.332" starttime="20170607 14:01:42.331"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:42.332" starttime="20170607 14:01:42.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 14:01:42.333" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 14:01:42.333" starttime="20170607 14:01:42.333"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 14:01:42.334" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 14:01:42.334" starttime="20170607 14:01:42.334"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 14:01:42.335" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 14:01:42.335" starttime="20170607 14:01:42.334"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 14:01:42.335" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 14:01:42.335" starttime="20170607 14:01:42.335"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:42.336" starttime="20170607 14:01:42.332"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:42.336" starttime="20170607 14:01:42.332"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 14:01:42.337" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 14:01:42.337" starttime="20170607 14:01:42.336"></status>
</kw>
<msg timestamp="20170607 14:01:42.337" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170607 14:01:42.337" starttime="20170607 14:01:42.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:42.339" starttime="20170607 14:01:42.339"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:42.340" starttime="20170607 14:01:42.339"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:42.340" starttime="20170607 14:01:42.338"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:42.340" starttime="20170607 14:01:42.337"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 14:01:42.340" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 14:01:44.086" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 14:01:44.086" starttime="20170607 14:01:42.340"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.086" starttime="20170607 14:01:42.329"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:01:44.087" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170607 14:01:44.164" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:01:44.164" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170607 14:01:44.164" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:01:44.164" starttime="20170607 14:01:44.087"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170607 14:01:44.165" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170607 14:01:44.165" starttime="20170607 14:01:44.164"></status>
</kw>
<msg timestamp="20170607 14:01:44.165" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" endtime="20170607 14:01:44.165" starttime="20170607 14:01:44.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:44.165" starttime="20170607 14:01:44.165"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.166" starttime="20170607 14:01:42.329"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.166" starttime="20170607 14:01:42.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:44.166" starttime="20170607 14:01:44.166"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.166" starttime="20170607 14:01:37.820"></status>
</kw>
<suite source="/tmp/fspcibld/19886/obmc-robot/tests/security" id="s1-s1" name="Security">
<suite source="/tmp/fspcibld/19886/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:01:44.206" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:01:44.206" starttime="20170607 14:01:44.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:01:44.207" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:01:44.207" starttime="20170607 14:01:44.207"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:01:44.208" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:01:44.208" starttime="20170607 14:01:44.207"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:01:44.208" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:01:44.209" starttime="20170607 14:01:44.208"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:01:44.412" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:01:44.412" starttime="20170607 14:01:44.209"></status>
</kw>
<msg timestamp="20170607 14:01:44.412" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:01:44.412" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:01:44.412" starttime="20170607 14:01:44.209"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:01:44.413" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:01:44.413" starttime="20170607 14:01:44.412"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:01:44.413" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:01:44.414" starttime="20170607 14:01:44.413"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.414" starttime="20170607 14:01:44.205"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.414" starttime="20170607 14:01:44.205"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.414" starttime="20170607 14:01:44.204"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:01:44.419" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:01:44.419" starttime="20170607 14:01:44.418"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:01:44.420" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:01:44.420" starttime="20170607 14:01:44.420"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:01:44.421" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:01:44.421" starttime="20170607 14:01:44.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:01:44.421" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:01:44.421" starttime="20170607 14:01:44.421"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:01:44.829" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:01:44.829" starttime="20170607 14:01:44.422"></status>
</kw>
<msg timestamp="20170607 14:01:44.829" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:01:44.829" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:01:44.829" starttime="20170607 14:01:44.421"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:01:44.830" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:01:44.830" starttime="20170607 14:01:44.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:01:44.831" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:01:44.831" starttime="20170607 14:01:44.830"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.831" starttime="20170607 14:01:44.418"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.831" starttime="20170607 14:01:44.417"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.831" starttime="20170607 14:01:44.417"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:01:44.832" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:01:44.832" starttime="20170607 14:01:44.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:01:44.834" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:01:44.834" starttime="20170607 14:01:44.833"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:01:44.835" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:01:44.835" starttime="20170607 14:01:44.835"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.835" starttime="20170607 14:01:44.834"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.835" starttime="20170607 14:01:44.832"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.835" starttime="20170607 14:01:44.832"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:01:44.898" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:01:44.898" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:01:44.898" starttime="20170607 14:01:44.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:01:44.900" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:01:44.900" starttime="20170607 14:01:44.900"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:01:44.901" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:01:44.901" starttime="20170607 14:01:44.901"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.901" starttime="20170607 14:01:44.900"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.902" starttime="20170607 14:01:44.899"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.902" starttime="20170607 14:01:44.899"></status>
</kw>
<msg timestamp="20170607 14:01:44.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:01:44.902" starttime="20170607 14:01:44.416"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:01:44.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:01:44.902" starttime="20170607 14:01:44.902"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:01:44.903" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:01:44.903" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:01:44.903" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:01:44.903" starttime="20170607 14:01:44.903"></status>
</kw>
<msg timestamp="20170607 14:01:44.903" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:01:44.904" starttime="20170607 14:01:44.416"></status>
</kw>
<msg timestamp="20170607 14:01:44.904" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:01:44.904" starttime="20170607 14:01:44.415"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170607 14:01:44.905" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" endtime="20170607 14:01:44.905" starttime="20170607 14:01:44.905"></status>
</kw>
<msg timestamp="20170607 14:01:44.905" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170607 14:01:44.905" starttime="20170607 14:01:44.904"></status>
</kw>
<msg timestamp="20170607 14:01:44.906" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170607 14:01:44.906" starttime="20170607 14:01:44.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:44.906" starttime="20170607 14:01:44.906"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:44.907" starttime="20170607 14:01:44.907"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170607 14:01:44.908" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170607 14:01:44.908" starttime="20170607 14:01:44.908"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170607 14:01:44.917" level="INFO">${FFDC_DIR_PATH} = </msg>
<status status="PASS" endtime="20170607 14:01:44.917" starttime="20170607 14:01:44.908"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 14:01:44.919" level="INFO">${cur_time} = 2017-06-07 14:01:44:918852</msg>
<status status="PASS" endtime="20170607 14:01:44.919" starttime="20170607 14:01:44.919"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 14:01:44.920" level="INFO">${cur_time} = 20170607140144918852</msg>
<status status="PASS" endtime="20170607 14:01:44.920" starttime="20170607 14:01:44.919"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.920" starttime="20170607 14:01:44.918"></status>
</kw>
<msg timestamp="20170607 14:01:44.924" level="INFO">${FFDC_TIME} = 20170607140144918852</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170607 14:01:44.925" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" endtime="20170607 14:01:44.925" starttime="20170607 14:01:44.925"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170607 14:01:44.926" level="INFO">${suite_name} = 20170607140144918852_TestsSecurityTestSsl</msg>
<status status="PASS" endtime="20170607 14:01:44.926" starttime="20170607 14:01:44.926"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170607 14:01:44.927" level="INFO">${test_name} = TestSSLConnection</msg>
<status status="PASS" endtime="20170607 14:01:44.927" starttime="20170607 14:01:44.927"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170607 14:01:44.928" level="INFO">${test_name} = 20170607140144918852_TestSSLConnection</msg>
<status status="PASS" endtime="20170607 14:01:44.928" starttime="20170607 14:01:44.927"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.928" starttime="20170607 14:01:44.925"></status>
</kw>
<msg timestamp="20170607 14:01:44.929" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140144918852_TestsSecurityTestSsl/20170607140144918852_TestSSLConnection/</msg>
<msg timestamp="20170607 14:01:44.936" level="INFO">${FFDC_PREFIX} = 20170607140144918852_</msg>
<status status="PASS" endtime="20170607 14:01:44.936" starttime="20170607 14:01:44.918"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.936" starttime="20170607 14:01:44.917"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:44.937" starttime="20170607 14:01:44.937"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170607 14:01:44.938" html="yes" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs"&gt;/tmp/fspcibld/19886/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:01:44.939" starttime="20170607 14:01:44.938"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170607 14:01:44.940" level="FAIL">File '/tmp/fspcibld/19886/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170607 14:01:44.940" starttime="20170607 14:01:44.939"></status>
</kw>
<msg timestamp="20170607 14:01:44.940" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170607 14:01:44.940" starttime="20170607 14:01:44.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170607 14:01:44.942" html="yes" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:01:44.942" starttime="20170607 14:01:44.942"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.942" starttime="20170607 14:01:44.941"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:44.943" starttime="20170607 14:01:44.942"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 14:01:44.944" level="INFO">${cur_time} = 2017-06-07 14:01:44:943689</msg>
<status status="PASS" endtime="20170607 14:01:44.944" starttime="20170607 14:01:44.944"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 14:01:44.944" level="INFO">${cur_time} = 20170607140144943689</msg>
<status status="PASS" endtime="20170607 14:01:44.944" starttime="20170607 14:01:44.944"></status>
</kw>
<msg timestamp="20170607 14:01:44.945" level="INFO">${cur_time} = 20170607140144943689</msg>
<status status="PASS" endtime="20170607 14:01:44.945" starttime="20170607 14:01:44.943"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170607 14:01:44.946" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:01:44.946" starttime="20170607 14:01:44.945"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.946" starttime="20170607 14:01:44.907"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:44.946" starttime="20170607 14:01:44.414"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" endtime="20170607 14:01:44.946" critical="yes" starttime="20170607 14:01:44.203"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170607 14:01:44.947" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170607 14:01:44.947" starttime="20170607 14:01:44.947"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" endtime="20170607 14:01:44.947" starttime="20170607 14:01:44.169"></status>
</suite>
<status status="PASS" endtime="20170607 14:01:44.949" starttime="20170607 14:01:44.166"></status>
</suite>
<suite source="/tmp/fspcibld/19886/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170607 14:01:44.989" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 14:01:44.989" starttime="20170607 14:01:44.988"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170607 14:01:44.989" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 14:01:44.989" starttime="20170607 14:01:44.989"></status>
</kw>
<msg timestamp="20170607 14:01:44.990" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 14:01:44.990" starttime="20170607 14:01:44.988"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170607 14:01:44.991" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 14:01:44.991" starttime="20170607 14:01:44.991"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170607 14:01:44.992" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 14:01:44.992" starttime="20170607 14:01:44.991"></status>
</kw>
<msg timestamp="20170607 14:01:44.992" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 14:01:44.992" starttime="20170607 14:01:44.990"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 14:01:44.993" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170607 14:01:44.993" starttime="20170607 14:01:44.993"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:44.993" starttime="20170607 14:01:44.993"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170607 14:01:44.998" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170607 14:01:45.001" level="INFO">${rc} = 0</msg>
<msg timestamp="20170607 14:01:45.001" level="INFO">${output} = /tmp/fspcibld/19886/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170607 14:01:45.001" starttime="20170607 14:01:44.994"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:45.004" starttime="20170607 14:01:45.004"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:45.005" starttime="20170607 14:01:45.005"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 14:01:45.006" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170607 14:01:45.006" starttime="20170607 14:01:45.005"></status>
</kw>
<msg timestamp="20170607 14:01:45.006" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170607 14:01:45.006" starttime="20170607 14:01:44.992"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 14:01:45.007" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170607 14:01:45.007" starttime="20170607 14:01:45.006"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:45.007" starttime="20170607 14:01:45.007"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170607 14:01:45.011" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170607 14:01:45.023" level="INFO">${rc} = 0</msg>
<msg timestamp="20170607 14:01:45.024" level="INFO">${os_con_pid} = </msg>
<status status="PASS" endtime="20170607 14:01:45.024" starttime="20170607 14:01:45.008"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:45.038" starttime="20170607 14:01:45.036"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 14:01:45.038" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170607 14:01:45.039" starttime="20170607 14:01:45.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:45.041" starttime="20170607 14:01:45.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170607 14:01:45.041" level="INFO">${rc} = None</msg>
<msg timestamp="20170607 14:01:45.041" level="INFO">${output} = None</msg>
<status status="PASS" endtime="20170607 14:01:45.041" starttime="20170607 14:01:45.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:45.042" starttime="20170607 14:01:45.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:45.043" starttime="20170607 14:01:45.043"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170607 14:01:45.044" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170607 14:01:45.044" starttime="20170607 14:01:45.044"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170607 14:01:45.046" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170607 14:01:45.046" starttime="20170607 14:01:45.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:45.107" starttime="20170607 14:01:45.047"></status>
</kw>
<msg timestamp="20170607 14:01:45.110" level="INFO">${rc} = 1</msg>
<msg timestamp="20170607 14:01:45.110" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170607 14:01:45.110" starttime="20170607 14:01:45.046"></status>
</kw>
<msg timestamp="20170607 14:01:45.112" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170607 14:01:45.112" starttime="20170607 14:01:44.990"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170607 14:01:45.121" html="yes" level="INFO">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:01:45.121" starttime="20170607 14:01:45.118"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 14:01:45.123" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170607 14:01:45.123" starttime="20170607 14:01:45.123"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:45.124" starttime="20170607 14:01:45.124"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170607 14:01:45.136" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170607 14:01:45.153" level="INFO">${rc} = 0</msg>
<msg timestamp="20170607 14:01:45.154" level="INFO">${output} = /tmp/fspcibld/19886/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170607 14:01:45.154" starttime="20170607 14:01:45.124"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:45.163" starttime="20170607 14:01:45.162"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:45.164" starttime="20170607 14:01:45.164"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 14:01:45.165" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170607 14:01:45.165" starttime="20170607 14:01:45.164"></status>
</kw>
<msg timestamp="20170607 14:01:45.165" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170607 14:01:45.165" starttime="20170607 14:01:45.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 14:01:45.166" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" endtime="20170607 14:01:45.166" starttime="20170607 14:01:45.166"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:45.167" starttime="20170607 14:01:45.166"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170607 14:01:45.171" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170607 14:01:45.174" level="INFO">${rc} = 0</msg>
<msg timestamp="20170607 14:01:45.174" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170607 14:01:45.174" starttime="20170607 14:01:45.167"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:45.178" starttime="20170607 14:01:45.178"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:45.179" starttime="20170607 14:01:44.987"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170607 14:01:45.180" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170607 14:01:45.182" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170607 14:01:45.182" starttime="20170607 14:01:45.181"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:01:45.183" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170607 14:01:45.183" starttime="20170607 14:01:45.183"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:01:45.187" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:01:45.188" starttime="20170607 14:01:45.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:01:45.189" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:01:45.189" starttime="20170607 14:01:45.189"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:01:45.190" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:01:45.190" starttime="20170607 14:01:45.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:01:45.191" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:01:45.191" starttime="20170607 14:01:45.190"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:01:45.770" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:01:45.770" starttime="20170607 14:01:45.191"></status>
</kw>
<msg timestamp="20170607 14:01:45.770" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:01:45.770" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:01:45.770" starttime="20170607 14:01:45.191"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:01:45.771" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:01:45.771" starttime="20170607 14:01:45.771"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:01:45.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:01:45.772" starttime="20170607 14:01:45.772"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:45.772" starttime="20170607 14:01:45.186"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:45.772" starttime="20170607 14:01:45.185"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:45.772" starttime="20170607 14:01:45.184"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:01:45.773" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170607 14:01:45.773" starttime="20170607 14:01:45.773"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:01:45.774" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:01:45.774" starttime="20170607 14:01:45.773"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:45.774" starttime="20170607 14:01:45.774"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:01:45.776" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" endtime="20170607 14:01:45.776" starttime="20170607 14:01:45.775"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:01:45.777" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170607 14:01:45.777" starttime="20170607 14:01:45.777"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:45.777" starttime="20170607 14:01:45.776"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:45.777" starttime="20170607 14:01:45.774"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:01:46.282" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170607 14:01:46.282" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:01:46.282" starttime="20170607 14:01:45.777"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:01:46.284" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:01:46.284" starttime="20170607 14:01:46.283"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:01:46.285" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:01:46.285" starttime="20170607 14:01:46.284"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:46.285" starttime="20170607 14:01:46.284"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:46.285" starttime="20170607 14:01:46.282"></status>
</kw>
<msg timestamp="20170607 14:01:46.285" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:01:46.285" starttime="20170607 14:01:45.183"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:01:46.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:01:46.286" starttime="20170607 14:01:46.286"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170607 14:01:46.287" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:01:46.287" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:01:46.287" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170607 14:01:46.287" starttime="20170607 14:01:46.286"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:46.287" starttime="20170607 14:01:45.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170607 14:01:46.288" starttime="20170607 14:01:46.287"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:01:46.292" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:01:46.293" starttime="20170607 14:01:46.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:01:46.293" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:01:46.293" starttime="20170607 14:01:46.293"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:01:46.294" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:01:46.294" starttime="20170607 14:01:46.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:01:46.294" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:01:46.294" starttime="20170607 14:01:46.294"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:01:48.243" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:01:48.244" starttime="20170607 14:01:46.295"></status>
</kw>
<msg timestamp="20170607 14:01:48.244" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:01:48.244" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:01:48.244" starttime="20170607 14:01:46.295"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:01:48.244" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:01:48.245" starttime="20170607 14:01:48.244"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:01:48.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:01:48.245" starttime="20170607 14:01:48.245"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:48.245" starttime="20170607 14:01:46.291"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:48.245" starttime="20170607 14:01:46.291"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:48.246" starttime="20170607 14:01:46.290"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:01:48.246" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:01:48.246" starttime="20170607 14:01:48.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:01:48.249" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:01:48.249" starttime="20170607 14:01:48.248"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:01:48.250" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:01:48.250" starttime="20170607 14:01:48.249"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:48.250" starttime="20170607 14:01:48.249"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:48.250" starttime="20170607 14:01:48.247"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:48.250" starttime="20170607 14:01:48.247"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:01:49.397" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:01:49.397" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:01:49.397" starttime="20170607 14:01:48.250"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:01:49.399" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:01:49.399" starttime="20170607 14:01:49.399"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:01:49.400" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:01:49.400" starttime="20170607 14:01:49.400"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:49.400" starttime="20170607 14:01:49.399"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:49.400" starttime="20170607 14:01:49.398"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:49.401" starttime="20170607 14:01:49.398"></status>
</kw>
<msg timestamp="20170607 14:01:49.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:01:49.401" starttime="20170607 14:01:46.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:01:49.401" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:01:49.401" starttime="20170607 14:01:49.401"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:01:49.402" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:01:49.402" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:01:49.402" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:01:49.402" starttime="20170607 14:01:49.402"></status>
</kw>
<msg timestamp="20170607 14:01:49.402" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:01:49.402" starttime="20170607 14:01:46.289"></status>
</kw>
<msg timestamp="20170607 14:01:49.403" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:01:49.403" starttime="20170607 14:01:46.289"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:01:49.403" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:01:49.404" starttime="20170607 14:01:49.403"></status>
</kw>
<status status="FAIL" endtime="20170607 14:01:49.404" starttime="20170607 14:01:46.288"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:01:59.409" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:01:59.410" starttime="20170607 14:01:59.409"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:01:59.410" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:01:59.410" starttime="20170607 14:01:59.410"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:01:59.411" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:01:59.411" starttime="20170607 14:01:59.410"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:01:59.412" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:01:59.412" starttime="20170607 14:01:59.411"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:01:59.600" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:01:59.600" starttime="20170607 14:01:59.412"></status>
</kw>
<msg timestamp="20170607 14:01:59.600" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:01:59.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:01:59.601" starttime="20170607 14:01:59.412"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:01:59.601" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:01:59.601" starttime="20170607 14:01:59.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:01:59.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:01:59.602" starttime="20170607 14:01:59.602"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:59.602" starttime="20170607 14:01:59.408"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:59.602" starttime="20170607 14:01:59.407"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:59.602" starttime="20170607 14:01:59.407"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:01:59.603" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:01:59.603" starttime="20170607 14:01:59.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:01:59.605" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:01:59.605" starttime="20170607 14:01:59.604"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:01:59.606" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:01:59.606" starttime="20170607 14:01:59.606"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:59.606" starttime="20170607 14:01:59.605"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:59.606" starttime="20170607 14:01:59.604"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:59.606" starttime="20170607 14:01:59.603"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:01:59.671" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:01:59.671" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:01:59.671" starttime="20170607 14:01:59.607"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:01:59.673" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:01:59.673" starttime="20170607 14:01:59.672"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:01:59.674" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:01:59.674" starttime="20170607 14:01:59.674"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:59.674" starttime="20170607 14:01:59.673"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:59.674" starttime="20170607 14:01:59.672"></status>
</kw>
<status status="PASS" endtime="20170607 14:01:59.674" starttime="20170607 14:01:59.671"></status>
</kw>
<msg timestamp="20170607 14:01:59.675" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:01:59.675" starttime="20170607 14:01:59.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:01:59.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:01:59.675" starttime="20170607 14:01:59.675"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:01:59.676" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:01:59.676" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:01:59.676" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:01:59.676" starttime="20170607 14:01:59.676"></status>
</kw>
<msg timestamp="20170607 14:01:59.676" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:01:59.677" starttime="20170607 14:01:59.405"></status>
</kw>
<msg timestamp="20170607 14:01:59.677" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:01:59.677" starttime="20170607 14:01:59.405"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:01:59.678" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:01:59.678" starttime="20170607 14:01:59.677"></status>
</kw>
<status status="FAIL" endtime="20170607 14:01:59.678" starttime="20170607 14:01:59.404"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:02:09.684" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:02:09.684" starttime="20170607 14:02:09.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:02:09.685" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:02:09.685" starttime="20170607 14:02:09.685"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:02:09.686" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:02:09.686" starttime="20170607 14:02:09.685"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:02:09.687" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:02:09.687" starttime="20170607 14:02:09.686"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:02:09.912" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:02:09.913" starttime="20170607 14:02:09.688"></status>
</kw>
<msg timestamp="20170607 14:02:09.913" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:02:09.913" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:09.913" starttime="20170607 14:02:09.687"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:02:09.913" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:09.914" starttime="20170607 14:02:09.913"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:02:09.914" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:09.915" starttime="20170607 14:02:09.914"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:09.915" starttime="20170607 14:02:09.682"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:09.915" starttime="20170607 14:02:09.682"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:09.915" starttime="20170607 14:02:09.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:02:09.916" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:02:09.916" starttime="20170607 14:02:09.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:02:09.918" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:02:09.918" starttime="20170607 14:02:09.917"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:02:09.919" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:02:09.919" starttime="20170607 14:02:09.919"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:09.919" starttime="20170607 14:02:09.918"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:09.919" starttime="20170607 14:02:09.916"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:09.919" starttime="20170607 14:02:09.916"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:02:09.983" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:02:09.983" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:09.983" starttime="20170607 14:02:09.919"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:02:09.985" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:02:09.985" starttime="20170607 14:02:09.984"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:02:09.986" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:02:09.986" starttime="20170607 14:02:09.986"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:09.986" starttime="20170607 14:02:09.985"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:09.986" starttime="20170607 14:02:09.984"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:09.986" starttime="20170607 14:02:09.983"></status>
</kw>
<msg timestamp="20170607 14:02:09.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:09.986" starttime="20170607 14:02:09.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:02:09.987" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:09.987" starttime="20170607 14:02:09.987"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:02:09.988" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:02:09.988" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:02:09.988" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:02:09.988" starttime="20170607 14:02:09.987"></status>
</kw>
<msg timestamp="20170607 14:02:09.988" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:02:09.988" starttime="20170607 14:02:09.679"></status>
</kw>
<msg timestamp="20170607 14:02:09.988" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:02:09.989" starttime="20170607 14:02:09.679"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:02:09.989" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:02:09.989" starttime="20170607 14:02:09.989"></status>
</kw>
<status status="FAIL" endtime="20170607 14:02:09.990" starttime="20170607 14:02:09.678"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:02:19.995" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:02:19.996" starttime="20170607 14:02:19.995"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:02:19.997" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:02:19.997" starttime="20170607 14:02:19.996"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:02:19.997" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:02:19.997" starttime="20170607 14:02:19.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:02:19.998" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:02:19.998" starttime="20170607 14:02:19.998"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:02:20.275" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:02:20.275" starttime="20170607 14:02:19.999"></status>
</kw>
<msg timestamp="20170607 14:02:20.275" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:02:20.275" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:20.275" starttime="20170607 14:02:19.998"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:02:20.276" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:20.276" starttime="20170607 14:02:20.276"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:02:20.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:20.277" starttime="20170607 14:02:20.276"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:20.277" starttime="20170607 14:02:19.994"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:20.277" starttime="20170607 14:02:19.993"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:20.277" starttime="20170607 14:02:19.993"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:02:20.278" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:02:20.278" starttime="20170607 14:02:20.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:02:20.280" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:02:20.280" starttime="20170607 14:02:20.279"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:02:20.281" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:02:20.281" starttime="20170607 14:02:20.281"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:20.281" starttime="20170607 14:02:20.280"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:20.281" starttime="20170607 14:02:20.279"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:20.281" starttime="20170607 14:02:20.278"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:02:20.367" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:02:20.367" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:20.367" starttime="20170607 14:02:20.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:02:20.369" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:02:20.369" starttime="20170607 14:02:20.369"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:02:20.372" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:02:20.372" starttime="20170607 14:02:20.370"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:20.372" starttime="20170607 14:02:20.369"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:20.372" starttime="20170607 14:02:20.368"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:20.372" starttime="20170607 14:02:20.367"></status>
</kw>
<msg timestamp="20170607 14:02:20.372" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:20.373" starttime="20170607 14:02:19.992"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:02:20.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:20.373" starttime="20170607 14:02:20.373"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:02:20.374" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:02:20.374" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:02:20.374" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:02:20.374" starttime="20170607 14:02:20.373"></status>
</kw>
<msg timestamp="20170607 14:02:20.374" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:02:20.374" starttime="20170607 14:02:19.991"></status>
</kw>
<msg timestamp="20170607 14:02:20.375" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:02:20.375" starttime="20170607 14:02:19.991"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:02:20.375" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:02:20.375" starttime="20170607 14:02:20.375"></status>
</kw>
<status status="FAIL" endtime="20170607 14:02:20.375" starttime="20170607 14:02:19.990"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:02:30.380" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:02:30.380" starttime="20170607 14:02:30.380"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:02:30.381" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:02:30.381" starttime="20170607 14:02:30.381"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:02:30.382" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:02:30.382" starttime="20170607 14:02:30.381"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:02:30.382" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:02:30.382" starttime="20170607 14:02:30.382"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:02:30.572" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:02:30.572" starttime="20170607 14:02:30.383"></status>
</kw>
<msg timestamp="20170607 14:02:30.573" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:02:30.573" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:30.573" starttime="20170607 14:02:30.383"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:02:30.573" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:30.573" starttime="20170607 14:02:30.573"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:02:30.574" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:30.574" starttime="20170607 14:02:30.574"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:30.574" starttime="20170607 14:02:30.379"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:30.574" starttime="20170607 14:02:30.379"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:30.574" starttime="20170607 14:02:30.378"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:02:30.575" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:02:30.575" starttime="20170607 14:02:30.575"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:02:30.577" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:02:30.577" starttime="20170607 14:02:30.577"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:02:30.578" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:02:30.579" starttime="20170607 14:02:30.578"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:30.579" starttime="20170607 14:02:30.578"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:30.579" starttime="20170607 14:02:30.576"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:30.579" starttime="20170607 14:02:30.575"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:02:30.660" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:02:30.660" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:30.660" starttime="20170607 14:02:30.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:02:30.662" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:02:30.662" starttime="20170607 14:02:30.662"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:02:30.663" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:02:30.663" starttime="20170607 14:02:30.663"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:30.663" starttime="20170607 14:02:30.662"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:30.663" starttime="20170607 14:02:30.661"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:30.663" starttime="20170607 14:02:30.661"></status>
</kw>
<msg timestamp="20170607 14:02:30.664" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:30.664" starttime="20170607 14:02:30.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:02:30.664" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:30.664" starttime="20170607 14:02:30.664"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:02:30.665" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:02:30.665" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:02:30.665" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:02:30.665" starttime="20170607 14:02:30.664"></status>
</kw>
<msg timestamp="20170607 14:02:30.665" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:02:30.665" starttime="20170607 14:02:30.377"></status>
</kw>
<msg timestamp="20170607 14:02:30.666" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:02:30.666" starttime="20170607 14:02:30.376"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:02:30.666" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:02:30.666" starttime="20170607 14:02:30.666"></status>
</kw>
<status status="FAIL" endtime="20170607 14:02:30.666" starttime="20170607 14:02:30.376"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:02:40.671" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:02:40.672" starttime="20170607 14:02:40.671"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:02:40.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:02:40.672" starttime="20170607 14:02:40.672"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:02:40.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:02:40.673" starttime="20170607 14:02:40.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:02:40.674" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:02:40.674" starttime="20170607 14:02:40.673"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:02:40.862" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:02:40.863" starttime="20170607 14:02:40.674"></status>
</kw>
<msg timestamp="20170607 14:02:40.863" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:02:40.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:40.863" starttime="20170607 14:02:40.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:02:40.863" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:40.864" starttime="20170607 14:02:40.863"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:02:40.864" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:40.864" starttime="20170607 14:02:40.864"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:40.864" starttime="20170607 14:02:40.670"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:40.864" starttime="20170607 14:02:40.670"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:40.865" starttime="20170607 14:02:40.669"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:02:40.865" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:02:40.865" starttime="20170607 14:02:40.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:02:40.867" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:02:40.867" starttime="20170607 14:02:40.867"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:02:40.868" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:02:40.868" starttime="20170607 14:02:40.868"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:40.869" starttime="20170607 14:02:40.867"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:40.869" starttime="20170607 14:02:40.866"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:40.869" starttime="20170607 14:02:40.865"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:02:40.932" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:02:40.932" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:40.932" starttime="20170607 14:02:40.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:02:40.933" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:02:40.934" starttime="20170607 14:02:40.933"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:02:40.934" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:02:40.935" starttime="20170607 14:02:40.934"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:40.935" starttime="20170607 14:02:40.934"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:40.935" starttime="20170607 14:02:40.933"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:40.935" starttime="20170607 14:02:40.932"></status>
</kw>
<msg timestamp="20170607 14:02:40.935" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:40.935" starttime="20170607 14:02:40.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:02:40.936" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:40.936" starttime="20170607 14:02:40.935"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:02:40.936" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:02:40.936" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:02:40.936" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:02:40.937" starttime="20170607 14:02:40.936"></status>
</kw>
<msg timestamp="20170607 14:02:40.937" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:02:40.937" starttime="20170607 14:02:40.668"></status>
</kw>
<msg timestamp="20170607 14:02:40.937" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:02:40.937" starttime="20170607 14:02:40.667"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:02:40.938" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:02:40.938" starttime="20170607 14:02:40.937"></status>
</kw>
<status status="FAIL" endtime="20170607 14:02:40.938" starttime="20170607 14:02:40.667"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:02:50.943" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:02:50.944" starttime="20170607 14:02:50.943"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:02:50.945" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:02:50.945" starttime="20170607 14:02:50.944"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:02:50.946" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:02:50.946" starttime="20170607 14:02:50.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:02:50.947" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:02:50.947" starttime="20170607 14:02:50.946"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:02:51.166" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:02:51.166" starttime="20170607 14:02:50.948"></status>
</kw>
<msg timestamp="20170607 14:02:51.166" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:02:51.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:51.167" starttime="20170607 14:02:50.947"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:02:51.167" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:51.167" starttime="20170607 14:02:51.167"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:02:51.168" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:51.168" starttime="20170607 14:02:51.167"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:51.168" starttime="20170607 14:02:50.942"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:51.168" starttime="20170607 14:02:50.942"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:51.168" starttime="20170607 14:02:50.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:02:51.169" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:02:51.169" starttime="20170607 14:02:51.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:02:51.171" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:02:51.171" starttime="20170607 14:02:51.170"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:02:51.172" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:02:51.172" starttime="20170607 14:02:51.172"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:51.172" starttime="20170607 14:02:51.171"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:51.172" starttime="20170607 14:02:51.170"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:51.172" starttime="20170607 14:02:51.169"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:02:51.236" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:02:51.236" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:51.236" starttime="20170607 14:02:51.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:02:51.238" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:02:51.238" starttime="20170607 14:02:51.237"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:02:51.239" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:02:51.239" starttime="20170607 14:02:51.239"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:51.239" starttime="20170607 14:02:51.238"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:51.239" starttime="20170607 14:02:51.237"></status>
</kw>
<status status="PASS" endtime="20170607 14:02:51.239" starttime="20170607 14:02:51.236"></status>
</kw>
<msg timestamp="20170607 14:02:51.239" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:02:51.240" starttime="20170607 14:02:50.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:02:51.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:02:51.240" starttime="20170607 14:02:51.240"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:02:51.241" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:02:51.241" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:02:51.241" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:02:51.241" starttime="20170607 14:02:51.240"></status>
</kw>
<msg timestamp="20170607 14:02:51.241" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:02:51.241" starttime="20170607 14:02:50.940"></status>
</kw>
<msg timestamp="20170607 14:02:51.241" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:02:51.241" starttime="20170607 14:02:50.939"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:02:51.242" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:02:51.242" starttime="20170607 14:02:51.242"></status>
</kw>
<status status="FAIL" endtime="20170607 14:02:51.242" starttime="20170607 14:02:50.939"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:03:01.247" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:03:01.247" starttime="20170607 14:03:01.247"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:03:01.248" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:03:01.248" starttime="20170607 14:03:01.248"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:03:01.249" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:03:01.249" starttime="20170607 14:03:01.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:03:01.250" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:03:01.250" starttime="20170607 14:03:01.249"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:03:01.479" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:03:01.479" starttime="20170607 14:03:01.250"></status>
</kw>
<msg timestamp="20170607 14:03:01.479" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:03:01.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:01.479" starttime="20170607 14:03:01.250"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:03:01.480" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:01.480" starttime="20170607 14:03:01.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:03:01.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:01.481" starttime="20170607 14:03:01.480"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:01.481" starttime="20170607 14:03:01.246"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:01.481" starttime="20170607 14:03:01.246"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:01.481" starttime="20170607 14:03:01.245"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:03:01.481" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:03:01.481" starttime="20170607 14:03:01.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:03:01.483" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:03:01.484" starttime="20170607 14:03:01.483"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:03:01.484" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:03:01.485" starttime="20170607 14:03:01.484"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:01.485" starttime="20170607 14:03:01.484"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:01.485" starttime="20170607 14:03:01.482"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:01.485" starttime="20170607 14:03:01.482"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:03:01.570" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:03:01.570" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:01.570" starttime="20170607 14:03:01.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:03:01.572" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:03:01.572" starttime="20170607 14:03:01.571"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:03:01.573" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:03:01.573" starttime="20170607 14:03:01.573"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:01.573" starttime="20170607 14:03:01.572"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:01.573" starttime="20170607 14:03:01.571"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:01.573" starttime="20170607 14:03:01.570"></status>
</kw>
<msg timestamp="20170607 14:03:01.573" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:01.573" starttime="20170607 14:03:01.244"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:03:01.574" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:01.574" starttime="20170607 14:03:01.574"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:03:01.575" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:03:01.575" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:03:01.575" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:03:01.575" starttime="20170607 14:03:01.574"></status>
</kw>
<msg timestamp="20170607 14:03:01.575" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:03:01.575" starttime="20170607 14:03:01.244"></status>
</kw>
<msg timestamp="20170607 14:03:01.575" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:03:01.575" starttime="20170607 14:03:01.243"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:03:01.576" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:03:01.576" starttime="20170607 14:03:01.576"></status>
</kw>
<status status="FAIL" endtime="20170607 14:03:01.576" starttime="20170607 14:03:01.243"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:03:11.581" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:03:11.582" starttime="20170607 14:03:11.581"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:03:11.582" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:03:11.582" starttime="20170607 14:03:11.582"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:03:11.583" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:03:11.583" starttime="20170607 14:03:11.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:03:11.584" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:03:11.584" starttime="20170607 14:03:11.583"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:03:11.773" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:03:11.773" starttime="20170607 14:03:11.584"></status>
</kw>
<msg timestamp="20170607 14:03:11.773" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:03:11.773" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:11.773" starttime="20170607 14:03:11.584"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:03:11.774" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:11.774" starttime="20170607 14:03:11.774"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:03:11.775" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:11.775" starttime="20170607 14:03:11.774"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:11.775" starttime="20170607 14:03:11.580"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:11.775" starttime="20170607 14:03:11.580"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:11.775" starttime="20170607 14:03:11.579"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:03:11.776" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:03:11.776" starttime="20170607 14:03:11.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:03:11.779" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:03:11.779" starttime="20170607 14:03:11.778"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:03:11.780" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:03:11.780" starttime="20170607 14:03:11.780"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:11.780" starttime="20170607 14:03:11.779"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:11.780" starttime="20170607 14:03:11.777"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:11.781" starttime="20170607 14:03:11.776"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:03:11.843" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:03:11.843" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:11.843" starttime="20170607 14:03:11.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:03:11.845" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:03:11.845" starttime="20170607 14:03:11.844"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:03:11.846" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:03:11.846" starttime="20170607 14:03:11.846"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:11.846" starttime="20170607 14:03:11.845"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:11.847" starttime="20170607 14:03:11.844"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:11.847" starttime="20170607 14:03:11.844"></status>
</kw>
<msg timestamp="20170607 14:03:11.847" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:11.847" starttime="20170607 14:03:11.578"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:03:11.847" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:11.847" starttime="20170607 14:03:11.847"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:03:11.848" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:03:11.848" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:03:11.848" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:03:11.848" starttime="20170607 14:03:11.848"></status>
</kw>
<msg timestamp="20170607 14:03:11.849" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:03:11.849" starttime="20170607 14:03:11.578"></status>
</kw>
<msg timestamp="20170607 14:03:11.849" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:03:11.849" starttime="20170607 14:03:11.577"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:03:11.850" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:03:11.850" starttime="20170607 14:03:11.849"></status>
</kw>
<status status="FAIL" endtime="20170607 14:03:11.850" starttime="20170607 14:03:11.577"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:03:21.855" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:03:21.855" starttime="20170607 14:03:21.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:03:21.856" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:03:21.856" starttime="20170607 14:03:21.855"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:03:21.857" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:03:21.857" starttime="20170607 14:03:21.856"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:03:21.857" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:03:21.857" starttime="20170607 14:03:21.857"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:03:22.040" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:03:22.040" starttime="20170607 14:03:21.858"></status>
</kw>
<msg timestamp="20170607 14:03:22.041" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:03:22.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:22.041" starttime="20170607 14:03:21.857"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:03:22.041" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:22.041" starttime="20170607 14:03:22.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:03:22.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:22.042" starttime="20170607 14:03:22.042"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:22.043" starttime="20170607 14:03:21.854"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:22.043" starttime="20170607 14:03:21.853"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:22.043" starttime="20170607 14:03:21.853"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:03:22.043" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:03:22.043" starttime="20170607 14:03:22.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:03:22.045" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:03:22.045" starttime="20170607 14:03:22.045"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:03:22.046" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:03:22.046" starttime="20170607 14:03:22.046"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:22.047" starttime="20170607 14:03:22.046"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:22.047" starttime="20170607 14:03:22.044"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:22.047" starttime="20170607 14:03:22.044"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:03:22.110" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:03:22.110" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:22.110" starttime="20170607 14:03:22.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:03:22.112" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:03:22.112" starttime="20170607 14:03:22.111"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:03:22.113" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:03:22.113" starttime="20170607 14:03:22.113"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:22.113" starttime="20170607 14:03:22.112"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:22.113" starttime="20170607 14:03:22.111"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:22.113" starttime="20170607 14:03:22.110"></status>
</kw>
<msg timestamp="20170607 14:03:22.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:22.113" starttime="20170607 14:03:21.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:03:22.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:22.114" starttime="20170607 14:03:22.114"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:03:22.115" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:03:22.115" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:03:22.115" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:03:22.115" starttime="20170607 14:03:22.114"></status>
</kw>
<msg timestamp="20170607 14:03:22.115" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:03:22.115" starttime="20170607 14:03:21.851"></status>
</kw>
<msg timestamp="20170607 14:03:22.115" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:03:22.116" starttime="20170607 14:03:21.851"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:03:22.116" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:03:22.116" starttime="20170607 14:03:22.116"></status>
</kw>
<status status="FAIL" endtime="20170607 14:03:22.116" starttime="20170607 14:03:21.850"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:03:32.122" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:03:32.122" starttime="20170607 14:03:32.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:03:32.123" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:03:32.123" starttime="20170607 14:03:32.122"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:03:32.123" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:03:32.123" starttime="20170607 14:03:32.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:03:32.124" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:03:32.124" starttime="20170607 14:03:32.124"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:03:32.392" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:03:32.392" starttime="20170607 14:03:32.125"></status>
</kw>
<msg timestamp="20170607 14:03:32.392" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:03:32.392" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:32.392" starttime="20170607 14:03:32.124"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:03:32.393" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:32.393" starttime="20170607 14:03:32.392"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:03:32.394" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:32.394" starttime="20170607 14:03:32.393"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:32.394" starttime="20170607 14:03:32.120"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:32.394" starttime="20170607 14:03:32.120"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:32.394" starttime="20170607 14:03:32.119"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:03:32.395" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:03:32.395" starttime="20170607 14:03:32.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:03:32.397" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:03:32.397" starttime="20170607 14:03:32.396"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:03:32.398" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:03:32.398" starttime="20170607 14:03:32.398"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:32.398" starttime="20170607 14:03:32.397"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:32.399" starttime="20170607 14:03:32.396"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:32.399" starttime="20170607 14:03:32.395"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:03:32.463" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:03:32.463" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:32.463" starttime="20170607 14:03:32.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:03:32.465" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:03:32.465" starttime="20170607 14:03:32.464"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:03:32.466" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:03:32.466" starttime="20170607 14:03:32.465"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:32.466" starttime="20170607 14:03:32.465"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:32.466" starttime="20170607 14:03:32.464"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:32.466" starttime="20170607 14:03:32.463"></status>
</kw>
<msg timestamp="20170607 14:03:32.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:32.467" starttime="20170607 14:03:32.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:03:32.467" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:32.467" starttime="20170607 14:03:32.467"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:03:32.468" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:03:32.468" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:03:32.468" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:03:32.468" starttime="20170607 14:03:32.467"></status>
</kw>
<msg timestamp="20170607 14:03:32.468" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:03:32.468" starttime="20170607 14:03:32.118"></status>
</kw>
<msg timestamp="20170607 14:03:32.469" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:03:32.469" starttime="20170607 14:03:32.118"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:03:32.469" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:03:32.469" starttime="20170607 14:03:32.469"></status>
</kw>
<status status="FAIL" endtime="20170607 14:03:32.470" starttime="20170607 14:03:32.117"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:03:42.475" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:03:42.475" starttime="20170607 14:03:42.474"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:03:42.476" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:03:42.476" starttime="20170607 14:03:42.475"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:03:42.476" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:03:42.476" starttime="20170607 14:03:42.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:03:42.477" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:03:42.477" starttime="20170607 14:03:42.477"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:03:42.656" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:03:42.656" starttime="20170607 14:03:42.478"></status>
</kw>
<msg timestamp="20170607 14:03:42.656" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:03:42.656" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:42.656" starttime="20170607 14:03:42.477"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:03:42.657" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:42.657" starttime="20170607 14:03:42.656"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:03:42.658" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:42.658" starttime="20170607 14:03:42.657"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:42.658" starttime="20170607 14:03:42.474"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:42.658" starttime="20170607 14:03:42.473"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:42.658" starttime="20170607 14:03:42.473"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:03:42.659" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:03:42.659" starttime="20170607 14:03:42.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:03:42.661" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:03:42.661" starttime="20170607 14:03:42.660"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:03:42.662" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:03:42.662" starttime="20170607 14:03:42.662"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:42.662" starttime="20170607 14:03:42.661"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:42.662" starttime="20170607 14:03:42.660"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:42.662" starttime="20170607 14:03:42.659"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:03:42.726" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:03:42.726" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:42.726" starttime="20170607 14:03:42.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:03:42.728" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:03:42.728" starttime="20170607 14:03:42.727"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:03:42.728" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:03:42.729" starttime="20170607 14:03:42.728"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:42.729" starttime="20170607 14:03:42.728"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:42.729" starttime="20170607 14:03:42.727"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:42.729" starttime="20170607 14:03:42.726"></status>
</kw>
<msg timestamp="20170607 14:03:42.729" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:42.729" starttime="20170607 14:03:42.472"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:03:42.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:42.730" starttime="20170607 14:03:42.729"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:03:42.730" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:03:42.730" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:03:42.731" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:03:42.731" starttime="20170607 14:03:42.730"></status>
</kw>
<msg timestamp="20170607 14:03:42.731" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:03:42.731" starttime="20170607 14:03:42.471"></status>
</kw>
<msg timestamp="20170607 14:03:42.731" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:03:42.731" starttime="20170607 14:03:42.471"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:03:42.732" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:03:42.732" starttime="20170607 14:03:42.732"></status>
</kw>
<status status="FAIL" endtime="20170607 14:03:42.732" starttime="20170607 14:03:42.470"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:03:52.740" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:03:52.741" starttime="20170607 14:03:52.740"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:03:52.741" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:03:52.742" starttime="20170607 14:03:52.741"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:03:52.742" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:03:52.742" starttime="20170607 14:03:52.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:03:52.743" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:03:52.743" starttime="20170607 14:03:52.743"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:03:52.922" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:03:52.922" starttime="20170607 14:03:52.744"></status>
</kw>
<msg timestamp="20170607 14:03:52.922" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:03:52.923" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:52.923" starttime="20170607 14:03:52.744"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:03:52.923" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:52.923" starttime="20170607 14:03:52.923"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:03:52.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:52.924" starttime="20170607 14:03:52.924"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:52.924" starttime="20170607 14:03:52.737"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:52.924" starttime="20170607 14:03:52.736"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:52.925" starttime="20170607 14:03:52.736"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:03:52.925" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:03:52.925" starttime="20170607 14:03:52.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:03:52.927" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:03:52.927" starttime="20170607 14:03:52.927"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:03:52.928" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:03:52.928" starttime="20170607 14:03:52.928"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:52.928" starttime="20170607 14:03:52.927"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:52.929" starttime="20170607 14:03:52.926"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:52.929" starttime="20170607 14:03:52.925"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:03:53.012" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:03:53.012" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:53.012" starttime="20170607 14:03:52.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:03:53.014" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:03:53.014" starttime="20170607 14:03:53.014"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:03:53.015" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:03:53.015" starttime="20170607 14:03:53.015"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:53.016" starttime="20170607 14:03:53.014"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:53.016" starttime="20170607 14:03:53.013"></status>
</kw>
<status status="PASS" endtime="20170607 14:03:53.016" starttime="20170607 14:03:53.013"></status>
</kw>
<msg timestamp="20170607 14:03:53.016" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:03:53.016" starttime="20170607 14:03:52.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:03:53.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:03:53.017" starttime="20170607 14:03:53.016"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:03:53.017" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:03:53.017" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:03:53.017" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:03:53.017" starttime="20170607 14:03:53.017"></status>
</kw>
<msg timestamp="20170607 14:03:53.018" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:03:53.018" starttime="20170607 14:03:52.734"></status>
</kw>
<msg timestamp="20170607 14:03:53.018" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:03:53.018" starttime="20170607 14:03:52.733"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:03:53.019" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:03:53.019" starttime="20170607 14:03:53.018"></status>
</kw>
<status status="FAIL" endtime="20170607 14:03:53.019" starttime="20170607 14:03:52.733"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:04:03.024" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:04:03.024" starttime="20170607 14:04:03.024"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:04:03.025" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:04:03.025" starttime="20170607 14:04:03.025"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:04:03.026" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:04:03.026" starttime="20170607 14:04:03.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:04:03.026" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:04:03.026" starttime="20170607 14:04:03.026"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:04:03.275" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:04:03.275" starttime="20170607 14:04:03.027"></status>
</kw>
<msg timestamp="20170607 14:04:03.275" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:04:03.275" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:03.276" starttime="20170607 14:04:03.027"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:04:03.276" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:03.276" starttime="20170607 14:04:03.276"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:04:03.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:03.277" starttime="20170607 14:04:03.276"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:03.277" starttime="20170607 14:04:03.023"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:03.277" starttime="20170607 14:04:03.023"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:03.277" starttime="20170607 14:04:03.022"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:04:03.278" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:04:03.278" starttime="20170607 14:04:03.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:04:03.280" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:04:03.280" starttime="20170607 14:04:03.280"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:04:03.281" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:04:03.281" starttime="20170607 14:04:03.281"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:03.281" starttime="20170607 14:04:03.280"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:03.281" starttime="20170607 14:04:03.279"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:03.281" starttime="20170607 14:04:03.278"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:04:03.344" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:04:03.344" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:03.344" starttime="20170607 14:04:03.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:04:03.346" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:04:03.346" starttime="20170607 14:04:03.346"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:04:03.347" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:04:03.347" starttime="20170607 14:04:03.347"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:03.347" starttime="20170607 14:04:03.346"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:03.347" starttime="20170607 14:04:03.345"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:03.347" starttime="20170607 14:04:03.345"></status>
</kw>
<msg timestamp="20170607 14:04:03.348" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:03.348" starttime="20170607 14:04:03.021"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:04:03.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:03.348" starttime="20170607 14:04:03.348"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:04:03.349" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:04:03.349" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:04:03.349" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:04:03.349" starttime="20170607 14:04:03.349"></status>
</kw>
<msg timestamp="20170607 14:04:03.351" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:04:03.351" starttime="20170607 14:04:03.020"></status>
</kw>
<msg timestamp="20170607 14:04:03.351" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:04:03.351" starttime="20170607 14:04:03.020"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:04:03.352" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:04:03.352" starttime="20170607 14:04:03.352"></status>
</kw>
<status status="FAIL" endtime="20170607 14:04:03.352" starttime="20170607 14:04:03.019"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:04:13.357" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:04:13.357" starttime="20170607 14:04:13.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:04:13.358" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:04:13.358" starttime="20170607 14:04:13.358"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:04:13.359" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:04:13.359" starttime="20170607 14:04:13.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:04:13.359" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:04:13.359" starttime="20170607 14:04:13.359"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:04:13.601" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:04:13.601" starttime="20170607 14:04:13.360"></status>
</kw>
<msg timestamp="20170607 14:04:13.601" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:04:13.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:13.601" starttime="20170607 14:04:13.360"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:04:13.602" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:13.602" starttime="20170607 14:04:13.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:04:13.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:13.602" starttime="20170607 14:04:13.602"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:13.602" starttime="20170607 14:04:13.356"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:13.603" starttime="20170607 14:04:13.355"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:13.603" starttime="20170607 14:04:13.355"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:04:13.603" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:04:13.603" starttime="20170607 14:04:13.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:04:13.605" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:04:13.605" starttime="20170607 14:04:13.605"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:04:13.606" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:04:13.606" starttime="20170607 14:04:13.606"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:13.606" starttime="20170607 14:04:13.605"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:13.607" starttime="20170607 14:04:13.604"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:13.607" starttime="20170607 14:04:13.604"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:04:13.706" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:04:13.706" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:13.706" starttime="20170607 14:04:13.607"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:04:13.708" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:04:13.708" starttime="20170607 14:04:13.707"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:04:13.709" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:04:13.709" starttime="20170607 14:04:13.709"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:13.709" starttime="20170607 14:04:13.708"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:13.709" starttime="20170607 14:04:13.707"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:13.709" starttime="20170607 14:04:13.707"></status>
</kw>
<msg timestamp="20170607 14:04:13.710" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:13.710" starttime="20170607 14:04:13.354"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:04:13.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:13.710" starttime="20170607 14:04:13.710"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:04:13.711" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:04:13.711" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:04:13.711" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:04:13.711" starttime="20170607 14:04:13.710"></status>
</kw>
<msg timestamp="20170607 14:04:13.711" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:04:13.711" starttime="20170607 14:04:13.354"></status>
</kw>
<msg timestamp="20170607 14:04:13.712" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:04:13.712" starttime="20170607 14:04:13.353"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:04:13.712" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:04:13.712" starttime="20170607 14:04:13.712"></status>
</kw>
<status status="FAIL" endtime="20170607 14:04:13.712" starttime="20170607 14:04:13.353"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:04:23.717" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:04:23.718" starttime="20170607 14:04:23.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:04:23.718" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:04:23.718" starttime="20170607 14:04:23.718"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:04:23.719" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:04:23.719" starttime="20170607 14:04:23.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:04:23.720" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:04:23.720" starttime="20170607 14:04:23.719"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:04:23.944" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:04:23.944" starttime="20170607 14:04:23.720"></status>
</kw>
<msg timestamp="20170607 14:04:23.944" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:04:23.944" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:23.944" starttime="20170607 14:04:23.720"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:04:23.945" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:23.945" starttime="20170607 14:04:23.945"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:04:23.946" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:23.946" starttime="20170607 14:04:23.945"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:23.946" starttime="20170607 14:04:23.716"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:23.946" starttime="20170607 14:04:23.716"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:23.946" starttime="20170607 14:04:23.715"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:04:23.947" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:04:23.947" starttime="20170607 14:04:23.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:04:23.949" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:04:23.949" starttime="20170607 14:04:23.949"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:04:23.950" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:04:23.950" starttime="20170607 14:04:23.950"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:23.950" starttime="20170607 14:04:23.949"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:23.951" starttime="20170607 14:04:23.947"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:23.951" starttime="20170607 14:04:23.947"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:04:24.013" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:04:24.013" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:24.013" starttime="20170607 14:04:23.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:04:24.015" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:04:24.015" starttime="20170607 14:04:24.015"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:04:24.016" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:04:24.016" starttime="20170607 14:04:24.016"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:24.016" starttime="20170607 14:04:24.015"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:24.016" starttime="20170607 14:04:24.014"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:24.016" starttime="20170607 14:04:24.014"></status>
</kw>
<msg timestamp="20170607 14:04:24.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:24.017" starttime="20170607 14:04:23.715"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:04:24.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:24.017" starttime="20170607 14:04:24.017"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:04:24.018" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:04:24.018" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:04:24.018" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:04:24.018" starttime="20170607 14:04:24.018"></status>
</kw>
<msg timestamp="20170607 14:04:24.018" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:04:24.018" starttime="20170607 14:04:23.714"></status>
</kw>
<msg timestamp="20170607 14:04:24.019" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:04:24.019" starttime="20170607 14:04:23.713"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:04:24.019" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:04:24.019" starttime="20170607 14:04:24.019"></status>
</kw>
<status status="FAIL" endtime="20170607 14:04:24.020" starttime="20170607 14:04:23.713"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:04:34.025" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:04:34.026" starttime="20170607 14:04:34.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:04:34.026" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:04:34.026" starttime="20170607 14:04:34.026"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:04:34.027" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:04:34.027" starttime="20170607 14:04:34.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:04:34.028" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:04:34.028" starttime="20170607 14:04:34.027"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:04:34.214" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:04:34.214" starttime="20170607 14:04:34.028"></status>
</kw>
<msg timestamp="20170607 14:04:34.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:04:34.215" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:34.215" starttime="20170607 14:04:34.028"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:04:34.215" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:34.215" starttime="20170607 14:04:34.215"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:04:34.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:34.216" starttime="20170607 14:04:34.216"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:34.216" starttime="20170607 14:04:34.024"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:34.216" starttime="20170607 14:04:34.024"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:34.216" starttime="20170607 14:04:34.023"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:04:34.217" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:04:34.217" starttime="20170607 14:04:34.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:04:34.220" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:04:34.220" starttime="20170607 14:04:34.219"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:04:34.220" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:04:34.221" starttime="20170607 14:04:34.220"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:34.221" starttime="20170607 14:04:34.220"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:34.221" starttime="20170607 14:04:34.218"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:34.221" starttime="20170607 14:04:34.218"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:04:34.285" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:04:34.285" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:34.285" starttime="20170607 14:04:34.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:04:34.287" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:04:34.287" starttime="20170607 14:04:34.287"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:04:34.288" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:04:34.288" starttime="20170607 14:04:34.288"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:34.288" starttime="20170607 14:04:34.287"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:34.288" starttime="20170607 14:04:34.286"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:34.289" starttime="20170607 14:04:34.286"></status>
</kw>
<msg timestamp="20170607 14:04:34.289" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:34.289" starttime="20170607 14:04:34.022"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:04:34.289" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:34.289" starttime="20170607 14:04:34.289"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:04:34.290" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:04:34.290" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:04:34.290" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:04:34.290" starttime="20170607 14:04:34.290"></status>
</kw>
<msg timestamp="20170607 14:04:34.290" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:04:34.291" starttime="20170607 14:04:34.022"></status>
</kw>
<msg timestamp="20170607 14:04:34.291" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:04:34.291" starttime="20170607 14:04:34.021"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:04:34.292" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:04:34.292" starttime="20170607 14:04:34.291"></status>
</kw>
<status status="FAIL" endtime="20170607 14:04:34.292" starttime="20170607 14:04:34.021"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:04:44.297" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:04:44.298" starttime="20170607 14:04:44.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:04:44.298" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:04:44.298" starttime="20170607 14:04:44.298"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:04:44.299" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:04:44.299" starttime="20170607 14:04:44.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:04:44.299" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:04:44.299" starttime="20170607 14:04:44.299"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:04:44.484" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:04:44.484" starttime="20170607 14:04:44.300"></status>
</kw>
<msg timestamp="20170607 14:04:44.484" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:04:44.484" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:44.484" starttime="20170607 14:04:44.300"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:04:44.485" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:44.485" starttime="20170607 14:04:44.485"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:04:44.486" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:44.486" starttime="20170607 14:04:44.486"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:44.486" starttime="20170607 14:04:44.296"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:44.486" starttime="20170607 14:04:44.295"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:44.487" starttime="20170607 14:04:44.295"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:04:44.487" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:04:44.488" starttime="20170607 14:04:44.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:04:44.490" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:04:44.491" starttime="20170607 14:04:44.489"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:04:44.492" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:04:44.492" starttime="20170607 14:04:44.491"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:44.492" starttime="20170607 14:04:44.491"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:44.493" starttime="20170607 14:04:44.489"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:44.493" starttime="20170607 14:04:44.488"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:04:44.556" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:04:44.556" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:44.556" starttime="20170607 14:04:44.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:04:44.558" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:04:44.558" starttime="20170607 14:04:44.558"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:04:44.559" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:04:44.559" starttime="20170607 14:04:44.559"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:44.559" starttime="20170607 14:04:44.558"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:44.560" starttime="20170607 14:04:44.557"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:44.560" starttime="20170607 14:04:44.557"></status>
</kw>
<msg timestamp="20170607 14:04:44.560" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:44.560" starttime="20170607 14:04:44.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:04:44.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:44.561" starttime="20170607 14:04:44.560"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:04:44.561" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:04:44.561" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:04:44.561" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:04:44.561" starttime="20170607 14:04:44.561"></status>
</kw>
<msg timestamp="20170607 14:04:44.562" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:04:44.562" starttime="20170607 14:04:44.293"></status>
</kw>
<msg timestamp="20170607 14:04:44.562" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:04:44.562" starttime="20170607 14:04:44.293"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:04:44.563" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:04:44.563" starttime="20170607 14:04:44.562"></status>
</kw>
<status status="FAIL" endtime="20170607 14:04:44.563" starttime="20170607 14:04:44.292"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:04:54.568" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:04:54.568" starttime="20170607 14:04:54.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:04:54.569" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:04:54.569" starttime="20170607 14:04:54.568"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:04:54.569" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:04:54.569" starttime="20170607 14:04:54.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:04:54.570" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:04:54.570" starttime="20170607 14:04:54.570"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:04:54.752" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:04:54.752" starttime="20170607 14:04:54.571"></status>
</kw>
<msg timestamp="20170607 14:04:54.752" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:04:54.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:54.752" starttime="20170607 14:04:54.570"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:04:54.753" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:54.753" starttime="20170607 14:04:54.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:04:54.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:54.754" starttime="20170607 14:04:54.753"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:54.754" starttime="20170607 14:04:54.567"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:54.754" starttime="20170607 14:04:54.566"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:54.754" starttime="20170607 14:04:54.566"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:04:54.755" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:04:54.755" starttime="20170607 14:04:54.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:04:54.757" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:04:54.757" starttime="20170607 14:04:54.756"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:04:54.758" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:04:54.758" starttime="20170607 14:04:54.758"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:54.758" starttime="20170607 14:04:54.757"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:54.758" starttime="20170607 14:04:54.756"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:54.758" starttime="20170607 14:04:54.755"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:04:54.828" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:04:54.828" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:54.828" starttime="20170607 14:04:54.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:04:54.830" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:04:54.830" starttime="20170607 14:04:54.829"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:04:54.831" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:04:54.831" starttime="20170607 14:04:54.831"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:54.831" starttime="20170607 14:04:54.830"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:54.831" starttime="20170607 14:04:54.829"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:54.831" starttime="20170607 14:04:54.828"></status>
</kw>
<msg timestamp="20170607 14:04:54.831" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:54.831" starttime="20170607 14:04:54.565"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:04:54.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:54.832" starttime="20170607 14:04:54.832"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:04:54.833" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:04:54.833" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:04:54.833" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:04:54.833" starttime="20170607 14:04:54.832"></status>
</kw>
<msg timestamp="20170607 14:04:54.833" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:04:54.833" starttime="20170607 14:04:54.564"></status>
</kw>
<msg timestamp="20170607 14:04:54.834" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:04:54.834" starttime="20170607 14:04:54.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 14:04:54.834" level="FAIL">Off != Running</msg>
<status status="FAIL" endtime="20170607 14:04:54.834" starttime="20170607 14:04:54.834"></status>
</kw>
<status status="FAIL" endtime="20170607 14:04:54.835" starttime="20170607 14:04:54.563"></status>
</kw>
<msg timestamp="20170607 14:04:54.835" level="FAIL">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</msg>
<status status="FAIL" endtime="20170607 14:04:54.835" starttime="20170607 14:01:46.288"></status>
</kw>
<status status="FAIL" endtime="20170607 14:04:54.835" starttime="20170607 14:01:45.180"></status>
</kw>
<status status="FAIL" endtime="20170607 14:04:54.835" starttime="20170607 14:01:45.180"></status>
</kw>
<status status="FAIL" endtime="20170607 14:04:54.835" starttime="20170607 14:01:45.179"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:04:54.840" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:04:54.841" starttime="20170607 14:04:54.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:04:54.842" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:04:54.842" starttime="20170607 14:04:54.841"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:04:54.842" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:04:54.842" starttime="20170607 14:04:54.842"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:04:54.843" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:04:54.843" starttime="20170607 14:04:54.842"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:04:55.135" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:04:55.135" starttime="20170607 14:04:54.844"></status>
</kw>
<msg timestamp="20170607 14:04:55.135" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:04:55.135" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:55.135" starttime="20170607 14:04:54.843"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:04:55.136" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:55.136" starttime="20170607 14:04:55.136"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:04:55.137" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:55.137" starttime="20170607 14:04:55.136"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:55.137" starttime="20170607 14:04:54.839"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:55.137" starttime="20170607 14:04:54.839"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:55.137" starttime="20170607 14:04:54.838"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:04:55.138" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 14:04:55.138" starttime="20170607 14:04:55.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:04:55.140" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:04:55.140" starttime="20170607 14:04:55.139"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:04:55.141" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 14:04:55.141" starttime="20170607 14:04:55.141"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:55.141" starttime="20170607 14:04:55.140"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:55.141" starttime="20170607 14:04:55.138"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:55.141" starttime="20170607 14:04:55.138"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:04:55.299" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 14:04:55.299" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:55.299" starttime="20170607 14:04:55.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 14:04:55.301" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:04:55.301" starttime="20170607 14:04:55.301"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 14:04:55.302" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 14:04:55.302" starttime="20170607 14:04:55.302"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:55.303" starttime="20170607 14:04:55.301"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:55.303" starttime="20170607 14:04:55.300"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:55.303" starttime="20170607 14:04:55.299"></status>
</kw>
<msg timestamp="20170607 14:04:55.303" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:04:55.303" starttime="20170607 14:04:54.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:04:55.304" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:04:55.304" starttime="20170607 14:04:55.303"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 14:04:55.304" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:04:55.304" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 14:04:55.304" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status status="PASS" endtime="20170607 14:04:55.304" starttime="20170607 14:04:55.304"></status>
</kw>
<msg timestamp="20170607 14:04:55.305" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 14:04:55.305" starttime="20170607 14:04:54.837"></status>
</kw>
<msg timestamp="20170607 14:04:55.305" level="INFO">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 14:04:55.305" starttime="20170607 14:04:54.837"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170607 14:04:55.306" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" endtime="20170607 14:04:55.306" starttime="20170607 14:04:55.306"></status>
</kw>
<msg timestamp="20170607 14:04:55.306" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170607 14:04:55.306" starttime="20170607 14:04:55.305"></status>
</kw>
<msg timestamp="20170607 14:04:55.307" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170607 14:04:55.307" starttime="20170607 14:04:54.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170607 14:04:55.321" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170607 14:04:55.321" starttime="20170607 14:04:55.320"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170607 14:04:55.325" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170607 14:04:58.329" level="INFO">${RC} = 0</msg>
<msg timestamp="20170607 14:04:58.329" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.728 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=76.1 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170607 14:04:58.330" starttime="20170607 14:04:55.321"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.333" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.728 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=76.1 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.781 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.621 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.621/19.563/76.122/32.654 ms</msg>
<status status="PASS" endtime="20170607 14:04:58.333" starttime="20170607 14:04:58.332"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:04:58.334" starttime="20170607 14:04:58.334"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.334" starttime="20170607 14:04:55.320"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 14:04:58.362" level="INFO">${cur_time} = 2017-06-07 14:04:58:361409</msg>
<status status="PASS" endtime="20170607 14:04:58.362" starttime="20170607 14:04:58.361"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 14:04:58.362" level="INFO">${cur_time} = 20170607140458361409</msg>
<status status="PASS" endtime="20170607 14:04:58.362" starttime="20170607 14:04:58.362"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.363" starttime="20170607 14:04:58.360"></status>
</kw>
<msg timestamp="20170607 14:04:58.363" level="INFO">${FFDC_TIME} = 20170607140458361409</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170607 14:04:58.364" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20170607 14:04:58.364" starttime="20170607 14:04:58.364"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170607 14:04:58.365" level="INFO">${suite_name} = 20170607140458361409_TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20170607 14:04:58.365" starttime="20170607 14:04:58.364"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170607 14:04:58.365" level="INFO">${test_name} = PowerOnTest</msg>
<status status="PASS" endtime="20170607 14:04:58.365" starttime="20170607 14:04:58.365"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170607 14:04:58.366" level="INFO">${test_name} = 20170607140458361409_PowerOnTest</msg>
<status status="PASS" endtime="20170607 14:04:58.366" starttime="20170607 14:04:58.366"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.366" starttime="20170607 14:04:58.363"></status>
</kw>
<msg timestamp="20170607 14:04:58.366" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/</msg>
<msg timestamp="20170607 14:04:58.367" level="INFO">${FFDC_PREFIX} = 20170607140458361409_</msg>
<msg timestamp="20170607 14:04:58.387" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/</arg>
</arguments>
<msg timestamp="20170607 14:04:58.393" html="yes" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:04:58.393" starttime="20170607 14:04:58.387"></status>
</kw>
<msg timestamp="20170607 14:04:58.397" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.410" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:04:58.411" starttime="20170607 14:04:58.410"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.411" starttime="20170607 14:04:58.409"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.412" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:04:58.412" starttime="20170607 14:04:58.411"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.412" starttime="20170607 14:04:58.411"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.413" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:04:58.413" starttime="20170607 14:04:58.413"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.413" starttime="20170607 14:04:58.412"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.415" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:04:58.415" starttime="20170607 14:04:58.414"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.415" starttime="20170607 14:04:58.413"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.416" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:04:58.416" starttime="20170607 14:04:58.416"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.416" starttime="20170607 14:04:58.415"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.418" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:04:58.418" starttime="20170607 14:04:58.417"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.418" starttime="20170607 14:04:58.417"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.419" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:04:58.419" starttime="20170607 14:04:58.419"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.419" starttime="20170607 14:04:58.418"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.420" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:04:58.420" starttime="20170607 14:04:58.420"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.421" starttime="20170607 14:04:58.419"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.422" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:04:58.422" starttime="20170607 14:04:58.421"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.422" starttime="20170607 14:04:58.421"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.424" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:04:58.424" starttime="20170607 14:04:58.423"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.424" starttime="20170607 14:04:58.422"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.425" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:04:58.425" starttime="20170607 14:04:58.425"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.425" starttime="20170607 14:04:58.424"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.426" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:04:58.426" starttime="20170607 14:04:58.426"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.427" starttime="20170607 14:04:58.425"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.428" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:04:58.428" starttime="20170607 14:04:58.427"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.428" starttime="20170607 14:04:58.427"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 14:04:58.430" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 14:04:58.430" starttime="20170607 14:04:58.430"></status>
</kw>
<msg timestamp="20170607 14:04:58.430" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170607 14:04:58.430" starttime="20170607 14:04:58.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:04:58.431" starttime="20170607 14:04:58.431"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.431" starttime="20170607 14:04:58.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 14:04:58.433" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 14:04:58.433" starttime="20170607 14:04:58.433"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 14:04:58.434" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 14:04:58.434" starttime="20170607 14:04:58.433"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 14:04:58.434" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 14:04:58.434" starttime="20170607 14:04:58.434"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.435" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 14:04:58.435" starttime="20170607 14:04:58.434"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.435" starttime="20170607 14:04:58.432"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.435" starttime="20170607 14:04:58.432"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 14:04:58.437" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 14:04:58.437" starttime="20170607 14:04:58.436"></status>
</kw>
<msg timestamp="20170607 14:04:58.437" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170607 14:04:58.437" starttime="20170607 14:04:58.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:04:58.440" starttime="20170607 14:04:58.439"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:04:58.441" starttime="20170607 14:04:58.440"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.441" starttime="20170607 14:04:58.439"></status>
</kw>
<status status="PASS" endtime="20170607 14:04:58.441" starttime="20170607 14:04:58.437"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 14:04:58.442" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 14:05:00.152" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 14:05:00.152" starttime="20170607 14:04:58.441"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.152" starttime="20170607 14:04:58.428"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:05:00.153" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170607 14:05:00.230" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:05:00.230" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170607 14:05:00.230" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:05:00.230" starttime="20170607 14:05:00.153"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.231" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170607 14:05:00.231" starttime="20170607 14:05:00.230"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.231" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170607 14:05:00.231" starttime="20170607 14:05:00.231"></status>
</kw>
<msg timestamp="20170607 14:05:00.231" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170607 14:05:00.231" starttime="20170607 14:04:58.428"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.233" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:00.233" starttime="20170607 14:05:00.232"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.233" starttime="20170607 14:05:00.232"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.233" starttime="20170607 14:04:58.422"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.234" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:00.234" starttime="20170607 14:05:00.234"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.234" starttime="20170607 14:05:00.233"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170607 14:05:00.235" level="INFO">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status status="PASS" endtime="20170607 14:05:00.235" starttime="20170607 14:05:00.235"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.236" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:00.237" starttime="20170607 14:05:00.236"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.237" starttime="20170607 14:05:00.235"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.238" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:00.238" starttime="20170607 14:05:00.237"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.238" starttime="20170607 14:05:00.237"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.238" starttime="20170607 14:05:00.235"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.239" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:00.239" starttime="20170607 14:05:00.239"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.239" starttime="20170607 14:05:00.238"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.241" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:00.241" starttime="20170607 14:05:00.240"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.241" starttime="20170607 14:05:00.240"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.241" starttime="20170607 14:05:00.238"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.243" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:00.243" starttime="20170607 14:05:00.242"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.243" starttime="20170607 14:05:00.241"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.244" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:00.244" starttime="20170607 14:05:00.244"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.245" starttime="20170607 14:05:00.243"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.245" starttime="20170607 14:05:00.241"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.245" starttime="20170607 14:05:00.235"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.246" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:00.246" starttime="20170607 14:05:00.245"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.246" starttime="20170607 14:05:00.245"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.246" starttime="20170607 14:04:58.409"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170607 14:05:00.253" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170607 14:05:00.253" starttime="20170607 14:05:00.253"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170607 14:05:00.254" level="INFO">@{method_list} = [ ('SEL Log', 'Collect eSEL Log') | ('OS FFDC', 'OS FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('BMC Specific Files', 'BMC FFDC Files...</msg>
<status status="PASS" endtime="20170607 14:05:00.254" starttime="20170607 14:05:00.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:00.255" starttime="20170607 14:05:00.255"></status>
</kw>
<msg timestamp="20170607 14:05:00.255" level="INFO">@{ffdc_function_list} = [ SEL Log | OS FFDC | FFDC Generic Report | Get Request FFDC | BMC Specific Files | Core Files ]</msg>
<status status="PASS" endtime="20170607 14:05:00.255" starttime="20170607 14:05:00.254"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:00.257" starttime="20170607 14:05:00.257"></status>
</kw>
<msg timestamp="20170607 14:05:00.258" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:05:00.258" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170607 14:05:00.258" starttime="20170607 14:05:00.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:00.258" starttime="20170607 14:05:00.258"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:05:00.278" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:05:00.278" starttime="20170607 14:05:00.277"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:05:00.279" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:05:00.279" starttime="20170607 14:05:00.278"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:05:00.279" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:05:00.279" starttime="20170607 14:05:00.279"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:05:00.280" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:05:00.280" starttime="20170607 14:05:00.280"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.490" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:05:00.491" starttime="20170607 14:05:00.281"></status>
</kw>
<msg timestamp="20170607 14:05:00.491" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:05:00.491" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:00.491" starttime="20170607 14:05:00.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.491" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:05:00.492" starttime="20170607 14:05:00.491"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.492" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:05:00.492" starttime="20170607 14:05:00.492"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.492" starttime="20170607 14:05:00.277"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.492" starttime="20170607 14:05:00.276"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.493" starttime="20170607 14:05:00.275"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:05:00.493" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170607 14:05:00.493" starttime="20170607 14:05:00.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:00.494" starttime="20170607 14:05:00.493"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:05:00.545" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170607 14:05:00.545" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:00.545" starttime="20170607 14:05:00.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:00.546" starttime="20170607 14:05:00.546"></status>
</kw>
<msg timestamp="20170607 14:05:00.546" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:00.546" starttime="20170607 14:05:00.275"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170607 14:05:00.547" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170607 14:05:00.548" starttime="20170607 14:05:00.547"></status>
</kw>
<msg timestamp="20170607 14:05:00.548" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170607 14:05:00.548" starttime="20170607 14:05:00.546"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170607 14:05:00.548" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170607 14:05:00.548" starttime="20170607 14:05:00.548"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.548" starttime="20170607 14:05:00.274"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.549" starttime="20170607 14:05:00.259"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.549" starttime="20170607 14:05:00.256"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.549" starttime="20170607 14:05:00.256"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:00.551" starttime="20170607 14:05:00.550"></status>
</kw>
<msg timestamp="20170607 14:05:00.551" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:05:00.551" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170607 14:05:00.551" starttime="20170607 14:05:00.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:00.551" starttime="20170607 14:05:00.551"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170607 14:05:00.569" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170607 14:05:00.569" starttime="20170607 14:05:00.569"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.569" starttime="20170607 14:05:00.568"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.569" starttime="20170607 14:05:00.552"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.569" starttime="20170607 14:05:00.549"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.569" starttime="20170607 14:05:00.549"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:00.571" starttime="20170607 14:05:00.571"></status>
</kw>
<msg timestamp="20170607 14:05:00.571" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:05:00.571" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170607 14:05:00.571" starttime="20170607 14:05:00.571"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:00.572" starttime="20170607 14:05:00.572"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 14:05:00.590" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 14:05:00.590" starttime="20170607 14:05:00.590"></status>
</kw>
<msg timestamp="20170607 14:05:00.590" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170607 14:05:00.590" starttime="20170607 14:05:00.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:00.591" starttime="20170607 14:05:00.591"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.591" starttime="20170607 14:05:00.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 14:05:00.593" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 14:05:00.593" starttime="20170607 14:05:00.593"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 14:05:00.594" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 14:05:00.594" starttime="20170607 14:05:00.593"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 14:05:00.594" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 14:05:00.594" starttime="20170607 14:05:00.594"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.595" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 14:05:00.595" starttime="20170607 14:05:00.595"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.595" starttime="20170607 14:05:00.592"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.595" starttime="20170607 14:05:00.592"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 14:05:00.596" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 14:05:00.596" starttime="20170607 14:05:00.596"></status>
</kw>
<msg timestamp="20170607 14:05:00.596" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170607 14:05:00.597" starttime="20170607 14:05:00.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:00.598" starttime="20170607 14:05:00.598"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:00.599" starttime="20170607 14:05:00.598"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.599" starttime="20170607 14:05:00.598"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:00.599" starttime="20170607 14:05:00.597"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 14:05:00.600" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 14:05:02.350" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 14:05:02.351" starttime="20170607 14:05:00.600"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.351" starttime="20170607 14:05:00.589"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170607 14:05:02.352" level="INFO">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status status="PASS" endtime="20170607 14:05:02.352" starttime="20170607 14:05:02.351"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170607 14:05:02.353" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170607 14:05:02.353" starttime="20170607 14:05:02.353"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.358" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170607 14:05:02.358" starttime="20170607 14:05:02.353"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.361" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.362" starttime="20170607 14:05:02.361"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.362" starttime="20170607 14:05:02.360"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.363" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.363" starttime="20170607 14:05:02.363"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.363" starttime="20170607 14:05:02.362"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.364" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.365" starttime="20170607 14:05:02.364"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.365" starttime="20170607 14:05:02.363"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.366" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.366" starttime="20170607 14:05:02.365"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.366" starttime="20170607 14:05:02.365"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.366" starttime="20170607 14:05:02.360"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.366" starttime="20170607 14:05:02.359"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:05:02.367" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170607 14:05:02.414" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170607 14:05:02.414" level="INFO">${stdout} = </msg>
<msg timestamp="20170607 14:05:02.414" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170607 14:05:02.415" starttime="20170607 14:05:02.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.424" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.424" starttime="20170607 14:05:02.423"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.424" starttime="20170607 14:05:02.422"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.424" starttime="20170607 14:05:02.415"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.424" starttime="20170607 14:05:02.359"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.424" starttime="20170607 14:05:02.358"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.428" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.428" starttime="20170607 14:05:02.427"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.428" starttime="20170607 14:05:02.427"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.429" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.429" starttime="20170607 14:05:02.429"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.429" starttime="20170607 14:05:02.428"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.431" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.431" starttime="20170607 14:05:02.430"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.431" starttime="20170607 14:05:02.429"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.432" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.432" starttime="20170607 14:05:02.431"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.432" starttime="20170607 14:05:02.431"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.432" starttime="20170607 14:05:02.426"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.432" starttime="20170607 14:05:02.425"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:05:02.433" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170607 14:05:02.507" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:05:02.508" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.6-78"
VERSION_ID="v1.99.6-78-gfd4d3cc"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170607 14:05:02.508" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:05:02.508" starttime="20170607 14:05:02.432"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.514" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.514" starttime="20170607 14:05:02.514"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.514" starttime="20170607 14:05:02.513"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.514" starttime="20170607 14:05:02.508"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.515" starttime="20170607 14:05:02.425"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.515" starttime="20170607 14:05:02.424"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.515" starttime="20170607 14:05:02.358"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.515" starttime="20170607 14:05:02.352"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.515" starttime="20170607 14:05:02.352"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170607 14:05:02.516" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170607 14:05:02.516" starttime="20170607 14:05:02.516"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.517" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170607 14:05:02.517" starttime="20170607 14:05:02.516"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.520" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.520" starttime="20170607 14:05:02.520"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.520" starttime="20170607 14:05:02.519"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.522" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.522" starttime="20170607 14:05:02.521"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.522" starttime="20170607 14:05:02.521"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.523" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.523" starttime="20170607 14:05:02.523"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.523" starttime="20170607 14:05:02.522"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.524" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.524" starttime="20170607 14:05:02.524"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.525" starttime="20170607 14:05:02.523"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.525" starttime="20170607 14:05:02.519"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.525" starttime="20170607 14:05:02.518"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:05:02.525" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170607 14:05:02.650" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:05:02.650" level="INFO">${stdout} =  14:05:10 up 13 min,  load average: 0.38, 0.76, 0.77</msg>
<msg timestamp="20170607 14:05:02.651" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:05:02.651" starttime="20170607 14:05:02.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.657" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.657" starttime="20170607 14:05:02.656"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.657" starttime="20170607 14:05:02.656"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.657" starttime="20170607 14:05:02.651"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.657" starttime="20170607 14:05:02.517"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.657" starttime="20170607 14:05:02.517"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.660" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.660" starttime="20170607 14:05:02.660"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.661" starttime="20170607 14:05:02.659"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.662" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.662" starttime="20170607 14:05:02.661"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.662" starttime="20170607 14:05:02.661"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.663" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.663" starttime="20170607 14:05:02.663"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.664" starttime="20170607 14:05:02.662"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.665" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.665" starttime="20170607 14:05:02.664"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.665" starttime="20170607 14:05:02.664"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.665" starttime="20170607 14:05:02.659"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.665" starttime="20170607 14:05:02.658"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:05:02.666" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170607 14:05:02.750" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:05:02.750" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg timestamp="20170607 14:05:02.750" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:05:02.750" starttime="20170607 14:05:02.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.757" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.757" starttime="20170607 14:05:02.756"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.757" starttime="20170607 14:05:02.756"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.757" starttime="20170607 14:05:02.751"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.757" starttime="20170607 14:05:02.658"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.757" starttime="20170607 14:05:02.657"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.760" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.760" starttime="20170607 14:05:02.760"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.760" starttime="20170607 14:05:02.759"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.762" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.762" starttime="20170607 14:05:02.761"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.762" starttime="20170607 14:05:02.760"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.763" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.763" starttime="20170607 14:05:02.762"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.763" starttime="20170607 14:05:02.762"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.764" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.764" starttime="20170607 14:05:02.764"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.764" starttime="20170607 14:05:02.763"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.764" starttime="20170607 14:05:02.759"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.765" starttime="20170607 14:05:02.758"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:05:02.765" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170607 14:05:02.873" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:05:02.873" level="INFO">${stdout} = Linux witherspoon 4.10.5-8736136e756ec127de0bbe2c7e2de683204d4512 #1 Wed Jun 7 12:37:11 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170607 14:05:02.873" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:05:02.873" starttime="20170607 14:05:02.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.879" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.879" starttime="20170607 14:05:02.879"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.879" starttime="20170607 14:05:02.878"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.879" starttime="20170607 14:05:02.873"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.880" starttime="20170607 14:05:02.757"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.880" starttime="20170607 14:05:02.757"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.880" starttime="20170607 14:05:02.517"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.880" starttime="20170607 14:05:02.515"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.880" starttime="20170607 14:05:02.515"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170607 14:05:02.881" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170607 14:05:02.881" starttime="20170607 14:05:02.881"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.882" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170607 14:05:02.882" starttime="20170607 14:05:02.881"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.885" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.885" starttime="20170607 14:05:02.885"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.885" starttime="20170607 14:05:02.884"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.887" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.887" starttime="20170607 14:05:02.886"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.887" starttime="20170607 14:05:02.886"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.888" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.888" starttime="20170607 14:05:02.888"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.888" starttime="20170607 14:05:02.887"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:02.889" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:02.889" starttime="20170607 14:05:02.889"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.889" starttime="20170607 14:05:02.888"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.890" starttime="20170607 14:05:02.883"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:02.890" starttime="20170607 14:05:02.883"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:05:02.890" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170607 14:05:04.264" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:05:04.264" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg timestamp="20170607 14:05:04.265" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:05:04.265" starttime="20170607 14:05:02.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:04.271" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:04.271" starttime="20170607 14:05:04.271"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.272" starttime="20170607 14:05:04.270"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.272" starttime="20170607 14:05:04.265"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.272" starttime="20170607 14:05:02.882"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.272" starttime="20170607 14:05:02.882"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.272" starttime="20170607 14:05:02.882"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.272" starttime="20170607 14:05:02.880"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.272" starttime="20170607 14:05:02.880"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.272" starttime="20170607 14:05:02.352"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.272" starttime="20170607 14:05:00.588"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.272" starttime="20170607 14:05:00.572"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.272" starttime="20170607 14:05:00.570"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.272" starttime="20170607 14:05:00.570"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:04.274" starttime="20170607 14:05:04.274"></status>
</kw>
<msg timestamp="20170607 14:05:04.274" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:05:04.274" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170607 14:05:04.274" starttime="20170607 14:05:04.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:04.275" starttime="20170607 14:05:04.275"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 14:05:04.293" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 14:05:04.293" starttime="20170607 14:05:04.293"></status>
</kw>
<msg timestamp="20170607 14:05:04.293" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170607 14:05:04.293" starttime="20170607 14:05:04.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:04.295" starttime="20170607 14:05:04.294"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.295" starttime="20170607 14:05:04.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 14:05:04.296" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 14:05:04.296" starttime="20170607 14:05:04.296"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 14:05:04.297" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 14:05:04.297" starttime="20170607 14:05:04.297"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 14:05:04.297" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 14:05:04.297" starttime="20170607 14:05:04.297"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 14:05:04.299" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 14:05:04.299" starttime="20170607 14:05:04.298"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.300" starttime="20170607 14:05:04.295"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.300" starttime="20170607 14:05:04.295"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 14:05:04.301" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 14:05:04.301" starttime="20170607 14:05:04.300"></status>
</kw>
<msg timestamp="20170607 14:05:04.301" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170607 14:05:04.301" starttime="20170607 14:05:04.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:04.303" starttime="20170607 14:05:04.302"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:04.303" starttime="20170607 14:05:04.303"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.303" starttime="20170607 14:05:04.302"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:04.304" starttime="20170607 14:05:04.301"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 14:05:04.304" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 14:05:06.081" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 14:05:06.082" starttime="20170607 14:05:04.304"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:06.082" starttime="20170607 14:05:04.292"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170607 14:05:06.083" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170607 14:05:06.083" starttime="20170607 14:05:06.082"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170607 14:05:06.084" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170607 14:05:06.084" starttime="20170607 14:05:06.084"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 14:05:06.085" level="INFO">${logpath} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_elog.txt</msg>
<status status="PASS" endtime="20170607 14:05:06.085" starttime="20170607 14:05:06.085"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:05:06.117" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:05:06.118" starttime="20170607 14:05:06.117"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:05:06.118" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:05:06.119" starttime="20170607 14:05:06.118"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:05:06.119" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:05:06.119" starttime="20170607 14:05:06.119"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:05:06.120" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:05:06.120" starttime="20170607 14:05:06.119"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:05:06.299" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:05:06.299" starttime="20170607 14:05:06.121"></status>
</kw>
<msg timestamp="20170607 14:05:06.299" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:05:06.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:06.299" starttime="20170607 14:05:06.120"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:05:06.300" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:05:06.300" starttime="20170607 14:05:06.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:05:06.300" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:05:06.300" starttime="20170607 14:05:06.300"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:06.301" starttime="20170607 14:05:06.087"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:06.301" starttime="20170607 14:05:06.087"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:06.301" starttime="20170607 14:05:06.086"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:05:06.301" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170607 14:05:06.301" starttime="20170607 14:05:06.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:06.302" starttime="20170607 14:05:06.302"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:05:06.351" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170607 14:05:06.351" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:06.351" starttime="20170607 14:05:06.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:06.352" starttime="20170607 14:05:06.352"></status>
</kw>
<msg timestamp="20170607 14:05:06.353" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:06.353" starttime="20170607 14:05:06.085"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:05:06.354" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170607 14:05:06.354" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170607 14:05:06.354" starttime="20170607 14:05:06.354"></status>
</kw>
<msg timestamp="20170607 14:05:06.355" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170607 14:05:06.355" starttime="20170607 14:05:06.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170607 14:05:06.356" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170607 14:05:06.356" starttime="20170607 14:05:06.356"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:06.356" starttime="20170607 14:05:06.355"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:06.356" starttime="20170607 14:05:06.084"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 14:05:06.357" level="INFO">${logpath} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170607 14:05:06.357" starttime="20170607 14:05:06.357"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:05:06.360" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:05:06.361" starttime="20170607 14:05:06.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:05:06.361" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:05:06.361" starttime="20170607 14:05:06.361"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:05:06.362" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:05:06.362" starttime="20170607 14:05:06.361"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:05:06.363" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:05:06.363" starttime="20170607 14:05:06.362"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:05:06.541" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:05:06.541" starttime="20170607 14:05:06.364"></status>
</kw>
<msg timestamp="20170607 14:05:06.541" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:05:06.541" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:06.541" starttime="20170607 14:05:06.363"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:05:06.542" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:05:06.542" starttime="20170607 14:05:06.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:05:06.542" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:05:06.543" starttime="20170607 14:05:06.542"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:06.543" starttime="20170607 14:05:06.359"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:06.543" starttime="20170607 14:05:06.359"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:06.543" starttime="20170607 14:05:06.358"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:05:06.544" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170607 14:05:06.544" starttime="20170607 14:05:06.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:06.544" starttime="20170607 14:05:06.544"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:05:06.768" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170607 14:05:06.768" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:06.768" starttime="20170607 14:05:06.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:06.769" starttime="20170607 14:05:06.768"></status>
</kw>
<msg timestamp="20170607 14:05:06.769" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:06.769" starttime="20170607 14:05:06.357"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:05:06.770" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:05:06.770" starttime="20170607 14:05:06.770"></status>
</kw>
<msg timestamp="20170607 14:05:06.770" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170607 14:05:06.770" starttime="20170607 14:05:06.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:06.771" starttime="20170607 14:05:06.771"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170607 14:05:06.772" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:05:06.772" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170607 14:05:06.772" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170607 14:05:06.772" starttime="20170607 14:05:06.771"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:06.774" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_sensor_list.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:06.774" starttime="20170607 14:05:06.773"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:06.774" starttime="20170607 14:05:06.772"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:06.774" starttime="20170607 14:05:06.356"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 14:05:06.775" level="INFO">${logpath} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170607 14:05:06.775" starttime="20170607 14:05:06.774"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:05:06.777" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:05:06.778" starttime="20170607 14:05:06.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:05:06.778" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:05:06.778" starttime="20170607 14:05:06.778"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:05:06.779" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:05:06.779" starttime="20170607 14:05:06.779"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:05:06.780" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:05:06.780" starttime="20170607 14:05:06.779"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:05:06.975" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:05:06.975" starttime="20170607 14:05:06.780"></status>
</kw>
<msg timestamp="20170607 14:05:06.975" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:05:06.975" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:06.975" starttime="20170607 14:05:06.780"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:05:06.975" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:05:06.976" starttime="20170607 14:05:06.975"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:05:06.976" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:05:06.976" starttime="20170607 14:05:06.976"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:06.977" starttime="20170607 14:05:06.776"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:06.977" starttime="20170607 14:05:06.776"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:06.977" starttime="20170607 14:05:06.775"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:05:06.977" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170607 14:05:06.977" starttime="20170607 14:05:06.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:06.978" starttime="20170607 14:05:06.978"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:05:08.838" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170607 14:05:08.839" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:08.839" starttime="20170607 14:05:06.978"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:08.840" starttime="20170607 14:05:08.839"></status>
</kw>
<msg timestamp="20170607 14:05:08.840" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:08.840" starttime="20170607 14:05:06.775"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:05:08.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:05:08.841" starttime="20170607 14:05:08.841"></status>
</kw>
<msg timestamp="20170607 14:05:08.842" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170607 14:05:08.842" starttime="20170607 14:05:08.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:08.842" starttime="20170607 14:05:08.842"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170607 14:05:08.845" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "2", 
      "PartNumber": "0000000000000000", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775622", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775618", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1983", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ec", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 14:05:08.846" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170607 14:05:08.846" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
 ...</msg>
<status status="PASS" endtime="20170607 14:05:08.846" starttime="20170607 14:05:08.842"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:08.848" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_inventory.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:08.848" starttime="20170607 14:05:08.847"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:08.848" starttime="20170607 14:05:08.846"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:08.848" starttime="20170607 14:05:06.774"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 14:05:08.849" level="INFO">${logpath} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_led.txt</msg>
<status status="PASS" endtime="20170607 14:05:08.849" starttime="20170607 14:05:08.848"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:05:08.851" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:05:08.852" starttime="20170607 14:05:08.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:05:08.852" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:05:08.852" starttime="20170607 14:05:08.852"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:05:08.853" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:05:08.853" starttime="20170607 14:05:08.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:05:08.854" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:05:08.854" starttime="20170607 14:05:08.853"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:05:09.075" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:05:09.076" starttime="20170607 14:05:08.854"></status>
</kw>
<msg timestamp="20170607 14:05:09.076" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:05:09.076" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:09.076" starttime="20170607 14:05:08.854"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:05:09.076" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:05:09.076" starttime="20170607 14:05:09.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:05:09.077" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:05:09.077" starttime="20170607 14:05:09.077"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.077" starttime="20170607 14:05:08.851"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.077" starttime="20170607 14:05:08.850"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.078" starttime="20170607 14:05:08.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:05:09.078" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170607 14:05:09.078" starttime="20170607 14:05:09.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:09.079" starttime="20170607 14:05:09.078"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:05:09.120" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170607 14:05:09.121" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:09.121" starttime="20170607 14:05:09.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:09.121" starttime="20170607 14:05:09.121"></status>
</kw>
<msg timestamp="20170607 14:05:09.122" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:09.122" starttime="20170607 14:05:08.849"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:05:09.123" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170607 14:05:09.123" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170607 14:05:09.123" starttime="20170607 14:05:09.122"></status>
</kw>
<msg timestamp="20170607 14:05:09.123" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170607 14:05:09.123" starttime="20170607 14:05:09.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170607 14:05:09.124" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170607 14:05:09.124" starttime="20170607 14:05:09.124"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.124" starttime="20170607 14:05:09.123"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.124" starttime="20170607 14:05:08.848"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 14:05:09.125" level="INFO">${logpath} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170607 14:05:09.125" starttime="20170607 14:05:09.125"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 14:05:09.128" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 14:05:09.128" starttime="20170607 14:05:09.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 14:05:09.129" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 14:05:09.129" starttime="20170607 14:05:09.128"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 14:05:09.129" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 14:05:09.129" starttime="20170607 14:05:09.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 14:05:09.130" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 14:05:09.130" starttime="20170607 14:05:09.130"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 14:05:09.308" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 14:05:09.308" starttime="20170607 14:05:09.131"></status>
</kw>
<msg timestamp="20170607 14:05:09.308" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:05:09.308" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:09.308" starttime="20170607 14:05:09.130"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 14:05:09.309" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:05:09.309" starttime="20170607 14:05:09.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:05:09.310" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 14:05:09.310" starttime="20170607 14:05:09.309"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.310" starttime="20170607 14:05:09.127"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.310" starttime="20170607 14:05:09.126"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.310" starttime="20170607 14:05:09.126"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 14:05:09.311" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170607 14:05:09.311" starttime="20170607 14:05:09.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:09.311" starttime="20170607 14:05:09.311"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 14:05:09.355" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170607 14:05:09.356" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:09.356" starttime="20170607 14:05:09.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:09.356" starttime="20170607 14:05:09.356"></status>
</kw>
<msg timestamp="20170607 14:05:09.356" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 14:05:09.356" starttime="20170607 14:05:09.125"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 14:05:09.357" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170607 14:05:09.358" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170607 14:05:09.358" starttime="20170607 14:05:09.357"></status>
</kw>
<msg timestamp="20170607 14:05:09.358" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170607 14:05:09.358" starttime="20170607 14:05:09.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170607 14:05:09.359" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170607 14:05:09.359" starttime="20170607 14:05:09.359"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.359" starttime="20170607 14:05:09.358"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.359" starttime="20170607 14:05:09.124"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.359" starttime="20170607 14:05:06.084"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.359" starttime="20170607 14:05:06.083"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.359" starttime="20170607 14:05:06.083"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.359" starttime="20170607 14:05:06.083"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.359" starttime="20170607 14:05:04.291"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.360" starttime="20170607 14:05:04.275"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.360" starttime="20170607 14:05:04.273"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.360" starttime="20170607 14:05:04.272"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:09.362" starttime="20170607 14:05:09.362"></status>
</kw>
<msg timestamp="20170607 14:05:09.362" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:05:09.362" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170607 14:05:09.363" starttime="20170607 14:05:09.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:09.363" starttime="20170607 14:05:09.363"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 14:05:09.382" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 14:05:09.382" starttime="20170607 14:05:09.381"></status>
</kw>
<msg timestamp="20170607 14:05:09.382" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170607 14:05:09.382" starttime="20170607 14:05:09.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:09.383" starttime="20170607 14:05:09.383"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.383" starttime="20170607 14:05:09.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 14:05:09.385" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 14:05:09.385" starttime="20170607 14:05:09.384"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 14:05:09.385" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 14:05:09.385" starttime="20170607 14:05:09.385"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 14:05:09.386" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 14:05:09.386" starttime="20170607 14:05:09.385"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 14:05:09.387" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 14:05:09.387" starttime="20170607 14:05:09.386"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.387" starttime="20170607 14:05:09.384"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.387" starttime="20170607 14:05:09.383"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 14:05:09.388" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 14:05:09.388" starttime="20170607 14:05:09.388"></status>
</kw>
<msg timestamp="20170607 14:05:09.388" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170607 14:05:09.388" starttime="20170607 14:05:09.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:09.390" starttime="20170607 14:05:09.390"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:09.391" starttime="20170607 14:05:09.390"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.391" starttime="20170607 14:05:09.389"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:09.391" starttime="20170607 14:05:09.389"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 14:05:09.391" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 14:05:11.237" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 14:05:11.238" starttime="20170607 14:05:09.391"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.238" starttime="20170607 14:05:09.380"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170607 14:05:11.239" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170607 14:05:11.239" starttime="20170607 14:05:11.239"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170607 14:05:11.240" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170607 14:05:11.241" starttime="20170607 14:05:11.240"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 14:05:11.242" level="INFO">${logpath} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170607 14:05:11.242" starttime="20170607 14:05:11.241"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:11.244" starttime="20170607 14:05:11.243"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:05:11.245" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170607 14:05:11.535" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:05:11.535" level="INFO">${stdout} = Mem: 156208K used, 276668K free, 14648K shrd, 10712K buff, 50300K cached
CPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 0.64 0.80 0.79 1/138 1460
  PID  PPID USER  ...</msg>
<msg timestamp="20170607 14:05:11.535" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:05:11.535" starttime="20170607 14:05:11.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:11.542" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_proc_list.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:11.543" starttime="20170607 14:05:11.542"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.543" starttime="20170607 14:05:11.541"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.543" starttime="20170607 14:05:11.536"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.543" starttime="20170607 14:05:11.242"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.543" starttime="20170607 14:05:11.241"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 14:05:11.544" level="INFO">${logpath} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170607 14:05:11.544" starttime="20170607 14:05:11.543"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:11.545" starttime="20170607 14:05:11.545"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:05:11.546" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170607 14:05:11.663" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:05:11.663" level="INFO">${stdout} = NET: Registered protocol family 1
RPC: Registered named UNIX socket transport module.
RPC: Registered udp transport module.
RPC: Registered tcp transport module.
RPC: Registered tcp NFSv4.1 backchanne...</msg>
<msg timestamp="20170607 14:05:11.663" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:05:11.663" starttime="20170607 14:05:11.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:11.670" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_dmesg.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:11.670" starttime="20170607 14:05:11.669"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.670" starttime="20170607 14:05:11.669"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.670" starttime="20170607 14:05:11.664"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.670" starttime="20170607 14:05:11.544"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.670" starttime="20170607 14:05:11.543"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 14:05:11.671" level="INFO">${logpath} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170607 14:05:11.671" starttime="20170607 14:05:11.671"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:11.672" starttime="20170607 14:05:11.672"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:05:11.673" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170607 14:05:11.758" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:05:11.758" level="INFO">${stdout} = MemTotal:         432876 kB
MemFree:          276512 kB
MemAvailable:     319120 kB
Buffers:           10712 kB
Cached:            50304 kB
SwapCached:            0 kB
Active:           106032 kB
Inac...</msg>
<msg timestamp="20170607 14:05:11.758" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:05:11.758" starttime="20170607 14:05:11.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:11.764" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_meminfo.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:11.764" starttime="20170607 14:05:11.764"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.765" starttime="20170607 14:05:11.763"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.765" starttime="20170607 14:05:11.758"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.765" starttime="20170607 14:05:11.671"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.765" starttime="20170607 14:05:11.670"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 14:05:11.766" level="INFO">${logpath} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170607 14:05:11.766" starttime="20170607 14:05:11.765"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:11.767" starttime="20170607 14:05:11.767"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:05:11.767" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170607 14:05:11.862" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:05:11.862" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170607 14:05:11.862" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:05:11.862" starttime="20170607 14:05:11.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:11.869" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_procinfo.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:11.869" starttime="20170607 14:05:11.868"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.869" starttime="20170607 14:05:11.868"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.869" starttime="20170607 14:05:11.863"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.869" starttime="20170607 14:05:11.766"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:11.869" starttime="20170607 14:05:11.765"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 14:05:11.870" level="INFO">${logpath} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170607 14:05:11.870" starttime="20170607 14:05:11.870"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:11.872" starttime="20170607 14:05:11.871"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 14:05:11.872" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170607 14:05:14.686" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 14:05:14.687" level="INFO">${stdout} = -- Logs begin at Wed 2017-06-07 13:51:26 UTC, end at Wed 2017-06-07 14:05:18 UTC. --
Jun 07 13:51:26 witherspoon kernel: Booting Linux on physical CPU 0x0
Jun 07 13:51:26 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170607 14:05:14.688" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170607 14:05:14.688" starttime="20170607 14:05:11.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 14:05:14.696" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_journalctl.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/20170607140458361409_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:14.696" starttime="20170607 14:05:14.695"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.696" starttime="20170607 14:05:14.693"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.696" starttime="20170607 14:05:14.688"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.697" starttime="20170607 14:05:11.870"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.697" starttime="20170607 14:05:11.869"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.697" starttime="20170607 14:05:11.241"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.697" starttime="20170607 14:05:11.239"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.697" starttime="20170607 14:05:11.239"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.697" starttime="20170607 14:05:11.239"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.697" starttime="20170607 14:05:09.380"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.697" starttime="20170607 14:05:09.364"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.697" starttime="20170607 14:05:09.360"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.697" starttime="20170607 14:05:09.360"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:14.699" starttime="20170607 14:05:14.699"></status>
</kw>
<msg timestamp="20170607 14:05:14.699" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 14:05:14.699" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170607 14:05:14.699" starttime="20170607 14:05:14.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:14.700" starttime="20170607 14:05:14.700"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 14:05:14.718" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 14:05:14.718" starttime="20170607 14:05:14.718"></status>
</kw>
<msg timestamp="20170607 14:05:14.718" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170607 14:05:14.718" starttime="20170607 14:05:14.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:14.719" starttime="20170607 14:05:14.719"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.720" starttime="20170607 14:05:14.719"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 14:05:14.721" level="INFO">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 14:05:14.721" starttime="20170607 14:05:14.721"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 14:05:14.722" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 14:05:14.722" starttime="20170607 14:05:14.721"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 14:05:14.722" level="INFO">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 14:05:14.722" starttime="20170607 14:05:14.722"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 14:05:14.723" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 14:05:14.723" starttime="20170607 14:05:14.723"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.723" starttime="20170607 14:05:14.720"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.723" starttime="20170607 14:05:14.720"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 14:05:14.724" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 14:05:14.724" starttime="20170607 14:05:14.724"></status>
</kw>
<msg timestamp="20170607 14:05:14.725" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170607 14:05:14.725" starttime="20170607 14:05:14.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:14.726" starttime="20170607 14:05:14.726"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:14.728" starttime="20170607 14:05:14.727"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.728" starttime="20170607 14:05:14.726"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:14.728" starttime="20170607 14:05:14.725"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 14:05:14.728" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 14:05:16.374" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 14:05:16.374" starttime="20170607 14:05:14.728"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:16.374" starttime="20170607 14:05:14.717"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170607 14:05:16.375" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170607 14:05:16.431" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170607 14:05:16.432" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170607 14:05:16.432" starttime="20170607 14:05:16.375"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170607 14:05:16.432" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170607 14:05:16.432" starttime="20170607 14:05:16.432"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:16.439" starttime="20170607 14:05:16.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.240" starttime="20170607 14:05:16.440"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.240" starttime="20170607 14:05:16.440"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.240" starttime="20170607 14:05:16.439"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.240" starttime="20170607 14:05:16.432"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170607 14:05:17.241" starttime="20170607 14:05:17.240"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.241" starttime="20170607 14:05:14.716"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.241" starttime="20170607 14:05:14.700"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.241" starttime="20170607 14:05:14.698"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.241" starttime="20170607 14:05:14.697"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.241" starttime="20170607 14:05:00.256"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.241" starttime="20170607 14:05:00.253"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.241" starttime="20170607 14:05:00.253"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.241" starttime="20170607 14:05:00.253"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170607 14:05:17.327" starttime="20170607 14:05:17.241"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.327" starttime="20170607 14:05:00.252"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.328" starttime="20170607 14:04:55.308"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.328" starttime="20170607 14:04:55.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.328" starttime="20170607 14:05:17.328"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170607 14:05:17.329" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170607 14:05:17.329" starttime="20170607 14:05:17.329"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170607 14:05:17.330" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/19886/obmc-robot/logs/20170607140458361409_TestsTestBasicPoweron/20170607140458361409_PowerOnTest/</msg>
<status status="PASS" endtime="20170607 14:05:17.330" starttime="20170607 14:05:17.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.331" starttime="20170607 14:05:17.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.331" starttime="20170607 14:05:17.331"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170607 14:05:17.332" html="yes" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs"&gt;/tmp/fspcibld/19886/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170607 14:05:17.332" starttime="20170607 14:05:17.332"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170607 14:05:17.333" html="yes" level="INFO">File '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170607 14:05:17.333" starttime="20170607 14:05:17.333"></status>
</kw>
<msg timestamp="20170607 14:05:17.333" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170607 14:05:17.333" starttime="20170607 14:05:17.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.334" starttime="20170607 14:05:17.333"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.334" starttime="20170607 14:05:17.334"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 14:05:17.335" level="INFO">${cur_time} = 2017-06-07 14:05:17:335015</msg>
<status status="PASS" endtime="20170607 14:05:17.335" starttime="20170607 14:05:17.335"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 14:05:17.336" level="INFO">${cur_time} = 20170607140517335015</msg>
<status status="PASS" endtime="20170607 14:05:17.336" starttime="20170607 14:05:17.336"></status>
</kw>
<msg timestamp="20170607 14:05:17.336" level="INFO">${cur_time} = 20170607140517335015</msg>
<status status="PASS" endtime="20170607 14:05:17.336" starttime="20170607 14:05:17.334"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170607 14:05:17.337" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/19886/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/19886/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 14:05:17.337" starttime="20170607 14:05:17.337"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.338" starttime="20170607 14:05:17.328"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.338" starttime="20170607 14:04:54.836"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170607 14:05:17.339" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 14:05:17.339" starttime="20170607 14:05:17.339"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170607 14:05:17.340" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 14:05:17.340" starttime="20170607 14:05:17.340"></status>
</kw>
<msg timestamp="20170607 14:05:17.340" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 14:05:17.340" starttime="20170607 14:05:17.339"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 14:05:17.341" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170607 14:05:17.341" starttime="20170607 14:05:17.341"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.342" starttime="20170607 14:05:17.342"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170607 14:05:17.347" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170607 14:05:17.351" level="INFO">${rc} = 0</msg>
<msg timestamp="20170607 14:05:17.351" level="INFO">${output} = /tmp/fspcibld/19886/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170607 14:05:17.352" starttime="20170607 14:05:17.342"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.355" starttime="20170607 14:05:17.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.356" starttime="20170607 14:05:17.356"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 14:05:17.357" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170607 14:05:17.357" starttime="20170607 14:05:17.357"></status>
</kw>
<msg timestamp="20170607 14:05:17.358" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170607 14:05:17.358" starttime="20170607 14:05:17.341"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 14:05:17.359" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170607 14:05:17.359" starttime="20170607 14:05:17.358"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.360" starttime="20170607 14:05:17.359"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170607 14:05:17.370" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170607 14:05:17.388" level="INFO">${rc} = 0</msg>
<msg timestamp="20170607 14:05:17.388" level="INFO">${os_con_pid} = </msg>
<status status="PASS" endtime="20170607 14:05:17.389" starttime="20170607 14:05:17.360"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.402" starttime="20170607 14:05:17.401"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 14:05:17.403" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170607 14:05:17.403" starttime="20170607 14:05:17.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.404" starttime="20170607 14:05:17.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170607 14:05:17.407" level="INFO">${rc} = None</msg>
<msg timestamp="20170607 14:05:17.407" level="INFO">${output} = None</msg>
<status status="PASS" endtime="20170607 14:05:17.407" starttime="20170607 14:05:17.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.408" starttime="20170607 14:05:17.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.409" starttime="20170607 14:05:17.408"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170607 14:05:17.409" level="INFO">${output} = </msg>
<status status="PASS" endtime="20170607 14:05:17.409" starttime="20170607 14:05:17.409"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170607 14:05:17.410" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170607 14:05:17.410" starttime="20170607 14:05:17.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170607 14:05:17.442" starttime="20170607 14:05:17.412"></status>
</kw>
<msg timestamp="20170607 14:05:17.443" level="INFO">${rc} = 0</msg>
<msg timestamp="20170607 14:05:17.444" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
[   20.130342800,5] OPAL...</msg>
<status status="PASS" endtime="20170607 14:05:17.444" starttime="20170607 14:05:17.411"></status>
</kw>
<msg timestamp="20170607 14:05:17.446" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
[   20.130342800,5] OPAL...</msg>
<status status="PASS" endtime="20170607 14:05:17.446" starttime="20170607 14:05:17.338"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170607 14:05:17.448" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
[   20.130342800,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000201fff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x202000000000 with 0x40000000
[    0.000000] Process table c000201ffe800000 and radix root for kernel: c0000000013f0000
[    0.000000] Linux version 4.11.2-openpower1 (fspbld@gfwa125.aus.stglabs.ibm.com) (gcc version 4.9.4 (Buildroot 2017.02.2-00007-g23118ce) ) #4 SMP Thu Jun 1 14:07:26 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 31
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x4000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x477c7afd18500249
[    0.000000]   possible        = 0x7f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaec00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6700-0x1fffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x201fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x201fff776700-0x201fff77ffff]
[    0.000000] numa: Initmem setup node 250
[    0.000000] numa:   NODE_DATA [mem 0x201fff74ce00-0x201fff7566ff]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa: Initmem setup node 251
[    0.000000] numa:   NODE_DATA [mem 0x201fff743500-0x201fff74cdff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa: Initmem setup node 252
[    0.000000] numa:   NODE_DATA [mem 0x201fff739c00-0x201fff7434ff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa: Initmem setup node 253
[    0.000000] numa:   NODE_DATA [mem 0x201fff730300-0x201fff739bff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa: Initmem setup node 254
[    0.000000] numa:   NODE_DATA [mem 0x201fff726a00-0x201fff7302ff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa: Initmem setup node 255
[    0.000000] numa:   NODE_DATA [mem 0x201fff71d100-0x201fff7269ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201400000..0x000603020151ffff -&gt; 0x0006030201400000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201400000..0x000623020151ffff -&gt; 0x0006230201400000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000201fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000001ff8bb0000 s66328 r0 d64744 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 4190720
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 268025472K/268435456K available (6336K kernel code, 832K rwdata, 2040K rodata, 11136K init, 1656K bss, 409984K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=32, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU debugfs-based tracing is enabled.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=32.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=32
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] XICS: Using OPAL ICP fallbacks
[    0.000000] ICS OPAL backend registered
[    0.000005] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000240] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.000622] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001150] Console: colour dummy device 80x25
[    0.003693] console [tty0] enabled
[    0.003832] console [hvc0] enabled
[    0.003832] console [hvc0] enabled
[    0.004015] bootconsole [udbg0] disabled
[    0.004015] bootconsole [udbg0] disabled
[    0.004960] pid_max: default: 32768 minimum: 301
[    0.007712] Security Framework initialized
[    0.012907] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.222306] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.298912] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.299151] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.306525] EEH: PowerNV platform initialized
[    0.306648] POWER9 performance monitor hardware support registered
[    0.307653] smp: Bringing up secondary CPUs ...
[    0.326278] smp: Brought up 8 nodes, 32 CPUs
[    0.326412] numa: Node 0 CPUs: 0-23
[    0.326495] numa: Node 8 CPUs: 24-31
[    0.326570] numa: Node 250 CPUs:
[    0.326635] numa: Node 251 CPUs:
[    0.326707] numa: Node 252 CPUs:
[    0.326780] numa: Node 253 CPUs:
[    0.326843] numa: Node 254 CPUs:
[    0.326912] numa: Node 255 CPUs:
[    0.339825] devtmpfs: initialized
[    0.349480] evm: security.capability
[    0.350315] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.350541] futex hash table entries: 8192 (order: 4, 1048576 bytes)
[    0.351860] NET: Registered protocol family 16
[    0.352769] cpuidle: using governor menu
[    1.373794] PCI: Probing PCI hardware
[    1.373981] PCI host bridge to bus 0000:00
[    1.374109] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    1.374329] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003f7fffffff 64bit pref]
[    1.374517] pci_bus 0000:00: root bus resource [bus 00-ff]
[    1.375092] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    1.375377] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    1.375623] PCI host bridge to bus 0001:00
[    1.375703] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    1.375925] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007effffffff 64bit pref]
[    1.376107] pci_bus 0001:00: root bus resource [bus 00-ff]
[    1.377203] pci 0001:00:00.0: PCI bridge to [bus 01]
[    1.377476] PCI host bridge to bus 0002:00
[    1.377563] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    1.377783] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600beffffffff 64bit pref]
[    1.377975] pci_bus 0002:00: root bus resource [bus 00-ff]
[    1.379051] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    1.379793] pci 0002:01:00.0: PCI bridge to [bus 02]
[    1.380056] PCI host bridge to bus 0003:00
[    1.380146] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    1.380358] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023f7fffffff 64bit pref]
[    1.380525] pci_bus 0003:00: root bus resource [bus 00-ff]
[    1.381015] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    1.381317] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    1.381548] PCI host bridge to bus 0004:00
[    1.381641] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    1.381858] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027effffffff 64bit pref]
[    1.382003] random: fast init done
[    1.382119] pci_bus 0004:00: root bus resource [bus 00-ff]
[    1.385151] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    1.387651] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    1.388973] pci 0004:02:02.0: PCI bridge to [bus 03]
[    1.389261] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    1.389544] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    1.389817] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    1.390131] PCI host bridge to bus 0005:00
[    1.390215] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    1.390418] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602beffffffff 64bit pref]
[    1.390610] pci_bus 0005:00: root bus resource [bus 00-ff]
[    1.392374] pci 0005:00:00.0: PCI bridge to [bus 01]
[    1.392683] PCI host bridge to bus 0030:00
[    1.392770] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    1.392988] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203f7fffffff 64bit pref]
[    1.393171] pci_bus 0030:00: root bus resource [bus 00-ff]
[    1.393704] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    1.394018] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    1.394224] PCI host bridge to bus 0033:00
[    1.394314] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    1.394529] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223f7fffffff 64bit pref]
[    1.394689] pci_bus 0033:00: root bus resource [bus 00-ff]
[    1.395225] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    1.395534] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    1.395780] PCI host bridge to bus 0034:00
[    1.395865] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    1.396083] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227effffffff 64bit pref]
[    1.396263] pci_bus 0034:00: root bus resource [bus 00-ff]
[    1.396790] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    1.397097] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    1.397334] PCI host bridge to bus 0035:00
[    1.397423] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    1.397638] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622beffffffff 64bit pref]
[    1.397825] pci_bus 0035:00: root bus resource [bus 00-ff]
[    1.399109] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    1.400601] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    1.401175] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    1.401464] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    1.401762] PCI host bridge to bus 0006:00
[    1.401850] pci_bus 0006:00: root bus resource [mem 0x6030201400000-0x603020151ffff]
[    1.402009] pci_bus 0006:00: root bus resource [bus 00-ff]
[   22.307945552,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    1.403988] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   22.308098432,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    1.404275] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   22.308240912,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    1.404544] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[    1.404779] PCI host bridge to bus 0007:00
[    1.404864] pci_bus 0007:00: root bus resource [mem 0x6230201400000-0x623020151ffff]
[    1.405029] pci_bus 0007:00: root bus resource [bus 00-ff]
[   22.309505552,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    1.407039] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   22.309654272,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    1.407310] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   22.309795696,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    1.407587] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[    1.407815] pci 0000:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    1.408035] pci 0000:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    1.408249] pci 0000:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.408847] pci 0000:00:00.0: PCI bridge to [bus 01]
[    1.409040] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c080ffffff]
[    1.409214] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    1.409411] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    1.409608] pci 0001:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    1.410200] pci 0001:01     : [PE# 7d] Secondary bus 1 associated with PE#7d
[    1.410792] pci 0001:01     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    1.422936] IOMMU table initialized, virtual merging enabled
[    1.423037] pci 0001:01     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    1.423216] pci 0001:01     : [PE# 7d] Enabling 64-bit DMA bypass
[    1.423349] pci 0001:00:00.0: PCI bridge to [bus 01]
[    1.423461] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    1.423724] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    1.423893] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    1.424061] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    1.424190] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    1.424327] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    1.424495] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    1.424664] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    1.424790] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    1.424922] pci 0002:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    1.425517] pci 0002:02     : [PE# 7d] Secondary bus 2..2 associated with PE#7d
[    1.426106] pci 0002:02     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    1.438211] pci 0002:02     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    1.438348] pci 0002:02     : [PE# 7d] Enabling 64-bit DMA bypass
[    1.438498] pci 0002:01:00.0: PCI bridge to [bus 02]
[    1.438613] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    1.438800] pci 0002:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
[    1.439383] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    1.439482] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    1.439676] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    1.439928] pci 0003:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    1.440133] pci 0003:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    1.440349] pci 0003:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.440931] pci 0003:00:00.0: PCI bridge to [bus 01]
[    1.441240] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    1.441409] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c201ffffff]
[    1.441592] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    1.441779] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    1.441943] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c201000000-0x600c20103ffff]
[    1.442114] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c201040000-0x600c201041fff]
[    1.442281] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c201042000-0x600c201043fff]
[    1.442455] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c201044000-0x600c201045fff]
[    1.442629] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c201046000-0x600c201047fff]
[    1.442805] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    1.442936] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    1.443074] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    1.443205] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    1.443340] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    1.443529] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    1.443691] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    1.443823] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    1.443957] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    1.444089] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    1.444227] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    1.444392] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    1.444563] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    1.444692] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    1.444829] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    1.444960] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    1.445094] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    1.445226] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    1.445359] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    1.445486] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    1.445618] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    1.445747] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    1.445889] pci 0004:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    1.446483] pci 0004:03     : [PE# 7d] Secondary bus 3 associated with PE#7d
[    1.447075] pci 0004:03     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    1.459209] pci 0004:03     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    1.459349] pci 0004:03     : [PE# 7d] Enabling 64-bit DMA bypass
[    1.459491] pci 0004:02:02.0: PCI bridge to [bus 03]
[    1.459610] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c200ffffff]
[    1.459783] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    1.459985] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    1.460118] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    1.460256] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    1.460392] pci 0004:02     : [PE# 7c] Secondary bus 2 associated with PE#7c
[    1.460980] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    1.461097] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    1.461264] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027efff0ffff 64bit pref]
[    1.461462] pci 0004:01     : [PE# 7b] Secondary bus 1 associated with PE#7b
[    1.462053] pci 0004:01     : [PE# 7b] Setting up 32-bit TCE table at 0..80000000
[    1.474178] pci 0004:01     : [PE# 7b] Setting up window#0 0..7fffffff pg=1000
[    1.474313] pci 0004:01     : [PE# 7b] Enabling 64-bit DMA bypass
[    1.474457] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    1.474590] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    1.474757] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027efff0ffff 64bit pref]
[    1.474950] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    1.475237] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602807fffffff 64bit pref]
[    1.475429] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    1.475613] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    1.475844] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    1.476047] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    1.476262] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    1.476467] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    1.476682] pci 0005:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    1.477285] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    1.477845] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    1.489970] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    1.490103] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    1.490246] pci 0005:00:00.0: PCI bridge to [bus 01]
[    1.490377] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602beffffffff 64bit pref]
[    1.490629] pci 0030:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    1.490840] pci 0030:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    1.491047] pci 0030:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.491638] pci 0030:00:00.0: PCI bridge to [bus 01]
[    1.491806] pci 0033:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    1.492023] pci 0033:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    1.492236] pci 0033:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    1.492833] pci 0033:00:00.0: PCI bridge to [bus 01]
[    1.493005] pci 0034:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    1.493227] pci 0034:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    1.493437] pci 0034:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    1.494027] pci 0034:00:00.0: PCI bridge to [bus 01]
[    1.494274] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c280ffffff]
[    1.494423] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    1.494607] pci 0035:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    1.495193] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    1.495312] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    1.495452] pci 0035:02     : [PE# 7d] Secondary bus 2 associated with PE#7d
[    1.496038] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    1.496169] pci 0035:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
[    1.496758] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    1.496854] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    1.497088] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201400000-0x603020141ffff 64bit]
[    1.497307] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201420000-0x603020143ffff 64bit]
[    1.497535] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201440000-0x603020145ffff 64bit]
[    1.497758] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201460000-0x603020147ffff 64bit]
[    1.497984] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201480000-0x603020149ffff 64bit]
[    1.498199] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302014a0000-0x60302014bffff 64bit]
[    1.498413] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302014c0000-0x60302014cffff 64bit]
[    1.498629] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302014d0000-0x60302014dffff 64bit]
[    1.498842] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302014e0000-0x60302014effff 64bit]
[    1.499071] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302014f0000-0x60302014fffff 64bit]
[    1.499296] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201500000-0x603020150ffff 64bit]
[    1.499509] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201510000-0x603020151ffff 64bit]
[    1.499757] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201400000-0x623020141ffff 64bit]
[    1.499990] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201420000-0x623020143ffff 64bit]
[    1.500221] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201440000-0x623020145ffff 64bit]
[    1.500433] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201460000-0x623020147ffff 64bit]
[    1.500650] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201480000-0x623020149ffff 64bit]
[    1.500876] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302014a0000-0x62302014bffff 64bit]
[    1.501096] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302014c0000-0x62302014cffff 64bit]
[    1.501328] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302014d0000-0x62302014dffff 64bit]
[    1.501566] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302014e0000-0x62302014effff 64bit]
[    1.501799] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302014f0000-0x62302014fffff 64bit]
[    1.502019] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201500000-0x623020150ffff 64bit]
[    1.502238] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201510000-0x623020151ffff 64bit]
[    1.502477] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    1.502607] pci 0006:00:00.1: Associating to existing PE d
[    1.502729] pci 0006:00:01.0: Associating to existing PE d
[    1.502856] pci 0006:00:01.1: Associating to existing PE d
[    1.502972] pci 0006:00:02.0: Associating to existing PE d
[    1.503091] pci 0006:00:02.1: Associating to existing PE d
[    1.503214] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    1.503347] pci 0007:00:00.1: Associating to existing PE d
[    1.503462] pci 0007:00:01.0: Associating to existing PE d
[    1.503583] pci 0007:00:01.1: Associating to existing PE d
[    1.503698] pci 0007:00:02.0: Associating to existing PE d
[    1.503817] pci 0007:00:02.1: Associating to existing PE d
[    1.510225] EEH: PCI Enhanced I/O Error Handling Enabled
[    1.523416] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    1.523595] pci 0002:02:00.0: vgaarb: bridge control possible
[    1.523739] vgaarb: loaded
[    1.524376] SCSI subsystem initialized
[    1.524648] usbcore: registered new interface driver usbfs
[    1.524783] usbcore: registered new interface driver hub
[    1.525387] usbcore: registered new device driver usb
[    1.525540] pps_core: LinuxPPS API ver. 1 registered
[    1.525644] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    1.525829] PTP clock support registered
[    1.526693] clocksource: Switched to clocksource timebase
[    1.532793] NET: Registered protocol family 2
[    1.533298] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    1.536875] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    1.537577] TCP: Hash tables configured (established 524288 bind 65536)
[    1.537851] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    1.539162] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    1.540944] NET: Registered protocol family 1
[    1.541086] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[   22.379949552,5] IPMI: Soft shutdown requested
[    1.544621] opal-power: Poweroff requested
[    1.544903] reboot: Failed to start orderly shutdown: forcing the issue
[    1.552995] reboot: Power down
[   22.398191104,5] OPAL: Shutdown request type 0x0...
[   22.546649] INFO: rcu_sched detected stalls on CPUs/tasks:
[   22.546745] 	0-...: (2 ticks this GP) idle=ef5/140000000000000/0 softirq=11/12 fqs=956 
[   22.546907] 	(detected by 2, t=2102 jiffies, g=-295, c=-296, q=3576)
[   22.547017] Task dump for CPU 0:
[   22.547086] kworker/4:0     R  running task        0     3      2 0x00000804
[   22.547229] Workqueue: events poweroff_work_func
[   22.547314] Call Trace:
[   22.547366] [c000001fea683800] [0000000000000000]           (null)
[   29.286659] INFO: rcu_sched detected expedited stalls on CPUs/tasks: { 0-... } 2149 jiffies s: 5 root: 0x1/.
[   29.286828] blocking rcu_node structures:
[   29.286924] Task dump for CPU 0:
[   29.287011] kworker/4:0     R  running task        0     3      2 0x00000804
[   29.287161] Workqueue: events poweroff_work_func
[   29.287286] Call Trace:
[   29.287350] [c000001fea683800] [0000000000000000]           (null)
[   85.596647] INFO: rcu_sched detected stalls on CPUs/tasks:
[   85.596740] 	0-...: (2 ticks this GP) idle=ef5/140000000000000/0 softirq=11/12 fqs=3845 
[   85.596880] 	(detected by 3, t=8407 jiffies, g=-295, c=-296, q=3576)
[   85.597005] Task dump for CPU 0:
[   85.597085] kworker/4:0     R  running task        0     3      2 0x00000804
[   85.597250] Workqueue: events poweroff_work_func
[   85.597327] Call Trace:
[   85.597384] [c000001fea683800] [0000000000000000]           (null)
[   95.196660] INFO: rcu_sched detected expedited stalls on CPUs/tasks: { 0-... } 8740 jiffies s: 5 root: 0x1/.
[   95.196919] blocking rcu_node structures:
[   95.197016] Task dump for CPU 0:
[   95.197102] kworker/4:0     R  running task        0     3      2 0x00000804
[   95.197270] Workqueue: events poweroff_work_func
[   95.197384] Call Trace:
[   95.197451] [c000001fea683800] [0000000000000000]           (null)
[  148.646648] INFO: rcu_sched detected stalls on CPUs/tasks:
[  148.646748] 	0-...: (2 ticks this GP) idle=ef5/140000000000000/0 softirq=11/12 fqs=6760 
[  148.646897] 	(detected by 1, t=14712 jiffies, g=-295, c=-296, q=3576)
[  148.647038] Task dump for CPU 0:
[  148.647115] kworker/4:0     R  running task        0     3      2 0x00000804
[  148.647268] Workqueue: events poweroff_work_func
[  148.647367] Call Trace:
[  148.647433] [c000001fea683800] [0000000000000000]           (null)
[  161.766659] INFO: rcu_sched detected expedited stalls on CPUs/tasks: { 0-... } 15397 jiffies s: 5 root: 0x1/.
[  161.766877] blocking rcu_node structures:
[  161.766960] Task dump for CPU 0:
[  161.767039] kworker/4:0     R  running task        0     3      2 0x00000804
[  161.767199] Workqueue: events poweroff_work_func
[  161.767308] Call Trace:
[  161.767374] [c000001fea683800] [0000000000000000]           (null)
</msg>
<status status="PASS" endtime="20170607 14:05:17.450" starttime="20170607 14:05:17.447"></status>
</kw>
<status status="PASS" endtime="20170607 14:05:17.450" starttime="20170607 14:04:54.835"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" endtime="20170607 14:05:17.450" critical="yes" starttime="20170607 14:01:44.987">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" endtime="20170607 14:05:17.451" starttime="20170607 14:01:44.950"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" endtime="20170607 14:05:17.455" starttime="20170607 14:01:36.965"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Tests" pass="1">Tests</stat>
<stat fail="0" id="s1-s1" name="Security" pass="1">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
