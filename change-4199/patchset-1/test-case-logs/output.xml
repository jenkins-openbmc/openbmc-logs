<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170517 20:10:10.309">
<suite name="Tests" source="/tmp/fspcibld/16253/obmc-robot/tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:10:11.404">Dictionary does not contain key 'host'.</msg>
<status endtime="20170517 20:10:11.404" status="FAIL" starttime="20170517 20:10:11.404"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:11.404">${has_host} = False</msg>
<status endtime="20170517 20:10:11.404" status="PASS" starttime="20170517 20:10:11.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170517 20:10:11.405" status="PASS" starttime="20170517 20:10:11.405"></status>
</kw>
<status endtime="20170517 20:10:11.405" status="PASS" starttime="20170517 20:10:11.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:11.406">${port_num} = 22</msg>
<status endtime="20170517 20:10:11.407" status="PASS" starttime="20170517 20:10:11.406"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:11.407">${SSH_PORT} = 22</msg>
<status endtime="20170517 20:10:11.407" status="PASS" starttime="20170517 20:10:11.407"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:11.407">${https_num} = 443</msg>
<status endtime="20170517 20:10:11.408" status="PASS" starttime="20170517 20:10:11.407"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:11.408">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170517 20:10:11.408" status="PASS" starttime="20170517 20:10:11.408"></status>
</kw>
<status endtime="20170517 20:10:11.408" status="PASS" starttime="20170517 20:10:11.406"></status>
</kw>
<status endtime="20170517 20:10:11.408" status="PASS" starttime="20170517 20:10:11.405"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:10:11.409">Dictionary does not contain key 'port'.</msg>
<status endtime="20170517 20:10:11.409" status="FAIL" starttime="20170517 20:10:11.409"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:11.409">${has_port} = False</msg>
<status endtime="20170517 20:10:11.409" status="PASS" starttime="20170517 20:10:11.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170517 20:10:11.411" status="PASS" starttime="20170517 20:10:11.411"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170517 20:10:11.412" status="PASS" starttime="20170517 20:10:11.411"></status>
</kw>
<status endtime="20170517 20:10:11.412" status="PASS" starttime="20170517 20:10:11.410"></status>
</kw>
<status endtime="20170517 20:10:11.412" status="PASS" starttime="20170517 20:10:11.410"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:11.412">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170517 20:10:13.339">Read output: root@witherspoon:~#</msg>
<status endtime="20170517 20:10:13.340" status="PASS" starttime="20170517 20:10:11.412"></status>
</kw>
<status endtime="20170517 20:10:13.340" status="PASS" starttime="20170517 20:10:11.402"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:13.341">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170517 20:10:13.409">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:10:13.410">${output} = VERSION_ID="v1.99.5-40-gae7bde8"</msg>
<msg level="INFO" timestamp="20170517 20:10:13.410">${stderr} = </msg>
<status endtime="20170517 20:10:13.410" status="PASS" starttime="20170517 20:10:13.341"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:13.411">Length is 0</msg>
<status endtime="20170517 20:10:13.411" status="PASS" starttime="20170517 20:10:13.410"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:13.411">VERSION_ID="v1.99.5-40-gae7bde8"</msg>
<status endtime="20170517 20:10:13.411" status="PASS" starttime="20170517 20:10:13.411"></status>
</kw>
<status endtime="20170517 20:10:13.411" status="PASS" starttime="20170517 20:10:13.341"></status>
</kw>
<status endtime="20170517 20:10:13.411" status="PASS" starttime="20170517 20:10:13.340"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:13.413">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170517 20:10:13.581">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:10:13.581">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg level="INFO" timestamp="20170517 20:10:13.581">${stderr} = </msg>
<status endtime="20170517 20:10:13.581" status="PASS" starttime="20170517 20:10:13.412"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:13.582">Length is 0</msg>
<status endtime="20170517 20:10:13.582" status="PASS" starttime="20170517 20:10:13.581"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:13.582">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status endtime="20170517 20:10:13.582" status="PASS" starttime="20170517 20:10:13.412"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:13.583">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status endtime="20170517 20:10:13.584" status="PASS" starttime="20170517 20:10:13.582"></status>
</kw>
<status endtime="20170517 20:10:13.584" status="PASS" starttime="20170517 20:10:13.412"></status>
</kw>
<status endtime="20170517 20:10:13.584" status="PASS" starttime="20170517 20:10:13.412"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:10:13.586">Dictionary does not contain key 'host'.</msg>
<status endtime="20170517 20:10:13.586" status="FAIL" starttime="20170517 20:10:13.586"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:13.587">${has_host} = False</msg>
<status endtime="20170517 20:10:13.587" status="PASS" starttime="20170517 20:10:13.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170517 20:10:13.588" status="PASS" starttime="20170517 20:10:13.587"></status>
</kw>
<status endtime="20170517 20:10:13.588" status="PASS" starttime="20170517 20:10:13.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:13.589">${port_num} = 22</msg>
<status endtime="20170517 20:10:13.589" status="PASS" starttime="20170517 20:10:13.589"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:13.590">${SSH_PORT} = 22</msg>
<status endtime="20170517 20:10:13.590" status="PASS" starttime="20170517 20:10:13.589"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:13.590">${https_num} = 443</msg>
<status endtime="20170517 20:10:13.590" status="PASS" starttime="20170517 20:10:13.590"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:13.591">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170517 20:10:13.591" status="PASS" starttime="20170517 20:10:13.590"></status>
</kw>
<status endtime="20170517 20:10:13.591" status="PASS" starttime="20170517 20:10:13.588"></status>
</kw>
<status endtime="20170517 20:10:13.591" status="PASS" starttime="20170517 20:10:13.588"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:10:13.592">Dictionary does not contain key 'port'.</msg>
<status endtime="20170517 20:10:13.592" status="FAIL" starttime="20170517 20:10:13.592"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:13.592">${has_port} = False</msg>
<status endtime="20170517 20:10:13.592" status="PASS" starttime="20170517 20:10:13.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170517 20:10:13.594" status="PASS" starttime="20170517 20:10:13.593"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170517 20:10:13.594" status="PASS" starttime="20170517 20:10:13.594"></status>
</kw>
<status endtime="20170517 20:10:13.595" status="PASS" starttime="20170517 20:10:13.593"></status>
</kw>
<status endtime="20170517 20:10:13.595" status="PASS" starttime="20170517 20:10:13.592"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:13.595">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170517 20:10:15.805">Read output: root@witherspoon:~#</msg>
<status endtime="20170517 20:10:15.805" status="PASS" starttime="20170517 20:10:13.595"></status>
</kw>
<status endtime="20170517 20:10:15.805" status="PASS" starttime="20170517 20:10:13.585"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:15.806">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170517 20:10:15.913">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:10:15.913">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170517 20:10:15.913">${stderr} = </msg>
<status endtime="20170517 20:10:15.913" status="PASS" starttime="20170517 20:10:15.806"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:15.914">Length is 0</msg>
<status endtime="20170517 20:10:15.914" status="PASS" starttime="20170517 20:10:15.913"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:15.914">Length is 11</msg>
<status endtime="20170517 20:10:15.914" status="PASS" starttime="20170517 20:10:15.914"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:15.914">${bmc_model} = Witherspoon</msg>
<status endtime="20170517 20:10:15.914" status="PASS" starttime="20170517 20:10:13.585"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:15.915">BMC Model=Witherspoon</msg>
<status endtime="20170517 20:10:15.915" status="PASS" starttime="20170517 20:10:15.915"></status>
</kw>
<status endtime="20170517 20:10:15.915" status="PASS" starttime="20170517 20:10:13.584"></status>
</kw>
<status endtime="20170517 20:10:15.915" status="PASS" starttime="20170517 20:10:13.584"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:10:15.917">Dictionary does not contain key 'host'.</msg>
<status endtime="20170517 20:10:15.917" status="FAIL" starttime="20170517 20:10:15.917"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:15.917">${has_host} = False</msg>
<status endtime="20170517 20:10:15.917" status="PASS" starttime="20170517 20:10:15.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170517 20:10:15.918" status="PASS" starttime="20170517 20:10:15.918"></status>
</kw>
<status endtime="20170517 20:10:15.918" status="PASS" starttime="20170517 20:10:15.917"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:15.920">${port_num} = 22</msg>
<status endtime="20170517 20:10:15.920" status="PASS" starttime="20170517 20:10:15.919"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:15.920">${SSH_PORT} = 22</msg>
<status endtime="20170517 20:10:15.920" status="PASS" starttime="20170517 20:10:15.920"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:15.921">${https_num} = 443</msg>
<status endtime="20170517 20:10:15.921" status="PASS" starttime="20170517 20:10:15.921"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:15.922">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170517 20:10:15.922" status="PASS" starttime="20170517 20:10:15.921"></status>
</kw>
<status endtime="20170517 20:10:15.922" status="PASS" starttime="20170517 20:10:15.919"></status>
</kw>
<status endtime="20170517 20:10:15.922" status="PASS" starttime="20170517 20:10:15.919"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:10:15.923">Dictionary does not contain key 'port'.</msg>
<status endtime="20170517 20:10:15.923" status="FAIL" starttime="20170517 20:10:15.922"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:15.923">${has_port} = False</msg>
<status endtime="20170517 20:10:15.923" status="PASS" starttime="20170517 20:10:15.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170517 20:10:15.924" status="PASS" starttime="20170517 20:10:15.924"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170517 20:10:15.925" status="PASS" starttime="20170517 20:10:15.925"></status>
</kw>
<status endtime="20170517 20:10:15.925" status="PASS" starttime="20170517 20:10:15.924"></status>
</kw>
<status endtime="20170517 20:10:15.925" status="PASS" starttime="20170517 20:10:15.923"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:15.926">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170517 20:10:17.571">Read output: root@witherspoon:~#</msg>
<status endtime="20170517 20:10:17.572" status="PASS" starttime="20170517 20:10:15.925"></status>
</kw>
<status endtime="20170517 20:10:17.572" status="PASS" starttime="20170517 20:10:15.916"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:17.573">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170517 20:10:17.650">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:10:17.650">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170517 20:10:17.650">${stderr} = </msg>
<status endtime="20170517 20:10:17.650" status="PASS" starttime="20170517 20:10:17.573"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:17.651">Length is 0</msg>
<status endtime="20170517 20:10:17.651" status="PASS" starttime="20170517 20:10:17.650"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:17.651">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170517 20:10:17.651" status="PASS" starttime="20170517 20:10:17.572"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170517 20:10:17.651" status="PASS" starttime="20170517 20:10:17.651"></status>
</kw>
<status endtime="20170517 20:10:17.652" status="PASS" starttime="20170517 20:10:15.916"></status>
</kw>
<status endtime="20170517 20:10:17.652" status="PASS" starttime="20170517 20:10:15.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170517 20:10:17.652" status="PASS" starttime="20170517 20:10:17.652"></status>
</kw>
<status endtime="20170517 20:10:17.652" status="PASS" starttime="20170517 20:10:11.402"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/16253/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/16253/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:20.248">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:10:20.249" status="PASS" starttime="20170517 20:10:20.246"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.249">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:10:20.249" status="PASS" starttime="20170517 20:10:20.249"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.250">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:10:20.250" status="PASS" starttime="20170517 20:10:20.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.251">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:10:20.251" status="PASS" starttime="20170517 20:10:20.250"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:20.488">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:10:20.488" status="PASS" starttime="20170517 20:10:20.251"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:20.488">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:10:20.488">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:20.488" status="PASS" starttime="20170517 20:10:20.251"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:20.489">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:20.489" status="PASS" starttime="20170517 20:10:20.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:20.490">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:20.491" status="PASS" starttime="20170517 20:10:20.490"></status>
</kw>
<status endtime="20170517 20:10:20.491" status="PASS" starttime="20170517 20:10:20.246"></status>
</kw>
<status endtime="20170517 20:10:20.491" status="PASS" starttime="20170517 20:10:20.245"></status>
</kw>
<status endtime="20170517 20:10:20.491" status="PASS" starttime="20170517 20:10:20.245"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:20.497">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:10:20.498" status="PASS" starttime="20170517 20:10:20.497"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.499">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:10:20.499" status="PASS" starttime="20170517 20:10:20.498"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.500">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:10:20.500" status="PASS" starttime="20170517 20:10:20.499"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.501">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:10:20.501" status="PASS" starttime="20170517 20:10:20.500"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:20.703">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:10:20.703" status="PASS" starttime="20170517 20:10:20.502"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:20.703">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:10:20.703">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:20.704" status="PASS" starttime="20170517 20:10:20.501"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:20.705">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:20.705" status="PASS" starttime="20170517 20:10:20.704"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:20.706">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:20.706" status="PASS" starttime="20170517 20:10:20.706"></status>
</kw>
<status endtime="20170517 20:10:20.707" status="PASS" starttime="20170517 20:10:20.496"></status>
</kw>
<status endtime="20170517 20:10:20.707" status="PASS" starttime="20170517 20:10:20.496"></status>
</kw>
<status endtime="20170517 20:10:20.707" status="PASS" starttime="20170517 20:10:20.495"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.708">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170517 20:10:20.708" status="PASS" starttime="20170517 20:10:20.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.713">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:10:20.713" status="PASS" starttime="20170517 20:10:20.711"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:20.715">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:10:20.715" status="PASS" starttime="20170517 20:10:20.714"></status>
</kw>
<status endtime="20170517 20:10:20.715" status="PASS" starttime="20170517 20:10:20.713"></status>
</kw>
<status endtime="20170517 20:10:20.716" status="PASS" starttime="20170517 20:10:20.710"></status>
</kw>
<status endtime="20170517 20:10:20.716" status="PASS" starttime="20170517 20:10:20.709"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.786">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:10:20.786">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:20.786" status="PASS" starttime="20170517 20:10:20.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.789">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:20.789" status="PASS" starttime="20170517 20:10:20.788"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:20.791">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:20.791" status="PASS" starttime="20170517 20:10:20.790"></status>
</kw>
<status endtime="20170517 20:10:20.791" status="PASS" starttime="20170517 20:10:20.789"></status>
</kw>
<status endtime="20170517 20:10:20.791" status="PASS" starttime="20170517 20:10:20.787"></status>
</kw>
<status endtime="20170517 20:10:20.791" status="PASS" starttime="20170517 20:10:20.787"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:20.791">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:20.791" status="PASS" starttime="20170517 20:10:20.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:20.792">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:20.792" status="PASS" starttime="20170517 20:10:20.792"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.793">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:10:20.793">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:10:20.794">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:10:20.794" status="PASS" starttime="20170517 20:10:20.793"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:20.794">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170517 20:10:20.794" status="PASS" starttime="20170517 20:10:20.493"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:20.794">${host_state} = Running</msg>
<status endtime="20170517 20:10:20.795" status="PASS" starttime="20170517 20:10:20.492"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:10:20.796">Running != Quiesced</msg>
<status endtime="20170517 20:10:20.796" status="FAIL" starttime="20170517 20:10:20.795"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:20.796">${status} = False</msg>
<status endtime="20170517 20:10:20.796" status="PASS" starttime="20170517 20:10:20.795"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:20.797">${status} = False</msg>
<status endtime="20170517 20:10:20.797" status="PASS" starttime="20170517 20:10:20.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170517 20:10:20.797" status="PASS" starttime="20170517 20:10:20.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170517 20:10:20.798" status="PASS" starttime="20170517 20:10:20.798"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.810">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170517 20:10:20.810" status="PASS" starttime="20170517 20:10:20.799"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.825">${FFDC_DIR_PATH} = </msg>
<status endtime="20170517 20:10:20.825" status="PASS" starttime="20170517 20:10:20.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.842">${cur_time} = 2017-05-17 20:10:20:841407</msg>
<status endtime="20170517 20:10:20.842" status="PASS" starttime="20170517 20:10:20.841"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.843">${cur_time} = 20170517201020841407</msg>
<status endtime="20170517 20:10:20.843" status="PASS" starttime="20170517 20:10:20.842"></status>
</kw>
<status endtime="20170517 20:10:20.843" status="PASS" starttime="20170517 20:10:20.840"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:20.848">${FFDC_TIME} = 20170517201020841407</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.850">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170517 20:10:20.850" status="PASS" starttime="20170517 20:10:20.849"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.851">${suite_name} = 20170517201020841407_TestsSecurityTestSsl</msg>
<status endtime="20170517 20:10:20.851" status="PASS" starttime="20170517 20:10:20.850"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.852">${test_name} = TestSSLConnection</msg>
<status endtime="20170517 20:10:20.852" status="PASS" starttime="20170517 20:10:20.851"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.852">${test_name} = 20170517201020841407_TestSSLConnection</msg>
<status endtime="20170517 20:10:20.852" status="PASS" starttime="20170517 20:10:20.852"></status>
</kw>
<status endtime="20170517 20:10:20.853" status="PASS" starttime="20170517 20:10:20.849"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:20.853">${FFDC_DIR_PATH} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201020841407_TestsSecurityTestSsl/20170517201020841407_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170517 20:10:20.860">${FFDC_PREFIX} = 20170517201020841407_</msg>
<status endtime="20170517 20:10:20.860" status="PASS" starttime="20170517 20:10:20.826"></status>
</kw>
<status endtime="20170517 20:10:20.860" status="PASS" starttime="20170517 20:10:20.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170517 20:10:20.862" status="PASS" starttime="20170517 20:10:20.861"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:10:20.863">Created directory '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs"&gt;/tmp/fspcibld/16253/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170517 20:10:20.863" status="PASS" starttime="20170517 20:10:20.862"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:10:20.865">File '/tmp/fspcibld/16253/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170517 20:10:20.865" status="FAIL" starttime="20170517 20:10:20.864"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:20.865">${exist} = False</msg>
<status endtime="20170517 20:10:20.865" status="PASS" starttime="20170517 20:10:20.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:10:20.867">Created file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:10:20.867" status="PASS" starttime="20170517 20:10:20.866"></status>
</kw>
<status endtime="20170517 20:10:20.867" status="PASS" starttime="20170517 20:10:20.866"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170517 20:10:20.868" status="PASS" starttime="20170517 20:10:20.867"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.869">${cur_time} = 2017-05-17 20:10:20:869227</msg>
<status endtime="20170517 20:10:20.870" status="PASS" starttime="20170517 20:10:20.869"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.870">${cur_time} = 20170517201020869227</msg>
<status endtime="20170517 20:10:20.870" status="PASS" starttime="20170517 20:10:20.870"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:20.871">${cur_time} = 20170517201020869227</msg>
<status endtime="20170517 20:10:20.871" status="PASS" starttime="20170517 20:10:20.868"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:10:20.872">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:10:20.873" status="PASS" starttime="20170517 20:10:20.871"></status>
</kw>
<status endtime="20170517 20:10:20.873" status="PASS" starttime="20170517 20:10:20.798"></status>
</kw>
<status endtime="20170517 20:10:20.873" status="PASS" starttime="20170517 20:10:20.491"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170517 20:10:20.873" critical="yes" status="PASS" starttime="20170517 20:10:20.244"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170517 20:10:20.874">Delete All Sessions</msg>
<status endtime="20170517 20:10:20.874" status="PASS" starttime="20170517 20:10:20.874"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170517 20:10:20.874" status="PASS" starttime="20170517 20:10:17.654"></status>
</suite>
<status endtime="20170517 20:10:20.876" status="PASS" starttime="20170517 20:10:17.653"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/16253/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.943">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:10:20.943" status="PASS" starttime="20170517 20:10:20.942"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.944">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:10:20.944" status="PASS" starttime="20170517 20:10:20.943"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:20.944">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:10:20.944" status="PASS" starttime="20170517 20:10:20.941"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.946">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:10:20.946" status="PASS" starttime="20170517 20:10:20.946"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.948">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:10:20.948" status="PASS" starttime="20170517 20:10:20.947"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:20.948">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:10:20.948" status="PASS" starttime="20170517 20:10:20.945"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.949">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170517 20:10:20.949" status="PASS" starttime="20170517 20:10:20.949"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:10:20.957" status="PASS" starttime="20170517 20:10:20.950"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.962">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:10:20.965">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:10:20.965">${output} = /tmp/fspcibld/16253/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170517 20:10:20.965" status="PASS" starttime="20170517 20:10:20.958"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170517 20:10:20.979" status="PASS" starttime="20170517 20:10:20.966"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170517 20:10:20.980" status="PASS" starttime="20170517 20:10:20.979"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.980">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170517 20:10:20.980" status="PASS" starttime="20170517 20:10:20.980"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:20.981">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170517 20:10:20.981" status="PASS" starttime="20170517 20:10:20.949"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.981">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170517 20:10:20.981" status="PASS" starttime="20170517 20:10:20.981"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:10:20.989" status="PASS" starttime="20170517 20:10:20.982"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:20.996">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:10:21.013">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:10:21.013">${os_con_pid} = </msg>
<status endtime="20170517 20:10:21.013" status="PASS" starttime="20170517 20:10:20.989"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170517 20:10:21.045" status="PASS" starttime="20170517 20:10:21.016"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.046">${cmd_buf} = kill -9 </msg>
<status endtime="20170517 20:10:21.046" status="PASS" starttime="20170517 20:10:21.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:10:21.048" status="PASS" starttime="20170517 20:10:21.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.050">${rc} = None</msg>
<msg level="INFO" timestamp="20170517 20:10:21.050">${output} = None</msg>
<status endtime="20170517 20:10:21.050" status="PASS" starttime="20170517 20:10:21.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170517 20:10:21.052" status="PASS" starttime="20170517 20:10:21.051"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.053">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status endtime="20170517 20:10:21.053" status="PASS" starttime="20170517 20:10:21.053"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:10:21.066" status="PASS" starttime="20170517 20:10:21.054"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.070">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:10:21.074">${rc} = 1</msg>
<msg level="INFO" timestamp="20170517 20:10:21.074">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status endtime="20170517 20:10:21.074" status="PASS" starttime="20170517 20:10:21.066"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status endtime="20170517 20:10:21.085" status="PASS" starttime="20170517 20:10:21.076"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status endtime="20170517 20:10:21.087" status="PASS" starttime="20170517 20:10:21.086"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:21.087">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status endtime="20170517 20:10:21.087" status="PASS" starttime="20170517 20:10:20.944"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:10:21.088">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170517 20:10:21.088" status="PASS" starttime="20170517 20:10:21.087"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.089">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170517 20:10:21.089" status="PASS" starttime="20170517 20:10:21.089"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:10:21.097" status="PASS" starttime="20170517 20:10:21.089"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.104">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:10:21.112">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:10:21.112">${output} = /tmp/fspcibld/16253/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170517 20:10:21.112" status="PASS" starttime="20170517 20:10:21.097"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170517 20:10:21.122" status="PASS" starttime="20170517 20:10:21.114"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170517 20:10:21.123" status="PASS" starttime="20170517 20:10:21.123"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.124">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170517 20:10:21.124" status="PASS" starttime="20170517 20:10:21.123"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:21.124">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170517 20:10:21.124" status="PASS" starttime="20170517 20:10:21.088"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.125">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170517 20:10:21.125" status="PASS" starttime="20170517 20:10:21.125"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:10:21.133" status="PASS" starttime="20170517 20:10:21.125"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.138">Running command 'ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170517 20:10:21.141">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:10:21.141">${output} = </msg>
<status endtime="20170517 20:10:21.141" status="PASS" starttime="20170517 20:10:21.134"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170517 20:10:21.144" status="PASS" starttime="20170517 20:10:21.143"></status>
</kw>
<status endtime="20170517 20:10:21.144" status="PASS" starttime="20170517 20:10:20.941"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:21.147">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.149">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170517 20:10:21.149" status="PASS" starttime="20170517 20:10:21.148"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.150">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170517 20:10:21.150" status="PASS" starttime="20170517 20:10:21.150"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:21.153">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:10:21.155" status="PASS" starttime="20170517 20:10:21.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.156">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:10:21.156" status="PASS" starttime="20170517 20:10:21.155"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.160">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:10:21.160" status="PASS" starttime="20170517 20:10:21.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.161">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:10:21.161" status="PASS" starttime="20170517 20:10:21.161"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:21.620">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:10:21.620" status="PASS" starttime="20170517 20:10:21.162"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:21.621">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:10:21.621">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:21.621" status="PASS" starttime="20170517 20:10:21.161"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:21.621">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:21.622" status="PASS" starttime="20170517 20:10:21.621"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:21.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:21.623" status="PASS" starttime="20170517 20:10:21.622"></status>
</kw>
<status endtime="20170517 20:10:21.623" status="PASS" starttime="20170517 20:10:21.152"></status>
</kw>
<status endtime="20170517 20:10:21.623" status="PASS" starttime="20170517 20:10:21.152"></status>
</kw>
<status endtime="20170517 20:10:21.623" status="PASS" starttime="20170517 20:10:21.151"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.624">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170517 20:10:21.624" status="PASS" starttime="20170517 20:10:21.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.624">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:10:21.624" status="PASS" starttime="20170517 20:10:21.624"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170517 20:10:21.625" status="PASS" starttime="20170517 20:10:21.625"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:21.627">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170517 20:10:21.627" status="PASS" starttime="20170517 20:10:21.626"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:21.628">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170517 20:10:21.628" status="PASS" starttime="20170517 20:10:21.627"></status>
</kw>
<status endtime="20170517 20:10:21.628" status="PASS" starttime="20170517 20:10:21.627"></status>
</kw>
<status endtime="20170517 20:10:21.628" status="PASS" starttime="20170517 20:10:21.625"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:22.014">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170517 20:10:22.014">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:22.014" status="PASS" starttime="20170517 20:10:21.628"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:22.016">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:22.016" status="PASS" starttime="20170517 20:10:22.015"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:22.017">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:22.017" status="PASS" starttime="20170517 20:10:22.017"></status>
</kw>
<status endtime="20170517 20:10:22.017" status="PASS" starttime="20170517 20:10:22.016"></status>
</kw>
<status endtime="20170517 20:10:22.017" status="PASS" starttime="20170517 20:10:22.015"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:22.018">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:22.018" status="PASS" starttime="20170517 20:10:21.150"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:22.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:22.018" status="PASS" starttime="20170517 20:10:22.018"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:22.019">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:10:22.019">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:10:22.019">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:10:22.019" status="PASS" starttime="20170517 20:10:22.018"></status>
</kw>
<status endtime="20170517 20:10:22.019" status="PASS" starttime="20170517 20:10:21.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170517 20:10:22.020" status="PASS" starttime="20170517 20:10:22.020"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:22.025">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:10:22.026" status="PASS" starttime="20170517 20:10:22.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:22.026">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:10:22.026" status="PASS" starttime="20170517 20:10:22.026"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:22.027">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:10:22.027" status="PASS" starttime="20170517 20:10:22.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:22.027">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:10:22.028" status="PASS" starttime="20170517 20:10:22.027"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:23.547">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:10:23.547" status="PASS" starttime="20170517 20:10:22.028"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:23.547">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:10:23.547">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:23.547" status="PASS" starttime="20170517 20:10:22.028"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:23.548">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:23.548" status="PASS" starttime="20170517 20:10:23.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:23.549">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:23.549" status="PASS" starttime="20170517 20:10:23.548"></status>
</kw>
<status endtime="20170517 20:10:23.549" status="PASS" starttime="20170517 20:10:22.024"></status>
</kw>
<status endtime="20170517 20:10:23.549" status="PASS" starttime="20170517 20:10:22.024"></status>
</kw>
<status endtime="20170517 20:10:23.549" status="PASS" starttime="20170517 20:10:22.023"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:23.550">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170517 20:10:23.550" status="PASS" starttime="20170517 20:10:23.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:23.552">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:10:23.553" status="PASS" starttime="20170517 20:10:23.552"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:23.553">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:10:23.554" status="PASS" starttime="20170517 20:10:23.553"></status>
</kw>
<status endtime="20170517 20:10:23.554" status="PASS" starttime="20170517 20:10:23.553"></status>
</kw>
<status endtime="20170517 20:10:23.554" status="PASS" starttime="20170517 20:10:23.551"></status>
</kw>
<status endtime="20170517 20:10:23.554" status="PASS" starttime="20170517 20:10:23.550"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:24.215">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:10:24.215">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:24.215" status="PASS" starttime="20170517 20:10:23.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:24.218">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:24.218" status="PASS" starttime="20170517 20:10:24.217"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:24.218">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:24.219" status="PASS" starttime="20170517 20:10:24.218"></status>
</kw>
<status endtime="20170517 20:10:24.219" status="PASS" starttime="20170517 20:10:24.218"></status>
</kw>
<status endtime="20170517 20:10:24.219" status="PASS" starttime="20170517 20:10:24.216"></status>
</kw>
<status endtime="20170517 20:10:24.219" status="PASS" starttime="20170517 20:10:24.216"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:24.219">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:24.219" status="PASS" starttime="20170517 20:10:22.022"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:24.220">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:24.220" status="PASS" starttime="20170517 20:10:24.219"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:24.220">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:10:24.220">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:10:24.220">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:10:24.221" status="PASS" starttime="20170517 20:10:24.220"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:24.221">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170517 20:10:24.221" status="PASS" starttime="20170517 20:10:22.022"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:24.221">${host_state} = Running</msg>
<status endtime="20170517 20:10:24.221" status="PASS" starttime="20170517 20:10:22.021"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:10:24.222">Off != Running</msg>
<status endtime="20170517 20:10:24.222" status="FAIL" starttime="20170517 20:10:24.221"></status>
</kw>
<status endtime="20170517 20:10:24.222" status="FAIL" starttime="20170517 20:10:22.021"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:34.229">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:10:34.230" status="PASS" starttime="20170517 20:10:34.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:34.231">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:10:34.231" status="PASS" starttime="20170517 20:10:34.231"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:34.232">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:10:34.232" status="PASS" starttime="20170517 20:10:34.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:34.233">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:10:34.233" status="PASS" starttime="20170517 20:10:34.232"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.052">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:10:43.053" status="PASS" starttime="20170517 20:10:42.843"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:43.053">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:10:43.053">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:43.053" status="PASS" starttime="20170517 20:10:42.840"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.054">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:43.054" status="PASS" starttime="20170517 20:10:43.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.054">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:43.054" status="PASS" starttime="20170517 20:10:43.054"></status>
</kw>
<status endtime="20170517 20:10:43.055" status="PASS" starttime="20170517 20:10:34.228"></status>
</kw>
<status endtime="20170517 20:10:43.055" status="PASS" starttime="20170517 20:10:34.227"></status>
</kw>
<status endtime="20170517 20:10:43.055" status="PASS" starttime="20170517 20:10:34.226"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.055">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170517 20:10:43.055" status="PASS" starttime="20170517 20:10:43.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.058">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:10:43.058" status="PASS" starttime="20170517 20:10:43.057"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.059">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:10:43.059" status="PASS" starttime="20170517 20:10:43.058"></status>
</kw>
<status endtime="20170517 20:10:43.059" status="PASS" starttime="20170517 20:10:43.058"></status>
</kw>
<status endtime="20170517 20:10:43.059" status="PASS" starttime="20170517 20:10:43.056"></status>
</kw>
<status endtime="20170517 20:10:43.059" status="PASS" starttime="20170517 20:10:43.056"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.127">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:10:43.127">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:43.127" status="PASS" starttime="20170517 20:10:43.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.130">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:43.131" status="PASS" starttime="20170517 20:10:43.129"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.132">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:43.132" status="PASS" starttime="20170517 20:10:43.132"></status>
</kw>
<status endtime="20170517 20:10:43.132" status="PASS" starttime="20170517 20:10:43.131"></status>
</kw>
<status endtime="20170517 20:10:43.133" status="PASS" starttime="20170517 20:10:43.128"></status>
</kw>
<status endtime="20170517 20:10:43.133" status="PASS" starttime="20170517 20:10:43.127"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:43.133">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:43.133" status="PASS" starttime="20170517 20:10:34.225"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:43.134" status="PASS" starttime="20170517 20:10:43.133"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.134">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:10:43.134">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:10:43.134">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:10:43.134" status="PASS" starttime="20170517 20:10:43.134"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:43.135">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170517 20:10:43.135" status="PASS" starttime="20170517 20:10:34.224"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:43.135">${host_state} = Off</msg>
<status endtime="20170517 20:10:43.135" status="PASS" starttime="20170517 20:10:34.224"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170517 20:10:43.136" status="PASS" starttime="20170517 20:10:43.135"></status>
</kw>
<status endtime="20170517 20:10:43.136" status="PASS" starttime="20170517 20:10:34.223"></status>
</kw>
<status endtime="20170517 20:10:43.136" status="PASS" starttime="20170517 20:10:22.020"></status>
</kw>
<status endtime="20170517 20:10:43.136" status="PASS" starttime="20170517 20:10:21.148"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.141">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:10:43.141" status="PASS" starttime="20170517 20:10:43.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.142">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:10:43.142" status="PASS" starttime="20170517 20:10:43.141"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.142">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:10:43.142" status="PASS" starttime="20170517 20:10:43.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.143">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:10:43.143" status="PASS" starttime="20170517 20:10:43.143"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.351">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:10:43.351" status="PASS" starttime="20170517 20:10:43.144"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:43.351">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:10:43.351">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:43.352" status="PASS" starttime="20170517 20:10:43.143"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.353">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:43.354" status="PASS" starttime="20170517 20:10:43.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.355">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:43.355" status="PASS" starttime="20170517 20:10:43.354"></status>
</kw>
<status endtime="20170517 20:10:43.355" status="PASS" starttime="20170517 20:10:43.140"></status>
</kw>
<status endtime="20170517 20:10:43.355" status="PASS" starttime="20170517 20:10:43.139"></status>
</kw>
<status endtime="20170517 20:10:43.355" status="PASS" starttime="20170517 20:10:43.139"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.356">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:10:43.356" status="PASS" starttime="20170517 20:10:43.356"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.361">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:10:43.361" status="PASS" starttime="20170517 20:10:43.360"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.362">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:10:43.363" status="PASS" starttime="20170517 20:10:43.362"></status>
</kw>
<status endtime="20170517 20:10:43.363" status="PASS" starttime="20170517 20:10:43.361"></status>
</kw>
<status endtime="20170517 20:10:43.363" status="PASS" starttime="20170517 20:10:43.358"></status>
</kw>
<status endtime="20170517 20:10:43.363" status="PASS" starttime="20170517 20:10:43.357"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.434">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:10:43.434">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:43.435" status="PASS" starttime="20170517 20:10:43.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.439">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:43.439" status="PASS" starttime="20170517 20:10:43.438"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.441">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:43.441" status="PASS" starttime="20170517 20:10:43.440"></status>
</kw>
<status endtime="20170517 20:10:43.442" status="PASS" starttime="20170517 20:10:43.439"></status>
</kw>
<status endtime="20170517 20:10:43.442" status="PASS" starttime="20170517 20:10:43.437"></status>
</kw>
<status endtime="20170517 20:10:43.442" status="PASS" starttime="20170517 20:10:43.436"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:43.442">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:43.443" status="PASS" starttime="20170517 20:10:43.138"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.444">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:43.444" status="PASS" starttime="20170517 20:10:43.443"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.445">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:10:43.445">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:10:43.445">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:10:43.445" status="PASS" starttime="20170517 20:10:43.445"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:43.446">${state} = Off</msg>
<status endtime="20170517 20:10:43.446" status="PASS" starttime="20170517 20:10:43.137"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:43.446">${boot_progress} = Off</msg>
<status endtime="20170517 20:10:43.446" status="PASS" starttime="20170517 20:10:43.137"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status endtime="20170517 20:10:43.448" status="PASS" starttime="20170517 20:10:43.447"></status>
</kw>
<status endtime="20170517 20:10:43.448" status="PASS" starttime="20170517 20:10:43.137"></status>
</kw>
<status endtime="20170517 20:10:43.448" status="PASS" starttime="20170517 20:10:43.136"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.450">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170517 20:10:43.450" status="PASS" starttime="20170517 20:10:43.449"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.453">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170517 20:10:43.453" status="PASS" starttime="20170517 20:10:43.452"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.457">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:10:43.458" status="PASS" starttime="20170517 20:10:43.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.459">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:10:43.459" status="PASS" starttime="20170517 20:10:43.458"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.460">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:10:43.460" status="PASS" starttime="20170517 20:10:43.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.460">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:10:43.460" status="PASS" starttime="20170517 20:10:43.460"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.671">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:10:43.672" status="PASS" starttime="20170517 20:10:43.461"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:43.672">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:10:43.672">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:43.672" status="PASS" starttime="20170517 20:10:43.461"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.674">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:43.675" status="PASS" starttime="20170517 20:10:43.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.676">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:43.676" status="PASS" starttime="20170517 20:10:43.675"></status>
</kw>
<status endtime="20170517 20:10:43.676" status="PASS" starttime="20170517 20:10:43.456"></status>
</kw>
<status endtime="20170517 20:10:43.676" status="PASS" starttime="20170517 20:10:43.455"></status>
</kw>
<status endtime="20170517 20:10:43.677" status="PASS" starttime="20170517 20:10:43.454"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.678">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170517 20:10:43.678" status="PASS" starttime="20170517 20:10:43.677"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.680">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:10:43.680" status="PASS" starttime="20170517 20:10:43.679"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170517 20:10:43.682" status="PASS" starttime="20170517 20:10:43.681"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:43.687">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170517 20:10:43.687" status="PASS" starttime="20170517 20:10:43.683"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:43.692">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170517 20:10:43.692" status="PASS" starttime="20170517 20:10:43.688"></status>
</kw>
<status endtime="20170517 20:10:43.692" status="PASS" starttime="20170517 20:10:43.687"></status>
</kw>
<status endtime="20170517 20:10:43.693" status="PASS" starttime="20170517 20:10:43.682"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:44.066">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170517 20:10:44.066">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:44.066" status="PASS" starttime="20170517 20:10:43.693"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:44.068">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:44.068" status="PASS" starttime="20170517 20:10:44.067"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:44.069">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:44.069" status="PASS" starttime="20170517 20:10:44.068"></status>
</kw>
<status endtime="20170517 20:10:44.069" status="PASS" starttime="20170517 20:10:44.068"></status>
</kw>
<status endtime="20170517 20:10:44.069" status="PASS" starttime="20170517 20:10:44.066"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:44.069">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:44.069" status="PASS" starttime="20170517 20:10:43.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:44.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:44.070" status="PASS" starttime="20170517 20:10:44.069"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:44.070">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:10:44.070">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:10:44.071">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:10:44.071" status="PASS" starttime="20170517 20:10:44.070"></status>
</kw>
<status endtime="20170517 20:10:44.071" status="PASS" starttime="20170517 20:10:43.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170517 20:10:44.071" status="PASS" starttime="20170517 20:10:44.071"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:44.077">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:10:44.078" status="PASS" starttime="20170517 20:10:44.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:44.078">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:10:44.079" status="PASS" starttime="20170517 20:10:44.078"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:44.082">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:10:44.082" status="PASS" starttime="20170517 20:10:44.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:44.083">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:10:44.083" status="PASS" starttime="20170517 20:10:44.082"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:44.460">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:10:44.460" status="PASS" starttime="20170517 20:10:44.083"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:44.460">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:10:44.460">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:44.460" status="PASS" starttime="20170517 20:10:44.083"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:44.461">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:44.461" status="PASS" starttime="20170517 20:10:44.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:44.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:44.463" status="PASS" starttime="20170517 20:10:44.462"></status>
</kw>
<status endtime="20170517 20:10:44.463" status="PASS" starttime="20170517 20:10:44.077"></status>
</kw>
<status endtime="20170517 20:10:44.463" status="PASS" starttime="20170517 20:10:44.076"></status>
</kw>
<status endtime="20170517 20:10:44.463" status="PASS" starttime="20170517 20:10:44.076"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:44.464">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170517 20:10:44.464" status="PASS" starttime="20170517 20:10:44.463"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:44.467">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:10:44.467" status="PASS" starttime="20170517 20:10:44.466"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:44.468">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:10:44.468" status="PASS" starttime="20170517 20:10:44.468"></status>
</kw>
<status endtime="20170517 20:10:44.469" status="PASS" starttime="20170517 20:10:44.467"></status>
</kw>
<status endtime="20170517 20:10:44.469" status="PASS" starttime="20170517 20:10:44.465"></status>
</kw>
<status endtime="20170517 20:10:44.469" status="PASS" starttime="20170517 20:10:44.464"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:44.721">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:10:44.722">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:44.722" status="PASS" starttime="20170517 20:10:44.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:44.725">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:44.725" status="PASS" starttime="20170517 20:10:44.724"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:44.726">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:44.726" status="PASS" starttime="20170517 20:10:44.726"></status>
</kw>
<status endtime="20170517 20:10:44.726" status="PASS" starttime="20170517 20:10:44.725"></status>
</kw>
<status endtime="20170517 20:10:44.726" status="PASS" starttime="20170517 20:10:44.724"></status>
</kw>
<status endtime="20170517 20:10:44.726" status="PASS" starttime="20170517 20:10:44.723"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:44.727">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:44.727" status="PASS" starttime="20170517 20:10:44.075"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:44.727">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:44.727" status="PASS" starttime="20170517 20:10:44.727"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:44.728">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:10:44.728">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:10:44.728">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:10:44.728" status="PASS" starttime="20170517 20:10:44.727"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:44.728">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170517 20:10:44.728" status="PASS" starttime="20170517 20:10:44.074"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:44.728">${host_state} = Off</msg>
<status endtime="20170517 20:10:44.729" status="PASS" starttime="20170517 20:10:44.073"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:10:44.729">Running != Off</msg>
<status endtime="20170517 20:10:44.729" status="FAIL" starttime="20170517 20:10:44.729"></status>
</kw>
<status endtime="20170517 20:10:44.729" status="FAIL" starttime="20170517 20:10:44.073"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:54.741">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:10:54.742" status="PASS" starttime="20170517 20:10:54.740"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:54.743">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:10:54.744" status="PASS" starttime="20170517 20:10:54.743"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:54.744">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:10:54.744" status="PASS" starttime="20170517 20:10:54.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:54.745">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:10:54.745" status="PASS" starttime="20170517 20:10:54.744"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:57.135">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:10:57.135" status="PASS" starttime="20170517 20:10:54.745"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:57.136">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:10:57.136">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:57.136" status="PASS" starttime="20170517 20:10:54.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:57.136">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:57.137" status="PASS" starttime="20170517 20:10:57.136"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:57.137">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:57.137" status="PASS" starttime="20170517 20:10:57.137"></status>
</kw>
<status endtime="20170517 20:10:57.137" status="PASS" starttime="20170517 20:10:54.738"></status>
</kw>
<status endtime="20170517 20:10:57.137" status="PASS" starttime="20170517 20:10:54.738"></status>
</kw>
<status endtime="20170517 20:10:57.138" status="PASS" starttime="20170517 20:10:54.736"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:57.138">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170517 20:10:57.138" status="PASS" starttime="20170517 20:10:57.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:57.140">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:10:57.140" status="PASS" starttime="20170517 20:10:57.140"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:57.141">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:10:57.141" status="PASS" starttime="20170517 20:10:57.141"></status>
</kw>
<status endtime="20170517 20:10:57.142" status="PASS" starttime="20170517 20:10:57.140"></status>
</kw>
<status endtime="20170517 20:10:57.142" status="PASS" starttime="20170517 20:10:57.139"></status>
</kw>
<status endtime="20170517 20:10:57.142" status="PASS" starttime="20170517 20:10:57.138"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:58.247">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:10:58.247">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:58.247" status="PASS" starttime="20170517 20:10:57.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:58.249">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:58.249" status="PASS" starttime="20170517 20:10:58.249"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:58.250">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:10:58.251" status="PASS" starttime="20170517 20:10:58.250"></status>
</kw>
<status endtime="20170517 20:10:58.251" status="PASS" starttime="20170517 20:10:58.250"></status>
</kw>
<status endtime="20170517 20:10:58.251" status="PASS" starttime="20170517 20:10:58.248"></status>
</kw>
<status endtime="20170517 20:10:58.251" status="PASS" starttime="20170517 20:10:58.248"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:58.251">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:10:58.251" status="PASS" starttime="20170517 20:10:54.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:10:58.252">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:10:58.252" status="PASS" starttime="20170517 20:10:58.251"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:10:58.252">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:10:58.252">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:10:58.253">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:10:58.253" status="PASS" starttime="20170517 20:10:58.252"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:58.253">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170517 20:10:58.253" status="PASS" starttime="20170517 20:10:54.733"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:10:58.253">${host_state} = Off</msg>
<status endtime="20170517 20:10:58.253" status="PASS" starttime="20170517 20:10:54.732"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:10:58.254">Running != Off</msg>
<status endtime="20170517 20:10:58.254" status="FAIL" starttime="20170517 20:10:58.253"></status>
</kw>
<status endtime="20170517 20:10:58.254" status="FAIL" starttime="20170517 20:10:54.731"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:08.261">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:11:08.262" status="PASS" starttime="20170517 20:11:08.261"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.262">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:11:08.262" status="PASS" starttime="20170517 20:11:08.262"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.263">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:11:08.263" status="PASS" starttime="20170517 20:11:08.262"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.264">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:11:08.264" status="PASS" starttime="20170517 20:11:08.263"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:08.456">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:11:08.456" status="PASS" starttime="20170517 20:11:08.265"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:08.456">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:11:08.456">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:08.456" status="PASS" starttime="20170517 20:11:08.264"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:08.457">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:08.457" status="PASS" starttime="20170517 20:11:08.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:08.459">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:08.459" status="PASS" starttime="20170517 20:11:08.458"></status>
</kw>
<status endtime="20170517 20:11:08.459" status="PASS" starttime="20170517 20:11:08.260"></status>
</kw>
<status endtime="20170517 20:11:08.459" status="PASS" starttime="20170517 20:11:08.260"></status>
</kw>
<status endtime="20170517 20:11:08.459" status="PASS" starttime="20170517 20:11:08.259"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.460">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170517 20:11:08.460" status="PASS" starttime="20170517 20:11:08.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.462">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:11:08.462" status="PASS" starttime="20170517 20:11:08.462"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:08.463">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:11:08.463" status="PASS" starttime="20170517 20:11:08.463"></status>
</kw>
<status endtime="20170517 20:11:08.464" status="PASS" starttime="20170517 20:11:08.463"></status>
</kw>
<status endtime="20170517 20:11:08.464" status="PASS" starttime="20170517 20:11:08.461"></status>
</kw>
<status endtime="20170517 20:11:08.464" status="PASS" starttime="20170517 20:11:08.460"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.531">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:11:08.532">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:08.532" status="PASS" starttime="20170517 20:11:08.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.535">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:11:08.535" status="PASS" starttime="20170517 20:11:08.535"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:08.536">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:11:08.536" status="PASS" starttime="20170517 20:11:08.536"></status>
</kw>
<status endtime="20170517 20:11:08.536" status="PASS" starttime="20170517 20:11:08.535"></status>
</kw>
<status endtime="20170517 20:11:08.536" status="PASS" starttime="20170517 20:11:08.534"></status>
</kw>
<status endtime="20170517 20:11:08.537" status="PASS" starttime="20170517 20:11:08.533"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:08.537">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:08.537" status="PASS" starttime="20170517 20:11:08.257"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:08.537">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:08.537" status="PASS" starttime="20170517 20:11:08.537"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.538">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:11:08.538">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:11:08.538">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:11:08.538" status="PASS" starttime="20170517 20:11:08.538"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:08.539">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170517 20:11:08.539" status="PASS" starttime="20170517 20:11:08.256"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:08.539">${host_state} = Running</msg>
<status endtime="20170517 20:11:08.539" status="PASS" starttime="20170517 20:11:08.256"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170517 20:11:08.539" status="PASS" starttime="20170517 20:11:08.539"></status>
</kw>
<status endtime="20170517 20:11:08.540" status="PASS" starttime="20170517 20:11:08.255"></status>
</kw>
<status endtime="20170517 20:11:08.540" status="PASS" starttime="20170517 20:10:44.072"></status>
</kw>
<status endtime="20170517 20:11:08.540" status="PASS" starttime="20170517 20:10:43.448"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:08.545">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:11:08.545" status="PASS" starttime="20170517 20:11:08.544"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.546">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:11:08.546" status="PASS" starttime="20170517 20:11:08.545"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.546">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:11:08.546" status="PASS" starttime="20170517 20:11:08.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.547">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:11:08.547" status="PASS" starttime="20170517 20:11:08.547"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:08.736">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:11:08.737" status="PASS" starttime="20170517 20:11:08.548"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:08.737">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:11:08.737">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:08.737" status="PASS" starttime="20170517 20:11:08.547"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:08.738">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:08.738" status="PASS" starttime="20170517 20:11:08.737"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:08.738">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:08.739" status="PASS" starttime="20170517 20:11:08.738"></status>
</kw>
<status endtime="20170517 20:11:08.739" status="PASS" starttime="20170517 20:11:08.543"></status>
</kw>
<status endtime="20170517 20:11:08.739" status="PASS" starttime="20170517 20:11:08.543"></status>
</kw>
<status endtime="20170517 20:11:08.739" status="PASS" starttime="20170517 20:11:08.542"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.739">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:11:08.739" status="PASS" starttime="20170517 20:11:08.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.742">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:11:08.742" status="PASS" starttime="20170517 20:11:08.741"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:08.743">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:11:08.743" status="PASS" starttime="20170517 20:11:08.742"></status>
</kw>
<status endtime="20170517 20:11:08.743" status="PASS" starttime="20170517 20:11:08.742"></status>
</kw>
<status endtime="20170517 20:11:08.743" status="PASS" starttime="20170517 20:11:08.740"></status>
</kw>
<status endtime="20170517 20:11:08.743" status="PASS" starttime="20170517 20:11:08.740"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.814">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:11:08.814">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:08.814" status="PASS" starttime="20170517 20:11:08.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.816">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:11:08.816" status="PASS" starttime="20170517 20:11:08.815"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:08.817">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:11:08.817" status="PASS" starttime="20170517 20:11:08.817"></status>
</kw>
<status endtime="20170517 20:11:08.817" status="PASS" starttime="20170517 20:11:08.816"></status>
</kw>
<status endtime="20170517 20:11:08.817" status="PASS" starttime="20170517 20:11:08.815"></status>
</kw>
<status endtime="20170517 20:11:08.817" status="PASS" starttime="20170517 20:11:08.814"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:08.818">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:08.818" status="PASS" starttime="20170517 20:11:08.542"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:08.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:08.818" status="PASS" starttime="20170517 20:11:08.818"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:08.819">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:11:08.819">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:11:08.819">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:11:08.819" status="PASS" starttime="20170517 20:11:08.818"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:08.819">${state} = Off</msg>
<status endtime="20170517 20:11:08.819" status="PASS" starttime="20170517 20:11:08.541"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:08.819">${boot_progress} = Off</msg>
<status endtime="20170517 20:11:08.819" status="PASS" starttime="20170517 20:11:08.541"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:11:08.820">Off != FW Progress, Starting OS</msg>
<status endtime="20170517 20:11:08.820" status="FAIL" starttime="20170517 20:11:08.820"></status>
</kw>
<status endtime="20170517 20:11:08.820" status="FAIL" starttime="20170517 20:11:08.540"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:18.830">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:11:18.830" status="PASS" starttime="20170517 20:11:18.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:18.832">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:11:18.832" status="PASS" starttime="20170517 20:11:18.830"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:18.833">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:11:18.833" status="PASS" starttime="20170517 20:11:18.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:18.833">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:11:18.833" status="PASS" starttime="20170517 20:11:18.833"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:19.044">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:11:19.044" status="PASS" starttime="20170517 20:11:18.834"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:19.044">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:11:19.044">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:19.044" status="PASS" starttime="20170517 20:11:18.834"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:19.045">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:19.045" status="PASS" starttime="20170517 20:11:19.045"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:19.046">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:19.046" status="PASS" starttime="20170517 20:11:19.046"></status>
</kw>
<status endtime="20170517 20:11:19.047" status="PASS" starttime="20170517 20:11:18.829"></status>
</kw>
<status endtime="20170517 20:11:19.047" status="PASS" starttime="20170517 20:11:18.826"></status>
</kw>
<status endtime="20170517 20:11:19.047" status="PASS" starttime="20170517 20:11:18.825"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:19.047">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:11:19.047" status="PASS" starttime="20170517 20:11:19.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:19.050">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:11:19.050" status="PASS" starttime="20170517 20:11:19.049"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:19.051">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:11:19.051" status="PASS" starttime="20170517 20:11:19.051"></status>
</kw>
<status endtime="20170517 20:11:19.051" status="PASS" starttime="20170517 20:11:19.050"></status>
</kw>
<status endtime="20170517 20:11:19.052" status="PASS" starttime="20170517 20:11:19.048"></status>
</kw>
<status endtime="20170517 20:11:19.052" status="PASS" starttime="20170517 20:11:19.048"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:19.125">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:11:19.125">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:19.125" status="PASS" starttime="20170517 20:11:19.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:19.127">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:11:19.127" status="PASS" starttime="20170517 20:11:19.127"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:19.129">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:11:19.129" status="PASS" starttime="20170517 20:11:19.128"></status>
</kw>
<status endtime="20170517 20:11:19.129" status="PASS" starttime="20170517 20:11:19.128"></status>
</kw>
<status endtime="20170517 20:11:19.129" status="PASS" starttime="20170517 20:11:19.126"></status>
</kw>
<status endtime="20170517 20:11:19.129" status="PASS" starttime="20170517 20:11:19.125"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:19.130">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:19.130" status="PASS" starttime="20170517 20:11:18.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:19.130">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:19.131" status="PASS" starttime="20170517 20:11:19.130"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:19.132">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:11:19.132">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:11:19.132">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:11:19.132" status="PASS" starttime="20170517 20:11:19.131"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:19.132">${state} = Off</msg>
<status endtime="20170517 20:11:19.132" status="PASS" starttime="20170517 20:11:18.824"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:19.133">${boot_progress} = Off</msg>
<status endtime="20170517 20:11:19.133" status="PASS" starttime="20170517 20:11:18.823"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:11:19.133">Off != FW Progress, Starting OS</msg>
<status endtime="20170517 20:11:19.133" status="FAIL" starttime="20170517 20:11:19.133"></status>
</kw>
<status endtime="20170517 20:11:19.133" status="FAIL" starttime="20170517 20:11:18.821"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:29.161">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:11:29.163" status="PASS" starttime="20170517 20:11:29.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:29.165">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:11:29.166" status="PASS" starttime="20170517 20:11:29.164"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:29.168">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:11:29.168" status="PASS" starttime="20170517 20:11:29.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:29.170">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:11:29.170" status="PASS" starttime="20170517 20:11:29.169"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:29.460">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:11:29.461" status="PASS" starttime="20170517 20:11:29.175"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:29.461">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:11:29.461">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:29.461" status="PASS" starttime="20170517 20:11:29.171"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:29.463">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:29.463" status="PASS" starttime="20170517 20:11:29.462"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:29.465">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:29.465" status="PASS" starttime="20170517 20:11:29.464"></status>
</kw>
<status endtime="20170517 20:11:29.466" status="PASS" starttime="20170517 20:11:29.157"></status>
</kw>
<status endtime="20170517 20:11:29.466" status="PASS" starttime="20170517 20:11:29.155"></status>
</kw>
<status endtime="20170517 20:11:29.466" status="PASS" starttime="20170517 20:11:29.152"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:29.467">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:11:29.467" status="PASS" starttime="20170517 20:11:29.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:29.474">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:11:29.474" status="PASS" starttime="20170517 20:11:29.471"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:29.477">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:11:29.477" status="PASS" starttime="20170517 20:11:29.476"></status>
</kw>
<status endtime="20170517 20:11:29.478" status="PASS" starttime="20170517 20:11:29.475"></status>
</kw>
<status endtime="20170517 20:11:29.478" status="PASS" starttime="20170517 20:11:29.469"></status>
</kw>
<status endtime="20170517 20:11:29.478" status="PASS" starttime="20170517 20:11:29.468"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:29.585">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:11:29.586">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:29.587" status="PASS" starttime="20170517 20:11:29.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:29.594">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:11:29.594" status="PASS" starttime="20170517 20:11:29.592"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:29.597">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:11:29.597" status="PASS" starttime="20170517 20:11:29.596"></status>
</kw>
<status endtime="20170517 20:11:29.598" status="PASS" starttime="20170517 20:11:29.595"></status>
</kw>
<status endtime="20170517 20:11:29.598" status="PASS" starttime="20170517 20:11:29.590"></status>
</kw>
<status endtime="20170517 20:11:29.598" status="PASS" starttime="20170517 20:11:29.588"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:29.599">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:29.599" status="PASS" starttime="20170517 20:11:29.149"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:29.600">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:29.601" status="PASS" starttime="20170517 20:11:29.599"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:29.602">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:11:29.602">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:11:29.603">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:11:29.603" status="PASS" starttime="20170517 20:11:29.601"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:29.603">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:11:29.604" status="PASS" starttime="20170517 20:11:29.146"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:29.604">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:11:29.604" status="PASS" starttime="20170517 20:11:29.144"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:11:29.608">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170517 20:11:29.608" status="FAIL" starttime="20170517 20:11:29.605"></status>
</kw>
<status endtime="20170517 20:11:29.609" status="FAIL" starttime="20170517 20:11:29.136"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:39.646">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:11:39.647" status="PASS" starttime="20170517 20:11:39.644"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:39.649">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:11:39.650" status="PASS" starttime="20170517 20:11:39.648"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:39.652">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:11:39.652" status="PASS" starttime="20170517 20:11:39.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:39.655">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:11:39.655" status="PASS" starttime="20170517 20:11:39.654"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:39.919">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:11:39.919" status="PASS" starttime="20170517 20:11:39.656"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:39.919">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:11:39.920">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:39.920" status="PASS" starttime="20170517 20:11:39.656"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:39.921">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:39.921" status="PASS" starttime="20170517 20:11:39.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:39.923">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:39.923" status="PASS" starttime="20170517 20:11:39.922"></status>
</kw>
<status endtime="20170517 20:11:39.923" status="PASS" starttime="20170517 20:11:39.642"></status>
</kw>
<status endtime="20170517 20:11:39.923" status="PASS" starttime="20170517 20:11:39.640"></status>
</kw>
<status endtime="20170517 20:11:39.924" status="PASS" starttime="20170517 20:11:39.621"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:39.925">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:11:39.925" status="PASS" starttime="20170517 20:11:39.924"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:39.930">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:11:39.930" status="PASS" starttime="20170517 20:11:39.928"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:39.932">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:11:39.933" status="PASS" starttime="20170517 20:11:39.932"></status>
</kw>
<status endtime="20170517 20:11:39.933" status="PASS" starttime="20170517 20:11:39.930"></status>
</kw>
<status endtime="20170517 20:11:39.933" status="PASS" starttime="20170517 20:11:39.927"></status>
</kw>
<status endtime="20170517 20:11:39.933" status="PASS" starttime="20170517 20:11:39.926"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:40.034">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:11:40.035">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:40.035" status="PASS" starttime="20170517 20:11:39.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:40.041">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:11:40.042" status="PASS" starttime="20170517 20:11:40.039"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:40.044">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:11:40.044" status="PASS" starttime="20170517 20:11:40.043"></status>
</kw>
<status endtime="20170517 20:11:40.045" status="PASS" starttime="20170517 20:11:40.042"></status>
</kw>
<status endtime="20170517 20:11:40.045" status="PASS" starttime="20170517 20:11:40.037"></status>
</kw>
<status endtime="20170517 20:11:40.045" status="PASS" starttime="20170517 20:11:40.036"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:40.046">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:40.046" status="PASS" starttime="20170517 20:11:39.618"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:40.047">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:40.047" status="PASS" starttime="20170517 20:11:40.046"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:40.048">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:11:40.048">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:11:40.048">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:11:40.048" status="PASS" starttime="20170517 20:11:40.047"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:40.049">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:11:40.049" status="PASS" starttime="20170517 20:11:39.616"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:40.049">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:11:40.049" status="PASS" starttime="20170517 20:11:39.614"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:11:40.052">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170517 20:11:40.052" status="FAIL" starttime="20170517 20:11:40.050"></status>
</kw>
<status endtime="20170517 20:11:40.053" status="FAIL" starttime="20170517 20:11:39.612"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:50.089">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:11:50.090" status="PASS" starttime="20170517 20:11:50.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:50.108">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:11:50.108" status="PASS" starttime="20170517 20:11:50.107"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:50.110">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:11:50.111" status="PASS" starttime="20170517 20:11:50.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:50.114">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:11:50.114" status="PASS" starttime="20170517 20:11:50.112"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:50.338">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:11:50.338" status="PASS" starttime="20170517 20:11:50.116"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:50.339">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:11:50.339">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:50.339" status="PASS" starttime="20170517 20:11:50.115"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:50.341">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:50.342" status="PASS" starttime="20170517 20:11:50.340"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:50.344">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:50.344" status="PASS" starttime="20170517 20:11:50.342"></status>
</kw>
<status endtime="20170517 20:11:50.345" status="PASS" starttime="20170517 20:11:50.086"></status>
</kw>
<status endtime="20170517 20:11:50.345" status="PASS" starttime="20170517 20:11:50.066"></status>
</kw>
<status endtime="20170517 20:11:50.345" status="PASS" starttime="20170517 20:11:50.063"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:50.346">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:11:50.346" status="PASS" starttime="20170517 20:11:50.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:50.353">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:11:50.353" status="PASS" starttime="20170517 20:11:50.350"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:50.356">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:11:50.356" status="PASS" starttime="20170517 20:11:50.355"></status>
</kw>
<status endtime="20170517 20:11:50.356" status="PASS" starttime="20170517 20:11:50.353"></status>
</kw>
<status endtime="20170517 20:11:50.357" status="PASS" starttime="20170517 20:11:50.348"></status>
</kw>
<status endtime="20170517 20:11:50.357" status="PASS" starttime="20170517 20:11:50.347"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:50.437">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:11:50.438">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:50.438" status="PASS" starttime="20170517 20:11:50.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:50.447">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:11:50.447" status="PASS" starttime="20170517 20:11:50.444"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:50.452">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:11:50.452" status="PASS" starttime="20170517 20:11:50.451"></status>
</kw>
<status endtime="20170517 20:11:50.453" status="PASS" starttime="20170517 20:11:50.449"></status>
</kw>
<status endtime="20170517 20:11:50.454" status="PASS" starttime="20170517 20:11:50.441"></status>
</kw>
<status endtime="20170517 20:11:50.454" status="PASS" starttime="20170517 20:11:50.439"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:50.455">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:11:50.455" status="PASS" starttime="20170517 20:11:50.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:11:50.458">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:11:50.458" status="PASS" starttime="20170517 20:11:50.456"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:11:50.461">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:11:50.461">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:11:50.462">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:11:50.462" status="PASS" starttime="20170517 20:11:50.459"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:50.464">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:11:50.464" status="PASS" starttime="20170517 20:11:50.058"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:11:50.465">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:11:50.465" status="PASS" starttime="20170517 20:11:50.056"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:11:50.469">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170517 20:11:50.470" status="FAIL" starttime="20170517 20:11:50.467"></status>
</kw>
<status endtime="20170517 20:11:50.471" status="FAIL" starttime="20170517 20:11:50.054"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:00.497">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:12:00.499" status="PASS" starttime="20170517 20:12:00.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:00.501">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:12:00.502" status="PASS" starttime="20170517 20:12:00.500"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:00.505">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:12:00.505" status="PASS" starttime="20170517 20:12:00.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:00.509">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:12:00.509" status="PASS" starttime="20170517 20:12:00.507"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:00.713">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:12:00.714" status="PASS" starttime="20170517 20:12:00.513"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:00.714">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:12:00.714">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:00.714" status="PASS" starttime="20170517 20:12:00.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:00.716">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:00.716" status="PASS" starttime="20170517 20:12:00.715"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:00.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:00.719" status="PASS" starttime="20170517 20:12:00.717"></status>
</kw>
<status endtime="20170517 20:12:00.719" status="PASS" starttime="20170517 20:12:00.490"></status>
</kw>
<status endtime="20170517 20:12:00.719" status="PASS" starttime="20170517 20:12:00.488"></status>
</kw>
<status endtime="20170517 20:12:00.719" status="PASS" starttime="20170517 20:12:00.485"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:00.720">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:12:00.720" status="PASS" starttime="20170517 20:12:00.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:00.724">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:12:00.724" status="PASS" starttime="20170517 20:12:00.723"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:00.726">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:12:00.726" status="PASS" starttime="20170517 20:12:00.725"></status>
</kw>
<status endtime="20170517 20:12:00.726" status="PASS" starttime="20170517 20:12:00.724"></status>
</kw>
<status endtime="20170517 20:12:00.726" status="PASS" starttime="20170517 20:12:00.722"></status>
</kw>
<status endtime="20170517 20:12:00.727" status="PASS" starttime="20170517 20:12:00.721"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:00.799">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:12:00.799">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:00.799" status="PASS" starttime="20170517 20:12:00.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:00.802">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:00.802" status="PASS" starttime="20170517 20:12:00.801"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:00.806">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:00.806" status="PASS" starttime="20170517 20:12:00.802"></status>
</kw>
<status endtime="20170517 20:12:00.807" status="PASS" starttime="20170517 20:12:00.802"></status>
</kw>
<status endtime="20170517 20:12:00.807" status="PASS" starttime="20170517 20:12:00.801"></status>
</kw>
<status endtime="20170517 20:12:00.807" status="PASS" starttime="20170517 20:12:00.800"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:00.807">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:00.808" status="PASS" starttime="20170517 20:12:00.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:00.808">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:00.808" status="PASS" starttime="20170517 20:12:00.808"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:00.809">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:12:00.809">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:12:00.809">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:12:00.809" status="PASS" starttime="20170517 20:12:00.809"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:00.809">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:12:00.809" status="PASS" starttime="20170517 20:12:00.478"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:00.810">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:12:00.810" status="PASS" starttime="20170517 20:12:00.476"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:12:00.810">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170517 20:12:00.810" status="FAIL" starttime="20170517 20:12:00.810"></status>
</kw>
<status endtime="20170517 20:12:00.811" status="FAIL" starttime="20170517 20:12:00.473"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:10.819">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:12:10.820" status="PASS" starttime="20170517 20:12:10.819"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:10.820">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:12:10.820" status="PASS" starttime="20170517 20:12:10.820"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:10.821">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:12:10.821" status="PASS" starttime="20170517 20:12:10.821"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:10.822">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:12:10.822" status="PASS" starttime="20170517 20:12:10.821"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:11.043">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:12:11.043" status="PASS" starttime="20170517 20:12:10.822"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:11.043">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:12:11.043">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:11.043" status="PASS" starttime="20170517 20:12:10.822"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:11.045">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:11.045" status="PASS" starttime="20170517 20:12:11.044"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:11.046">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:11.046" status="PASS" starttime="20170517 20:12:11.045"></status>
</kw>
<status endtime="20170517 20:12:11.046" status="PASS" starttime="20170517 20:12:10.818"></status>
</kw>
<status endtime="20170517 20:12:11.047" status="PASS" starttime="20170517 20:12:10.818"></status>
</kw>
<status endtime="20170517 20:12:11.047" status="PASS" starttime="20170517 20:12:10.817"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:11.048">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:12:11.048" status="PASS" starttime="20170517 20:12:11.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:11.051">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:12:11.051" status="PASS" starttime="20170517 20:12:11.050"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:11.052">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:12:11.052" status="PASS" starttime="20170517 20:12:11.052"></status>
</kw>
<status endtime="20170517 20:12:11.052" status="PASS" starttime="20170517 20:12:11.051"></status>
</kw>
<status endtime="20170517 20:12:11.053" status="PASS" starttime="20170517 20:12:11.049"></status>
</kw>
<status endtime="20170517 20:12:11.053" status="PASS" starttime="20170517 20:12:11.048"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:11.121">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:12:11.122">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:11.122" status="PASS" starttime="20170517 20:12:11.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:11.125">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:11.125" status="PASS" starttime="20170517 20:12:11.124"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:11.126">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:11.126" status="PASS" starttime="20170517 20:12:11.125"></status>
</kw>
<status endtime="20170517 20:12:11.126" status="PASS" starttime="20170517 20:12:11.125"></status>
</kw>
<status endtime="20170517 20:12:11.126" status="PASS" starttime="20170517 20:12:11.124"></status>
</kw>
<status endtime="20170517 20:12:11.126" status="PASS" starttime="20170517 20:12:11.123"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:11.126">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:11.126" status="PASS" starttime="20170517 20:12:10.816"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:11.127">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:11.127" status="PASS" starttime="20170517 20:12:11.127"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:11.128">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:12:11.128">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:12:11.128">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:12:11.128" status="PASS" starttime="20170517 20:12:11.127"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:11.128">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:12:11.128" status="PASS" starttime="20170517 20:12:10.815"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:11.128">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:12:11.128" status="PASS" starttime="20170517 20:12:10.814"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:12:11.129">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170517 20:12:11.129" status="FAIL" starttime="20170517 20:12:11.129"></status>
</kw>
<status endtime="20170517 20:12:11.129" status="FAIL" starttime="20170517 20:12:10.813"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.135">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:12:21.136" status="PASS" starttime="20170517 20:12:21.135"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.136">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:12:21.137" status="PASS" starttime="20170517 20:12:21.136"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.137">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:12:21.137" status="PASS" starttime="20170517 20:12:21.137"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.138">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:12:21.138" status="PASS" starttime="20170517 20:12:21.137"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.370">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:12:21.371" status="PASS" starttime="20170517 20:12:21.138"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:21.371">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:12:21.371">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:21.371" status="PASS" starttime="20170517 20:12:21.138"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.372">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:21.372" status="PASS" starttime="20170517 20:12:21.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.373">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:21.373" status="PASS" starttime="20170517 20:12:21.372"></status>
</kw>
<status endtime="20170517 20:12:21.373" status="PASS" starttime="20170517 20:12:21.134"></status>
</kw>
<status endtime="20170517 20:12:21.373" status="PASS" starttime="20170517 20:12:21.133"></status>
</kw>
<status endtime="20170517 20:12:21.373" status="PASS" starttime="20170517 20:12:21.133"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.374">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:12:21.374" status="PASS" starttime="20170517 20:12:21.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.377">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:12:21.377" status="PASS" starttime="20170517 20:12:21.376"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.378">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:12:21.378" status="PASS" starttime="20170517 20:12:21.378"></status>
</kw>
<status endtime="20170517 20:12:21.378" status="PASS" starttime="20170517 20:12:21.377"></status>
</kw>
<status endtime="20170517 20:12:21.379" status="PASS" starttime="20170517 20:12:21.375"></status>
</kw>
<status endtime="20170517 20:12:21.379" status="PASS" starttime="20170517 20:12:21.375"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.448">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:12:21.448">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:21.449" status="PASS" starttime="20170517 20:12:21.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.453">${msg} = Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:21.453" status="PASS" starttime="20170517 20:12:21.451"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.456">Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:21.457" status="PASS" starttime="20170517 20:12:21.455"></status>
</kw>
<status endtime="20170517 20:12:21.457" status="PASS" starttime="20170517 20:12:21.454"></status>
</kw>
<status endtime="20170517 20:12:21.458" status="PASS" starttime="20170517 20:12:21.450"></status>
</kw>
<status endtime="20170517 20:12:21.458" status="PASS" starttime="20170517 20:12:21.449"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:21.459">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:21.459" status="PASS" starttime="20170517 20:12:21.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.460">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:21.461" status="PASS" starttime="20170517 20:12:21.459"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.462">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:12:21.462">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:12:21.463">${content} = {u'data': u'FW Progress, Starting OS', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:12:21.463" status="PASS" starttime="20170517 20:12:21.461"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:21.463">${state} = FW Progress, Starting OS</msg>
<status endtime="20170517 20:12:21.463" status="PASS" starttime="20170517 20:12:21.131"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:21.464">${boot_progress} = FW Progress, Starting OS</msg>
<status endtime="20170517 20:12:21.464" status="PASS" starttime="20170517 20:12:21.131"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<status endtime="20170517 20:12:21.465" status="PASS" starttime="20170517 20:12:21.465"></status>
</kw>
<status endtime="20170517 20:12:21.466" status="PASS" starttime="20170517 20:12:21.130"></status>
</kw>
<status endtime="20170517 20:12:21.466" status="PASS" starttime="20170517 20:11:08.540"></status>
</kw>
<kw name="Flush REST Sessions" library="utils">
<doc>Removes all the active session objects</doc>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170517 20:12:21.467">Delete All Sessions</msg>
<status endtime="20170517 20:12:21.471" status="PASS" starttime="20170517 20:12:21.467"></status>
</kw>
<status endtime="20170517 20:12:21.472" status="PASS" starttime="20170517 20:12:21.466"></status>
</kw>
<status endtime="20170517 20:12:21.472" status="PASS" starttime="20170517 20:10:21.147"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:21.472">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.475">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170517 20:12:21.475" status="PASS" starttime="20170517 20:12:21.474"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.478">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170517 20:12:21.478" status="PASS" starttime="20170517 20:12:21.477"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.483">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:12:21.483" status="PASS" starttime="20170517 20:12:21.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.484">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:12:21.484" status="PASS" starttime="20170517 20:12:21.483"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.484">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:12:21.484" status="PASS" starttime="20170517 20:12:21.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.485">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:12:21.485" status="PASS" starttime="20170517 20:12:21.485"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.700">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:12:21.700" status="PASS" starttime="20170517 20:12:21.486"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:21.700">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:12:21.701">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:21.701" status="PASS" starttime="20170517 20:12:21.485"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.701">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:21.701" status="PASS" starttime="20170517 20:12:21.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.702">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:21.702" status="PASS" starttime="20170517 20:12:21.702"></status>
</kw>
<status endtime="20170517 20:12:21.702" status="PASS" starttime="20170517 20:12:21.482"></status>
</kw>
<status endtime="20170517 20:12:21.702" status="PASS" starttime="20170517 20:12:21.481"></status>
</kw>
<status endtime="20170517 20:12:21.702" status="PASS" starttime="20170517 20:12:21.480"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.703">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170517 20:12:21.703" status="PASS" starttime="20170517 20:12:21.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.704">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:12:21.704" status="PASS" starttime="20170517 20:12:21.703"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170517 20:12:21.704" status="PASS" starttime="20170517 20:12:21.704"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.706">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170517 20:12:21.706" status="PASS" starttime="20170517 20:12:21.705"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.707">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170517 20:12:21.707" status="PASS" starttime="20170517 20:12:21.706"></status>
</kw>
<status endtime="20170517 20:12:21.707" status="PASS" starttime="20170517 20:12:21.706"></status>
</kw>
<status endtime="20170517 20:12:21.707" status="PASS" starttime="20170517 20:12:21.704"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.896">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170517 20:12:21.896">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:21.896" status="PASS" starttime="20170517 20:12:21.708"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.898">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:21.898" status="PASS" starttime="20170517 20:12:21.897"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.899">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:21.899" status="PASS" starttime="20170517 20:12:21.898"></status>
</kw>
<status endtime="20170517 20:12:21.899" status="PASS" starttime="20170517 20:12:21.898"></status>
</kw>
<status endtime="20170517 20:12:21.899" status="PASS" starttime="20170517 20:12:21.897"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:21.899">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:21.899" status="PASS" starttime="20170517 20:12:21.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.900">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:21.900" status="PASS" starttime="20170517 20:12:21.900"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.900">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:12:21.900">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:12:21.901">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:12:21.901" status="PASS" starttime="20170517 20:12:21.900"></status>
</kw>
<status endtime="20170517 20:12:21.901" status="PASS" starttime="20170517 20:12:21.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170517 20:12:21.901" status="PASS" starttime="20170517 20:12:21.901"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:21.906">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:12:21.906" status="PASS" starttime="20170517 20:12:21.906"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.907">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:12:21.907" status="PASS" starttime="20170517 20:12:21.907"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.908">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:12:21.908" status="PASS" starttime="20170517 20:12:21.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:21.909">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:12:21.909" status="PASS" starttime="20170517 20:12:21.908"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:22.794">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:12:22.795" status="PASS" starttime="20170517 20:12:21.909"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:22.795">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:12:22.795">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:22.795" status="PASS" starttime="20170517 20:12:21.909"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:22.796">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:22.796" status="PASS" starttime="20170517 20:12:22.795"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:22.798">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:22.798" status="PASS" starttime="20170517 20:12:22.796"></status>
</kw>
<status endtime="20170517 20:12:22.798" status="PASS" starttime="20170517 20:12:21.905"></status>
</kw>
<status endtime="20170517 20:12:22.798" status="PASS" starttime="20170517 20:12:21.904"></status>
</kw>
<status endtime="20170517 20:12:22.799" status="PASS" starttime="20170517 20:12:21.904"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:22.799">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170517 20:12:22.799" status="PASS" starttime="20170517 20:12:22.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:22.801">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:12:22.801" status="PASS" starttime="20170517 20:12:22.801"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:22.802">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:12:22.802" status="PASS" starttime="20170517 20:12:22.802"></status>
</kw>
<status endtime="20170517 20:12:22.803" status="PASS" starttime="20170517 20:12:22.801"></status>
</kw>
<status endtime="20170517 20:12:22.803" status="PASS" starttime="20170517 20:12:22.800"></status>
</kw>
<status endtime="20170517 20:12:22.803" status="PASS" starttime="20170517 20:12:22.799"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:23.714">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:12:23.715">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:23.715" status="PASS" starttime="20170517 20:12:22.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:23.719">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:23.719" status="PASS" starttime="20170517 20:12:23.719"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:23.721">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:23.721" status="PASS" starttime="20170517 20:12:23.720"></status>
</kw>
<status endtime="20170517 20:12:23.721" status="PASS" starttime="20170517 20:12:23.719"></status>
</kw>
<status endtime="20170517 20:12:23.721" status="PASS" starttime="20170517 20:12:23.718"></status>
</kw>
<status endtime="20170517 20:12:23.721" status="PASS" starttime="20170517 20:12:23.716"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:23.721">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:23.721" status="PASS" starttime="20170517 20:12:21.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:23.722">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:23.722" status="PASS" starttime="20170517 20:12:23.722"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:23.723">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:12:23.723">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:12:23.723">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:12:23.723" status="PASS" starttime="20170517 20:12:23.722"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:23.723">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170517 20:12:23.723" status="PASS" starttime="20170517 20:12:21.903"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:23.724">${host_state} = Running</msg>
<status endtime="20170517 20:12:23.724" status="PASS" starttime="20170517 20:12:21.902"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:12:23.724">Off != Running</msg>
<status endtime="20170517 20:12:23.724" status="FAIL" starttime="20170517 20:12:23.724"></status>
</kw>
<status endtime="20170517 20:12:23.724" status="FAIL" starttime="20170517 20:12:21.902"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:33.731">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:12:33.731" status="PASS" starttime="20170517 20:12:33.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:33.732">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:12:33.732" status="PASS" starttime="20170517 20:12:33.731"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:33.732">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:12:33.732" status="PASS" starttime="20170517 20:12:33.732"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:33.733">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:12:33.733" status="PASS" starttime="20170517 20:12:33.733"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:33.935">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:12:33.935" status="PASS" starttime="20170517 20:12:33.734"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:33.935">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:12:33.936">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:33.936" status="PASS" starttime="20170517 20:12:33.733"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:33.936">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:33.937" status="PASS" starttime="20170517 20:12:33.936"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:33.938">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:33.938" status="PASS" starttime="20170517 20:12:33.937"></status>
</kw>
<status endtime="20170517 20:12:33.938" status="PASS" starttime="20170517 20:12:33.730"></status>
</kw>
<status endtime="20170517 20:12:33.938" status="PASS" starttime="20170517 20:12:33.729"></status>
</kw>
<status endtime="20170517 20:12:33.938" status="PASS" starttime="20170517 20:12:33.729"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:33.939">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170517 20:12:33.939" status="PASS" starttime="20170517 20:12:33.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:33.946">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:12:33.946" status="PASS" starttime="20170517 20:12:33.940"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:33.947">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:12:33.947" status="PASS" starttime="20170517 20:12:33.947"></status>
</kw>
<status endtime="20170517 20:12:33.948" status="PASS" starttime="20170517 20:12:33.946"></status>
</kw>
<status endtime="20170517 20:12:33.948" status="PASS" starttime="20170517 20:12:33.939"></status>
</kw>
<status endtime="20170517 20:12:33.948" status="PASS" starttime="20170517 20:12:33.939"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.028">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:12:34.029">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:34.029" status="PASS" starttime="20170517 20:12:33.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.032">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:34.032" status="PASS" starttime="20170517 20:12:34.031"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.033">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:34.033" status="PASS" starttime="20170517 20:12:34.032"></status>
</kw>
<status endtime="20170517 20:12:34.033" status="PASS" starttime="20170517 20:12:34.032"></status>
</kw>
<status endtime="20170517 20:12:34.033" status="PASS" starttime="20170517 20:12:34.030"></status>
</kw>
<status endtime="20170517 20:12:34.033" status="PASS" starttime="20170517 20:12:34.029"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:34.033">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:34.033" status="PASS" starttime="20170517 20:12:33.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.034">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:34.034" status="PASS" starttime="20170517 20:12:34.034"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.035">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:12:34.035">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:12:34.035">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:12:34.035" status="PASS" starttime="20170517 20:12:34.034"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:34.035">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170517 20:12:34.035" status="PASS" starttime="20170517 20:12:33.727"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:34.035">${host_state} = Off</msg>
<status endtime="20170517 20:12:34.035" status="PASS" starttime="20170517 20:12:33.727"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170517 20:12:34.036" status="PASS" starttime="20170517 20:12:34.036"></status>
</kw>
<status endtime="20170517 20:12:34.036" status="PASS" starttime="20170517 20:12:33.726"></status>
</kw>
<status endtime="20170517 20:12:34.036" status="PASS" starttime="20170517 20:12:21.902"></status>
</kw>
<status endtime="20170517 20:12:34.036" status="PASS" starttime="20170517 20:12:21.473"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.041">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:12:34.041" status="PASS" starttime="20170517 20:12:34.040"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.042">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:12:34.042" status="PASS" starttime="20170517 20:12:34.041"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.043">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:12:34.043" status="PASS" starttime="20170517 20:12:34.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.043">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:12:34.043" status="PASS" starttime="20170517 20:12:34.043"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.236">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:12:34.236" status="PASS" starttime="20170517 20:12:34.044"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:34.236">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:12:34.236">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:34.236" status="PASS" starttime="20170517 20:12:34.044"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.237">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:34.237" status="PASS" starttime="20170517 20:12:34.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.238">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:34.238" status="PASS" starttime="20170517 20:12:34.237"></status>
</kw>
<status endtime="20170517 20:12:34.238" status="PASS" starttime="20170517 20:12:34.040"></status>
</kw>
<status endtime="20170517 20:12:34.238" status="PASS" starttime="20170517 20:12:34.039"></status>
</kw>
<status endtime="20170517 20:12:34.238" status="PASS" starttime="20170517 20:12:34.039"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.238">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:12:34.239" status="PASS" starttime="20170517 20:12:34.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.241">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:12:34.241" status="PASS" starttime="20170517 20:12:34.240"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.241">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:12:34.242" status="PASS" starttime="20170517 20:12:34.241"></status>
</kw>
<status endtime="20170517 20:12:34.242" status="PASS" starttime="20170517 20:12:34.241"></status>
</kw>
<status endtime="20170517 20:12:34.242" status="PASS" starttime="20170517 20:12:34.239"></status>
</kw>
<status endtime="20170517 20:12:34.242" status="PASS" starttime="20170517 20:12:34.239"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.311">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:12:34.311">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:34.311" status="PASS" starttime="20170517 20:12:34.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.314">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:34.314" status="PASS" starttime="20170517 20:12:34.313"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.315">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:34.315" status="PASS" starttime="20170517 20:12:34.315"></status>
</kw>
<status endtime="20170517 20:12:34.315" status="PASS" starttime="20170517 20:12:34.314"></status>
</kw>
<status endtime="20170517 20:12:34.315" status="PASS" starttime="20170517 20:12:34.312"></status>
</kw>
<status endtime="20170517 20:12:34.315" status="PASS" starttime="20170517 20:12:34.312"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:34.315">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:34.316" status="PASS" starttime="20170517 20:12:34.038"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.316">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:34.317" status="PASS" starttime="20170517 20:12:34.316"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.317">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:12:34.317">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:12:34.317">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:12:34.317" status="PASS" starttime="20170517 20:12:34.317"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:34.318">${state} = Off</msg>
<status endtime="20170517 20:12:34.318" status="PASS" starttime="20170517 20:12:34.038"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:34.318">${boot_progress} = Off</msg>
<status endtime="20170517 20:12:34.318" status="PASS" starttime="20170517 20:12:34.037"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status endtime="20170517 20:12:34.318" status="PASS" starttime="20170517 20:12:34.318"></status>
</kw>
<status endtime="20170517 20:12:34.318" status="PASS" starttime="20170517 20:12:34.037"></status>
</kw>
<status endtime="20170517 20:12:34.319" status="PASS" starttime="20170517 20:12:34.036"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.320">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170517 20:12:34.320" status="PASS" starttime="20170517 20:12:34.319"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.321">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170517 20:12:34.321" status="PASS" starttime="20170517 20:12:34.321"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.324">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:12:34.324" status="PASS" starttime="20170517 20:12:34.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.325">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:12:34.325" status="PASS" starttime="20170517 20:12:34.324"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.325">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:12:34.325" status="PASS" starttime="20170517 20:12:34.325"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.326">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:12:34.326" status="PASS" starttime="20170517 20:12:34.326"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.513">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:12:34.513" status="PASS" starttime="20170517 20:12:34.327"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:34.513">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:12:34.513">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:34.513" status="PASS" starttime="20170517 20:12:34.326"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.514">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:34.514" status="PASS" starttime="20170517 20:12:34.514"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.515">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:34.515" status="PASS" starttime="20170517 20:12:34.515"></status>
</kw>
<status endtime="20170517 20:12:34.515" status="PASS" starttime="20170517 20:12:34.323"></status>
</kw>
<status endtime="20170517 20:12:34.515" status="PASS" starttime="20170517 20:12:34.322"></status>
</kw>
<status endtime="20170517 20:12:34.516" status="PASS" starttime="20170517 20:12:34.322"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.516">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170517 20:12:34.516" status="PASS" starttime="20170517 20:12:34.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.517">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:12:34.517" status="PASS" starttime="20170517 20:12:34.516"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170517 20:12:34.517" status="PASS" starttime="20170517 20:12:34.517"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.519">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170517 20:12:34.519" status="PASS" starttime="20170517 20:12:34.518"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.520">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170517 20:12:34.520" status="PASS" starttime="20170517 20:12:34.519"></status>
</kw>
<status endtime="20170517 20:12:34.520" status="PASS" starttime="20170517 20:12:34.519"></status>
</kw>
<status endtime="20170517 20:12:34.520" status="PASS" starttime="20170517 20:12:34.517"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.969">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170517 20:12:34.970">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:34.970" status="PASS" starttime="20170517 20:12:34.521"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.971">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:34.971" status="PASS" starttime="20170517 20:12:34.971"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.972">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:34.972" status="PASS" starttime="20170517 20:12:34.972"></status>
</kw>
<status endtime="20170517 20:12:34.973" status="PASS" starttime="20170517 20:12:34.972"></status>
</kw>
<status endtime="20170517 20:12:34.973" status="PASS" starttime="20170517 20:12:34.970"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:34.973">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:34.973" status="PASS" starttime="20170517 20:12:34.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.973">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:34.974" status="PASS" starttime="20170517 20:12:34.973"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.974">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:12:34.974">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:12:34.974">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:12:34.974" status="PASS" starttime="20170517 20:12:34.974"></status>
</kw>
<status endtime="20170517 20:12:34.974" status="PASS" starttime="20170517 20:12:34.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170517 20:12:34.975" status="PASS" starttime="20170517 20:12:34.975"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:34.979">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:12:34.980" status="PASS" starttime="20170517 20:12:34.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.980">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:12:34.980" status="PASS" starttime="20170517 20:12:34.980"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.981">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:12:34.981" status="PASS" starttime="20170517 20:12:34.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:34.982">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:12:34.982" status="PASS" starttime="20170517 20:12:34.982"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:35.793">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:12:35.793" status="PASS" starttime="20170517 20:12:34.983"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:35.793">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:12:35.793">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:35.793" status="PASS" starttime="20170517 20:12:34.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:35.795">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:35.795" status="PASS" starttime="20170517 20:12:35.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:35.796">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:35.796" status="PASS" starttime="20170517 20:12:35.795"></status>
</kw>
<status endtime="20170517 20:12:35.796" status="PASS" starttime="20170517 20:12:34.978"></status>
</kw>
<status endtime="20170517 20:12:35.796" status="PASS" starttime="20170517 20:12:34.978"></status>
</kw>
<status endtime="20170517 20:12:35.796" status="PASS" starttime="20170517 20:12:34.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:35.797">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170517 20:12:35.797" status="PASS" starttime="20170517 20:12:35.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:35.801">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:12:35.801" status="PASS" starttime="20170517 20:12:35.800"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:35.803">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:12:35.803" status="PASS" starttime="20170517 20:12:35.803"></status>
</kw>
<status endtime="20170517 20:12:35.804" status="PASS" starttime="20170517 20:12:35.801"></status>
</kw>
<status endtime="20170517 20:12:35.804" status="PASS" starttime="20170517 20:12:35.799"></status>
</kw>
<status endtime="20170517 20:12:35.804" status="PASS" starttime="20170517 20:12:35.798"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:36.095">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:12:36.095">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:36.095" status="PASS" starttime="20170517 20:12:35.804"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:36.097">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:36.098" status="PASS" starttime="20170517 20:12:36.097"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:36.098">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:36.099" status="PASS" starttime="20170517 20:12:36.098"></status>
</kw>
<status endtime="20170517 20:12:36.099" status="PASS" starttime="20170517 20:12:36.098"></status>
</kw>
<status endtime="20170517 20:12:36.099" status="PASS" starttime="20170517 20:12:36.096"></status>
</kw>
<status endtime="20170517 20:12:36.099" status="PASS" starttime="20170517 20:12:36.096"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:36.099">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:36.099" status="PASS" starttime="20170517 20:12:34.977"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:36.100">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:36.100" status="PASS" starttime="20170517 20:12:36.099"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:36.100">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:12:36.100">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:12:36.100">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:12:36.101" status="PASS" starttime="20170517 20:12:36.100"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:36.101">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170517 20:12:36.101" status="PASS" starttime="20170517 20:12:34.976"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:36.101">${host_state} = Off</msg>
<status endtime="20170517 20:12:36.101" status="PASS" starttime="20170517 20:12:34.976"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:12:36.102">Running != Off</msg>
<status endtime="20170517 20:12:36.102" status="FAIL" starttime="20170517 20:12:36.101"></status>
</kw>
<status endtime="20170517 20:12:36.102" status="FAIL" starttime="20170517 20:12:34.976"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:46.111">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:12:46.111" status="PASS" starttime="20170517 20:12:46.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:46.112">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:12:46.112" status="PASS" starttime="20170517 20:12:46.112"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:46.113">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:12:46.113" status="PASS" starttime="20170517 20:12:46.112"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:46.113">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:12:46.113" status="PASS" starttime="20170517 20:12:46.113"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:48.802">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:12:48.802" status="PASS" starttime="20170517 20:12:46.114"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:48.803">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:12:48.803">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:48.803" status="PASS" starttime="20170517 20:12:46.114"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:48.804">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:48.804" status="PASS" starttime="20170517 20:12:48.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:48.805">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:48.805" status="PASS" starttime="20170517 20:12:48.804"></status>
</kw>
<status endtime="20170517 20:12:48.806" status="PASS" starttime="20170517 20:12:46.110"></status>
</kw>
<status endtime="20170517 20:12:48.806" status="PASS" starttime="20170517 20:12:46.110"></status>
</kw>
<status endtime="20170517 20:12:48.806" status="PASS" starttime="20170517 20:12:46.109"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:48.807">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170517 20:12:48.807" status="PASS" starttime="20170517 20:12:48.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:48.810">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:12:48.810" status="PASS" starttime="20170517 20:12:48.809"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:48.812">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:12:48.812" status="PASS" starttime="20170517 20:12:48.811"></status>
</kw>
<status endtime="20170517 20:12:48.812" status="PASS" starttime="20170517 20:12:48.810"></status>
</kw>
<status endtime="20170517 20:12:48.812" status="PASS" starttime="20170517 20:12:48.808"></status>
</kw>
<status endtime="20170517 20:12:48.812" status="PASS" starttime="20170517 20:12:48.807"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:49.432">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:12:49.433">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:49.433" status="PASS" starttime="20170517 20:12:48.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:49.435">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:49.435" status="PASS" starttime="20170517 20:12:49.434"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:49.435">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:49.436" status="PASS" starttime="20170517 20:12:49.435"></status>
</kw>
<status endtime="20170517 20:12:49.436" status="PASS" starttime="20170517 20:12:49.435"></status>
</kw>
<status endtime="20170517 20:12:49.436" status="PASS" starttime="20170517 20:12:49.433"></status>
</kw>
<status endtime="20170517 20:12:49.436" status="PASS" starttime="20170517 20:12:49.433"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:49.436">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:49.436" status="PASS" starttime="20170517 20:12:46.105"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:49.437">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:49.437" status="PASS" starttime="20170517 20:12:49.436"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:49.437">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:12:49.437">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:12:49.437">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:12:49.437" status="PASS" starttime="20170517 20:12:49.437"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:49.438">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170517 20:12:49.438" status="PASS" starttime="20170517 20:12:46.105"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:49.438">${host_state} = Off</msg>
<status endtime="20170517 20:12:49.438" status="PASS" starttime="20170517 20:12:46.104"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:12:49.439">Running != Off</msg>
<status endtime="20170517 20:12:49.439" status="FAIL" starttime="20170517 20:12:49.438"></status>
</kw>
<status endtime="20170517 20:12:49.439" status="FAIL" starttime="20170517 20:12:46.103"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:59.448">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:12:59.449" status="PASS" starttime="20170517 20:12:59.448"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:59.450">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:12:59.450" status="PASS" starttime="20170517 20:12:59.449"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:59.451">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:12:59.451" status="PASS" starttime="20170517 20:12:59.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:59.452">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:12:59.452" status="PASS" starttime="20170517 20:12:59.451"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:59.724">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:12:59.724" status="PASS" starttime="20170517 20:12:59.453"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:59.724">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:12:59.724">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:59.724" status="PASS" starttime="20170517 20:12:59.453"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:59.725">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:59.725" status="PASS" starttime="20170517 20:12:59.725"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:59.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:59.726" status="PASS" starttime="20170517 20:12:59.725"></status>
</kw>
<status endtime="20170517 20:12:59.726" status="PASS" starttime="20170517 20:12:59.447"></status>
</kw>
<status endtime="20170517 20:12:59.726" status="PASS" starttime="20170517 20:12:59.446"></status>
</kw>
<status endtime="20170517 20:12:59.726" status="PASS" starttime="20170517 20:12:59.445"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:59.727">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170517 20:12:59.727" status="PASS" starttime="20170517 20:12:59.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:59.729">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:12:59.729" status="PASS" starttime="20170517 20:12:59.728"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:59.730">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:12:59.730" status="PASS" starttime="20170517 20:12:59.730"></status>
</kw>
<status endtime="20170517 20:12:59.730" status="PASS" starttime="20170517 20:12:59.729"></status>
</kw>
<status endtime="20170517 20:12:59.730" status="PASS" starttime="20170517 20:12:59.728"></status>
</kw>
<status endtime="20170517 20:12:59.730" status="PASS" starttime="20170517 20:12:59.727"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:59.811">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:12:59.811">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:59.811" status="PASS" starttime="20170517 20:12:59.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:59.813">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:59.813" status="PASS" starttime="20170517 20:12:59.812"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:59.814">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:12:59.814" status="PASS" starttime="20170517 20:12:59.814"></status>
</kw>
<status endtime="20170517 20:12:59.814" status="PASS" starttime="20170517 20:12:59.813"></status>
</kw>
<status endtime="20170517 20:12:59.814" status="PASS" starttime="20170517 20:12:59.812"></status>
</kw>
<status endtime="20170517 20:12:59.814" status="PASS" starttime="20170517 20:12:59.811"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:59.815">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:12:59.815" status="PASS" starttime="20170517 20:12:59.444"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:59.815">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:12:59.815" status="PASS" starttime="20170517 20:12:59.815"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:59.816">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:12:59.816">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:12:59.816">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:12:59.816" status="PASS" starttime="20170517 20:12:59.815"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:59.816">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170517 20:12:59.816" status="PASS" starttime="20170517 20:12:59.443"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:12:59.817">${host_state} = Running</msg>
<status endtime="20170517 20:12:59.817" status="PASS" starttime="20170517 20:12:59.442"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170517 20:12:59.817" status="PASS" starttime="20170517 20:12:59.817"></status>
</kw>
<status endtime="20170517 20:12:59.817" status="PASS" starttime="20170517 20:12:59.441"></status>
</kw>
<status endtime="20170517 20:12:59.817" status="PASS" starttime="20170517 20:12:34.975"></status>
</kw>
<status endtime="20170517 20:12:59.818" status="PASS" starttime="20170517 20:12:34.319"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:12:59.822">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:12:59.823" status="PASS" starttime="20170517 20:12:59.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:59.823">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:12:59.823" status="PASS" starttime="20170517 20:12:59.823"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:59.824">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:12:59.824" status="PASS" starttime="20170517 20:12:59.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:12:59.824">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:12:59.824" status="PASS" starttime="20170517 20:12:59.824"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:00.036">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:13:00.036" status="PASS" starttime="20170517 20:12:59.825"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:00.036">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:13:00.036">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:00.036" status="PASS" starttime="20170517 20:12:59.825"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:00.037">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:00.037" status="PASS" starttime="20170517 20:13:00.037"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:00.038">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:00.038" status="PASS" starttime="20170517 20:13:00.037"></status>
</kw>
<status endtime="20170517 20:13:00.038" status="PASS" starttime="20170517 20:12:59.821"></status>
</kw>
<status endtime="20170517 20:13:00.038" status="PASS" starttime="20170517 20:12:59.821"></status>
</kw>
<status endtime="20170517 20:13:00.038" status="PASS" starttime="20170517 20:12:59.820"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:00.039">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:13:00.039" status="PASS" starttime="20170517 20:13:00.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:00.041">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:13:00.041" status="PASS" starttime="20170517 20:13:00.040"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:00.042">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:13:00.042" status="PASS" starttime="20170517 20:13:00.041"></status>
</kw>
<status endtime="20170517 20:13:00.042" status="PASS" starttime="20170517 20:13:00.041"></status>
</kw>
<status endtime="20170517 20:13:00.042" status="PASS" starttime="20170517 20:13:00.039"></status>
</kw>
<status endtime="20170517 20:13:00.042" status="PASS" starttime="20170517 20:13:00.039"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:00.125">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:13:00.125">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:00.125" status="PASS" starttime="20170517 20:13:00.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:00.127">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:13:00.127" status="PASS" starttime="20170517 20:13:00.127"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:00.128">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:13:00.128" status="PASS" starttime="20170517 20:13:00.128"></status>
</kw>
<status endtime="20170517 20:13:00.128" status="PASS" starttime="20170517 20:13:00.127"></status>
</kw>
<status endtime="20170517 20:13:00.129" status="PASS" starttime="20170517 20:13:00.126"></status>
</kw>
<status endtime="20170517 20:13:00.129" status="PASS" starttime="20170517 20:13:00.126"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:00.129">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:00.129" status="PASS" starttime="20170517 20:12:59.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:00.129">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:00.129" status="PASS" starttime="20170517 20:13:00.129"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:00.130">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:13:00.130">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:13:00.130">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:13:00.130" status="PASS" starttime="20170517 20:13:00.130"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:00.130">${state} = Off</msg>
<status endtime="20170517 20:13:00.130" status="PASS" starttime="20170517 20:12:59.819"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:00.131">${boot_progress} = Off</msg>
<status endtime="20170517 20:13:00.131" status="PASS" starttime="20170517 20:12:59.819"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:13:00.131">Off != FW Progress, Starting OS</msg>
<status endtime="20170517 20:13:00.131" status="FAIL" starttime="20170517 20:13:00.131"></status>
</kw>
<status endtime="20170517 20:13:00.132" status="FAIL" starttime="20170517 20:12:59.818"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:10.140">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:13:10.141" status="PASS" starttime="20170517 20:13:10.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:10.142">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:13:10.142" status="PASS" starttime="20170517 20:13:10.141"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:10.143">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:13:10.143" status="PASS" starttime="20170517 20:13:10.143"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:10.144">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:13:10.144" status="PASS" starttime="20170517 20:13:10.144"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:10.382">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:13:10.382" status="PASS" starttime="20170517 20:13:10.145"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:10.383">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:13:10.383">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:10.383" status="PASS" starttime="20170517 20:13:10.145"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:10.384">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:10.384" status="PASS" starttime="20170517 20:13:10.383"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:10.386">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:10.386" status="PASS" starttime="20170517 20:13:10.385"></status>
</kw>
<status endtime="20170517 20:13:10.387" status="PASS" starttime="20170517 20:13:10.139"></status>
</kw>
<status endtime="20170517 20:13:10.387" status="PASS" starttime="20170517 20:13:10.138"></status>
</kw>
<status endtime="20170517 20:13:10.387" status="PASS" starttime="20170517 20:13:10.137"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:10.388">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:13:10.388" status="PASS" starttime="20170517 20:13:10.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:10.391">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:13:10.391" status="PASS" starttime="20170517 20:13:10.390"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:10.393">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:13:10.393" status="PASS" starttime="20170517 20:13:10.393"></status>
</kw>
<status endtime="20170517 20:13:10.393" status="PASS" starttime="20170517 20:13:10.392"></status>
</kw>
<status endtime="20170517 20:13:10.393" status="PASS" starttime="20170517 20:13:10.389"></status>
</kw>
<status endtime="20170517 20:13:10.394" status="PASS" starttime="20170517 20:13:10.388"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:10.477">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:13:10.477">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:10.477" status="PASS" starttime="20170517 20:13:10.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:10.480">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:13:10.480" status="PASS" starttime="20170517 20:13:10.479"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:10.481">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:13:10.481" status="PASS" starttime="20170517 20:13:10.481"></status>
</kw>
<status endtime="20170517 20:13:10.482" status="PASS" starttime="20170517 20:13:10.480"></status>
</kw>
<status endtime="20170517 20:13:10.482" status="PASS" starttime="20170517 20:13:10.478"></status>
</kw>
<status endtime="20170517 20:13:10.482" status="PASS" starttime="20170517 20:13:10.478"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:10.482">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:10.482" status="PASS" starttime="20170517 20:13:10.136"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:10.483">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:10.483" status="PASS" starttime="20170517 20:13:10.483"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:10.484">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:13:10.484">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:13:10.484">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:13:10.484" status="PASS" starttime="20170517 20:13:10.484"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:10.485">${state} = Off</msg>
<status endtime="20170517 20:13:10.485" status="PASS" starttime="20170517 20:13:10.134"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:10.485">${boot_progress} = Off</msg>
<status endtime="20170517 20:13:10.485" status="PASS" starttime="20170517 20:13:10.134"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:13:10.487">Off != FW Progress, Starting OS</msg>
<status endtime="20170517 20:13:10.487" status="FAIL" starttime="20170517 20:13:10.485"></status>
</kw>
<status endtime="20170517 20:13:10.487" status="FAIL" starttime="20170517 20:13:10.133"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:20.498">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:13:20.499" status="PASS" starttime="20170517 20:13:20.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:20.499">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:13:20.499" status="PASS" starttime="20170517 20:13:20.499"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:20.500">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:13:20.500" status="PASS" starttime="20170517 20:13:20.500"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:20.501">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:13:20.501" status="PASS" starttime="20170517 20:13:20.500"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:20.752">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:13:20.752" status="PASS" starttime="20170517 20:13:20.501"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:20.752">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:13:20.752">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:20.752" status="PASS" starttime="20170517 20:13:20.501"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:20.753">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:20.753" status="PASS" starttime="20170517 20:13:20.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:20.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:20.754" status="PASS" starttime="20170517 20:13:20.753"></status>
</kw>
<status endtime="20170517 20:13:20.754" status="PASS" starttime="20170517 20:13:20.497"></status>
</kw>
<status endtime="20170517 20:13:20.754" status="PASS" starttime="20170517 20:13:20.497"></status>
</kw>
<status endtime="20170517 20:13:20.754" status="PASS" starttime="20170517 20:13:20.493"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:20.755">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:13:20.755" status="PASS" starttime="20170517 20:13:20.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:20.757">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:13:20.757" status="PASS" starttime="20170517 20:13:20.756"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:20.758">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:13:20.758" status="PASS" starttime="20170517 20:13:20.757"></status>
</kw>
<status endtime="20170517 20:13:20.758" status="PASS" starttime="20170517 20:13:20.757"></status>
</kw>
<status endtime="20170517 20:13:20.758" status="PASS" starttime="20170517 20:13:20.755"></status>
</kw>
<status endtime="20170517 20:13:20.758" status="PASS" starttime="20170517 20:13:20.755"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:20.850">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:13:20.850">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:20.850" status="PASS" starttime="20170517 20:13:20.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:20.859">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:13:20.859" status="PASS" starttime="20170517 20:13:20.855"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:20.865">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:13:20.865" status="PASS" starttime="20170517 20:13:20.864"></status>
</kw>
<status endtime="20170517 20:13:20.865" status="PASS" starttime="20170517 20:13:20.860"></status>
</kw>
<status endtime="20170517 20:13:20.865" status="PASS" starttime="20170517 20:13:20.853"></status>
</kw>
<status endtime="20170517 20:13:20.865" status="PASS" starttime="20170517 20:13:20.851"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:20.866">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:20.866" status="PASS" starttime="20170517 20:13:20.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:20.866">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:20.866" status="PASS" starttime="20170517 20:13:20.866"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:20.868">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:13:20.868">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:13:20.868">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:13:20.868" status="PASS" starttime="20170517 20:13:20.867"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:20.869">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:13:20.870" status="PASS" starttime="20170517 20:13:20.491"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:20.870">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:13:20.870" status="PASS" starttime="20170517 20:13:20.491"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:13:20.871">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170517 20:13:20.871" status="FAIL" starttime="20170517 20:13:20.870"></status>
</kw>
<status endtime="20170517 20:13:20.871" status="FAIL" starttime="20170517 20:13:20.490"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:30.879">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:13:30.879" status="PASS" starttime="20170517 20:13:30.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:30.880">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:13:30.880" status="PASS" starttime="20170517 20:13:30.880"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:30.881">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:13:30.881" status="PASS" starttime="20170517 20:13:30.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:30.881">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:13:30.881" status="PASS" starttime="20170517 20:13:30.881"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:31.114">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:13:31.114" status="PASS" starttime="20170517 20:13:30.882"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:31.115">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:13:31.115">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:31.115" status="PASS" starttime="20170517 20:13:30.882"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:31.115">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:31.116" status="PASS" starttime="20170517 20:13:31.115"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:31.116">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:31.116" status="PASS" starttime="20170517 20:13:31.116"></status>
</kw>
<status endtime="20170517 20:13:31.116" status="PASS" starttime="20170517 20:13:30.878"></status>
</kw>
<status endtime="20170517 20:13:31.116" status="PASS" starttime="20170517 20:13:30.877"></status>
</kw>
<status endtime="20170517 20:13:31.117" status="PASS" starttime="20170517 20:13:30.877"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:31.117">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:13:31.117" status="PASS" starttime="20170517 20:13:31.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:31.119">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:13:31.119" status="PASS" starttime="20170517 20:13:31.118"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:31.120">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:13:31.120" status="PASS" starttime="20170517 20:13:31.120"></status>
</kw>
<status endtime="20170517 20:13:31.120" status="PASS" starttime="20170517 20:13:31.119"></status>
</kw>
<status endtime="20170517 20:13:31.120" status="PASS" starttime="20170517 20:13:31.118"></status>
</kw>
<status endtime="20170517 20:13:31.121" status="PASS" starttime="20170517 20:13:31.117"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:31.202">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:13:31.202">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:31.202" status="PASS" starttime="20170517 20:13:31.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:31.204">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:13:31.204" status="PASS" starttime="20170517 20:13:31.203"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:31.205">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:13:31.205" status="PASS" starttime="20170517 20:13:31.205"></status>
</kw>
<status endtime="20170517 20:13:31.205" status="PASS" starttime="20170517 20:13:31.204"></status>
</kw>
<status endtime="20170517 20:13:31.205" status="PASS" starttime="20170517 20:13:31.203"></status>
</kw>
<status endtime="20170517 20:13:31.205" status="PASS" starttime="20170517 20:13:31.202"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:31.205">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:31.205" status="PASS" starttime="20170517 20:13:30.876"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:31.206">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:31.206" status="PASS" starttime="20170517 20:13:31.206"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:31.207">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:13:31.207">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:13:31.207">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:13:31.207" status="PASS" starttime="20170517 20:13:31.206"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:31.207">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:13:31.207" status="PASS" starttime="20170517 20:13:30.875"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:31.207">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:13:31.207" status="PASS" starttime="20170517 20:13:30.875"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:13:31.208">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170517 20:13:31.208" status="FAIL" starttime="20170517 20:13:31.208"></status>
</kw>
<status endtime="20170517 20:13:31.208" status="FAIL" starttime="20170517 20:13:30.873"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:41.217">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:13:41.219" status="PASS" starttime="20170517 20:13:41.217"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:41.220">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:13:41.220" status="PASS" starttime="20170517 20:13:41.219"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:41.220">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:13:41.220" status="PASS" starttime="20170517 20:13:41.220"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:41.221">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:13:41.222" status="PASS" starttime="20170517 20:13:41.221"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:41.533">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:13:41.533" status="PASS" starttime="20170517 20:13:41.222"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:41.533">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:13:41.533">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:41.533" status="PASS" starttime="20170517 20:13:41.222"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:41.535">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:41.535" status="PASS" starttime="20170517 20:13:41.534"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:41.536">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:41.536" status="PASS" starttime="20170517 20:13:41.536"></status>
</kw>
<status endtime="20170517 20:13:41.537" status="PASS" starttime="20170517 20:13:41.215"></status>
</kw>
<status endtime="20170517 20:13:41.537" status="PASS" starttime="20170517 20:13:41.215"></status>
</kw>
<status endtime="20170517 20:13:41.537" status="PASS" starttime="20170517 20:13:41.214"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:41.538">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:13:41.538" status="PASS" starttime="20170517 20:13:41.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:41.542">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:13:41.542" status="PASS" starttime="20170517 20:13:41.541"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:41.544">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:13:41.544" status="PASS" starttime="20170517 20:13:41.543"></status>
</kw>
<status endtime="20170517 20:13:41.545" status="PASS" starttime="20170517 20:13:41.543"></status>
</kw>
<status endtime="20170517 20:13:41.545" status="PASS" starttime="20170517 20:13:41.540"></status>
</kw>
<status endtime="20170517 20:13:41.545" status="PASS" starttime="20170517 20:13:41.538"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:41.655">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:13:41.656">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:41.656" status="PASS" starttime="20170517 20:13:41.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:41.659">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:13:41.659" status="PASS" starttime="20170517 20:13:41.657"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:41.660">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:13:41.661" status="PASS" starttime="20170517 20:13:41.660"></status>
</kw>
<status endtime="20170517 20:13:41.661" status="PASS" starttime="20170517 20:13:41.659"></status>
</kw>
<status endtime="20170517 20:13:41.661" status="PASS" starttime="20170517 20:13:41.657"></status>
</kw>
<status endtime="20170517 20:13:41.661" status="PASS" starttime="20170517 20:13:41.656"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:41.661">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:41.661" status="PASS" starttime="20170517 20:13:41.213"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:41.662">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:41.662" status="PASS" starttime="20170517 20:13:41.661"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:41.662">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:13:41.662">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:13:41.662">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:13:41.663" status="PASS" starttime="20170517 20:13:41.662"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:41.663">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:13:41.663" status="PASS" starttime="20170517 20:13:41.212"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:41.663">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:13:41.663" status="PASS" starttime="20170517 20:13:41.211"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:13:41.664">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170517 20:13:41.664" status="FAIL" starttime="20170517 20:13:41.663"></status>
</kw>
<status endtime="20170517 20:13:41.664" status="FAIL" starttime="20170517 20:13:41.209"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:51.672">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:13:51.672" status="PASS" starttime="20170517 20:13:51.671"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:51.673">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:13:51.673" status="PASS" starttime="20170517 20:13:51.672"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:51.673">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:13:51.673" status="PASS" starttime="20170517 20:13:51.673"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:51.674">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:13:51.674" status="PASS" starttime="20170517 20:13:51.674"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:51.875">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:13:51.875" status="PASS" starttime="20170517 20:13:51.675"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:51.875">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:13:51.876">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:51.876" status="PASS" starttime="20170517 20:13:51.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:51.876">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:51.876" status="PASS" starttime="20170517 20:13:51.876"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:51.877">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:51.877" status="PASS" starttime="20170517 20:13:51.877"></status>
</kw>
<status endtime="20170517 20:13:51.877" status="PASS" starttime="20170517 20:13:51.671"></status>
</kw>
<status endtime="20170517 20:13:51.877" status="PASS" starttime="20170517 20:13:51.670"></status>
</kw>
<status endtime="20170517 20:13:51.877" status="PASS" starttime="20170517 20:13:51.669"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:51.878">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:13:51.878" status="PASS" starttime="20170517 20:13:51.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:51.881">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:13:51.881" status="PASS" starttime="20170517 20:13:51.880"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:51.882">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:13:51.882" status="PASS" starttime="20170517 20:13:51.882"></status>
</kw>
<status endtime="20170517 20:13:51.882" status="PASS" starttime="20170517 20:13:51.881"></status>
</kw>
<status endtime="20170517 20:13:51.882" status="PASS" starttime="20170517 20:13:51.879"></status>
</kw>
<status endtime="20170517 20:13:51.882" status="PASS" starttime="20170517 20:13:51.879"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:51.950">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:13:51.950">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:51.950" status="PASS" starttime="20170517 20:13:51.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:51.952">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:13:51.952" status="PASS" starttime="20170517 20:13:51.952"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:51.953">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:13:51.953" status="PASS" starttime="20170517 20:13:51.953"></status>
</kw>
<status endtime="20170517 20:13:51.953" status="PASS" starttime="20170517 20:13:51.952"></status>
</kw>
<status endtime="20170517 20:13:51.953" status="PASS" starttime="20170517 20:13:51.951"></status>
</kw>
<status endtime="20170517 20:13:51.954" status="PASS" starttime="20170517 20:13:51.951"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:51.954">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:13:51.954" status="PASS" starttime="20170517 20:13:51.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:13:51.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:13:51.954" status="PASS" starttime="20170517 20:13:51.954"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:13:51.955">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:13:51.955">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:13:51.955">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:13:51.955" status="PASS" starttime="20170517 20:13:51.955"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:51.955">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:13:51.956" status="PASS" starttime="20170517 20:13:51.668"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:13:51.956">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:13:51.956" status="PASS" starttime="20170517 20:13:51.667"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:13:51.956">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170517 20:13:51.956" status="FAIL" starttime="20170517 20:13:51.956"></status>
</kw>
<status endtime="20170517 20:13:51.957" status="FAIL" starttime="20170517 20:13:51.666"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:01.966">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:14:01.966" status="PASS" starttime="20170517 20:14:01.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:01.967">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:14:01.967" status="PASS" starttime="20170517 20:14:01.966"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:01.967">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:14:01.967" status="PASS" starttime="20170517 20:14:01.967"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:01.968">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:14:01.968" status="PASS" starttime="20170517 20:14:01.968"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:02.166">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:14:02.167" status="PASS" starttime="20170517 20:14:01.969"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:02.167">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:02.167">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:02.167" status="PASS" starttime="20170517 20:14:01.968"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:02.169">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:02.169" status="PASS" starttime="20170517 20:14:02.168"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:02.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:02.170" status="PASS" starttime="20170517 20:14:02.169"></status>
</kw>
<status endtime="20170517 20:14:02.170" status="PASS" starttime="20170517 20:14:01.964"></status>
</kw>
<status endtime="20170517 20:14:02.170" status="PASS" starttime="20170517 20:14:01.964"></status>
</kw>
<status endtime="20170517 20:14:02.171" status="PASS" starttime="20170517 20:14:01.963"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:02.172">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:14:02.172" status="PASS" starttime="20170517 20:14:02.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:02.177">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:14:02.177" status="PASS" starttime="20170517 20:14:02.176"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:02.179">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:14:02.179" status="PASS" starttime="20170517 20:14:02.178"></status>
</kw>
<status endtime="20170517 20:14:02.179" status="PASS" starttime="20170517 20:14:02.177"></status>
</kw>
<status endtime="20170517 20:14:02.180" status="PASS" starttime="20170517 20:14:02.174"></status>
</kw>
<status endtime="20170517 20:14:02.180" status="PASS" starttime="20170517 20:14:02.173"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:02.250">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:14:02.250">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:02.250" status="PASS" starttime="20170517 20:14:02.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:02.255">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:14:02.255" status="PASS" starttime="20170517 20:14:02.252"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:02.256">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:14:02.256" status="PASS" starttime="20170517 20:14:02.256"></status>
</kw>
<status endtime="20170517 20:14:02.256" status="PASS" starttime="20170517 20:14:02.255"></status>
</kw>
<status endtime="20170517 20:14:02.256" status="PASS" starttime="20170517 20:14:02.251"></status>
</kw>
<status endtime="20170517 20:14:02.257" status="PASS" starttime="20170517 20:14:02.251"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:02.257">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:02.257" status="PASS" starttime="20170517 20:14:01.962"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:02.257">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:02.257" status="PASS" starttime="20170517 20:14:02.257"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:02.258">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:14:02.258">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:14:02.258">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:14:02.258" status="PASS" starttime="20170517 20:14:02.258"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:02.259">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:14:02.259" status="PASS" starttime="20170517 20:14:01.961"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:02.259">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170517 20:14:02.259" status="PASS" starttime="20170517 20:14:01.961"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:02.259">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170517 20:14:02.260" status="FAIL" starttime="20170517 20:14:02.259"></status>
</kw>
<status endtime="20170517 20:14:02.260" status="FAIL" starttime="20170517 20:14:01.958"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:12.270">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:14:12.271" status="PASS" starttime="20170517 20:14:12.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.271">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:14:12.271" status="PASS" starttime="20170517 20:14:12.271"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.272">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:14:12.272" status="PASS" starttime="20170517 20:14:12.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.272">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:14:12.272" status="PASS" starttime="20170517 20:14:12.272"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:12.452">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:14:12.452" status="PASS" starttime="20170517 20:14:12.273"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:12.452">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:12.452">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:12.452" status="PASS" starttime="20170517 20:14:12.273"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:12.453">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:12.453" status="PASS" starttime="20170517 20:14:12.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:12.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:12.454" status="PASS" starttime="20170517 20:14:12.453"></status>
</kw>
<status endtime="20170517 20:14:12.454" status="PASS" starttime="20170517 20:14:12.269"></status>
</kw>
<status endtime="20170517 20:14:12.454" status="PASS" starttime="20170517 20:14:12.268"></status>
</kw>
<status endtime="20170517 20:14:12.454" status="PASS" starttime="20170517 20:14:12.268"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.455">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170517 20:14:12.455" status="PASS" starttime="20170517 20:14:12.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.457">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:14:12.457" status="PASS" starttime="20170517 20:14:12.456"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:12.458">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170517 20:14:12.458" status="PASS" starttime="20170517 20:14:12.458"></status>
</kw>
<status endtime="20170517 20:14:12.458" status="PASS" starttime="20170517 20:14:12.457"></status>
</kw>
<status endtime="20170517 20:14:12.459" status="PASS" starttime="20170517 20:14:12.456"></status>
</kw>
<status endtime="20170517 20:14:12.459" status="PASS" starttime="20170517 20:14:12.455"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.566">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:14:12.566">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:12.566" status="PASS" starttime="20170517 20:14:12.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.568">${msg} = Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:14:12.568" status="PASS" starttime="20170517 20:14:12.568"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:12.569">Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:14:12.569" status="PASS" starttime="20170517 20:14:12.569"></status>
</kw>
<status endtime="20170517 20:14:12.570" status="PASS" starttime="20170517 20:14:12.569"></status>
</kw>
<status endtime="20170517 20:14:12.570" status="PASS" starttime="20170517 20:14:12.567"></status>
</kw>
<status endtime="20170517 20:14:12.570" status="PASS" starttime="20170517 20:14:12.567"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:12.570">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:12.570" status="PASS" starttime="20170517 20:14:12.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:12.571">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:12.571" status="PASS" starttime="20170517 20:14:12.570"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.571">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:14:12.571">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:14:12.571">${content} = {u'data': u'FW Progress, Starting OS', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:14:12.571" status="PASS" starttime="20170517 20:14:12.571"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:12.572">${state} = FW Progress, Starting OS</msg>
<status endtime="20170517 20:14:12.572" status="PASS" starttime="20170517 20:14:12.266"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:12.572">${boot_progress} = FW Progress, Starting OS</msg>
<status endtime="20170517 20:14:12.572" status="PASS" starttime="20170517 20:14:12.266"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<status endtime="20170517 20:14:12.573" status="PASS" starttime="20170517 20:14:12.572"></status>
</kw>
<status endtime="20170517 20:14:12.573" status="PASS" starttime="20170517 20:14:12.265"></status>
</kw>
<status endtime="20170517 20:14:12.573" status="PASS" starttime="20170517 20:12:59.818"></status>
</kw>
<kw name="Flush REST Sessions" library="utils">
<doc>Removes all the active session objects</doc>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170517 20:14:12.573">Delete All Sessions</msg>
<status endtime="20170517 20:14:12.576" status="PASS" starttime="20170517 20:14:12.573"></status>
</kw>
<status endtime="20170517 20:14:12.576" status="PASS" starttime="20170517 20:14:12.573"></status>
</kw>
<status endtime="20170517 20:14:12.577" status="PASS" starttime="20170517 20:12:21.472"></status>
</kw>
<status endtime="20170517 20:14:12.577" status="PASS" starttime="20170517 20:10:21.145"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:12.582">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:14:12.582" status="PASS" starttime="20170517 20:14:12.582"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.583">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:14:12.583" status="PASS" starttime="20170517 20:14:12.583"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.584">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:14:12.584" status="PASS" starttime="20170517 20:14:12.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.584">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:14:12.584" status="PASS" starttime="20170517 20:14:12.584"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:12.826">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:14:12.826" status="PASS" starttime="20170517 20:14:12.585"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:12.826">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:12.826">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:12.826" status="PASS" starttime="20170517 20:14:12.585"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:12.827">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:12.827" status="PASS" starttime="20170517 20:14:12.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:12.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:12.828" status="PASS" starttime="20170517 20:14:12.827"></status>
</kw>
<status endtime="20170517 20:14:12.828" status="PASS" starttime="20170517 20:14:12.581"></status>
</kw>
<status endtime="20170517 20:14:12.828" status="PASS" starttime="20170517 20:14:12.581"></status>
</kw>
<status endtime="20170517 20:14:12.828" status="PASS" starttime="20170517 20:14:12.580"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.829">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170517 20:14:12.829" status="PASS" starttime="20170517 20:14:12.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.831">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:14:12.831" status="PASS" starttime="20170517 20:14:12.831"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:12.832">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:14:12.832" status="PASS" starttime="20170517 20:14:12.832"></status>
</kw>
<status endtime="20170517 20:14:12.832" status="PASS" starttime="20170517 20:14:12.832"></status>
</kw>
<status endtime="20170517 20:14:12.833" status="PASS" starttime="20170517 20:14:12.830"></status>
</kw>
<status endtime="20170517 20:14:12.833" status="PASS" starttime="20170517 20:14:12.829"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.897">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:14:12.897">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:12.897" status="PASS" starttime="20170517 20:14:12.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.899">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:14:12.899" status="PASS" starttime="20170517 20:14:12.899"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:12.900">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:14:12.900" status="PASS" starttime="20170517 20:14:12.900"></status>
</kw>
<status endtime="20170517 20:14:12.900" status="PASS" starttime="20170517 20:14:12.899"></status>
</kw>
<status endtime="20170517 20:14:12.900" status="PASS" starttime="20170517 20:14:12.898"></status>
</kw>
<status endtime="20170517 20:14:12.901" status="PASS" starttime="20170517 20:14:12.898"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:12.901">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:12.901" status="PASS" starttime="20170517 20:14:12.579"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:12.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:12.901" status="PASS" starttime="20170517 20:14:12.901"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.902">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:14:12.902">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:14:12.902">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:14:12.902" status="PASS" starttime="20170517 20:14:12.902"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:12.903">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170517 20:14:12.903" status="PASS" starttime="20170517 20:14:12.579"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:12.903">${host_state} = Running</msg>
<status endtime="20170517 20:14:12.903" status="PASS" starttime="20170517 20:14:12.578"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:12.904">Running != Quiesced</msg>
<status endtime="20170517 20:14:12.905" status="FAIL" starttime="20170517 20:14:12.904"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:12.905">${status} = False</msg>
<status endtime="20170517 20:14:12.905" status="PASS" starttime="20170517 20:14:12.904"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:12.905">${status} = False</msg>
<status endtime="20170517 20:14:12.905" status="PASS" starttime="20170517 20:14:12.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170517 20:14:12.906" status="PASS" starttime="20170517 20:14:12.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170517 20:14:12.906" status="PASS" starttime="20170517 20:14:12.906"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.915">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170517 20:14:12.915" status="PASS" starttime="20170517 20:14:12.907"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.916">${FFDC_DIR_PATH} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201020841407_TestsSecurityTestSsl/20170517201020841407_TestSSLConnection/</msg>
<status endtime="20170517 20:14:12.916" status="PASS" starttime="20170517 20:14:12.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170517 20:14:12.916" status="PASS" starttime="20170517 20:14:12.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170517 20:14:12.917" status="PASS" starttime="20170517 20:14:12.917"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:12.918">Directory '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs"&gt;/tmp/fspcibld/16253/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170517 20:14:12.918" status="PASS" starttime="20170517 20:14:12.917"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:12.919">File '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170517 20:14:12.919" status="PASS" starttime="20170517 20:14:12.918"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:12.919">${exist} = True</msg>
<status endtime="20170517 20:14:12.919" status="PASS" starttime="20170517 20:14:12.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170517 20:14:12.919" status="PASS" starttime="20170517 20:14:12.919"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170517 20:14:12.920" status="PASS" starttime="20170517 20:14:12.919"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.921">${cur_time} = 2017-05-17 20:14:12:920596</msg>
<status endtime="20170517 20:14:12.921" status="PASS" starttime="20170517 20:14:12.920"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.922">${cur_time} = 20170517201412920596</msg>
<status endtime="20170517 20:14:12.922" status="PASS" starttime="20170517 20:14:12.921"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:12.922">${cur_time} = 20170517201412920596</msg>
<status endtime="20170517 20:14:12.922" status="PASS" starttime="20170517 20:14:12.920"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:12.923">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:12.923" status="PASS" starttime="20170517 20:14:12.922"></status>
</kw>
<status endtime="20170517 20:14:12.923" status="PASS" starttime="20170517 20:14:12.907"></status>
</kw>
<status endtime="20170517 20:14:12.923" status="PASS" starttime="20170517 20:14:12.577"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.925">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:14:12.925" status="PASS" starttime="20170517 20:14:12.924"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.925">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:14:12.926" status="PASS" starttime="20170517 20:14:12.925"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:12.926">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:14:12.926" status="PASS" starttime="20170517 20:14:12.924"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.927">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170517 20:14:12.927" status="PASS" starttime="20170517 20:14:12.926"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:14:12.936" status="PASS" starttime="20170517 20:14:12.927"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.942">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:14:12.953">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:14:12.953">${output} = /tmp/fspcibld/16253/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170517 20:14:12.954" status="PASS" starttime="20170517 20:14:12.936"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170517 20:14:12.985" status="PASS" starttime="20170517 20:14:12.963"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170517 20:14:12.986" status="PASS" starttime="20170517 20:14:12.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.987">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170517 20:14:12.987" status="PASS" starttime="20170517 20:14:12.987"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:12.987">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170517 20:14:12.987" status="PASS" starttime="20170517 20:14:12.926"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:12.988">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170517 20:14:12.988" status="PASS" starttime="20170517 20:14:12.988"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:14:12.995" status="PASS" starttime="20170517 20:14:12.988"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.000">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:14:13.044">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:14:13.044">${os_con_pid} = 189</msg>
<status endtime="20170517 20:14:13.044" status="PASS" starttime="20170517 20:14:12.996"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170517 20:14:13.054" status="PASS" starttime="20170517 20:14:13.046"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.055">${cmd_buf} = kill -9 189</msg>
<status endtime="20170517 20:14:13.055" status="PASS" starttime="20170517 20:14:13.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:14:13.066" status="PASS" starttime="20170517 20:14:13.057"></status>
</kw>
<status endtime="20170517 20:14:13.066" status="PASS" starttime="20170517 20:14:13.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:13.081">Running command 'kill -9 189 2&gt;&amp;1'.</msg>
<status endtime="20170517 20:14:13.095" status="PASS" starttime="20170517 20:14:13.067"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:13.099">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:14:13.099">${output} = </msg>
<status endtime="20170517 20:14:13.099" status="PASS" starttime="20170517 20:14:13.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170517 20:14:13.138" status="PASS" starttime="20170517 20:14:13.115"></status>
</kw>
<status endtime="20170517 20:14:13.138" status="PASS" starttime="20170517 20:14:13.109"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.139">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status endtime="20170517 20:14:13.139" status="PASS" starttime="20170517 20:14:13.139"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:14:13.149" status="PASS" starttime="20170517 20:14:13.139"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.154">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:14:13.157">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:14:13.157">${output} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:UD0knbv0n/aYnjyQpXhvRYFaEcXJn/QD7sMuqogAYDc.
Are ...</msg>
<status endtime="20170517 20:14:13.158" status="PASS" starttime="20170517 20:14:13.150"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status endtime="20170517 20:14:13.169" status="PASS" starttime="20170517 20:14:13.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status endtime="20170517 20:14:13.170" status="PASS" starttime="20170517 20:14:13.169"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:13.170">${sol_log} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:UD0knbv0n/aYnjyQpXhvRYFaEcXJn/QD7sMuqogAYDc.
Are ...</msg>
<status endtime="20170517 20:14:13.170" status="PASS" starttime="20170517 20:14:12.923"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:13.171">spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:UD0knbv0n/aYnjyQpXhvRYFaEcXJn/QD7sMuqogAYDc.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.49918|secure|SecureROM invalid - skipping functionality
 12.14991|ISTEP  6. 5
 12.83424|ISTEP  6. 6
 12.83483|ISTEP  6. 7
 13.60056|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.60057|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.90485|ISTEP  6. 8
 13.95723|SECURE|Security Access Bit&gt; 0x0000000000000000
 13.95724|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 13.95741|ISTEP  6. 9
 14.59227|ISTEP  6.10
 14.64295|ISTEP  6.11
 14.64402|ISTEP  6.12
 14.89898|ISTEP  7. 2
 16.91758|ISTEP  7. 3
 17.56046|ISTEP  7. 4
 20.37906|ISTEP  7. 5
 20.45840|ISTEP  8. 1
 20.88801|ISTEP  8. 2
 20.94033|ISTEP  8. 3
 21.01828|ISTEP  8. 4
 31.42449|ISTEP  8. 5
 31.45077|ISTEP  8. 6
 31.45354|ISTEP  8. 7
 31.63908|ISTEP  8. 8
 31.66543|ISTEP  8. 9
 31.79245|ISTEP  8.10
 31.79410|ISTEP  8.11
 31.79579|ISTEP  8.12
 32.27193|ISTEP  8.13
 35.97605|ISTEP  8.14
 35.97822|ISTEP  8.15
 35.97989|ISTEP  8.16
 36.24119|ISTEP  8.17
 36.53568|================================================
 36.53569|Error reported by istep (0x1700) PLID 0x9000000B
 36.56095|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 36.56095|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 36.56096|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 36.56097|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 36.56098|  UserData2  Target PEC HUID : 0x0000000000000000
 36.58621|------------------------------------------------
 36.58622|  Callout type             : Procedure Callout
 36.58623|  Procedure                : EPUB_PRC_HB_CODE
 36.58623|  Priority                 : SRCI_PRIORITY_HIGH
 36.58624|------------------------------------------------
 36.58625|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 36.58626|================================================
 37.58352|ISTEP  8.18
 37.58535|ISTEP  8.19
 37.60059|ISTEP  8.20
 37.60889|ISTEP  9. 1
 37.73469|ISTEP  9. 2
 38.83166|ISTEP  9. 3
 38.85760|ISTEP  9. 4
 39.20144|ISTEP  9. 5
 39.22747|ISTEP  9. 6
 39.28094|ISTEP  9. 7
 39.37010|ISTEP  9. 8
 39.40087|ISTEP 10. 1
 39.97829|ISTEP 10. 2
 40.07763|================================================
 40.07764|Error reported by i2c (0x0700) PLID 0x9000000C
 40.10362|  Timed out waiting for command complete.
 40.10363|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 40.10364|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 40.13037|  UserData1  Status Register Value : 0x0001000000050001
 40.13038|  UserData2  Master Target : 0x0200ffff0190004d
 40.13039|------------------------------------------------
 40.13039|  Callout type             : Hardware Callout
 40.13040|  CPU id                   : 10
 40.13041|  Target                   : Physical:/Sys0/Node0/Proc1
 40.13042|  Deconfig State           : NO_DECONFIG
 40.13043|  GARD Error Type          : GARD_NULL
 40.13044|  Priority                 : SRCI_PRIORITY_HIGH
 40.13045|------------------------------------------------
 40.13046|  Callout type             : Procedure Callout
 40.13047|  Procedure                : EPUB_PRC_HB_CODE
 40.13047|  Priority                 : SRCI_PRIORITY_LOW
 40.13048|------------------------------------------------
 40.13049|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 40.13050|================================================
 42.86474|ISTEP 10. 3
 42.87464|ISTEP 11. 1
 42.90172|ISTEP 12. 1
 42.95381|ISTEP 13. 1
 43.10969|ISTEP 13. 2
 43.21607|ISTEP 13. 3
 43.27657|ISTEP 13. 4
 43.30095|ISTEP 13. 6
 43.51013|ISTEP 13. 7
 43.51186|ISTEP 13. 8
 45.41473|ISTEP 13. 9
 45.98133|ISTEP 13.10
 47.21044|ISTEP 13.11
 48.09411|ISTEP 13.12
 48.09651|ISTEP 13.13
 48.21421|ISTEP 14. 1
 65.73248|ISTEP 14. 2
 65.88862|ISTEP 14. 3
 66.02259|ISTEP 14. 4
 66.02494|ISTEP 14. 5
 66.38721|ISTEP 14. 6
 66.44166|ISTEP 14. 7
 66.44693|ISTEP 15. 1
 70.63520|ISTEP 15. 2
 70.66306|ISTEP 15. 3
 70.72088|ISTEP 15. 4
 70.88169|ISTEP 16. 1
  0.03074|ISTEP 16. 2
 72.98815|ISTEP 16. 3
 73.01832|ISTEP 16. 4
 73.12488|ISTEP 16. 5
 73.19853|ISTEP 18.11
 74.04259|ISTEP 18.12
 74.07069|ISTEP 20. 1
 76.01958|ISTEP 20. 2
 79.40596|ISTEP 21. 1


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.37965|secure|SecureROM invalid - skipping functionality
 12.00877|ISTEP  6. 5
 12.69231|ISTEP  6. 6
 12.69280|ISTEP  6. 7
 13.45782|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.45783|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.76195|ISTEP  6. 8
 13.81401|SECURE|Security Access Bit&gt; 0x0000000000000000
 13.81402|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 13.81418|ISTEP  6. 9
 14.44942|ISTEP  6.10
 14.50075|ISTEP  6.11
 14.50132|ISTEP  6.12
 14.75582|ISTEP  7. 2
 16.77134|ISTEP  7. 3
 17.41589|ISTEP  7. 4
 20.23198|ISTEP  7. 5
 20.31052|ISTEP  8. 1
 20.73937|ISTEP  8. 2
 20.79102|ISTEP  8. 3
 20.87190|ISTEP  8. 4
 31.27959|ISTEP  8. 5
 31.30503|ISTEP  8. 6
 31.30922|ISTEP  8. 7
 31.49457|ISTEP  8. 8
 31.52092|ISTEP  8. 9
 31.64800|ISTEP  8.10
 31.64934|ISTEP  8.11
 31.64979|ISTEP  8.12
 32.12422|ISTEP  8.13
 35.82628|ISTEP  8.14
 35.82859|ISTEP  8.15
 35.83053|ISTEP  8.16
 36.09240|ISTEP  8.17
 36.38822|================================================
 36.38823|Error reported by istep (0x1700) PLID 0x9000000E
 36.41373|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 36.41374|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 36.41375|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 36.41376|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 36.41376|  UserData2  Target PEC HUID : 0x0000000000000000
 36.43956|------------------------------------------------
 36.43957|  Callout type             : Procedure Callout
 36.43958|  Procedure                : EPUB_PRC_HB_CODE
 36.43958|  Priority                 : SRCI_PRIORITY_HIGH
 36.43959|------------------------------------------------
 36.43960|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 36.43961|================================================
 37.43540|ISTEP  8.18
 37.43677|ISTEP  8.19
 37.45281|ISTEP  8.20
 37.46107|ISTEP  9. 1
 37.58678|ISTEP  9. 2
 38.67459|ISTEP  9. 3
 38.70026|ISTEP  9. 4
 39.04252|ISTEP  9. 5
 39.06851|ISTEP  9. 6
 39.12129|ISTEP  9. 7
 39.21044|ISTEP  9. 8
 39.24123|ISTEP 10. 1
 39.84312|ISTEP 10. 2
 39.94150|================================================
 39.94150|Error reported by i2c (0x0700) PLID 0x9000000F
 39.96809|  Timed out waiting for command complete.
 39.96810|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 39.96811|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 39.99417|  UserData1  Status Register Value : 0x0001000000050001
 39.99418|  UserData2  Master Target : 0x0200ffff0190004d
 39.99418|------------------------------------------------
 39.99419|  Callout type             : Hardware Callout
 39.99420|  CPU id                   : 9
 39.99421|  Target                   : Physical:/Sys0/Node0/Proc1
 39.99422|  Deconfig State           : NO_DECONFIG
 39.99423|  GARD Error Type          : GARD_NULL
 39.99423|  Priority                 : SRCI_PRIORITY_HIGH
 39.99424|------------------------------------------------
 39.99425|  Callout type             : Procedure Callout
 39.99426|  Procedure                : EPUB_PRC_HB_CODE
 39.99427|  Priority                 : SRCI_PRIORITY_LOW
 39.99428|------------------------------------------------
 39.99429|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 39.99429|================================================
 42.73253|ISTEP 10. 3
 42.73549|ISTEP 11. 1
 42.76273|ISTEP 12. 1
 42.81600|ISTEP 13. 1
 42.97122|ISTEP 13. 2
 43.07719|ISTEP 13. 3
 43.15629|ISTEP 13. 4
 43.18088|ISTEP 13. 6
 43.39004|ISTEP 13. 7
 43.39162|ISTEP 13. 8
 45.29007|ISTEP 13. 9
 45.85480|ISTEP 13.10
 47.08264|ISTEP 13.11
 47.96390|ISTEP 13.12
 47.96681|ISTEP 13.13
 48.08328|ISTEP 14. 1
 65.55149|ISTEP 14. 2
 65.70781|ISTEP 14. 3
 65.81631|ISTEP 14. 4
 65.81875|ISTEP 14. 5
 66.18228|ISTEP 14. 6
 66.23637|ISTEP 14. 7
 66.24202|ISTEP 15. 1
 70.46118|ISTEP 15. 2
 70.48959|ISTEP 15. 3
 70.54801|ISTEP 15. 4
 70.70748|ISTEP 16. 1
  0.03074|ISTEP 16. 2
 72.76965|ISTEP 16. 3
 72.78719|ISTEP 16. 4
 72.92088|ISTEP 16. 5
 72.96808|ISTEP 18.11
 73.83771|ISTEP 18.12
 73.82841|ISTEP 20. 1
 75.78326|ISTEP 20. 2
 79.14886|ISTEP 21. 1</msg>
<status endtime="20170517 20:14:13.171" status="PASS" starttime="20170517 20:14:13.171"></status>
</kw>
<status endtime="20170517 20:14:13.171" status="PASS" starttime="20170517 20:14:12.577"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170517 20:14:13.172" critical="yes" status="PASS" starttime="20170517 20:10:20.940"></status>
</test>
<test name="Check For Application Failures" id="s1-s2-t2">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.174">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:14:13.174" status="PASS" starttime="20170517 20:14:13.174"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.175">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:14:13.175" status="PASS" starttime="20170517 20:14:13.174"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:13.175">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:14:13.175" status="PASS" starttime="20170517 20:14:13.173"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.177">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:14:13.177" status="PASS" starttime="20170517 20:14:13.176"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.177">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:14:13.177" status="PASS" starttime="20170517 20:14:13.177"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:13.178">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:14:13.178" status="PASS" starttime="20170517 20:14:13.176"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.178">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170517 20:14:13.178" status="PASS" starttime="20170517 20:14:13.178"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:14:13.186" status="PASS" starttime="20170517 20:14:13.179"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.189">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:14:13.194">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:14:13.194">${output} = /tmp/fspcibld/16253/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170517 20:14:13.194" status="PASS" starttime="20170517 20:14:13.186"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170517 20:14:13.204" status="PASS" starttime="20170517 20:14:13.196"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170517 20:14:13.204" status="PASS" starttime="20170517 20:14:13.204"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.205">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170517 20:14:13.205" status="PASS" starttime="20170517 20:14:13.205"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:13.205">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170517 20:14:13.205" status="PASS" starttime="20170517 20:14:13.178"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.206">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170517 20:14:13.206" status="PASS" starttime="20170517 20:14:13.206"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:14:13.216" status="PASS" starttime="20170517 20:14:13.206"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.220">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:14:13.234">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:14:13.234">${os_con_pid} = </msg>
<status endtime="20170517 20:14:13.234" status="PASS" starttime="20170517 20:14:13.217"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170517 20:14:13.250" status="PASS" starttime="20170517 20:14:13.236"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.250">${cmd_buf} = kill -9 </msg>
<status endtime="20170517 20:14:13.250" status="PASS" starttime="20170517 20:14:13.250"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:14:13.252" status="PASS" starttime="20170517 20:14:13.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.252">${rc} = None</msg>
<msg level="INFO" timestamp="20170517 20:14:13.252">${output} = None</msg>
<status endtime="20170517 20:14:13.252" status="PASS" starttime="20170517 20:14:13.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170517 20:14:13.253" status="PASS" starttime="20170517 20:14:13.253"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.253">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status endtime="20170517 20:14:13.253" status="PASS" starttime="20170517 20:14:13.253"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:14:13.261" status="PASS" starttime="20170517 20:14:13.254"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.265">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:14:13.269">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:14:13.269">${output} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:UD0knbv0n/aYnjyQpXhvRYFaEcXJn/QD7sMuqogAYDc.
Are ...</msg>
<status endtime="20170517 20:14:13.269" status="PASS" starttime="20170517 20:14:13.262"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status endtime="20170517 20:14:13.279" status="PASS" starttime="20170517 20:14:13.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status endtime="20170517 20:14:13.280" status="PASS" starttime="20170517 20:14:13.280"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:13.281">${log_output} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:UD0knbv0n/aYnjyQpXhvRYFaEcXJn/QD7sMuqogAYDc.
Are ...</msg>
<status endtime="20170517 20:14:13.281" status="PASS" starttime="20170517 20:14:13.175"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:13.282">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:13.282" status="PASS" starttime="20170517 20:14:13.281"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.283">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170517 20:14:13.283" status="PASS" starttime="20170517 20:14:13.282"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:14:13.290" status="PASS" starttime="20170517 20:14:13.283"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.293">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:14:13.296">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:14:13.297">${output} = /tmp/fspcibld/16253/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170517 20:14:13.297" status="PASS" starttime="20170517 20:14:13.290"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170517 20:14:13.309" status="PASS" starttime="20170517 20:14:13.298"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170517 20:14:13.310" status="PASS" starttime="20170517 20:14:13.309"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.311">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170517 20:14:13.311" status="PASS" starttime="20170517 20:14:13.310"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:13.311">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170517 20:14:13.311" status="PASS" starttime="20170517 20:14:13.282"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.312">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170517 20:14:13.312" status="PASS" starttime="20170517 20:14:13.312"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:14:13.320" status="PASS" starttime="20170517 20:14:13.312"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.323">Running command 'ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170517 20:14:13.349">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:14:13.349">${output} = </msg>
<status endtime="20170517 20:14:13.350" status="PASS" starttime="20170517 20:14:13.320"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170517 20:14:13.353" status="PASS" starttime="20170517 20:14:13.352"></status>
</kw>
<status endtime="20170517 20:14:13.354" status="PASS" starttime="20170517 20:14:13.173"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:13.357">Dictionary does not contain key 'host'.</msg>
<status endtime="20170517 20:14:13.357" status="FAIL" starttime="20170517 20:14:13.356"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:13.357">${has_host} = False</msg>
<status endtime="20170517 20:14:13.357" status="PASS" starttime="20170517 20:14:13.356"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170517 20:14:13.359" status="PASS" starttime="20170517 20:14:13.358"></status>
</kw>
<status endtime="20170517 20:14:13.359" status="PASS" starttime="20170517 20:14:13.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.363">${port_num} = 22</msg>
<status endtime="20170517 20:14:13.363" status="PASS" starttime="20170517 20:14:13.361"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.363">${SSH_PORT} = 22</msg>
<status endtime="20170517 20:14:13.363" status="PASS" starttime="20170517 20:14:13.363"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:13.364">${https_num} = 443</msg>
<status endtime="20170517 20:14:13.364" status="PASS" starttime="20170517 20:14:13.363"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:13.365">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170517 20:14:13.365" status="PASS" starttime="20170517 20:14:13.364"></status>
</kw>
<status endtime="20170517 20:14:13.365" status="PASS" starttime="20170517 20:14:13.360"></status>
</kw>
<status endtime="20170517 20:14:13.365" status="PASS" starttime="20170517 20:14:13.359"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:13.367">Dictionary does not contain key 'port'.</msg>
<status endtime="20170517 20:14:13.367" status="FAIL" starttime="20170517 20:14:13.366"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:13.367">${has_port} = False</msg>
<status endtime="20170517 20:14:13.367" status="PASS" starttime="20170517 20:14:13.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170517 20:14:13.370" status="PASS" starttime="20170517 20:14:13.369"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170517 20:14:13.371" status="PASS" starttime="20170517 20:14:13.370"></status>
</kw>
<status endtime="20170517 20:14:13.371" status="PASS" starttime="20170517 20:14:13.369"></status>
</kw>
<status endtime="20170517 20:14:13.371" status="PASS" starttime="20170517 20:14:13.368"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:13.371">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170517 20:14:15.570">Read output: root@witherspoon:~#</msg>
<status endtime="20170517 20:14:15.571" status="PASS" starttime="20170517 20:14:13.371"></status>
</kw>
<status endtime="20170517 20:14:15.571" status="PASS" starttime="20170517 20:14:13.354"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>journalctl --no-pager | egrep '${ERROR_REGEX}'</arg>
</arguments>
<assign>
<var>${journal_log}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:15.573">Executing command 'journalctl --no-pager | egrep 'SEGV|core-dump''.</msg>
<msg level="INFO" timestamp="20170517 20:14:18.807">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:18.807">${stdout} = May 17 20:05:27 witherspoon systemd[1]: xyz.openbmc_project.Hwmon@ahb-apb-i2c\x401e78a000-i2c\x2dbus\x40100-max31785\x4052.service: Failed with result 'core-dump'.
May 17 20:05:35 witherspoon systemd[...</msg>
<msg level="INFO" timestamp="20170517 20:14:18.808">${stderr} = </msg>
<status endtime="20170517 20:14:18.808" status="PASS" starttime="20170517 20:14:15.573"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:18.809">Length is 0</msg>
<status endtime="20170517 20:14:18.809" status="PASS" starttime="20170517 20:14:18.808"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:18.809">${journal_log} = May 17 20:05:27 witherspoon systemd[1]: xyz.openbmc_project.Hwmon@ahb-apb-i2c\x401e78a000-i2c\x2dbus\x40100-max31785\x4052.service: Failed with result 'core-dump'.
May 17 20:05:35 witherspoon systemd[...</msg>
<status endtime="20170517 20:14:18.809" status="PASS" starttime="20170517 20:14:15.571"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${journal_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:18.809">Length is 7459</msg>
<msg level="FAIL" timestamp="20170517 20:14:18.810">'May 17 20:05:27 witherspoon systemd[1]: xyz.openbmc_project.Hwmon@ahb-apb-i2c\x401e78a000-i2c\x2dbus\x40100-max31785\x4052.service: Failed with result 'core-dump'.
May 17 20:05:35 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:05:36 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:05:37 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:05:53 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:05:53 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:06:09 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:06:09 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:06:24 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:06:24 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:06:41 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:06:41 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:06:56 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:06:56 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:07:12 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:07:12 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:07:28 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:07:28 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:07:43 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:07:43 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:07:59 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:07:59 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:08:15 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:08:15 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:08:30 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:08:30 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:08:46 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:08:46 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:09:01 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:09:01 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:09:17 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:09:17 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:09:32 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:09:32 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:09:48 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:09:48 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:10:04 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:10:04 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:10:19 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:10:19 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:11:04 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:11:04 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:11:20 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:11:20 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:11:36 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:11:36 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:11:52 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:11:52 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:12:07 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:12:07 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:12:23 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:12:23 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:12:46 witherspoon systemd[1]: xyz.openbmc_project.Hwmon@ahb-apb-i2c\x401e78a000-i2c\x2dbus\x40100-max31785\x4052.service: Failed with result 'core-dump'.
May 17 20:12:55 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:12:56 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:12:56 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:13:12 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:13:12 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:13:27 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:13:27 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:13:43 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:13:43 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:13:58 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:13:58 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:14:14 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:14:14 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.' should be empty.</msg>
<status endtime="20170517 20:14:18.810" status="FAIL" starttime="20170517 20:14:18.809"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:18.816">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:14:18.816" status="PASS" starttime="20170517 20:14:18.816"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:18.817">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:14:18.817" status="PASS" starttime="20170517 20:14:18.817"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:18.818">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:14:18.818" status="PASS" starttime="20170517 20:14:18.817"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:18.818">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:14:18.818" status="PASS" starttime="20170517 20:14:18.818"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:19.060">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:14:19.060" status="PASS" starttime="20170517 20:14:18.819"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:19.060">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:19.060">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:19.060" status="PASS" starttime="20170517 20:14:18.819"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:19.061">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:19.061" status="PASS" starttime="20170517 20:14:19.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:19.062">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:19.062" status="PASS" starttime="20170517 20:14:19.061"></status>
</kw>
<status endtime="20170517 20:14:19.062" status="PASS" starttime="20170517 20:14:18.815"></status>
</kw>
<status endtime="20170517 20:14:19.062" status="PASS" starttime="20170517 20:14:18.814"></status>
</kw>
<status endtime="20170517 20:14:19.063" status="PASS" starttime="20170517 20:14:18.814"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:19.063">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170517 20:14:19.063" status="PASS" starttime="20170517 20:14:19.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:19.066">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:14:19.066" status="PASS" starttime="20170517 20:14:19.065"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:19.068">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170517 20:14:19.068" status="PASS" starttime="20170517 20:14:19.068"></status>
</kw>
<status endtime="20170517 20:14:19.069" status="PASS" starttime="20170517 20:14:19.067"></status>
</kw>
<status endtime="20170517 20:14:19.069" status="PASS" starttime="20170517 20:14:19.064"></status>
</kw>
<status endtime="20170517 20:14:19.069" status="PASS" starttime="20170517 20:14:19.064"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:19.185">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:14:19.185">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:19.185" status="PASS" starttime="20170517 20:14:19.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:19.188">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:14:19.188" status="PASS" starttime="20170517 20:14:19.187"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:19.188">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170517 20:14:19.189" status="PASS" starttime="20170517 20:14:19.188"></status>
</kw>
<status endtime="20170517 20:14:19.189" status="PASS" starttime="20170517 20:14:19.188"></status>
</kw>
<status endtime="20170517 20:14:19.189" status="PASS" starttime="20170517 20:14:19.186"></status>
</kw>
<status endtime="20170517 20:14:19.189" status="PASS" starttime="20170517 20:14:19.186"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:19.189">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:19.189" status="PASS" starttime="20170517 20:14:18.813"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:19.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:19.190" status="PASS" starttime="20170517 20:14:19.189"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:19.190">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:14:19.190">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:14:19.191">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status endtime="20170517 20:14:19.191" status="PASS" starttime="20170517 20:14:19.190"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:19.191">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170517 20:14:19.191" status="PASS" starttime="20170517 20:14:18.812"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:19.191">${host_state} = Running</msg>
<status endtime="20170517 20:14:19.191" status="PASS" starttime="20170517 20:14:18.812"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:19.192">Running != Quiesced</msg>
<status endtime="20170517 20:14:19.192" status="FAIL" starttime="20170517 20:14:19.192"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:19.193">${status} = False</msg>
<status endtime="20170517 20:14:19.193" status="PASS" starttime="20170517 20:14:19.192"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:19.193">${status} = False</msg>
<status endtime="20170517 20:14:19.193" status="PASS" starttime="20170517 20:14:18.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:19.391">Length is 10</msg>
<status endtime="20170517 20:14:19.391" status="PASS" starttime="20170517 20:14:19.391"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:19.397">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:14:22.487">${RC} = 0</msg>
<msg level="INFO" timestamp="20170517 20:14:22.487">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.831 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=1.01 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status endtime="20170517 20:14:22.487" status="PASS" starttime="20170517 20:14:19.391"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:22.490">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.831 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=1.01 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.854 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=4.85 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.831/1.887/4.853/1.714 ms</msg>
<status endtime="20170517 20:14:22.490" status="PASS" starttime="20170517 20:14:22.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170517 20:14:22.491" status="PASS" starttime="20170517 20:14:22.491"></status>
</kw>
<status endtime="20170517 20:14:22.492" status="PASS" starttime="20170517 20:14:19.390"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:22.513">${cur_time} = 2017-05-17 20:14:22:512966</msg>
<status endtime="20170517 20:14:22.513" status="PASS" starttime="20170517 20:14:22.513"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:22.514">${cur_time} = 20170517201422512966</msg>
<status endtime="20170517 20:14:22.514" status="PASS" starttime="20170517 20:14:22.513"></status>
</kw>
<status endtime="20170517 20:14:22.514" status="PASS" starttime="20170517 20:14:22.512"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:22.514">${FFDC_TIME} = 20170517201422512966</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:22.524">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170517 20:14:22.524" status="PASS" starttime="20170517 20:14:22.523"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:22.524">${suite_name} = 20170517201422512966_TestsTestBasicPoweron</msg>
<status endtime="20170517 20:14:22.524" status="PASS" starttime="20170517 20:14:22.524"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:22.525">${test_name} = CheckForApplicationFailures</msg>
<status endtime="20170517 20:14:22.525" status="PASS" starttime="20170517 20:14:22.525"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:22.526">${test_name} = 20170517201422512966_CheckForApplicationFailures</msg>
<status endtime="20170517 20:14:22.526" status="PASS" starttime="20170517 20:14:22.526"></status>
</kw>
<status endtime="20170517 20:14:22.526" status="PASS" starttime="20170517 20:14:22.523"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:22.527">${FFDC_DIR_PATH} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/</msg>
<msg level="INFO" timestamp="20170517 20:14:22.527">${FFDC_PREFIX} = 20170517201422512966_</msg>
<msg level="INFO" timestamp="20170517 20:14:22.547">${LOG_PREFIX} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:22.548">Created directory '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:22.549" status="PASS" starttime="20170517 20:14:22.548"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:22.553">${FFDC_FILE_PATH} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:22.573">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:22.573" status="PASS" starttime="20170517 20:14:22.572"></status>
</kw>
<status endtime="20170517 20:14:22.573" status="PASS" starttime="20170517 20:14:22.571"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:22.574">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:22.574" status="PASS" starttime="20170517 20:14:22.574"></status>
</kw>
<status endtime="20170517 20:14:22.574" status="PASS" starttime="20170517 20:14:22.573"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:22.575">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:22.576" status="PASS" starttime="20170517 20:14:22.575"></status>
</kw>
<status endtime="20170517 20:14:22.576" status="PASS" starttime="20170517 20:14:22.574"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:22.577">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:22.577" status="PASS" starttime="20170517 20:14:22.576"></status>
</kw>
<status endtime="20170517 20:14:22.577" status="PASS" starttime="20170517 20:14:22.576"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:22.579">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:22.579" status="PASS" starttime="20170517 20:14:22.578"></status>
</kw>
<status endtime="20170517 20:14:22.579" status="PASS" starttime="20170517 20:14:22.577"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:22.580">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:22.580" status="PASS" starttime="20170517 20:14:22.580"></status>
</kw>
<status endtime="20170517 20:14:22.580" status="PASS" starttime="20170517 20:14:22.579"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:22.581">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:22.582" status="PASS" starttime="20170517 20:14:22.581"></status>
</kw>
<status endtime="20170517 20:14:22.582" status="PASS" starttime="20170517 20:14:22.581"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:22.583">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:22.583" status="PASS" starttime="20170517 20:14:22.582"></status>
</kw>
<status endtime="20170517 20:14:22.583" status="PASS" starttime="20170517 20:14:22.582"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:22.584">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:22.584" status="PASS" starttime="20170517 20:14:22.584"></status>
</kw>
<status endtime="20170517 20:14:22.584" status="PASS" starttime="20170517 20:14:22.583"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:22.586">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:22.586" status="PASS" starttime="20170517 20:14:22.586"></status>
</kw>
<status endtime="20170517 20:14:22.586" status="PASS" starttime="20170517 20:14:22.585"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:22.587">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:22.587" status="PASS" starttime="20170517 20:14:22.587"></status>
</kw>
<status endtime="20170517 20:14:22.587" status="PASS" starttime="20170517 20:14:22.586"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:22.589">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:22.589" status="PASS" starttime="20170517 20:14:22.588"></status>
</kw>
<status endtime="20170517 20:14:22.589" status="PASS" starttime="20170517 20:14:22.588"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:22.590">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:22.590" status="PASS" starttime="20170517 20:14:22.590"></status>
</kw>
<status endtime="20170517 20:14:22.590" status="PASS" starttime="20170517 20:14:22.589"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:22.592">Dictionary does not contain key 'host'.</msg>
<status endtime="20170517 20:14:22.592" status="FAIL" starttime="20170517 20:14:22.592"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:22.592">${has_host} = False</msg>
<status endtime="20170517 20:14:22.592" status="PASS" starttime="20170517 20:14:22.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170517 20:14:22.593" status="PASS" starttime="20170517 20:14:22.593"></status>
</kw>
<status endtime="20170517 20:14:22.593" status="PASS" starttime="20170517 20:14:22.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:22.595">${port_num} = 22</msg>
<status endtime="20170517 20:14:22.595" status="PASS" starttime="20170517 20:14:22.595"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:22.596">${SSH_PORT} = 22</msg>
<status endtime="20170517 20:14:22.596" status="PASS" starttime="20170517 20:14:22.595"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:22.596">${https_num} = 443</msg>
<status endtime="20170517 20:14:22.596" status="PASS" starttime="20170517 20:14:22.596"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:22.597">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170517 20:14:22.597" status="PASS" starttime="20170517 20:14:22.596"></status>
</kw>
<status endtime="20170517 20:14:22.597" status="PASS" starttime="20170517 20:14:22.594"></status>
</kw>
<status endtime="20170517 20:14:22.597" status="PASS" starttime="20170517 20:14:22.594"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:22.598">Dictionary does not contain key 'port'.</msg>
<status endtime="20170517 20:14:22.598" status="FAIL" starttime="20170517 20:14:22.598"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:22.598">${has_port} = False</msg>
<status endtime="20170517 20:14:22.598" status="PASS" starttime="20170517 20:14:22.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170517 20:14:22.605" status="PASS" starttime="20170517 20:14:22.600"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170517 20:14:22.605" status="PASS" starttime="20170517 20:14:22.605"></status>
</kw>
<status endtime="20170517 20:14:22.605" status="PASS" starttime="20170517 20:14:22.599"></status>
</kw>
<status endtime="20170517 20:14:22.605" status="PASS" starttime="20170517 20:14:22.599"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:22.606">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170517 20:14:24.288">Read output: root@witherspoon:~#</msg>
<status endtime="20170517 20:14:24.289" status="PASS" starttime="20170517 20:14:22.606"></status>
</kw>
<status endtime="20170517 20:14:24.289" status="PASS" starttime="20170517 20:14:22.591"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:24.291">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170517 20:14:24.425">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:24.426">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170517 20:14:24.426">${stderr} = </msg>
<status endtime="20170517 20:14:24.426" status="PASS" starttime="20170517 20:14:24.290"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:24.427">Length is 0</msg>
<status endtime="20170517 20:14:24.427" status="PASS" starttime="20170517 20:14:24.427"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:24.428">Length is 11</msg>
<status endtime="20170517 20:14:24.428" status="PASS" starttime="20170517 20:14:24.427"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:24.428">${model_name} = Witherspoon</msg>
<status endtime="20170517 20:14:24.428" status="PASS" starttime="20170517 20:14:22.590"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:24.429">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:24.430" status="PASS" starttime="20170517 20:14:24.429"></status>
</kw>
<status endtime="20170517 20:14:24.430" status="PASS" starttime="20170517 20:14:24.428"></status>
</kw>
<status endtime="20170517 20:14:24.430" status="PASS" starttime="20170517 20:14:22.584"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:24.431">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:24.431" status="PASS" starttime="20170517 20:14:24.431"></status>
</kw>
<status endtime="20170517 20:14:24.431" status="PASS" starttime="20170517 20:14:24.430"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:24.433">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170517 20:14:24.433" status="PASS" starttime="20170517 20:14:24.432"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:24.436">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:24.436" status="PASS" starttime="20170517 20:14:24.435"></status>
</kw>
<status endtime="20170517 20:14:24.436" status="PASS" starttime="20170517 20:14:24.434"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:24.438">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:24.438" status="PASS" starttime="20170517 20:14:24.437"></status>
</kw>
<status endtime="20170517 20:14:24.438" status="PASS" starttime="20170517 20:14:24.437"></status>
</kw>
<status endtime="20170517 20:14:24.438" status="PASS" starttime="20170517 20:14:24.433"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:24.439">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:24.439" status="PASS" starttime="20170517 20:14:24.439"></status>
</kw>
<status endtime="20170517 20:14:24.439" status="PASS" starttime="20170517 20:14:24.438"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:24.440">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:24.440" status="PASS" starttime="20170517 20:14:24.440"></status>
</kw>
<status endtime="20170517 20:14:24.441" status="PASS" starttime="20170517 20:14:24.439"></status>
</kw>
<status endtime="20170517 20:14:24.441" status="PASS" starttime="20170517 20:14:24.438"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:24.443">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:24.443" status="PASS" starttime="20170517 20:14:24.441"></status>
</kw>
<status endtime="20170517 20:14:24.444" status="PASS" starttime="20170517 20:14:24.441"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:24.446">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:24.446" status="PASS" starttime="20170517 20:14:24.445"></status>
</kw>
<status endtime="20170517 20:14:24.447" status="PASS" starttime="20170517 20:14:24.444"></status>
</kw>
<status endtime="20170517 20:14:24.447" status="PASS" starttime="20170517 20:14:24.441"></status>
</kw>
<status endtime="20170517 20:14:24.447" status="PASS" starttime="20170517 20:14:24.433"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:24.449">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:24.449" status="PASS" starttime="20170517 20:14:24.448"></status>
</kw>
<status endtime="20170517 20:14:24.449" status="PASS" starttime="20170517 20:14:24.447"></status>
</kw>
<status endtime="20170517 20:14:24.450" status="PASS" starttime="20170517 20:14:22.571"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:24.464">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170517 20:14:24.464" status="PASS" starttime="20170517 20:14:24.463"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:24.466">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('Ge...</msg>
<status endtime="20170517 20:14:24.466" status="PASS" starttime="20170517 20:14:24.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170517 20:14:24.469" status="PASS" starttime="20170517 20:14:24.468"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:24.469">@{ffdc_function_list} = [ FFDC Generic Report | OS FFDC | Core Files | BMC Specific Files | SEL Log | Get Request FFDC ]</msg>
<status endtime="20170517 20:14:24.469" status="PASS" starttime="20170517 20:14:24.467"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170517 20:14:24.473" status="PASS" starttime="20170517 20:14:24.473"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:24.474">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:24.474">${ret_values} = None</msg>
<status endtime="20170517 20:14:24.474" status="PASS" starttime="20170517 20:14:24.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170517 20:14:24.475" status="PASS" starttime="20170517 20:14:24.474"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:24.540">Dictionary does not contain key 'host'.</msg>
<status endtime="20170517 20:14:24.540" status="FAIL" starttime="20170517 20:14:24.540"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:24.541">${has_host} = False</msg>
<status endtime="20170517 20:14:24.541" status="PASS" starttime="20170517 20:14:24.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170517 20:14:24.542" status="PASS" starttime="20170517 20:14:24.542"></status>
</kw>
<status endtime="20170517 20:14:24.542" status="PASS" starttime="20170517 20:14:24.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:24.544">${port_num} = 22</msg>
<status endtime="20170517 20:14:24.544" status="PASS" starttime="20170517 20:14:24.544"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:24.545">${SSH_PORT} = 22</msg>
<status endtime="20170517 20:14:24.545" status="PASS" starttime="20170517 20:14:24.545"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:24.546">${https_num} = 443</msg>
<status endtime="20170517 20:14:24.546" status="PASS" starttime="20170517 20:14:24.545"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:24.547">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170517 20:14:24.547" status="PASS" starttime="20170517 20:14:24.546"></status>
</kw>
<status endtime="20170517 20:14:24.547" status="PASS" starttime="20170517 20:14:24.543"></status>
</kw>
<status endtime="20170517 20:14:24.547" status="PASS" starttime="20170517 20:14:24.543"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:24.548">Dictionary does not contain key 'port'.</msg>
<status endtime="20170517 20:14:24.548" status="FAIL" starttime="20170517 20:14:24.548"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:24.548">${has_port} = False</msg>
<status endtime="20170517 20:14:24.548" status="PASS" starttime="20170517 20:14:24.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170517 20:14:24.551" status="PASS" starttime="20170517 20:14:24.551"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170517 20:14:24.552" status="PASS" starttime="20170517 20:14:24.551"></status>
</kw>
<status endtime="20170517 20:14:24.552" status="PASS" starttime="20170517 20:14:24.550"></status>
</kw>
<status endtime="20170517 20:14:24.552" status="PASS" starttime="20170517 20:14:24.549"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:24.553">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170517 20:14:26.284">Read output: root@witherspoon:~#</msg>
<status endtime="20170517 20:14:26.284" status="PASS" starttime="20170517 20:14:24.553"></status>
</kw>
<status endtime="20170517 20:14:26.285" status="PASS" starttime="20170517 20:14:24.538"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:26.285">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170517 20:14:26.285" status="PASS" starttime="20170517 20:14:26.285"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:26.287">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170517 20:14:26.287" status="PASS" starttime="20170517 20:14:26.286"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:26.292">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170517 20:14:26.292" status="PASS" starttime="20170517 20:14:26.287"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:26.295">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:26.295" status="PASS" starttime="20170517 20:14:26.294"></status>
</kw>
<status endtime="20170517 20:14:26.295" status="PASS" starttime="20170517 20:14:26.294"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:26.296">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:26.296" status="PASS" starttime="20170517 20:14:26.296"></status>
</kw>
<status endtime="20170517 20:14:26.297" status="PASS" starttime="20170517 20:14:26.295"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:26.298">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:26.298" status="PASS" starttime="20170517 20:14:26.297"></status>
</kw>
<status endtime="20170517 20:14:26.298" status="PASS" starttime="20170517 20:14:26.297"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:26.299">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:26.299" status="PASS" starttime="20170517 20:14:26.298"></status>
</kw>
<status endtime="20170517 20:14:26.299" status="PASS" starttime="20170517 20:14:26.298"></status>
</kw>
<status endtime="20170517 20:14:26.299" status="PASS" starttime="20170517 20:14:26.293"></status>
</kw>
<status endtime="20170517 20:14:26.299" status="PASS" starttime="20170517 20:14:26.293"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:26.300">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170517 20:14:26.366">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170517 20:14:26.367">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:26.367">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status endtime="20170517 20:14:26.367" status="PASS" starttime="20170517 20:14:26.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:26.373">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:26.373" status="PASS" starttime="20170517 20:14:26.372"></status>
</kw>
<status endtime="20170517 20:14:26.373" status="PASS" starttime="20170517 20:14:26.372"></status>
</kw>
<status endtime="20170517 20:14:26.373" status="PASS" starttime="20170517 20:14:26.367"></status>
</kw>
<status endtime="20170517 20:14:26.373" status="PASS" starttime="20170517 20:14:26.292"></status>
</kw>
<status endtime="20170517 20:14:26.373" status="PASS" starttime="20170517 20:14:26.292"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:26.377">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:26.377" status="PASS" starttime="20170517 20:14:26.376"></status>
</kw>
<status endtime="20170517 20:14:26.377" status="PASS" starttime="20170517 20:14:26.375"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:26.379">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:26.379" status="PASS" starttime="20170517 20:14:26.378"></status>
</kw>
<status endtime="20170517 20:14:26.379" status="PASS" starttime="20170517 20:14:26.377"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:26.380">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:26.380" status="PASS" starttime="20170517 20:14:26.379"></status>
</kw>
<status endtime="20170517 20:14:26.380" status="PASS" starttime="20170517 20:14:26.379"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:26.381">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:26.381" status="PASS" starttime="20170517 20:14:26.381"></status>
</kw>
<status endtime="20170517 20:14:26.381" status="PASS" starttime="20170517 20:14:26.380"></status>
</kw>
<status endtime="20170517 20:14:26.381" status="PASS" starttime="20170517 20:14:26.375"></status>
</kw>
<status endtime="20170517 20:14:26.381" status="PASS" starttime="20170517 20:14:26.374"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:26.382">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170517 20:14:26.517">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:26.517">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.5-40"
VERSION_ID="v1.99.5-40-gae7bde8"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170517 20:14:26.517">${stderr} = </msg>
<status endtime="20170517 20:14:26.517" status="PASS" starttime="20170517 20:14:26.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:26.523">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:26.523" status="PASS" starttime="20170517 20:14:26.523"></status>
</kw>
<status endtime="20170517 20:14:26.523" status="PASS" starttime="20170517 20:14:26.522"></status>
</kw>
<status endtime="20170517 20:14:26.524" status="PASS" starttime="20170517 20:14:26.518"></status>
</kw>
<status endtime="20170517 20:14:26.524" status="PASS" starttime="20170517 20:14:26.374"></status>
</kw>
<status endtime="20170517 20:14:26.524" status="PASS" starttime="20170517 20:14:26.373"></status>
</kw>
<status endtime="20170517 20:14:26.524" status="PASS" starttime="20170517 20:14:26.292"></status>
</kw>
<status endtime="20170517 20:14:26.524" status="PASS" starttime="20170517 20:14:26.286"></status>
</kw>
<status endtime="20170517 20:14:26.524" status="PASS" starttime="20170517 20:14:26.286"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:26.525">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status endtime="20170517 20:14:26.525" status="PASS" starttime="20170517 20:14:26.525"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:26.526">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170517 20:14:26.526" status="PASS" starttime="20170517 20:14:26.525"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:26.529">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:26.529" status="PASS" starttime="20170517 20:14:26.528"></status>
</kw>
<status endtime="20170517 20:14:26.529" status="PASS" starttime="20170517 20:14:26.528"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:26.530">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:26.530" status="PASS" starttime="20170517 20:14:26.530"></status>
</kw>
<status endtime="20170517 20:14:26.530" status="PASS" starttime="20170517 20:14:26.529"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:26.531">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:26.532" status="PASS" starttime="20170517 20:14:26.531"></status>
</kw>
<status endtime="20170517 20:14:26.532" status="PASS" starttime="20170517 20:14:26.531"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:26.533">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:26.533" status="PASS" starttime="20170517 20:14:26.532"></status>
</kw>
<status endtime="20170517 20:14:26.533" status="PASS" starttime="20170517 20:14:26.532"></status>
</kw>
<status endtime="20170517 20:14:26.533" status="PASS" starttime="20170517 20:14:26.527"></status>
</kw>
<status endtime="20170517 20:14:26.533" status="PASS" starttime="20170517 20:14:26.527"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:26.534">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170517 20:14:27.879">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:27.880">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg level="INFO" timestamp="20170517 20:14:27.880">${stderr} = </msg>
<status endtime="20170517 20:14:27.880" status="PASS" starttime="20170517 20:14:26.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:27.886">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:27.886" status="PASS" starttime="20170517 20:14:27.885"></status>
</kw>
<status endtime="20170517 20:14:27.886" status="PASS" starttime="20170517 20:14:27.885"></status>
</kw>
<status endtime="20170517 20:14:27.886" status="PASS" starttime="20170517 20:14:27.880"></status>
</kw>
<status endtime="20170517 20:14:27.886" status="PASS" starttime="20170517 20:14:26.526"></status>
</kw>
<status endtime="20170517 20:14:27.886" status="PASS" starttime="20170517 20:14:26.526"></status>
</kw>
<status endtime="20170517 20:14:27.886" status="PASS" starttime="20170517 20:14:26.526"></status>
</kw>
<status endtime="20170517 20:14:27.887" status="PASS" starttime="20170517 20:14:26.524"></status>
</kw>
<status endtime="20170517 20:14:27.887" status="PASS" starttime="20170517 20:14:26.524"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:27.888">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170517 20:14:27.888" status="PASS" starttime="20170517 20:14:27.887"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:27.888">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170517 20:14:27.888" status="PASS" starttime="20170517 20:14:27.888"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:27.891">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:27.892" status="PASS" starttime="20170517 20:14:27.891"></status>
</kw>
<status endtime="20170517 20:14:27.892" status="PASS" starttime="20170517 20:14:27.891"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:27.893">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:27.893" status="PASS" starttime="20170517 20:14:27.892"></status>
</kw>
<status endtime="20170517 20:14:27.893" status="PASS" starttime="20170517 20:14:27.892"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:27.894">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:27.894" status="PASS" starttime="20170517 20:14:27.894"></status>
</kw>
<status endtime="20170517 20:14:27.894" status="PASS" starttime="20170517 20:14:27.893"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:27.895">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:27.895" status="PASS" starttime="20170517 20:14:27.895"></status>
</kw>
<status endtime="20170517 20:14:27.896" status="PASS" starttime="20170517 20:14:27.894"></status>
</kw>
<status endtime="20170517 20:14:27.896" status="PASS" starttime="20170517 20:14:27.890"></status>
</kw>
<status endtime="20170517 20:14:27.896" status="PASS" starttime="20170517 20:14:27.890"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:27.896">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170517 20:14:27.992">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:27.992">${stdout} =  20:14:34 up 15 min,  load average: 2.37, 2.90, 1.82</msg>
<msg level="INFO" timestamp="20170517 20:14:27.993">${stderr} = </msg>
<status endtime="20170517 20:14:27.993" status="PASS" starttime="20170517 20:14:27.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:27.998">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:27.999" status="PASS" starttime="20170517 20:14:27.998"></status>
</kw>
<status endtime="20170517 20:14:27.999" status="PASS" starttime="20170517 20:14:27.997"></status>
</kw>
<status endtime="20170517 20:14:27.999" status="PASS" starttime="20170517 20:14:27.993"></status>
</kw>
<status endtime="20170517 20:14:27.999" status="PASS" starttime="20170517 20:14:27.889"></status>
</kw>
<status endtime="20170517 20:14:27.999" status="PASS" starttime="20170517 20:14:27.889"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:28.002">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:28.002" status="PASS" starttime="20170517 20:14:28.002"></status>
</kw>
<status endtime="20170517 20:14:28.002" status="PASS" starttime="20170517 20:14:28.001"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:28.004">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:28.004" status="PASS" starttime="20170517 20:14:28.003"></status>
</kw>
<status endtime="20170517 20:14:28.004" status="PASS" starttime="20170517 20:14:28.003"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:28.005">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:28.005" status="PASS" starttime="20170517 20:14:28.004"></status>
</kw>
<status endtime="20170517 20:14:28.005" status="PASS" starttime="20170517 20:14:28.004"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:28.007">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:28.007" status="PASS" starttime="20170517 20:14:28.006"></status>
</kw>
<status endtime="20170517 20:14:28.007" status="PASS" starttime="20170517 20:14:28.005"></status>
</kw>
<status endtime="20170517 20:14:28.007" status="PASS" starttime="20170517 20:14:28.000"></status>
</kw>
<status endtime="20170517 20:14:28.007" status="PASS" starttime="20170517 20:14:28.000"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:28.008">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170517 20:14:28.258">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:28.259">${stdout} = Linux witherspoon 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 #1 Wed May 17 19:45:05 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170517 20:14:28.259">${stderr} = </msg>
<status endtime="20170517 20:14:28.259" status="PASS" starttime="20170517 20:14:28.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:28.265">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:28.265" status="PASS" starttime="20170517 20:14:28.264"></status>
</kw>
<status endtime="20170517 20:14:28.265" status="PASS" starttime="20170517 20:14:28.264"></status>
</kw>
<status endtime="20170517 20:14:28.265" status="PASS" starttime="20170517 20:14:28.259"></status>
</kw>
<status endtime="20170517 20:14:28.265" status="PASS" starttime="20170517 20:14:27.999"></status>
</kw>
<status endtime="20170517 20:14:28.265" status="PASS" starttime="20170517 20:14:27.999"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:28.269">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:28.269" status="PASS" starttime="20170517 20:14:28.268"></status>
</kw>
<status endtime="20170517 20:14:28.269" status="PASS" starttime="20170517 20:14:28.268"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:28.270">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:28.270" status="PASS" starttime="20170517 20:14:28.270"></status>
</kw>
<status endtime="20170517 20:14:28.270" status="PASS" starttime="20170517 20:14:28.269"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:28.271">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:28.271" status="PASS" starttime="20170517 20:14:28.271"></status>
</kw>
<status endtime="20170517 20:14:28.272" status="PASS" starttime="20170517 20:14:28.270"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:28.273">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:28.273" status="PASS" starttime="20170517 20:14:28.272"></status>
</kw>
<status endtime="20170517 20:14:28.273" status="PASS" starttime="20170517 20:14:28.272"></status>
</kw>
<status endtime="20170517 20:14:28.273" status="PASS" starttime="20170517 20:14:28.267"></status>
</kw>
<status endtime="20170517 20:14:28.273" status="PASS" starttime="20170517 20:14:28.267"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:28.274">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170517 20:14:28.374">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:28.374">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg level="INFO" timestamp="20170517 20:14:28.374">${stderr} = </msg>
<status endtime="20170517 20:14:28.374" status="PASS" starttime="20170517 20:14:28.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:28.381">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:28.381" status="PASS" starttime="20170517 20:14:28.381"></status>
</kw>
<status endtime="20170517 20:14:28.381" status="PASS" starttime="20170517 20:14:28.380"></status>
</kw>
<status endtime="20170517 20:14:28.381" status="PASS" starttime="20170517 20:14:28.375"></status>
</kw>
<status endtime="20170517 20:14:28.382" status="PASS" starttime="20170517 20:14:28.266"></status>
</kw>
<status endtime="20170517 20:14:28.382" status="PASS" starttime="20170517 20:14:28.265"></status>
</kw>
<status endtime="20170517 20:14:28.382" status="PASS" starttime="20170517 20:14:27.889"></status>
</kw>
<status endtime="20170517 20:14:28.382" status="PASS" starttime="20170517 20:14:27.887"></status>
</kw>
<status endtime="20170517 20:14:28.382" status="PASS" starttime="20170517 20:14:27.887"></status>
</kw>
<status endtime="20170517 20:14:28.382" status="PASS" starttime="20170517 20:14:26.286"></status>
</kw>
<status endtime="20170517 20:14:28.382" status="PASS" starttime="20170517 20:14:24.537"></status>
</kw>
<status endtime="20170517 20:14:28.382" status="PASS" starttime="20170517 20:14:24.475"></status>
</kw>
<status endtime="20170517 20:14:28.382" status="PASS" starttime="20170517 20:14:24.470"></status>
</kw>
<status endtime="20170517 20:14:28.382" status="PASS" starttime="20170517 20:14:24.469"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170517 20:14:28.384" status="PASS" starttime="20170517 20:14:28.384"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:28.384">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:28.384">${ret_values} = None</msg>
<status endtime="20170517 20:14:28.384" status="PASS" starttime="20170517 20:14:28.383"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170517 20:14:28.385" status="PASS" starttime="20170517 20:14:28.385"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:28.412">Returning from the enclosing user keyword.</msg>
<status endtime="20170517 20:14:28.412" status="PASS" starttime="20170517 20:14:28.412"></status>
</kw>
<status endtime="20170517 20:14:28.413" status="PASS" starttime="20170517 20:14:28.411"></status>
</kw>
<status endtime="20170517 20:14:28.413" status="PASS" starttime="20170517 20:14:28.385"></status>
</kw>
<status endtime="20170517 20:14:28.413" status="PASS" starttime="20170517 20:14:28.383"></status>
</kw>
<status endtime="20170517 20:14:28.413" status="PASS" starttime="20170517 20:14:28.382"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170517 20:14:28.415" status="PASS" starttime="20170517 20:14:28.414"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:28.415">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:28.415">${ret_values} = None</msg>
<status endtime="20170517 20:14:28.415" status="PASS" starttime="20170517 20:14:28.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170517 20:14:28.415" status="PASS" starttime="20170517 20:14:28.415"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:28.442">Dictionary does not contain key 'host'.</msg>
<status endtime="20170517 20:14:28.442" status="FAIL" starttime="20170517 20:14:28.441"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:28.442">${has_host} = False</msg>
<status endtime="20170517 20:14:28.442" status="PASS" starttime="20170517 20:14:28.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170517 20:14:28.443" status="PASS" starttime="20170517 20:14:28.443"></status>
</kw>
<status endtime="20170517 20:14:28.443" status="PASS" starttime="20170517 20:14:28.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:28.445">${port_num} = 22</msg>
<status endtime="20170517 20:14:28.445" status="PASS" starttime="20170517 20:14:28.444"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:28.445">${SSH_PORT} = 22</msg>
<status endtime="20170517 20:14:28.445" status="PASS" starttime="20170517 20:14:28.445"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:28.446">${https_num} = 443</msg>
<status endtime="20170517 20:14:28.446" status="PASS" starttime="20170517 20:14:28.445"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:28.447">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170517 20:14:28.447" status="PASS" starttime="20170517 20:14:28.446"></status>
</kw>
<status endtime="20170517 20:14:28.447" status="PASS" starttime="20170517 20:14:28.444"></status>
</kw>
<status endtime="20170517 20:14:28.447" status="PASS" starttime="20170517 20:14:28.443"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:28.448">Dictionary does not contain key 'port'.</msg>
<status endtime="20170517 20:14:28.448" status="FAIL" starttime="20170517 20:14:28.448"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:28.448">${has_port} = False</msg>
<status endtime="20170517 20:14:28.448" status="PASS" starttime="20170517 20:14:28.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170517 20:14:28.450" status="PASS" starttime="20170517 20:14:28.450"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170517 20:14:28.451" status="PASS" starttime="20170517 20:14:28.450"></status>
</kw>
<status endtime="20170517 20:14:28.451" status="PASS" starttime="20170517 20:14:28.449"></status>
</kw>
<status endtime="20170517 20:14:28.451" status="PASS" starttime="20170517 20:14:28.449"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:28.451">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170517 20:14:30.361">Read output: root@witherspoon:~#</msg>
<status endtime="20170517 20:14:30.361" status="PASS" starttime="20170517 20:14:28.451"></status>
</kw>
<status endtime="20170517 20:14:30.361" status="PASS" starttime="20170517 20:14:28.440"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:30.362">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170517 20:14:30.549">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:30.549">${core_files} = /tmp/core_phosphor-fan-mo.1576
/tmp/core_phosphor-fan-mo.1787
/tmp/core_phosphor-fan-mo.1792
/tmp/core_phosphor-fan-mo.1816
/tmp/core_phosphor-fan-mo.1819
/tmp/core_phosphor-fan-mo.1822
/tmp/core_phos...</msg>
<status endtime="20170517 20:14:30.550" status="PASS" starttime="20170517 20:14:30.362"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:30.550">@{core_list} = [ /tmp/core_phosphor-fan-mo.1576 | /tmp/core_phosphor-fan-mo.1787 | /tmp/core_phosphor-fan-mo.1792 | /tmp/core_phosphor-fan-mo.1816 | /tmp/core_phosphor-fan-mo.1819 | /tmp/core_phosphor-fan-mo.1822 | ...</msg>
<status endtime="20170517 20:14:30.551" status="PASS" starttime="20170517 20:14:30.550"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170517 20:14:30.582" status="PASS" starttime="20170517 20:14:30.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170517 20:14:31.520" status="PASS" starttime="20170517 20:14:30.584"></status>
</kw>
<status endtime="20170517 20:14:31.520" status="PASS" starttime="20170517 20:14:30.584"></status>
</kw>
<status endtime="20170517 20:14:31.520" status="PASS" starttime="20170517 20:14:30.582"></status>
</kw>
<status endtime="20170517 20:14:31.520" status="PASS" starttime="20170517 20:14:30.551"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_phosphor-fan-mo.1576" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:32.063" status="PASS" starttime="20170517 20:14:31.521"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:32.065">Executing command 'rm /tmp/core_phosphor-fan-mo.1576'.</msg>
<msg level="INFO" timestamp="20170517 20:14:32.185">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:32.186">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:32.186">${stderr} = </msg>
<status endtime="20170517 20:14:32.186" status="PASS" starttime="20170517 20:14:32.064"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:32.186">Length is 0</msg>
<status endtime="20170517 20:14:32.186" status="PASS" starttime="20170517 20:14:32.186"></status>
</kw>
<status endtime="20170517 20:14:32.186" status="PASS" starttime="20170517 20:14:32.064"></status>
</kw>
<status endtime="20170517 20:14:32.187" status="PASS" starttime="20170517 20:14:31.520"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.1787" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:32.555" status="PASS" starttime="20170517 20:14:32.187"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:32.557">Executing command 'rm /tmp/core_phosphor-fan-mo.1787'.</msg>
<msg level="INFO" timestamp="20170517 20:14:32.603">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:32.604">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:32.604">${stderr} = </msg>
<status endtime="20170517 20:14:32.604" status="PASS" starttime="20170517 20:14:32.557"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:32.604">Length is 0</msg>
<status endtime="20170517 20:14:32.604" status="PASS" starttime="20170517 20:14:32.604"></status>
</kw>
<status endtime="20170517 20:14:32.604" status="PASS" starttime="20170517 20:14:32.556"></status>
</kw>
<status endtime="20170517 20:14:32.604" status="PASS" starttime="20170517 20:14:32.187"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.1792" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:32.891" status="PASS" starttime="20170517 20:14:32.605"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:32.892">Executing command 'rm /tmp/core_phosphor-fan-mo.1792'.</msg>
<msg level="INFO" timestamp="20170517 20:14:32.944">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:32.944">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:32.944">${stderr} = </msg>
<status endtime="20170517 20:14:32.944" status="PASS" starttime="20170517 20:14:32.892"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:32.944">Length is 0</msg>
<status endtime="20170517 20:14:32.944" status="PASS" starttime="20170517 20:14:32.944"></status>
</kw>
<status endtime="20170517 20:14:32.945" status="PASS" starttime="20170517 20:14:32.891"></status>
</kw>
<status endtime="20170517 20:14:32.945" status="PASS" starttime="20170517 20:14:32.605"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.1816" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:33.558" status="PASS" starttime="20170517 20:14:32.945"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:33.560">Executing command 'rm /tmp/core_phosphor-fan-mo.1816'.</msg>
<msg level="INFO" timestamp="20170517 20:14:33.640">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:33.640">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:33.640">${stderr} = </msg>
<status endtime="20170517 20:14:33.640" status="PASS" starttime="20170517 20:14:33.559"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:33.640">Length is 0</msg>
<status endtime="20170517 20:14:33.641" status="PASS" starttime="20170517 20:14:33.640"></status>
</kw>
<status endtime="20170517 20:14:33.641" status="PASS" starttime="20170517 20:14:33.558"></status>
</kw>
<status endtime="20170517 20:14:33.641" status="PASS" starttime="20170517 20:14:32.945"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.1819" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:34.092" status="PASS" starttime="20170517 20:14:33.641"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:34.094">Executing command 'rm /tmp/core_phosphor-fan-mo.1819'.</msg>
<msg level="INFO" timestamp="20170517 20:14:34.152">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:34.153">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:34.153">${stderr} = </msg>
<status endtime="20170517 20:14:34.153" status="PASS" starttime="20170517 20:14:34.094"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:34.153">Length is 0</msg>
<status endtime="20170517 20:14:34.153" status="PASS" starttime="20170517 20:14:34.153"></status>
</kw>
<status endtime="20170517 20:14:34.153" status="PASS" starttime="20170517 20:14:34.093"></status>
</kw>
<status endtime="20170517 20:14:34.153" status="PASS" starttime="20170517 20:14:33.641"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.1822" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:34.777" status="PASS" starttime="20170517 20:14:34.154"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:34.778">Executing command 'rm /tmp/core_phosphor-fan-mo.1822'.</msg>
<msg level="INFO" timestamp="20170517 20:14:34.887">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:34.887">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:34.887">${stderr} = </msg>
<status endtime="20170517 20:14:34.887" status="PASS" starttime="20170517 20:14:34.778"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:34.888">Length is 0</msg>
<status endtime="20170517 20:14:34.888" status="PASS" starttime="20170517 20:14:34.888"></status>
</kw>
<status endtime="20170517 20:14:34.888" status="PASS" starttime="20170517 20:14:34.777"></status>
</kw>
<status endtime="20170517 20:14:34.888" status="PASS" starttime="20170517 20:14:34.154"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.1825" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:35.347" status="PASS" starttime="20170517 20:14:34.888"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:35.349">Executing command 'rm /tmp/core_phosphor-fan-mo.1825'.</msg>
<msg level="INFO" timestamp="20170517 20:14:35.396">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:35.396">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:35.396">${stderr} = </msg>
<status endtime="20170517 20:14:35.396" status="PASS" starttime="20170517 20:14:35.348"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:35.396">Length is 0</msg>
<status endtime="20170517 20:14:35.396" status="PASS" starttime="20170517 20:14:35.396"></status>
</kw>
<status endtime="20170517 20:14:35.397" status="PASS" starttime="20170517 20:14:35.348"></status>
</kw>
<status endtime="20170517 20:14:35.397" status="PASS" starttime="20170517 20:14:34.888"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.1991" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:35.735" status="PASS" starttime="20170517 20:14:35.397"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:35.736">Executing command 'rm /tmp/core_phosphor-fan-mo.1991'.</msg>
<msg level="INFO" timestamp="20170517 20:14:35.945">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:35.945">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:35.946">${stderr} = </msg>
<status endtime="20170517 20:14:35.946" status="PASS" starttime="20170517 20:14:35.736"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:35.946">Length is 0</msg>
<status endtime="20170517 20:14:35.946" status="PASS" starttime="20170517 20:14:35.946"></status>
</kw>
<status endtime="20170517 20:14:35.946" status="PASS" starttime="20170517 20:14:35.735"></status>
</kw>
<status endtime="20170517 20:14:35.946" status="PASS" starttime="20170517 20:14:35.397"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.2219" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:36.546" status="PASS" starttime="20170517 20:14:35.947"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:36.547">Executing command 'rm /tmp/core_phosphor-fan-mo.2219'.</msg>
<msg level="INFO" timestamp="20170517 20:14:36.594">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:36.594">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:36.594">${stderr} = </msg>
<status endtime="20170517 20:14:36.594" status="PASS" starttime="20170517 20:14:36.547"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:36.594">Length is 0</msg>
<status endtime="20170517 20:14:36.595" status="PASS" starttime="20170517 20:14:36.594"></status>
</kw>
<status endtime="20170517 20:14:36.595" status="PASS" starttime="20170517 20:14:36.546"></status>
</kw>
<status endtime="20170517 20:14:36.595" status="PASS" starttime="20170517 20:14:35.947"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.2222" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:36.862" status="PASS" starttime="20170517 20:14:36.595"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:36.863">Executing command 'rm /tmp/core_phosphor-fan-mo.2222'.</msg>
<msg level="INFO" timestamp="20170517 20:14:36.910">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:36.910">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:36.910">${stderr} = </msg>
<status endtime="20170517 20:14:36.910" status="PASS" starttime="20170517 20:14:36.863"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:36.910">Length is 0</msg>
<status endtime="20170517 20:14:36.910" status="PASS" starttime="20170517 20:14:36.910"></status>
</kw>
<status endtime="20170517 20:14:36.911" status="PASS" starttime="20170517 20:14:36.862"></status>
</kw>
<status endtime="20170517 20:14:36.911" status="PASS" starttime="20170517 20:14:36.595"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.2225" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:37.736" status="PASS" starttime="20170517 20:14:36.911"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:37.738">Executing command 'rm /tmp/core_phosphor-fan-mo.2225'.</msg>
<msg level="INFO" timestamp="20170517 20:14:37.844">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:37.844">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:37.844">${stderr} = </msg>
<status endtime="20170517 20:14:37.844" status="PASS" starttime="20170517 20:14:37.737"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:37.845">Length is 0</msg>
<status endtime="20170517 20:14:37.845" status="PASS" starttime="20170517 20:14:37.844"></status>
</kw>
<status endtime="20170517 20:14:37.845" status="PASS" starttime="20170517 20:14:37.737"></status>
</kw>
<status endtime="20170517 20:14:37.845" status="PASS" starttime="20170517 20:14:36.911"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.2250" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:38.107" status="PASS" starttime="20170517 20:14:37.845"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:38.108">Executing command 'rm /tmp/core_phosphor-fan-mo.2250'.</msg>
<msg level="INFO" timestamp="20170517 20:14:38.175">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:38.175">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:38.175">${stderr} = </msg>
<status endtime="20170517 20:14:38.175" status="PASS" starttime="20170517 20:14:38.108"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:38.176">Length is 0</msg>
<status endtime="20170517 20:14:38.176" status="PASS" starttime="20170517 20:14:38.176"></status>
</kw>
<status endtime="20170517 20:14:38.176" status="PASS" starttime="20170517 20:14:38.107"></status>
</kw>
<status endtime="20170517 20:14:38.176" status="PASS" starttime="20170517 20:14:37.845"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.2253" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:38.688" status="PASS" starttime="20170517 20:14:38.177"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:38.689">Executing command 'rm /tmp/core_phosphor-fan-mo.2253'.</msg>
<msg level="INFO" timestamp="20170517 20:14:38.871">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:38.871">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:38.871">${stderr} = </msg>
<status endtime="20170517 20:14:38.871" status="PASS" starttime="20170517 20:14:38.689"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:38.872">Length is 0</msg>
<status endtime="20170517 20:14:38.872" status="PASS" starttime="20170517 20:14:38.872"></status>
</kw>
<status endtime="20170517 20:14:38.872" status="PASS" starttime="20170517 20:14:38.688"></status>
</kw>
<status endtime="20170517 20:14:38.872" status="PASS" starttime="20170517 20:14:38.176"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.2258" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:39.441" status="PASS" starttime="20170517 20:14:38.873"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:39.443">Executing command 'rm /tmp/core_phosphor-fan-mo.2258'.</msg>
<msg level="INFO" timestamp="20170517 20:14:39.680">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:39.681">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:39.681">${stderr} = </msg>
<status endtime="20170517 20:14:39.681" status="PASS" starttime="20170517 20:14:39.442"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:39.681">Length is 0</msg>
<status endtime="20170517 20:14:39.681" status="PASS" starttime="20170517 20:14:39.681"></status>
</kw>
<status endtime="20170517 20:14:39.681" status="PASS" starttime="20170517 20:14:39.442"></status>
</kw>
<status endtime="20170517 20:14:39.682" status="PASS" starttime="20170517 20:14:38.872"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.2262" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:40.386" status="PASS" starttime="20170517 20:14:39.682"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:40.387">Executing command 'rm /tmp/core_phosphor-fan-mo.2262'.</msg>
<msg level="INFO" timestamp="20170517 20:14:40.529">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:40.529">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:40.529">${stderr} = </msg>
<status endtime="20170517 20:14:40.529" status="PASS" starttime="20170517 20:14:40.387"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:40.530">Length is 0</msg>
<status endtime="20170517 20:14:40.530" status="PASS" starttime="20170517 20:14:40.529"></status>
</kw>
<status endtime="20170517 20:14:40.530" status="PASS" starttime="20170517 20:14:40.386"></status>
</kw>
<status endtime="20170517 20:14:40.530" status="PASS" starttime="20170517 20:14:39.682"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-fan-mo.2265" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:40.967" status="PASS" starttime="20170517 20:14:40.530"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:40.969">Executing command 'rm /tmp/core_phosphor-fan-mo.2265'.</msg>
<msg level="INFO" timestamp="20170517 20:14:41.052">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:41.052">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:41.052">${stderr} = </msg>
<status endtime="20170517 20:14:41.053" status="PASS" starttime="20170517 20:14:40.968"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:41.053">Length is 0</msg>
<status endtime="20170517 20:14:41.053" status="PASS" starttime="20170517 20:14:41.053"></status>
</kw>
<status endtime="20170517 20:14:41.053" status="PASS" starttime="20170517 20:14:40.968"></status>
</kw>
<status endtime="20170517 20:14:41.053" status="PASS" starttime="20170517 20:14:40.530"></status>
</kw>
<kw name="${index} = /tmp/core_phosphor-hwmon-.1743" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170517 20:14:41.375" status="PASS" starttime="20170517 20:14:41.054"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:41.377">Executing command 'rm /tmp/core_phosphor-hwmon-.1743'.</msg>
<msg level="INFO" timestamp="20170517 20:14:41.423">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:41.424">${stdout} = </msg>
<msg level="INFO" timestamp="20170517 20:14:41.424">${stderr} = </msg>
<status endtime="20170517 20:14:41.424" status="PASS" starttime="20170517 20:14:41.376"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:41.424">Length is 0</msg>
<status endtime="20170517 20:14:41.424" status="PASS" starttime="20170517 20:14:41.424"></status>
</kw>
<status endtime="20170517 20:14:41.424" status="PASS" starttime="20170517 20:14:41.375"></status>
</kw>
<status endtime="20170517 20:14:41.424" status="PASS" starttime="20170517 20:14:41.054"></status>
</kw>
<status endtime="20170517 20:14:41.424" status="PASS" starttime="20170517 20:14:31.520"></status>
</kw>
<status endtime="20170517 20:14:41.425" status="PASS" starttime="20170517 20:14:28.440"></status>
</kw>
<status endtime="20170517 20:14:41.425" status="PASS" starttime="20170517 20:14:28.416"></status>
</kw>
<status endtime="20170517 20:14:41.425" status="PASS" starttime="20170517 20:14:28.413"></status>
</kw>
<status endtime="20170517 20:14:41.425" status="PASS" starttime="20170517 20:14:28.413"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170517 20:14:41.428" status="PASS" starttime="20170517 20:14:41.427"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:41.428">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:41.428">${ret_values} = None</msg>
<status endtime="20170517 20:14:41.428" status="PASS" starttime="20170517 20:14:41.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170517 20:14:41.429" status="PASS" starttime="20170517 20:14:41.428"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:41.455">Dictionary does not contain key 'host'.</msg>
<status endtime="20170517 20:14:41.455" status="FAIL" starttime="20170517 20:14:41.455"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:41.455">${has_host} = False</msg>
<status endtime="20170517 20:14:41.455" status="PASS" starttime="20170517 20:14:41.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170517 20:14:41.457" status="PASS" starttime="20170517 20:14:41.456"></status>
</kw>
<status endtime="20170517 20:14:41.457" status="PASS" starttime="20170517 20:14:41.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:41.458">${port_num} = 22</msg>
<status endtime="20170517 20:14:41.458" status="PASS" starttime="20170517 20:14:41.458"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:41.459">${SSH_PORT} = 22</msg>
<status endtime="20170517 20:14:41.459" status="PASS" starttime="20170517 20:14:41.458"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:41.459">${https_num} = 443</msg>
<status endtime="20170517 20:14:41.459" status="PASS" starttime="20170517 20:14:41.459"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:41.460">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170517 20:14:41.460" status="PASS" starttime="20170517 20:14:41.460"></status>
</kw>
<status endtime="20170517 20:14:41.460" status="PASS" starttime="20170517 20:14:41.457"></status>
</kw>
<status endtime="20170517 20:14:41.460" status="PASS" starttime="20170517 20:14:41.457"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:41.461">Dictionary does not contain key 'port'.</msg>
<status endtime="20170517 20:14:41.461" status="FAIL" starttime="20170517 20:14:41.461"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:41.462">${has_port} = False</msg>
<status endtime="20170517 20:14:41.462" status="PASS" starttime="20170517 20:14:41.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170517 20:14:41.463" status="PASS" starttime="20170517 20:14:41.463"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170517 20:14:41.464" status="PASS" starttime="20170517 20:14:41.463"></status>
</kw>
<status endtime="20170517 20:14:41.464" status="PASS" starttime="20170517 20:14:41.463"></status>
</kw>
<status endtime="20170517 20:14:41.464" status="PASS" starttime="20170517 20:14:41.462"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:41.465">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170517 20:14:43.674">Read output: root@witherspoon:~#</msg>
<status endtime="20170517 20:14:43.674" status="PASS" starttime="20170517 20:14:41.465"></status>
</kw>
<status endtime="20170517 20:14:43.674" status="PASS" starttime="20170517 20:14:41.454"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:43.675">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170517 20:14:43.675" status="PASS" starttime="20170517 20:14:43.675"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:43.676">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status endtime="20170517 20:14:43.676" status="PASS" starttime="20170517 20:14:43.676"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:43.677">${logpath} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_procinfo.txt</msg>
<status endtime="20170517 20:14:43.677" status="PASS" starttime="20170517 20:14:43.677"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170517 20:14:43.679" status="PASS" starttime="20170517 20:14:43.678"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:43.679">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170517 20:14:43.753">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:43.753">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170517 20:14:43.753">${stderr} = </msg>
<status endtime="20170517 20:14:43.753" status="PASS" starttime="20170517 20:14:43.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:43.759">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_procinfo.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:43.759" status="PASS" starttime="20170517 20:14:43.758"></status>
</kw>
<status endtime="20170517 20:14:43.759" status="PASS" starttime="20170517 20:14:43.758"></status>
</kw>
<status endtime="20170517 20:14:43.759" status="PASS" starttime="20170517 20:14:43.753"></status>
</kw>
<status endtime="20170517 20:14:43.759" status="PASS" starttime="20170517 20:14:43.678"></status>
</kw>
<status endtime="20170517 20:14:43.759" status="PASS" starttime="20170517 20:14:43.677"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:43.760">${logpath} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_meminfo.txt</msg>
<status endtime="20170517 20:14:43.760" status="PASS" starttime="20170517 20:14:43.760"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170517 20:14:43.761" status="PASS" starttime="20170517 20:14:43.761"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:43.762">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170517 20:14:43.837">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:43.837">${stdout} = MemTotal:         432932 kB
MemFree:          279096 kB
MemAvailable:     320880 kB
Buffers:           10524 kB
Cached:            50200 kB
SwapCached:            0 kB
Active:           106696 kB
Inac...</msg>
<msg level="INFO" timestamp="20170517 20:14:43.837">${stderr} = </msg>
<status endtime="20170517 20:14:43.837" status="PASS" starttime="20170517 20:14:43.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:43.843">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_meminfo.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:43.843" status="PASS" starttime="20170517 20:14:43.842"></status>
</kw>
<status endtime="20170517 20:14:43.843" status="PASS" starttime="20170517 20:14:43.842"></status>
</kw>
<status endtime="20170517 20:14:43.843" status="PASS" starttime="20170517 20:14:43.837"></status>
</kw>
<status endtime="20170517 20:14:43.843" status="PASS" starttime="20170517 20:14:43.760"></status>
</kw>
<status endtime="20170517 20:14:43.843" status="PASS" starttime="20170517 20:14:43.759"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:43.844">${logpath} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_journalctl.txt</msg>
<status endtime="20170517 20:14:43.844" status="PASS" starttime="20170517 20:14:43.844"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170517 20:14:43.845" status="PASS" starttime="20170517 20:14:43.845"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:43.846">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170517 20:14:51.314">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:51.317">${stdout} = -- Logs begin at Wed 2017-05-17 19:58:59 UTC, end at Wed 2017-05-17 20:14:49 UTC. --
May 17 19:58:59 witherspoon kernel: Booting Linux on physical CPU 0x0
May 17 19:58:59 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170517 20:14:51.317">${stderr} = </msg>
<status endtime="20170517 20:14:51.317" status="PASS" starttime="20170517 20:14:43.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:51.329">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_journalctl.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:51.329" status="PASS" starttime="20170517 20:14:51.327"></status>
</kw>
<status endtime="20170517 20:14:51.330" status="PASS" starttime="20170517 20:14:51.324"></status>
</kw>
<status endtime="20170517 20:14:51.330" status="PASS" starttime="20170517 20:14:51.318"></status>
</kw>
<status endtime="20170517 20:14:51.330" status="PASS" starttime="20170517 20:14:43.844"></status>
</kw>
<status endtime="20170517 20:14:51.330" status="PASS" starttime="20170517 20:14:43.843"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:51.331">${logpath} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_dmesg.txt</msg>
<status endtime="20170517 20:14:51.331" status="PASS" starttime="20170517 20:14:51.330"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170517 20:14:51.332" status="PASS" starttime="20170517 20:14:51.332"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:51.333">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170517 20:14:51.466">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:51.467">${stdout} = 0x0000004c0000-0x000001c00000 : "rofs"
0x000001c00000-0x000002000000 : "rwfs"
platform 1e620000.flash-controller:flash@1: mx25l25635e (32768 Kbytes)
aspeed-smc 1e630000.flash-controller: no DMA suppor...</msg>
<msg level="INFO" timestamp="20170517 20:14:51.467">${stderr} = </msg>
<status endtime="20170517 20:14:51.467" status="PASS" starttime="20170517 20:14:51.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:51.475">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_dmesg.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:51.475" status="PASS" starttime="20170517 20:14:51.475"></status>
</kw>
<status endtime="20170517 20:14:51.476" status="PASS" starttime="20170517 20:14:51.474"></status>
</kw>
<status endtime="20170517 20:14:51.476" status="PASS" starttime="20170517 20:14:51.467"></status>
</kw>
<status endtime="20170517 20:14:51.476" status="PASS" starttime="20170517 20:14:51.331"></status>
</kw>
<status endtime="20170517 20:14:51.476" status="PASS" starttime="20170517 20:14:51.330"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:51.477">${logpath} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_proc_list.txt</msg>
<status endtime="20170517 20:14:51.477" status="PASS" starttime="20170517 20:14:51.476"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170517 20:14:51.478" status="PASS" starttime="20170517 20:14:51.478"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:51.478">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170517 20:14:51.887">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170517 20:14:51.887">${stdout} = Mem: 153960K used, 278972K free, 14928K shrd, 10524K buff, 50208K cached
CPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 2.22 2.83 1.83 1/142 2349
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170517 20:14:51.887">${stderr} = </msg>
<status endtime="20170517 20:14:51.887" status="PASS" starttime="20170517 20:14:51.478"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:51.894">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_proc_list.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:51.894" status="PASS" starttime="20170517 20:14:51.893"></status>
</kw>
<status endtime="20170517 20:14:51.894" status="PASS" starttime="20170517 20:14:51.892"></status>
</kw>
<status endtime="20170517 20:14:51.894" status="PASS" starttime="20170517 20:14:51.887"></status>
</kw>
<status endtime="20170517 20:14:51.894" status="PASS" starttime="20170517 20:14:51.477"></status>
</kw>
<status endtime="20170517 20:14:51.894" status="PASS" starttime="20170517 20:14:51.476"></status>
</kw>
<status endtime="20170517 20:14:51.894" status="PASS" starttime="20170517 20:14:43.676"></status>
</kw>
<status endtime="20170517 20:14:51.895" status="PASS" starttime="20170517 20:14:43.675"></status>
</kw>
<status endtime="20170517 20:14:51.895" status="PASS" starttime="20170517 20:14:43.675"></status>
</kw>
<status endtime="20170517 20:14:51.895" status="PASS" starttime="20170517 20:14:43.675"></status>
</kw>
<status endtime="20170517 20:14:51.895" status="PASS" starttime="20170517 20:14:41.453"></status>
</kw>
<status endtime="20170517 20:14:51.895" status="PASS" starttime="20170517 20:14:41.429"></status>
</kw>
<status endtime="20170517 20:14:51.895" status="PASS" starttime="20170517 20:14:41.425"></status>
</kw>
<status endtime="20170517 20:14:51.895" status="PASS" starttime="20170517 20:14:41.425"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170517 20:14:51.897" status="PASS" starttime="20170517 20:14:51.897"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:51.897">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:51.897">${ret_values} = None</msg>
<status endtime="20170517 20:14:51.897" status="PASS" starttime="20170517 20:14:51.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170517 20:14:51.898" status="PASS" starttime="20170517 20:14:51.897"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:51.925">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:14:51.926" status="PASS" starttime="20170517 20:14:51.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:51.926">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:14:51.927" status="PASS" starttime="20170517 20:14:51.926"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:51.927">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:14:51.927" status="PASS" starttime="20170517 20:14:51.927"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:51.928">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:14:51.928" status="PASS" starttime="20170517 20:14:51.927"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.139">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:14:52.140" status="PASS" starttime="20170517 20:14:51.928"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:52.140">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:52.140">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:52.140" status="PASS" starttime="20170517 20:14:51.928"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.141">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:52.141" status="PASS" starttime="20170517 20:14:52.140"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.142">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:52.142" status="PASS" starttime="20170517 20:14:52.141"></status>
</kw>
<status endtime="20170517 20:14:52.142" status="PASS" starttime="20170517 20:14:51.924"></status>
</kw>
<status endtime="20170517 20:14:52.142" status="PASS" starttime="20170517 20:14:51.924"></status>
</kw>
<status endtime="20170517 20:14:52.142" status="PASS" starttime="20170517 20:14:51.923"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.143">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170517 20:14:52.143" status="PASS" starttime="20170517 20:14:52.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170517 20:14:52.143" status="PASS" starttime="20170517 20:14:52.143"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.378">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:14:52.379">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:52.379" status="PASS" starttime="20170517 20:14:52.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170517 20:14:52.379" status="PASS" starttime="20170517 20:14:52.379"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:52.380">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:52.380" status="PASS" starttime="20170517 20:14:51.923"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.381">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:52.381" status="PASS" starttime="20170517 20:14:52.380"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:52.381">${status} = True</msg>
<status endtime="20170517 20:14:52.381" status="PASS" starttime="20170517 20:14:52.380"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170517 20:14:52.382" status="PASS" starttime="20170517 20:14:52.381"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.382">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 58 41 98 69 00 00 00 06 58 42 3c 4a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 08 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 35 0c 23 67 a0 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 35 0c 26 7a b8 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 35 0c 26 8b 7b 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 35 0c 26 be ad 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 35 0d 54 3a 11 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1495051911698, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c4 ba a4 68 00 00 00 04 c4 c2 fb 8a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 0a 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 40 0d 40 bc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 3a 73 09 8d 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 3a 76 19 42 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 3a 76 29 dc 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 3a 76 5c ad 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 28 00 0c e6 29 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1495051914618, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 22 e2 bd 00 00 00 04 51 24 d2 8c 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1495052023923, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c0 98 34 82 00 00 00 04 c0 99 b0 37 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 09 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 32 64 a6 64 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 32 67 a3 0e 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 32 67 b3 c9 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 32 67 e6 87 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 33 94 6e b7 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1495052026268, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:14:52.383">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:14:52.383">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/4': {u'Message': u'org.open_power.Error.Host.Event.Event', u'AdditionalData': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 ...</msg>
<status endtime="20170517 20:14:52.383" status="PASS" starttime="20170517 20:14:52.382"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.384">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4']</msg>
<status endtime="20170517 20:14:52.384" status="PASS" starttime="20170517 20:14:52.383"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.384">${logpath} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel</msg>
<status endtime="20170517 20:14:52.384" status="PASS" starttime="20170517 20:14:52.384"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:52.386">Created file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:52.386" status="PASS" starttime="20170517 20:14:52.384"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/1" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.390">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:14:52.390" status="PASS" starttime="20170517 20:14:52.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.391">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:14:52.391" status="PASS" starttime="20170517 20:14:52.390"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.391">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:14:52.391" status="PASS" starttime="20170517 20:14:52.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.392">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:14:52.392" status="PASS" starttime="20170517 20:14:52.392"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.591">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:14:52.591" status="PASS" starttime="20170517 20:14:52.393"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:52.591">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:52.591">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:52.591" status="PASS" starttime="20170517 20:14:52.392"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.592">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:52.592" status="PASS" starttime="20170517 20:14:52.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.593">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:52.593" status="PASS" starttime="20170517 20:14:52.592"></status>
</kw>
<status endtime="20170517 20:14:52.593" status="PASS" starttime="20170517 20:14:52.389"></status>
</kw>
<status endtime="20170517 20:14:52.593" status="PASS" starttime="20170517 20:14:52.388"></status>
</kw>
<status endtime="20170517 20:14:52.593" status="PASS" starttime="20170517 20:14:52.388"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.593">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status endtime="20170517 20:14:52.594" status="PASS" starttime="20170517 20:14:52.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170517 20:14:52.594" status="PASS" starttime="20170517 20:14:52.594"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.681">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:14:52.681">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:52.681" status="PASS" starttime="20170517 20:14:52.594"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170517 20:14:52.682" status="PASS" starttime="20170517 20:14:52.681"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:52.682">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:52.682" status="PASS" starttime="20170517 20:14:52.387"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.682">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:52.683" status="PASS" starttime="20170517 20:14:52.682"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.683">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 58 41 98 69 00 00 00 06 58 42 3c 4a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 08 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 35 0c 23 67 a0 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 35 0c 26 7a b8 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 35 0c 26 8b 7b 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 35 0c 26 be ad 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 35 0d 54 3a 11 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:14:52.683">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:14:52.683">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 58 41 98 69 00 00 00 06 58 42 3c 4a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90...</msg>
<status endtime="20170517 20:14:52.683" status="PASS" starttime="20170517 20:14:52.683"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:52.684">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 58 41 98 69 00 00 00 06 58 42 3c 4a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 ...</msg>
<status endtime="20170517 20:14:52.684" status="PASS" starttime="20170517 20:14:52.386"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.684">Length is 1</msg>
<msg level="INFO" timestamp="20170517 20:14:52.684">${length} = 1</msg>
<status endtime="20170517 20:14:52.684" status="PASS" starttime="20170517 20:14:52.684"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170517 20:14:52.685" status="PASS" starttime="20170517 20:14:52.685"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:52.687">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:52.688" status="PASS" starttime="20170517 20:14:52.687"></status>
</kw>
<status endtime="20170517 20:14:52.688" status="PASS" starttime="20170517 20:14:52.685"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:52.689">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:52.689" status="PASS" starttime="20170517 20:14:52.688"></status>
</kw>
<status endtime="20170517 20:14:52.689" status="PASS" starttime="20170517 20:14:52.688"></status>
</kw>
<status endtime="20170517 20:14:52.689" status="PASS" starttime="20170517 20:14:52.386"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.692">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:14:52.693" status="PASS" starttime="20170517 20:14:52.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.693">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:14:52.693" status="PASS" starttime="20170517 20:14:52.693"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.694">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:14:52.694" status="PASS" starttime="20170517 20:14:52.694"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.695">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:14:52.695" status="PASS" starttime="20170517 20:14:52.694"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.884">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:14:52.884" status="PASS" starttime="20170517 20:14:52.696"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:52.884">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:52.884">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:52.884" status="PASS" starttime="20170517 20:14:52.695"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.885">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:52.885" status="PASS" starttime="20170517 20:14:52.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.886">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:52.886" status="PASS" starttime="20170517 20:14:52.885"></status>
</kw>
<status endtime="20170517 20:14:52.886" status="PASS" starttime="20170517 20:14:52.692"></status>
</kw>
<status endtime="20170517 20:14:52.886" status="PASS" starttime="20170517 20:14:52.691"></status>
</kw>
<status endtime="20170517 20:14:52.886" status="PASS" starttime="20170517 20:14:52.690"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.887">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170517 20:14:52.887" status="PASS" starttime="20170517 20:14:52.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170517 20:14:52.888" status="PASS" starttime="20170517 20:14:52.887"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.973">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:14:52.973">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:52.973" status="PASS" starttime="20170517 20:14:52.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170517 20:14:52.973" status="PASS" starttime="20170517 20:14:52.973"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:52.974">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:52.974" status="PASS" starttime="20170517 20:14:52.690"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.974">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:52.974" status="PASS" starttime="20170517 20:14:52.974"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.975">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c4 ba a4 68 00 00 00 04 c4 c2 fb 8a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 0a 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 40 0d 40 bc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 3a 73 09 8d 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 3a 76 19 42 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 3a 76 29 dc 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 3a 76 5c ad 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 28 00 0c e6 29 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:14:52.975">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:14:52.975">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c4 ba a4 68 00 00 00 04 c4 c2 fb 8a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90...</msg>
<status endtime="20170517 20:14:52.975" status="PASS" starttime="20170517 20:14:52.975"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:52.976">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c4 ba a4 68 00 00 00 04 c4 c2 fb 8a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c ...</msg>
<status endtime="20170517 20:14:52.976" status="PASS" starttime="20170517 20:14:52.689"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.976">Length is 1</msg>
<msg level="INFO" timestamp="20170517 20:14:52.976">${length} = 1</msg>
<status endtime="20170517 20:14:52.977" status="PASS" starttime="20170517 20:14:52.976"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170517 20:14:52.977" status="PASS" starttime="20170517 20:14:52.977"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:52.978">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:52.979" status="PASS" starttime="20170517 20:14:52.978"></status>
</kw>
<status endtime="20170517 20:14:52.979" status="PASS" starttime="20170517 20:14:52.977"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:52.980">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:52.980" status="PASS" starttime="20170517 20:14:52.980"></status>
</kw>
<status endtime="20170517 20:14:52.980" status="PASS" starttime="20170517 20:14:52.979"></status>
</kw>
<status endtime="20170517 20:14:52.980" status="PASS" starttime="20170517 20:14:52.689"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:52.984">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:14:52.984" status="PASS" starttime="20170517 20:14:52.983"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.985">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:14:52.985" status="PASS" starttime="20170517 20:14:52.984"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.985">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:14:52.985" status="PASS" starttime="20170517 20:14:52.985"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:52.986">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:14:52.986" status="PASS" starttime="20170517 20:14:52.986"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:53.179">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:14:53.180" status="PASS" starttime="20170517 20:14:52.987"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:53.180">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:53.180">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:53.180" status="PASS" starttime="20170517 20:14:52.986"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:53.180">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:53.180" status="PASS" starttime="20170517 20:14:53.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:53.181">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:53.181" status="PASS" starttime="20170517 20:14:53.181"></status>
</kw>
<status endtime="20170517 20:14:53.182" status="PASS" starttime="20170517 20:14:52.983"></status>
</kw>
<status endtime="20170517 20:14:53.182" status="PASS" starttime="20170517 20:14:52.982"></status>
</kw>
<status endtime="20170517 20:14:53.182" status="PASS" starttime="20170517 20:14:52.982"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.182">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170517 20:14:53.182" status="PASS" starttime="20170517 20:14:53.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170517 20:14:53.183" status="PASS" starttime="20170517 20:14:53.183"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.316">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:14:53.316">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:53.316" status="PASS" starttime="20170517 20:14:53.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170517 20:14:53.317" status="PASS" starttime="20170517 20:14:53.316"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:53.317">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:53.317" status="PASS" starttime="20170517 20:14:52.981"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:53.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:53.318" status="PASS" starttime="20170517 20:14:53.317"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.318">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 22 e2 bd 00 00 00 04 51 24 d2 8c 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:14:53.318">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:14:53.319">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 22 e2 bd 00 00 00 04 51 24 d2 8c 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90...</msg>
<status endtime="20170517 20:14:53.319" status="PASS" starttime="20170517 20:14:53.318"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:53.319">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 22 e2 bd 00 00 00 04 51 24 d2 8c 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e ...</msg>
<status endtime="20170517 20:14:53.319" status="PASS" starttime="20170517 20:14:52.980"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.319">Length is 1</msg>
<msg level="INFO" timestamp="20170517 20:14:53.320">${length} = 1</msg>
<status endtime="20170517 20:14:53.320" status="PASS" starttime="20170517 20:14:53.319"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170517 20:14:53.320" status="PASS" starttime="20170517 20:14:53.320"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:53.322">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:53.322" status="PASS" starttime="20170517 20:14:53.321"></status>
</kw>
<status endtime="20170517 20:14:53.322" status="PASS" starttime="20170517 20:14:53.320"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:53.324">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:53.324" status="PASS" starttime="20170517 20:14:53.323"></status>
</kw>
<status endtime="20170517 20:14:53.324" status="PASS" starttime="20170517 20:14:53.323"></status>
</kw>
<status endtime="20170517 20:14:53.324" status="PASS" starttime="20170517 20:14:52.980"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:53.328">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:14:53.328" status="PASS" starttime="20170517 20:14:53.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.329">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:14:53.329" status="PASS" starttime="20170517 20:14:53.328"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.329">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:14:53.329" status="PASS" starttime="20170517 20:14:53.329"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.330">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:14:53.330" status="PASS" starttime="20170517 20:14:53.330"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:53.558">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:14:53.558" status="PASS" starttime="20170517 20:14:53.331"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:53.559">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:53.559">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:53.559" status="PASS" starttime="20170517 20:14:53.330"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:53.560">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:53.560" status="PASS" starttime="20170517 20:14:53.559"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:53.560">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:53.560" status="PASS" starttime="20170517 20:14:53.560"></status>
</kw>
<status endtime="20170517 20:14:53.560" status="PASS" starttime="20170517 20:14:53.327"></status>
</kw>
<status endtime="20170517 20:14:53.560" status="PASS" starttime="20170517 20:14:53.326"></status>
</kw>
<status endtime="20170517 20:14:53.561" status="PASS" starttime="20170517 20:14:53.325"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.561">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170517 20:14:53.561" status="PASS" starttime="20170517 20:14:53.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170517 20:14:53.562" status="PASS" starttime="20170517 20:14:53.561"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.659">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:14:53.659">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:53.659" status="PASS" starttime="20170517 20:14:53.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170517 20:14:53.660" status="PASS" starttime="20170517 20:14:53.660"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:53.660">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:53.660" status="PASS" starttime="20170517 20:14:53.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:53.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:53.661" status="PASS" starttime="20170517 20:14:53.661"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.662">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c0 98 34 82 00 00 00 04 c0 99 b0 37 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 09 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 32 64 a6 64 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 32 67 a3 0e 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 32 67 b3 c9 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 32 67 e6 87 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 33 94 6e b7 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:14:53.662">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170517 20:14:53.662">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c0 98 34 82 00 00 00 04 c0 99 b0 37 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90...</msg>
<status endtime="20170517 20:14:53.662" status="PASS" starttime="20170517 20:14:53.661"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:53.662">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c0 98 34 82 00 00 00 04 c0 99 b0 37 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f ...</msg>
<status endtime="20170517 20:14:53.662" status="PASS" starttime="20170517 20:14:53.324"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.663">Length is 1</msg>
<msg level="INFO" timestamp="20170517 20:14:53.663">${length} = 1</msg>
<status endtime="20170517 20:14:53.663" status="PASS" starttime="20170517 20:14:53.663"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170517 20:14:53.664" status="PASS" starttime="20170517 20:14:53.663"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:53.665">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:53.665" status="PASS" starttime="20170517 20:14:53.664"></status>
</kw>
<status endtime="20170517 20:14:53.665" status="PASS" starttime="20170517 20:14:53.664"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:53.666">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_esel&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:53.667" status="PASS" starttime="20170517 20:14:53.666"></status>
</kw>
<status endtime="20170517 20:14:53.667" status="PASS" starttime="20170517 20:14:53.665"></status>
</kw>
<status endtime="20170517 20:14:53.667" status="PASS" starttime="20170517 20:14:53.324"></status>
</kw>
<status endtime="20170517 20:14:53.667" status="PASS" starttime="20170517 20:14:52.386"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.683">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:14:53.701">${out} = </msg>
<status endtime="20170517 20:14:53.702" status="PASS" starttime="20170517 20:14:53.667"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:53.718">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170517 20:14:53.718" status="FAIL" starttime="20170517 20:14:53.715"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:53.718">${status} = False</msg>
<status endtime="20170517 20:14:53.718" status="PASS" starttime="20170517 20:14:53.713"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:53.719">Returning from the enclosing user keyword.</msg>
<status endtime="20170517 20:14:53.720" status="PASS" starttime="20170517 20:14:53.719"></status>
</kw>
<status endtime="20170517 20:14:53.720" status="PASS" starttime="20170517 20:14:51.922"></status>
</kw>
<status endtime="20170517 20:14:53.720" status="PASS" starttime="20170517 20:14:51.898"></status>
</kw>
<status endtime="20170517 20:14:53.720" status="PASS" starttime="20170517 20:14:51.895"></status>
</kw>
<status endtime="20170517 20:14:53.720" status="PASS" starttime="20170517 20:14:51.895"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170517 20:14:53.724" status="PASS" starttime="20170517 20:14:53.723"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:53.724">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:53.724">${ret_values} = None</msg>
<status endtime="20170517 20:14:53.724" status="PASS" starttime="20170517 20:14:53.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170517 20:14:53.725" status="PASS" starttime="20170517 20:14:53.724"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:53.756">Dictionary does not contain key 'host'.</msg>
<status endtime="20170517 20:14:53.757" status="FAIL" starttime="20170517 20:14:53.756"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:53.757">${has_host} = False</msg>
<status endtime="20170517 20:14:53.757" status="PASS" starttime="20170517 20:14:53.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170517 20:14:53.758" status="PASS" starttime="20170517 20:14:53.757"></status>
</kw>
<status endtime="20170517 20:14:53.758" status="PASS" starttime="20170517 20:14:53.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.760">${port_num} = 22</msg>
<status endtime="20170517 20:14:53.760" status="PASS" starttime="20170517 20:14:53.759"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.760">${SSH_PORT} = 22</msg>
<status endtime="20170517 20:14:53.760" status="PASS" starttime="20170517 20:14:53.760"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:53.761">${https_num} = 443</msg>
<status endtime="20170517 20:14:53.761" status="PASS" starttime="20170517 20:14:53.760"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:53.761">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170517 20:14:53.762" status="PASS" starttime="20170517 20:14:53.761"></status>
</kw>
<status endtime="20170517 20:14:53.762" status="PASS" starttime="20170517 20:14:53.759"></status>
</kw>
<status endtime="20170517 20:14:53.762" status="PASS" starttime="20170517 20:14:53.758"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170517 20:14:53.763">Dictionary does not contain key 'port'.</msg>
<status endtime="20170517 20:14:53.763" status="FAIL" starttime="20170517 20:14:53.762"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:53.763">${has_port} = False</msg>
<status endtime="20170517 20:14:53.763" status="PASS" starttime="20170517 20:14:53.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170517 20:14:53.765" status="PASS" starttime="20170517 20:14:53.764"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170517 20:14:53.766" status="PASS" starttime="20170517 20:14:53.765"></status>
</kw>
<status endtime="20170517 20:14:53.766" status="PASS" starttime="20170517 20:14:53.764"></status>
</kw>
<status endtime="20170517 20:14:53.766" status="PASS" starttime="20170517 20:14:53.763"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:53.766">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170517 20:14:55.526">Read output: root@witherspoon:~#</msg>
<status endtime="20170517 20:14:55.527" status="PASS" starttime="20170517 20:14:53.766"></status>
</kw>
<status endtime="20170517 20:14:55.527" status="PASS" starttime="20170517 20:14:53.755"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:55.528">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170517 20:14:55.528" status="PASS" starttime="20170517 20:14:55.527"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:55.529">@{cmd_list} = [ ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/o...</msg>
<status endtime="20170517 20:14:55.529" status="PASS" starttime="20170517 20:14:55.529"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:55.530">${logpath} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_led.txt</msg>
<status endtime="20170517 20:14:55.530" status="PASS" starttime="20170517 20:14:55.530"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:55.533">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:14:55.534" status="PASS" starttime="20170517 20:14:55.533"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:55.534">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:14:55.534" status="PASS" starttime="20170517 20:14:55.534"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:55.535">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:14:55.535" status="PASS" starttime="20170517 20:14:55.535"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:55.536">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:14:55.536" status="PASS" starttime="20170517 20:14:55.535"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:56.003">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:14:56.004" status="PASS" starttime="20170517 20:14:55.536"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:56.004">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:56.004">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:56.004" status="PASS" starttime="20170517 20:14:55.536"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:56.004">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:56.004" status="PASS" starttime="20170517 20:14:56.004"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:56.005">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:56.005" status="PASS" starttime="20170517 20:14:56.005"></status>
</kw>
<status endtime="20170517 20:14:56.005" status="PASS" starttime="20170517 20:14:55.532"></status>
</kw>
<status endtime="20170517 20:14:56.005" status="PASS" starttime="20170517 20:14:55.532"></status>
</kw>
<status endtime="20170517 20:14:56.005" status="PASS" starttime="20170517 20:14:55.531"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:56.006">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170517 20:14:56.006" status="PASS" starttime="20170517 20:14:56.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170517 20:14:56.007" status="PASS" starttime="20170517 20:14:56.006"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:56.141">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:14:56.141">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:56.141" status="PASS" starttime="20170517 20:14:56.007"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170517 20:14:56.142" status="PASS" starttime="20170517 20:14:56.142"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:56.142">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:56.142" status="PASS" starttime="20170517 20:14:55.530"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:56.144">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:56.144" status="PASS" starttime="20170517 20:14:56.143"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:56.144">${status} = True</msg>
<status endtime="20170517 20:14:56.144" status="PASS" starttime="20170517 20:14:56.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170517 20:14:56.145" status="PASS" starttime="20170517 20:14:56.144"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:56.145">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:14:56.146">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170517 20:14:56.146">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status endtime="20170517 20:14:56.146" status="PASS" starttime="20170517 20:14:56.145"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:56.147">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_led.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_led.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:56.147" status="PASS" starttime="20170517 20:14:56.147"></status>
</kw>
<status endtime="20170517 20:14:56.147" status="PASS" starttime="20170517 20:14:56.146"></status>
</kw>
<status endtime="20170517 20:14:56.147" status="PASS" starttime="20170517 20:14:55.529"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:56.148">${logpath} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_inventory.txt</msg>
<status endtime="20170517 20:14:56.148" status="PASS" starttime="20170517 20:14:56.148"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:56.151">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:14:56.153" status="PASS" starttime="20170517 20:14:56.151"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:56.154">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:14:56.154" status="PASS" starttime="20170517 20:14:56.154"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:56.155">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:14:56.155" status="PASS" starttime="20170517 20:14:56.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:56.155">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:14:56.155" status="PASS" starttime="20170517 20:14:56.155"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:56.348">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:14:56.348" status="PASS" starttime="20170517 20:14:56.156"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:56.348">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:56.348">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:56.349" status="PASS" starttime="20170517 20:14:56.155"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:56.349">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:56.349" status="PASS" starttime="20170517 20:14:56.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:56.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:56.350" status="PASS" starttime="20170517 20:14:56.350"></status>
</kw>
<status endtime="20170517 20:14:56.350" status="PASS" starttime="20170517 20:14:56.150"></status>
</kw>
<status endtime="20170517 20:14:56.350" status="PASS" starttime="20170517 20:14:56.150"></status>
</kw>
<status endtime="20170517 20:14:56.350" status="PASS" starttime="20170517 20:14:56.149"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:56.351">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170517 20:14:56.351" status="PASS" starttime="20170517 20:14:56.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170517 20:14:56.352" status="PASS" starttime="20170517 20:14:56.351"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.066">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:14:58.066">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:58.066" status="PASS" starttime="20170517 20:14:56.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170517 20:14:58.067" status="PASS" starttime="20170517 20:14:58.066"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:58.067">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:58.067" status="PASS" starttime="20170517 20:14:56.148"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.068">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:58.068" status="PASS" starttime="20170517 20:14:58.068"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:58.068">${status} = True</msg>
<status endtime="20170517 20:14:58.068" status="PASS" starttime="20170517 20:14:58.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170517 20:14:58.069" status="PASS" starttime="20170517 20:14:58.069"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.072">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "2", 
      "PartNumber": "0000000000000000", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "0000000", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775622", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775618", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1983", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ec", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:14:58.073">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170517 20:14:58.073">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
 ...</msg>
<status endtime="20170517 20:14:58.073" status="PASS" starttime="20170517 20:14:58.069"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:58.075">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_inventory.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:58.075" status="PASS" starttime="20170517 20:14:58.075"></status>
</kw>
<status endtime="20170517 20:14:58.075" status="PASS" starttime="20170517 20:14:58.074"></status>
</kw>
<status endtime="20170517 20:14:58.075" status="PASS" starttime="20170517 20:14:56.148"></status>
</kw>
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.076">${logpath} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_record_log.txt</msg>
<status endtime="20170517 20:14:58.076" status="PASS" starttime="20170517 20:14:58.076"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.079">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:14:58.080" status="PASS" starttime="20170517 20:14:58.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.080">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:14:58.080" status="PASS" starttime="20170517 20:14:58.080"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.081">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:14:58.081" status="PASS" starttime="20170517 20:14:58.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.081">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:14:58.082" status="PASS" starttime="20170517 20:14:58.081"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.290">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:14:58.290" status="PASS" starttime="20170517 20:14:58.082"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:58.290">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:58.290">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:58.290" status="PASS" starttime="20170517 20:14:58.082"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.291">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:58.291" status="PASS" starttime="20170517 20:14:58.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.292">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:58.292" status="PASS" starttime="20170517 20:14:58.291"></status>
</kw>
<status endtime="20170517 20:14:58.292" status="PASS" starttime="20170517 20:14:58.078"></status>
</kw>
<status endtime="20170517 20:14:58.292" status="PASS" starttime="20170517 20:14:58.078"></status>
</kw>
<status endtime="20170517 20:14:58.292" status="PASS" starttime="20170517 20:14:58.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.293">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170517 20:14:58.293" status="PASS" starttime="20170517 20:14:58.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170517 20:14:58.294" status="PASS" starttime="20170517 20:14:58.293"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.356">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:14:58.356">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170517 20:14:58.356" status="PASS" starttime="20170517 20:14:58.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170517 20:14:58.357" status="PASS" starttime="20170517 20:14:58.356"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:58.357">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170517 20:14:58.357" status="PASS" starttime="20170517 20:14:58.076"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.358">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170517 20:14:58.358">404 != 200</msg>
<status endtime="20170517 20:14:58.358" status="FAIL" starttime="20170517 20:14:58.358"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:58.358">${status} = False</msg>
<status endtime="20170517 20:14:58.359" status="PASS" starttime="20170517 20:14:58.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170517 20:14:58.359">Continuing for loop from the next iteration.</msg>
<status endtime="20170517 20:14:58.360" status="PASS" starttime="20170517 20:14:58.359"></status>
</kw>
<status endtime="20170517 20:14:58.360" status="PASS" starttime="20170517 20:14:58.359"></status>
</kw>
<status endtime="20170517 20:14:58.360" status="PASS" starttime="20170517 20:14:58.076"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.360">${logpath} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_elog.txt</msg>
<status endtime="20170517 20:14:58.360" status="PASS" starttime="20170517 20:14:58.360"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.364">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:14:58.365" status="PASS" starttime="20170517 20:14:58.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.366">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:14:58.366" status="PASS" starttime="20170517 20:14:58.365"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.366">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:14:58.367" status="PASS" starttime="20170517 20:14:58.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.367">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:14:58.367" status="PASS" starttime="20170517 20:14:58.367"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.563">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:14:58.564" status="PASS" starttime="20170517 20:14:58.368"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:58.564">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:58.564">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:58.564" status="PASS" starttime="20170517 20:14:58.368"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.564">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:58.564" status="PASS" starttime="20170517 20:14:58.564"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.565">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:58.565" status="PASS" starttime="20170517 20:14:58.565"></status>
</kw>
<status endtime="20170517 20:14:58.565" status="PASS" starttime="20170517 20:14:58.363"></status>
</kw>
<status endtime="20170517 20:14:58.565" status="PASS" starttime="20170517 20:14:58.362"></status>
</kw>
<status endtime="20170517 20:14:58.566" status="PASS" starttime="20170517 20:14:58.361"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.566">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170517 20:14:58.566" status="PASS" starttime="20170517 20:14:58.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170517 20:14:58.567" status="PASS" starttime="20170517 20:14:58.567"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.737">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:14:58.737">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:58.737" status="PASS" starttime="20170517 20:14:58.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170517 20:14:58.738" status="PASS" starttime="20170517 20:14:58.738"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:58.738">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:58.739" status="PASS" starttime="20170517 20:14:58.361"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.740">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:58.740" status="PASS" starttime="20170517 20:14:58.739"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:58.740">${status} = True</msg>
<status endtime="20170517 20:14:58.740" status="PASS" starttime="20170517 20:14:58.739"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170517 20:14:58.740" status="PASS" starttime="20170517 20:14:58.740"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.742">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 06 58 41 98 69 00 00 00 06 58 42 3c 4a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 08 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 35 0c 23 67 a0 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 35 0c 26 7a b8 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 35 0c 26 8b 7b 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 35 0c 26 be ad 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 35 0d 54 3a 11 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1495051911698, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c4 ba a4 68 00 00 00 04 c4 c2 fb 8a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0c 90 00 00 0c 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 0a 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 40 0d 40 bc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 3a 73 09 8d 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 3a 76 19 42 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 3a 76 29 dc 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 3a 76 5c ad 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 28 00 0c e6 29 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1495051914618, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 22 e2 bd 00 00 00 04 51 24 d2 8c 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1495052023923, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c0 98 34 82 00 00 00 04 c0 99 b0 37 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 09 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 32 64 a6 64 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 32 67 a3 0e 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 32 67 b3 c9 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 32 67 e6 87 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 33 94 6e b7 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1495052026268, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:14:58.742">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170517 20:14:58.742">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00...</msg>
<status endtime="20170517 20:14:58.742" status="PASS" starttime="20170517 20:14:58.741"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:58.744">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_elog.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:58.744" status="PASS" starttime="20170517 20:14:58.743"></status>
</kw>
<status endtime="20170517 20:14:58.744" status="PASS" starttime="20170517 20:14:58.743"></status>
</kw>
<status endtime="20170517 20:14:58.744" status="PASS" starttime="20170517 20:14:58.360"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.745">${logpath} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_sensor_list.txt</msg>
<status endtime="20170517 20:14:58.745" status="PASS" starttime="20170517 20:14:58.745"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.748">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170517 20:14:58.749" status="PASS" starttime="20170517 20:14:58.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.749">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170517 20:14:58.749" status="PASS" starttime="20170517 20:14:58.749"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.750">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170517 20:14:58.750" status="PASS" starttime="20170517 20:14:58.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.751">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170517 20:14:58.751" status="PASS" starttime="20170517 20:14:58.750"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.931">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170517 20:14:58.932" status="PASS" starttime="20170517 20:14:58.751"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:58.932">${status} = PASS</msg>
<msg level="INFO" timestamp="20170517 20:14:58.932">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:58.932" status="PASS" starttime="20170517 20:14:58.751"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.933">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:58.933" status="PASS" starttime="20170517 20:14:58.932"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:58.933">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:58.933" status="PASS" starttime="20170517 20:14:58.933"></status>
</kw>
<status endtime="20170517 20:14:58.934" status="PASS" starttime="20170517 20:14:58.747"></status>
</kw>
<status endtime="20170517 20:14:58.934" status="PASS" starttime="20170517 20:14:58.746"></status>
</kw>
<status endtime="20170517 20:14:58.934" status="PASS" starttime="20170517 20:14:58.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:58.934">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170517 20:14:58.934" status="PASS" starttime="20170517 20:14:58.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170517 20:14:58.935" status="PASS" starttime="20170517 20:14:58.935"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.147">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170517 20:14:59.148">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:59.148" status="PASS" starttime="20170517 20:14:58.935"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170517 20:14:59.148" status="PASS" starttime="20170517 20:14:59.148"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:59.149">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170517 20:14:59.149" status="PASS" starttime="20170517 20:14:58.745"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:59.150">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170517 20:14:59.150" status="PASS" starttime="20170517 20:14:59.149"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:59.150">${status} = True</msg>
<status endtime="20170517 20:14:59.150" status="PASS" starttime="20170517 20:14:59.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170517 20:14:59.151" status="PASS" starttime="20170517 20:14:59.151"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.152">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170517 20:14:59.152">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170517 20:14:59.152">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170517 20:14:59.152" status="PASS" starttime="20170517 20:14:59.151"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:59.156">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_sensor_list.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/20170517201422512966_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:59.156" status="PASS" starttime="20170517 20:14:59.154"></status>
</kw>
<status endtime="20170517 20:14:59.156" status="PASS" starttime="20170517 20:14:59.153"></status>
</kw>
<status endtime="20170517 20:14:59.156" status="PASS" starttime="20170517 20:14:58.744"></status>
</kw>
<status endtime="20170517 20:14:59.156" status="PASS" starttime="20170517 20:14:55.529"></status>
</kw>
<status endtime="20170517 20:14:59.157" status="PASS" starttime="20170517 20:14:55.528"></status>
</kw>
<status endtime="20170517 20:14:59.157" status="PASS" starttime="20170517 20:14:55.528"></status>
</kw>
<status endtime="20170517 20:14:59.157" status="PASS" starttime="20170517 20:14:55.528"></status>
</kw>
<status endtime="20170517 20:14:59.157" status="PASS" starttime="20170517 20:14:53.754"></status>
</kw>
<status endtime="20170517 20:14:59.157" status="PASS" starttime="20170517 20:14:53.725"></status>
</kw>
<status endtime="20170517 20:14:59.157" status="PASS" starttime="20170517 20:14:53.721"></status>
</kw>
<status endtime="20170517 20:14:59.157" status="PASS" starttime="20170517 20:14:53.721"></status>
</kw>
<status endtime="20170517 20:14:59.157" status="PASS" starttime="20170517 20:14:24.469"></status>
</kw>
<status endtime="20170517 20:14:59.157" status="PASS" starttime="20170517 20:14:24.464"></status>
</kw>
<status endtime="20170517 20:14:59.157" status="PASS" starttime="20170517 20:14:24.464"></status>
</kw>
<status endtime="20170517 20:14:59.157" status="PASS" starttime="20170517 20:14:24.464"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170517 20:14:59.329" status="PASS" starttime="20170517 20:14:59.158"></status>
</kw>
<status endtime="20170517 20:14:59.329" status="PASS" starttime="20170517 20:14:24.462"></status>
</kw>
<status endtime="20170517 20:14:59.329" status="PASS" starttime="20170517 20:14:19.194"></status>
</kw>
<status endtime="20170517 20:14:59.329" status="PASS" starttime="20170517 20:14:19.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170517 20:14:59.330" status="PASS" starttime="20170517 20:14:59.330"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.339">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170517 20:14:59.339" status="PASS" starttime="20170517 20:14:59.331"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.339">${FFDC_DIR_PATH} = /tmp/fspcibld/16253/obmc-robot/logs/20170517201422512966_TestsTestBasicPoweron/20170517201422512966_CheckForApplicationFailures/</msg>
<status endtime="20170517 20:14:59.339" status="PASS" starttime="20170517 20:14:59.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170517 20:14:59.340" status="PASS" starttime="20170517 20:14:59.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170517 20:14:59.341" status="PASS" starttime="20170517 20:14:59.340"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:59.341">Directory '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs"&gt;/tmp/fspcibld/16253/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170517 20:14:59.341" status="PASS" starttime="20170517 20:14:59.341"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:59.343">File '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170517 20:14:59.343" status="PASS" starttime="20170517 20:14:59.342"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:59.343">${exist} = True</msg>
<status endtime="20170517 20:14:59.343" status="PASS" starttime="20170517 20:14:59.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170517 20:14:59.344" status="PASS" starttime="20170517 20:14:59.343"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170517 20:14:59.345" status="PASS" starttime="20170517 20:14:59.344"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.346">${cur_time} = 2017-05-17 20:14:59:345487</msg>
<status endtime="20170517 20:14:59.346" status="PASS" starttime="20170517 20:14:59.345"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.346">${cur_time} = 20170517201459345487</msg>
<status endtime="20170517 20:14:59.346" status="PASS" starttime="20170517 20:14:59.346"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:59.347">${cur_time} = 20170517201459345487</msg>
<status endtime="20170517 20:14:59.347" status="PASS" starttime="20170517 20:14:59.345"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" html="yes" timestamp="20170517 20:14:59.347">Appended to file '&lt;a href="file:///tmp/fspcibld/16253/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/16253/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170517 20:14:59.347" status="PASS" starttime="20170517 20:14:59.347"></status>
</kw>
<status endtime="20170517 20:14:59.348" status="PASS" starttime="20170517 20:14:59.330"></status>
</kw>
<status endtime="20170517 20:14:59.348" status="PASS" starttime="20170517 20:14:18.811"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.349">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:14:59.349" status="PASS" starttime="20170517 20:14:59.349"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.350">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:14:59.350" status="PASS" starttime="20170517 20:14:59.349"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:59.350">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170517 20:14:59.350" status="PASS" starttime="20170517 20:14:59.348"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.351">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170517 20:14:59.351" status="PASS" starttime="20170517 20:14:59.351"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:14:59.358" status="PASS" starttime="20170517 20:14:59.351"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.363">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:14:59.367">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:14:59.367">${output} = /tmp/fspcibld/16253/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170517 20:14:59.367" status="PASS" starttime="20170517 20:14:59.359"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170517 20:14:59.390" status="PASS" starttime="20170517 20:14:59.369"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170517 20:14:59.391" status="PASS" starttime="20170517 20:14:59.390"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.391">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170517 20:14:59.391" status="PASS" starttime="20170517 20:14:59.391"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:59.392">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status endtime="20170517 20:14:59.392" status="PASS" starttime="20170517 20:14:59.350"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.392">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170517 20:14:59.392" status="PASS" starttime="20170517 20:14:59.392"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:14:59.406" status="PASS" starttime="20170517 20:14:59.392"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.425">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:14:59.429">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:14:59.429">${os_con_pid} = 218</msg>
<status endtime="20170517 20:14:59.429" status="PASS" starttime="20170517 20:14:59.406"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170517 20:14:59.441" status="PASS" starttime="20170517 20:14:59.431"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.441">${cmd_buf} = kill -9 218</msg>
<status endtime="20170517 20:14:59.441" status="PASS" starttime="20170517 20:14:59.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:14:59.454" status="PASS" starttime="20170517 20:14:59.443"></status>
</kw>
<status endtime="20170517 20:14:59.454" status="PASS" starttime="20170517 20:14:59.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:59.460">Running command 'kill -9 218 2&gt;&amp;1'.</msg>
<status endtime="20170517 20:14:59.463" status="PASS" starttime="20170517 20:14:59.456"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:59.464">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:14:59.464">${output} = </msg>
<status endtime="20170517 20:14:59.464" status="PASS" starttime="20170517 20:14:59.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170517 20:14:59.479" status="PASS" starttime="20170517 20:14:59.468"></status>
</kw>
<status endtime="20170517 20:14:59.479" status="PASS" starttime="20170517 20:14:59.467"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.480">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status endtime="20170517 20:14:59.480" status="PASS" starttime="20170517 20:14:59.480"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170517 20:14:59.488" status="PASS" starttime="20170517 20:14:59.480"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170517 20:14:59.506">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170517 20:14:59.540">${rc} = 0</msg>
<msg level="INFO" timestamp="20170517 20:14:59.540">${output} = spawn ssh -p 2200 root@9.3.86.161
root@9.3.86.161's password: 
 79.14886|ISTEP 21. 1
 98.99719|ISTEP 21. 2
 98.99774|ISTEP 21. 3
[   99.398968829,5] SkiBoot skiboot-5.5.0-rc3 starting...
[   99.398973...</msg>
<status endtime="20170517 20:14:59.541" status="PASS" starttime="20170517 20:14:59.489"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status endtime="20170517 20:14:59.555" status="PASS" starttime="20170517 20:14:59.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status endtime="20170517 20:14:59.556" status="PASS" starttime="20170517 20:14:59.555"></status>
</kw>
<msg level="INFO" timestamp="20170517 20:14:59.556">${sol_log} = spawn ssh -p 2200 root@9.3.86.161
root@9.3.86.161's password: 
 79.14886|ISTEP 21. 1
 98.99719|ISTEP 21. 2
 98.99774|ISTEP 21. 3
[   99.398968829,5] SkiBoot skiboot-5.5.0-rc3 starting...
[   99.398973...</msg>
<status endtime="20170517 20:14:59.557" status="PASS" starttime="20170517 20:14:59.348"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170517 20:14:59.557">spawn ssh -p 2200 root@9.3.86.161
root@9.3.86.161's password: 
 79.14886|ISTEP 21. 1
 98.99719|ISTEP 21. 2
 98.99774|ISTEP 21. 3
[   99.398968829,5] SkiBoot skiboot-5.5.0-rc3 starting...
[   99.398973215,5] initial console log level: memory 7, driver 5
[   99.398976251,6] CPU: P9 generation processor(max 4 threads/core)
[   99.398979457,7] CPU: Boot CPU PIR is 0x000c PVR is 0x004e0100
[   99.398982326,7] CPU: Initial max PIR set to 0x7fff
[   99.400190831,5] OPAL table: 0x300d2740 .. 0x300d2c00, branch table: 0x30002000
[   99.400199408,7] Parsing HDAT...
[   99.400201464,5] SPIRA-S found.
[   99.400207295,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[   99.400212107,6] SP Family is ibm,ast2500,openbmc
[   99.400219729,7] LPC: IOPATH chip id = 0
[   99.400221674,7] LPC: FW BAR       = f0000000
[   99.400223765,7] LPC: MEM BAR      = e0000000
[   99.400225800,7] LPC: IO BAR       = d0010000
[   99.400227839,7] LPC: Internal BAR = c0012000
[   99.400244509,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[   99.400248320,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[   99.400771795,5] UART: Using UART at 0x60300d00103f8
[   99.401858256,5] IOHUB: PHB4 active bridge mask fc
[   99.401984087,5] IOHUB: PHB4 active bridge mask 9c
[   99.402088919,4] VPD: Model name 0000000000000000 not known
[   99.402193838,5] P9 DD1.02 detected
[   99.402219518,5] XSCOM: chip 0x0 at 0x603fc00000000 [P9N DD1.0]
[   99.402260985,5] P9 DD1.02 detected
[   99.402282069,5] XSCOM: chip 0x8 at 0x623fc00000000 [P9N DD1.0]
[   99.402378320,5] LPC: LPC[000]: Initialized, access via MMIO @0x6030000000000
[   99.402443872,5] LPC: LPC: Default bus on chip 0x0
[   99.402518121,4] HOMER image is not reserved! Reserving
[   99.402578639,4] HOMER image is not reserved! Reserving
[   99.402644665,5] SLW: Enabling: stop0_lite
[   99.402754044,5] PLAT: Using virtual UART
[   99.402883738,7] LPC: LPC: Routing irq 9, policy: 0 (r=1)
[   99.402886805,7] LPC: LPC: SerIRQ 9 using route 0 targetted at OPAL
[   99.402985335,5] PLAT: Detected Witherspoon platform
[   99.403610904,4] XIVE[ IC 00  ] IC BAR invalid, reconfiguring
[   99.406252498,4] XIVE[ IC 08  ] IC BAR invalid, reconfiguring
[   99.425639387,5] PSI[0x000]: ESB MMIO invalid, reconfiguring...
[   99.425706705,5] PSI[0x000]: ESB MMIO at @0x60302031c0000
[   99.425782425,5] PSI[0x000]: Found PSI bridge [active=0]
[   99.425830974,5] PSI[0x008]: ESB MMIO invalid, reconfiguring...
[   99.425868523,5] PSI[0x008]: ESB MMIO at @0x62302031c0000
[   99.425920776,5] PSI[0x008]: Found PSI bridge [active=0]
[   99.426888683,5] CPU: All 32 processors called in...
[    0.293515200,3] LPC-MBOX: Got a status bit set that don't know about: 0x80
[    1.499204848,5] FLASH: Found system flash:  id:0
[    1.499269952,5] BT: Interface initialized, IO 0x00e4
[    1.499311360,7] LPC: LPC: Routing irq 10, policy: 0 (r=1)
[    1.499313968,7] LPC: LPC: SerIRQ 10 using route 1 targetted at OPAL
[    2.448325392,5] NVRAM: Size is 576 KB
[    3.452901008,5] STB: secure and trusted boot not supported
[    3.452958320,5] OPAL: Using OPAL UART console
[    3.453002480,7] LPC: LPC: Routing irq 4, policy: 0 (r=1)
[    3.453004896,7] LPC: LPC: SerIRQ 4 using route 2 targetted at OPAL
[    3.453071296,5] SLW: Init chip 0x0
[    3.453089536,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.453124016,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.453160624,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.453194144,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.453234128,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.453270896,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.453311168,5] SLW: Init chip 0x8
[    3.453357312,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.453394672,5] SLW: EC_PPM_SPECIAL_WKUP_HYP read  0x0000000000000000
[    3.453450224,5] CAPI: WARNING: no compat thing found
[    3.453481600,5] FLASH: Queueing preload of 0/0
[    3.453504848,5] FLASH: Queueing preload of 1/0
[    3.453510976,7] LPC-MBOX: Sending BMC interrupt
[    3.453653776,5] PHB: Chip 0 Found PHB4 PBCQ0 Stack 0 at /xscom@603fc00000000/pbcq@4010c00/stack@0
[    3.453715152,3] PHB[0:0] No PHB BAR set ! Overriding
[    3.453743216,3] PHB[0:0] REGS     = 0x000600c3c0000000 [4k]
[    3.453773472,3] PHB[0:0] No IRQ BAR set ! Overriding
[    3.453798944,3] PHB[0:0] ESB      = 0x000600c300000000 [...]
[    3.453835040,3] PHB[0:0] No MMIO BAR set ! Overriding
[    3.453870080,3] ETU reset: 0
[    3.454397072,3] Version reg: 0x000000a400000001
[    3.454450784,5] PHB: Chip 0 Found PHB4 PBCQ1 Stack 0 at /xscom@603fc00000000/pbcq@4011000/stack@0
[    3.454502832,3] PHB[0:1] No PHB BAR set ! Overriding
[    3.454531760,3] PHB[0:1] REGS     = 0x000600c3c0100000 [4k]
[    3.454560208,3] PHB[0:1] No IRQ BAR set ! Overriding
[    3.454586016,3] PHB[0:1] ESB      = 0x000600c320000000 [...]
[    3.454615712,3] PHB[0:1] No MMIO BAR set ! Overriding
[    3.454650576,3] ETU reset: 0
[    3.455183040,3] Version reg: 0x000000a400000001
[    3.455232080,5] PHB: Chip 0 Found PHB4 PBCQ1 Stack 1 at /xscom@603fc00000000/pbcq@4011000/stack@1
[    3.455315488,3] PHB[0:2] No PHB BAR set ! Overriding
[    3.455343824,3] PHB[0:2] REGS     = 0x000600c3c0200000 [4k]
[    3.455373952,3] PHB[0:2] No IRQ BAR set ! Overriding
[    3.455403200,3] PHB[0:2] ESB      = 0x000600c340000000 [...]
[    3.455434112,3] PHB[0:2] No MMIO BAR set ! Overriding
[    3.455478192,3] ETU reset: 0
[    3.456005712,3] Version reg: 0x000000a400000001
[    3.456065552,5] PHB: Chip 0 Found PHB4 PBCQ2 Stack 0 at /xscom@603fc00000000/pbcq@4011400/stack@0
[    3.456122720,3] PHB[0:3] No PHB BAR set ! Overriding
[    3.456149808,3] PHB[0:3] REGS     = 0x000600c3c0300000 [4k]
[    3.456177808,3] PHB[0:3] No IRQ BAR set ! Overriding
[    3.456202848,3] PHB[0:3] ESB      = 0x000600c360000000 [...]
[    3.456232448,3] PHB[0:3] No MMIO BAR set ! Overriding
[    3.456266640,3] ETU reset: 0
[    3.456795328,3] Version reg: 0x000000a400000001
[    3.456841456,5] PHB: Chip 0 Found PHB4 PBCQ2 Stack 1 at /xscom@603fc00000000/pbcq@4011400/stack@1
[    3.456897488,3] PHB[0:4] No PHB BAR set ! Overriding
[    3.456923744,3] PHB[0:4] REGS     = 0x000600c3c0400000 [4k]
[    3.456952656,3] PHB[0:4] No IRQ BAR set ! Overriding
[    3.456976832,3] PHB[0:4] ESB      = 0x000600c380000000 [...]
[    3.457007296,3] PHB[0:4] No MMIO BAR set ! Overriding
[    3.457041744,3] ETU reset: 0
[    3.457569248,3] Version reg: 0x000000a400000001
[    3.457624384,5] PHB: Chip 0 Found PHB4 PBCQ2 Stack 2 at /xscom@603fc00000000/pbcq@4011400/stack@2
[    3.457676816,3] PHB[0:5] No PHB BAR set ! Overriding
[    3.457704336,3] PHB[0:5] REGS     = 0x000600c3c0500000 [4k]
[    3.457732704,3] PHB[0:5] No IRQ BAR set ! Overriding
[    3.457756832,3] PHB[0:5] ESB      = 0x000600c3a0000000 [...]
[    3.457788576,3] PHB[0:5] No MMIO BAR set ! Overriding
[    3.457837840,3] ETU reset: 0
[    3.458366560,3] Version reg: 0x000000a400000001
[    3.458430448,5] PHB: Chip 8 Found PHB4 PBCQ0 Stack 0 at /xscom@623fc00000000/pbcq@4010c00/stack@0
[    3.458489744,3] PHB[8:0] No PHB BAR set ! Overriding
[    3.458517472,3] PHB[8:0] REGS     = 0x000620c3c0000000 [4k]
[    3.458545888,3] PHB[8:0] No IRQ BAR set ! Overriding
[    3.458570144,3] PHB[8:0] ESB      = 0x000620c300000000 [...]
[    3.458601616,3] PHB[8:0] No MMIO BAR set ! Overriding
[    3.458635968,3] ETU reset: 0
[    3.459165248,3] Version reg: 0x000000a400000001
[    3.459226112,5] PHB: Chip 8 Found PHB4 PBCQ2 Stack 0 at /xscom@623fc00000000/pbcq@4011400/stack@0
[    3.459282128,3] PHB[8:3] No PHB BAR set ! Overriding
[    3.459310336,3] PHB[8:3] REGS     = 0x000620c3c0300000 [4k]
[    3.459343760,3] PHB[8:3] No IRQ BAR set ! Overriding
[    3.459368432,3] PHB[8:3] ESB      = 0x000620c360000000 [...]
[    3.459399216,3] PHB[8:3] No MMIO BAR set ! Overriding
[    3.459433648,3] ETU reset: 0
[    3.459962480,3] Version reg: 0x000000a400000001
[    3.460010096,5] PHB: Chip 8 Found PHB4 PBCQ2 Stack 1 at /xscom@623fc00000000/pbcq@4011400/stack@1
[    3.460065168,3] PHB[8:4] No PHB BAR set ! Overriding
[    3.460092400,3] PHB[8:4] REGS     = 0x000620c3c0400000 [4k]
[    3.460119856,3] PHB[8:4] No IRQ BAR set ! Overriding
[    3.460144160,3] PHB[8:4] ESB      = 0x000620c380000000 [...]
[    3.460175024,3] PHB[8:4] No MMIO BAR set ! Overriding
[    3.460210096,3] ETU reset: 0
[    3.460738960,3] Version reg: 0x000000a400000001
[    3.460791328,5] PHB: Chip 8 Found PHB4 PBCQ2 Stack 2 at /xscom@623fc00000000/pbcq@4011400/stack@2
[    3.460851312,3] PHB[8:5] No PHB BAR set ! Overriding
[    3.460881696,3] PHB[8:5] REGS     = 0x000620c3c0500000 [4k]
[    3.460910528,3] PHB[8:5] No IRQ BAR set ! Overriding
[    3.460935184,3] PHB[8:5] ESB      = 0x000620c3a0000000 [...]
[    3.460965248,3] PHB[8:5] No MMIO BAR set ! Overriding
[    3.461000896,3] ETU reset: 0
[    3.461530624,3] Version reg: 0x000000a400000001
[    3.461636224,3] PHB#0000[0:0]: Base location code not found !
[    3.462629168,3] PHB#0001[0:1]: Base location code not found !
[    3.463503312,3] PHB#0002[0:2]: Base location code not found !
[    3.464382224,3] PHB#0003[0:3]: Base location code not found !
[    3.465377584,3] PHB#0004[0:4]: Base location code not found !
[    3.466256928,3] PHB#0005[0:5]: Base location code not found !
[    3.467140128,3] PHB#0030[8:0]: Base location code not found !
[    3.468294464,3] PHB#0033[8:3]: Base location code not found !
[    3.469441440,3] PHB#0034[8:4]: Base location code not found !
[    3.470404736,3] PHB#0035[8:5]: Base location code not found !
[    3.471443456,5] PCI: Resetting PHBs...
[   11.063622160,5] PCI: Probing slots...
[   11.120160608,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   11.120292640,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[   11.120416976,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[   11.120544208,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[   11.120682528,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[   11.120947152,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[   11.121086944,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   11.121210208,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..12 
[   11.121345216,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..12 
[   11.121483792,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[   11.121639504,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[   11.121806544,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..08 
[   11.121944784,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:09..0d 
[   11.122081824,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:0e..12 
[   11.122202384,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   11.122339344,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   11.122483568,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   11.122633232,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   11.122762880,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[   11.122891920,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   11.123038352,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   11.123173568,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   11.123319296,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   11.123449888,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   11.123583680,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..0c 
[   11.123749024,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..0c 
[   11.123886000,5] PHB#0035:02:08.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..07 
[   11.124020176,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:08..0c 
[   11.143343504,5] irq ffff0 name: psi:fsp (7/0)
[   11.143418448,5] irq ffff1 name: psi:occ (7/8)
[   11.143494672,5] irq ffff2 name: psi:fsi (7/16)
[   11.143584000,5] irq ffff3 name: psi:lpchc (9/24)
[   11.143665680,5] irq ffff4 name: psi:local_err (13/34)
[   11.143762960,5] irq ffff5 name: psi:global_err (14/48)
[   11.143864112,5] irq ffff6 name: psi:external (12/63)
[   11.143957824,5] irq ffff7 name: psi:lpc_serirq_mux0 (19/76)
[   11.144066464,5] irq ffff8 name: psi:lpc_serirq_mux1 (19/96)
[   11.144159328,5] irq ffff9 name: psi:lpc_serirq_mux2 (19/116)
[   11.144271168,5] irq ffffa name: psi:lpc_serirq_mux3 (19/136)
[   11.144363968,5] irq ffffb name: psi:i2c (7/156)
[   11.144436944,5] irq ffffc name: psi:dio (7/164)
[   11.144517360,5] irq ffffd name: psi:psu (7/172)
[   11.144596400,5] irq 1ffff0 name: psi:fsp (7/180)
[   11.144679184,5] irq 1ffff1 name: psi:occ (7/188)
[   11.144770112,5] irq 1ffff2 name: psi:fsi (7/196)
[   11.144846176,5] irq 1ffff3 name: psi:lpchc (9/204)
[   11.144930144,5] irq 1ffff4 name: psi:local_err (13/214)
[   11.145031104,5] irq 1ffff5 name: psi:global_err (14/228)
[   11.145139216,5] irq 1ffff6 name: psi:external (12/243)
[   11.145229968,5] irq 1ffffb name: psi:i2c (7/256)
[   11.145316592,5] irq 1ffffc name: psi:dio (7/264)
[   11.145395440,5] irq 1ffffd name: psi:psu (7/272)
[   11.145742992,5] Releasing unused memory:
[   11.145825504,5]     ibm,firmware-heap: 5367848/13631488 used
[   11.145942384,5]     ibm,firmware-allocs-memory@200000000000: 20455424/137397010432 used
[   11.146072256,5]     ibm,firmware-allocs-memory@0: 27795456/136067416064 used
[   11.146196480,5]     ibm,firmware-allocs-memory@200000000000: 0/33554432 used
[   11.146327280,5] Reserved regions:
[   11.146386416,5]   0x201ffdc00000..201ffdffffff : ibm,homer-image
[   11.146497456,5]   0x201ffd800000..201ffdbfffff : ibm,homer-image
[   11.146604000,5]   0x000031c00000..000033d3ffff : ibm,firmware-stacks
[   11.146733424,5]   0x000031000000..000031bfffff : ibm,firmware-data
[   11.146849952,5]   0x000030300000..000030ffffff : ibm,firmware-heap
[   11.146970800,5]   0x000030000000..0000302fffff : ibm,firmware-code
[   11.147097424,5]   0x200000000000..200001381fff : ibm,firmware-allocs-memory@200000000000
[   11.147251504,5]   0x201ffd470000..201ffd694287 : ibm,hbrt-code-image
[   11.147374208,5]   0x201ffd6a0000..201ffd6f9fff : ibm,hbrt-target-image
[   11.147490048,5]   0x201ffd700000..201ffd7fffff : ibm,hbrt-vpd-image
[   11.147604000,5]   0x000051c00000..000053681fff : ibm,firmware-allocs-memory@0
[   11.147787824,5] INIT: Waiting for kernel...
[   24.430564016,5] STB: sb_verify skipped resource 0, secure_mode=0
[   24.430627920,5] STB: tb_measure skipped resource 0, trusted_mode=0
[   24.432914736,5] INIT: Kernel loaded, size: 13866600 bytes (0 = unknown preload)
[   24.432978656,5] INIT: 64-bit LE kernel discovered
[   24.433007056,5] INIT: 64-bit kernel entry at 0x20010000, size 0xd39668
[   25.124259744,3] FLASH: Failed to get ROOTFS partition info
[   25.134915360,5] Free space in HEAP memory regions:
[   25.134987456,5] Region ibm,firmware-heap free: 764e80
[   25.135034688,5] Region ibm,firmware-allocs-memory@200000000000 free: 779a80
[   25.135089808,5] Region ibm,firmware-allocs-memory@0 free: 8f3160
[   25.135125488,5] Total free: 24975968
[   25.135146144,5] INIT: stdout-path: /ibm,opal/consoles/serial@0
[   25.135178560,5] INIT: Starting kernel at 0x20010000, fdt at 0x3081f528 196919 bytes)
[   26.372557680,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c000201fffff0000
[    0.000000] Mapping range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapping range 0x200000000000 - 0x202000000000 with 0x40000000
[    0.000000] Process table c000201fff000000 and radix root for kernel: c0000000013a0000
[    0.000000] Linux version 4.10.7-openpower1 (fspbld@gfwa611.aus.stglabs.ibm.com) (gcc version 4.9.4 (Buildroot 2017.02-00004-gc28573e) ) #2 SMP Thu Apr 6 09:28:47 CDT 2017
[    0.000000] OPAL: Power8 LPC bus found, chip ID 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 31
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x4000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x477c7afd18500249
[    0.000000]   possible        = 0x7f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaec00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6700-0x1fffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x201fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x201ffffad680-0x201ffffb6f7f]
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006001fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x2000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006002000000000..0x0006003fffffffff -&gt; 0x0006002000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006005fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006006000000000..0x0006007fffffffff -&gt; 0x0006006000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x2000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x0006009fffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x000600a000000000..0x000600bfffffffff -&gt; 0x000600a000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006201fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x2000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006206000000000..0x0006207fffffffff -&gt; 0x0006206000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x2000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006208000000000..0x0006209fffffffff -&gt; 0x0006208000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x000620a000000000..0x000620bfffffffff -&gt; 0x000620a000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x2000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x0000201fffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x0000201fffffffff]
[    0.000000] percpu: Embedded 2 pages/cpu @c000001ff8bb0000 s58136 r0 d72936 u131072
[    0.000000] Built 2 zonelists in Node order, mobility grouping on.  Total pages: 4190720
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 268036416K/268435456K available (6272K kernel code, 832K rwdata, 1956K rodata, 11008K init, 1658K bss, 399040K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=32, Nodes=9
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=32.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=32
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] XICS: Using OPAL ICP fallbacks
[    0.000000] ICS OPAL backend registered
[    0.000004] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000215] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.000562] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001003] Console: colour dummy device 80x25
[    0.002707] console [tty0] enabled
[    0.002839] console [hvc0] enabled
[    0.002839] console [hvc0] enabled
[    0.003001] bootconsole [udbg0] disabled
[    0.003001] bootconsole [udbg0] disabled
[    0.003921] pid_max: default: 32768 minimum: 301
[    0.006774] Security Framework initialized
[    0.011777] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.140334] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.203947] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.204178] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.211812] EEH: PowerNV platform initialized
[    0.211904] POWER9 performance monitor hardware support registered
[    0.212749] smp: Bringing up secondary CPUs ...
[    0.229821] smp: Brought up 2 nodes, 32 CPUs
[    0.229924] numa: Node 0 CPUs: 0-23
[    0.230005] numa: Node 8 CPUs: 24-31
[    0.242613] devtmpfs: initialized
[    0.250090] evm: security.capability
[    0.251003] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.251233] futex hash table entries: 8192 (order: 4, 1048576 bytes)
[    0.252462] NET: Registered protocol family 16
[    0.321706] cpuidle: using governor menu
[    0.341900] PCI: Probing PCI hardware
[    0.342098] PCI host bridge to bus 0000:00
[    0.342211] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.342413] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6001fbfffffff 64bit pref]
[    0.342586] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.343088] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.343398] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.343636] PCI host bridge to bus 0001:00
[    0.343723] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.343941] pci_bus 0001:00: root bus resource [mem 0x6002000000000-0x6003f7fffffff 64bit pref]
[    0.344115] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.345037] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.345321] PCI host bridge to bus 0002:00
[    0.345410] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.345616] pci_bus 0002:00: root bus resource [mem 0x6004000000000-0x6005f7fffffff 64bit pref]
[    0.345786] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.346696] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.347419] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.347679] PCI host bridge to bus 0003:00
[    0.347772] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.347976] pci_bus 0003:00: root bus resource [mem 0x6006000000000-0x6007fbfffffff 64bit pref]
[    0.348147] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.348564] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.348855] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.349102] PCI host bridge to bus 0004:00
[    0.349192] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.349406] pci_bus 0004:00: root bus resource [mem 0x6008000000000-0x6009f7fffffff 64bit pref]
[    0.349581] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.352066] pci 0004:00:00.0: PCI bridge to [bus 01-12]
[    0.354189] pci 0004:01:00.0: PCI bridge to [bus 02-12]
[    0.355437] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.355721] pci 0004:02:0a.0: PCI bridge to [bus 04-08]
[    0.355991] pci 0004:02:0b.0: PCI bridge to [bus 09-0d]
[    0.356264] pci 0004:02:0c.0: PCI bridge to [bus 0e-12]
[    0.356548] PCI host bridge to bus 0005:00
[    0.356641] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.356842] pci_bus 0005:00: root bus resource [mem 0x600a000000000-0x600bf7fffffff 64bit pref]
[    0.357014] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.358446] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.358777] PCI host bridge to bus 0030:00
[    0.358868] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.359083] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6201fbfffffff 64bit pref]
[    0.359253] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.359713] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.359996] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.360230] PCI host bridge to bus 0033:00
[    0.360321] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.360522] pci_bus 0033:00: root bus resource [mem 0x6206000000000-0x6207fbfffffff 64bit pref]
[    0.360696] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.361141] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.361420] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.361662] PCI host bridge to bus 0034:00
[    0.361763] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.361964] pci_bus 0034:00: root bus resource [mem 0x6208000000000-0x6209f7fffffff 64bit pref]
[    0.362135] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.362584] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.362903] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    0.363150] PCI host bridge to bus 0035:00
[    0.363250] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.363451] pci_bus 0035:00: root bus resource [mem 0x620a000000000-0x620bf7fffffff 64bit pref]
[    0.363622] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.364684] pci 0035:00:00.0: PCI bridge to [bus 01-0c]
[    0.365932] pci 0035:01:00.0: PCI bridge to [bus 02-0c]
[    0.366495] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.366771] pci 0035:02:0d.0: PCI bridge to [bus 08-0c]
[    0.367022] pci 0000:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.367225] pci 0000:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.367429] pci 0000:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.368012] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.368183] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c080ffffff]
[    0.368342] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.368520] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.368700] pci 0001:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.369280] pci 0001:01     : [PE# 7d] Secondary bus 1 associated with PE#7d
[    0.369865] pci 0001:01     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.381741] IOMMU table initialized, virtual merging enabled
[    0.381876] pci 0001:01     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.382216] pci 0001:01     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.382345] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.382455] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.382683] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    0.382839] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    0.382994] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.383120] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.383246] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.383423] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.383584] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.383710] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.383837] pci 0002:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.384418] pci 0002:02     : [PE# 7d] Secondary bus 2..2 associated with PE#7d
[    0.385022] pci 0002:02     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.396905] pci 0002:02     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.397059] pci 0002:02     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.397191] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.397301] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.397474] pci 0002:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
[    0.398052] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.398160] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.398344] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.398571] pci 0003:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.398775] pci 0003:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.398966] pci 0003:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.399539] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.399870] pci 0004:00:00.0: BAR 9: assigned [mem 0x6008000000000-0x600803fffffff 64bit pref]
[    0.400045] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c201ffffff]
[    0.400226] pci 0004:01:00.0: BAR 9: assigned [mem 0x6008000000000-0x600803fffffff 64bit pref]
[    0.400396] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.400549] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c201000000-0x600c20103ffff]
[    0.400690] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c201040000-0x600c201041fff]
[    0.400849] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c201042000-0x600c201043fff]
[    0.401007] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c201044000-0x600c201045fff]
[    0.401166] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c201046000-0x600c201047fff]
[    0.401328] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.401450] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.401575] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.401700] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.401846] pci 0004:02:02.0: BAR 9: assigned [mem 0x6008000000000-0x600803fffffff 64bit pref]
[    0.402028] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.402180] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.402306] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.402437] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.402562] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.402696] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    0.402852] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    0.403009] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.403134] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.403260] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.403385] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.403511] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.403632] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.403761] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.403882] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.404011] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.404133] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.404259] pci 0004:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.404837] pci 0004:03     : [PE# 7d] Secondary bus 3 associated with PE#7d
[    0.405422] pci 0004:03     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.405787] random: fast init done
[    0.417406] pci 0004:03     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.417557] pci 0004:03     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.417699] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.417809] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c200ffffff]
[    0.417970] pci 0004:02:02.0:   bridge window [mem 0x6008000000000-0x600803fffffff 64bit pref]
[    0.418150] pci 0004:02:0a.0: PCI bridge to [bus 04-08]
[    0.418280] pci 0004:02:0b.0: PCI bridge to [bus 09-0d]
[    0.418404] pci 0004:02:0c.0: PCI bridge to [bus 0e-12]
[    0.418534] pci 0004:02     : [PE# 7c] Secondary bus 2 associated with PE#7c
[    0.419115] pci 0004:01:00.0: PCI bridge to [bus 02-12]
[    0.419240] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.419400] pci 0004:01:00.0:   bridge window [mem 0x6008000000000-0x6009f7ff0ffff 64bit pref]
[    0.419583] pci 0004:01     : [PE# 7b] Secondary bus 1 associated with PE#7b
[    0.420165] pci 0004:01     : [PE# 7b] Setting up 32-bit TCE table at 0..80000000
[    0.432044] pci 0004:01     : [PE# 7b] Setting up window#0 0..7fffffff pg=1000
[    0.432185] pci 0004:01     : [PE# 7b] Enabling 64-bit DMA bypass
[    0.432336] pci 0004:00:00.0: PCI bridge to [bus 01-12]
[    0.432448] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.432607] pci 0004:00:00.0:   bridge window [mem 0x6008000000000-0x6009f7ff0ffff 64bit pref]
[    0.432786] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.433054] pci 0005:00:00.0: BAR 9: assigned [mem 0x600a000000000-0x600a03fffffff 64bit pref]
[    0.433233] pci 0005:01:00.0: BAR 0: assigned [mem 0x600a000000000-0x600a00000ffff 64bit pref]
[    0.433425] pci 0005:01:00.0: BAR 2: assigned [mem 0x600a000010000-0x600a00001ffff 64bit pref]
[    0.433612] pci 0005:01:00.0: BAR 4: assigned [mem 0x600a000020000-0x600a00002ffff 64bit pref]
[    0.433801] pci 0005:01:00.1: BAR 0: assigned [mem 0x600a000030000-0x600a00003ffff 64bit pref]
[    0.433992] pci 0005:01:00.1: BAR 2: assigned [mem 0x600a000040000-0x600a00004ffff 64bit pref]
[    0.434185] pci 0005:01:00.1: BAR 4: assigned [mem 0x600a000050000-0x600a00005ffff 64bit pref]
[    0.434376] pci 0005:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.434965] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.435540] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.447422] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.447572] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.447715] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.447832] pci 0005:00:00.0:   bridge window [mem 0x600a000000000-0x600bf7fffffff 64bit pref]
[    0.448062] pci 0030:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.448266] pci 0030:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.448459] pci 0030:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.449037] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.449216] pci 0033:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.449418] pci 0033:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.449614] pci 0033:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.450191] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.450361] pci 0034:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.450562] pci 0034:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.450754] pci 0034:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.451329] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.451564] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c280ffffff]
[    0.451722] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.451884] pci 0035:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.452469] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.452619] pci 0035:02:0d.0: PCI bridge to [bus 08-0c]
[    0.452748] pci 0035:02     : [PE# 7d] Secondary bus 2 associated with PE#7d
[    0.453326] pci 0035:01:00.0: PCI bridge to [bus 02-0c]
[    0.453472] pci 0035:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
[    0.454049] pci 0035:00:00.0: PCI bridge to [bus 01-0c]
[    0.454174] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.456410] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.535344] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.535508] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.535617] vgaarb: loaded
[    0.536192] SCSI subsystem initialized
[    0.536485] usbcore: registered new interface driver usbfs
[    0.536626] usbcore: registered new interface driver hub
[    0.537306] usbcore: registered new device driver usb
[    0.537478] pps_core: LinuxPPS API ver. 1 registered
[    0.537577] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.537762] PTP clock support registered
[    0.538671] clocksource: Switched to clocksource timebase
[    0.544476] NET: Registered protocol family 2
[    0.545099] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.548438] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.549009] TCP: Hash tables configured (established 524288 bind 65536)
[    0.549208] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.550506] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.551938] NET: Registered protocol family 1
[    0.552088] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)</msg>
<status endtime="20170517 20:14:59.558" status="PASS" starttime="20170517 20:14:59.557"></status>
</kw>
<status endtime="20170517 20:14:59.558" status="PASS" starttime="20170517 20:14:18.811"></status>
</kw>
<doc>Parse the journal log and check for failures.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Check_For_Application_Failures</tag>
</tags>
<status endtime="20170517 20:14:59.559" critical="yes" status="FAIL" starttime="20170517 20:14:13.172">'May 17 20:05:27 witherspoon systemd[1]: xyz.openbmc_project.Hwmon@ahb-apb-i2c\x401e78a000-i2c\x2dbus\x40100-max31785\x4052.service: Failed with result 'core-dump'.
May 17 20:05:35 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:05:36 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:05:37 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:05:53 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:05:53 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:06:09 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:06:09 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:06:24 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:06:24 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Fai...
    [ Message content over the limit has been removed. ]
May 17 20:13:12 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:13:12 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:13:27 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:13:27 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:13:43 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:13:43 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:13:58 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:13:58 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.
May 17 20:14:14 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Main process exited, code=dumped, status=11/SEGV
May 17 20:14:14 witherspoon systemd[1]: phosphor-fan-monitor@0.service: Failed with result 'core-dump'.' should be empty.</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170517 20:14:59.560" status="FAIL" starttime="20170517 20:10:20.877"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170517 20:14:59.563" status="FAIL" starttime="20170517 20:10:10.311"></status>
</suite>
<statistics>
<total>
<stat pass="2" fail="1">Critical Tests</stat>
<stat pass="2" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Check_For_Application_Failures</stat>
<stat pass="1" fail="0">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat name="Tests" pass="2" id="s1" fail="1">Tests</stat>
<stat name="Security" pass="1" id="s1-s1" fail="0">Tests.Security</stat>
<stat name="Test Ssl" pass="1" id="s1-s1-s1" fail="0">Tests.Security.Test Ssl</stat>
<stat name="Test Basic Poweron" pass="1" id="s1-s2" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
