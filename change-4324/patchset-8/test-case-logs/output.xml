<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170607 13:21:11.014">
<suite id="s1" source="/tmp/fspcibld/2878/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 13:21:11.877" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status starttime="20170607 13:21:11.877" status="FAIL" endtime="20170607 13:21:11.877"></status>
</kw>
<msg timestamp="20170607 13:21:11.878" level="INFO">${has_host} = False</msg>
<status starttime="20170607 13:21:11.877" status="PASS" endtime="20170607 13:21:11.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170607 13:21:11.879" status="PASS" endtime="20170607 13:21:11.879"></status>
</kw>
<status starttime="20170607 13:21:11.878" status="PASS" endtime="20170607 13:21:11.879"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 13:21:11.881" level="INFO">${port_num} = 22</msg>
<status starttime="20170607 13:21:11.880" status="PASS" endtime="20170607 13:21:11.881"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 13:21:11.881" level="INFO">${SSH_PORT} = 22</msg>
<status starttime="20170607 13:21:11.881" status="PASS" endtime="20170607 13:21:11.881"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 13:21:11.882" level="INFO">${https_num} = 443</msg>
<status starttime="20170607 13:21:11.881" status="PASS" endtime="20170607 13:21:11.882"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 13:21:11.882" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170607 13:21:11.882" status="PASS" endtime="20170607 13:21:11.883"></status>
</kw>
<status starttime="20170607 13:21:11.880" status="PASS" endtime="20170607 13:21:11.883"></status>
</kw>
<status starttime="20170607 13:21:11.879" status="PASS" endtime="20170607 13:21:11.883"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 13:21:11.884" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status starttime="20170607 13:21:11.883" status="FAIL" endtime="20170607 13:21:11.884"></status>
</kw>
<msg timestamp="20170607 13:21:11.884" level="INFO">${has_port} = False</msg>
<status starttime="20170607 13:21:11.883" status="PASS" endtime="20170607 13:21:11.884"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170607 13:21:11.885" status="PASS" endtime="20170607 13:21:11.886"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170607 13:21:11.886" status="PASS" endtime="20170607 13:21:11.887"></status>
</kw>
<status starttime="20170607 13:21:11.885" status="PASS" endtime="20170607 13:21:11.887"></status>
</kw>
<status starttime="20170607 13:21:11.884" status="PASS" endtime="20170607 13:21:11.887"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 13:21:11.887" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 13:21:13.599" level="INFO">Read output: root@witherspoon:~#</msg>
<status starttime="20170607 13:21:11.887" status="PASS" endtime="20170607 13:21:13.599"></status>
</kw>
<status starttime="20170607 13:21:11.876" status="PASS" endtime="20170607 13:21:13.599"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:21:13.601" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170607 13:21:13.689" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:21:13.689" level="INFO">${output} = VERSION_ID="v1.99.6-78-gfd4d3cc"</msg>
<msg timestamp="20170607 13:21:13.689" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:21:13.601" status="PASS" endtime="20170607 13:21:13.689"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170607 13:21:13.690" level="INFO">Length is 0</msg>
<status starttime="20170607 13:21:13.690" status="PASS" endtime="20170607 13:21:13.691"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170607 13:21:13.691" level="INFO">VERSION_ID="v1.99.6-78-gfd4d3cc"</msg>
<status starttime="20170607 13:21:13.691" status="PASS" endtime="20170607 13:21:13.691"></status>
</kw>
<status starttime="20170607 13:21:13.600" status="PASS" endtime="20170607 13:21:13.691"></status>
</kw>
<status starttime="20170607 13:21:13.600" status="PASS" endtime="20170607 13:21:13.692"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:21:13.693" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170607 13:21:13.945" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:21:13.945" level="INFO">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<msg timestamp="20170607 13:21:13.945" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:21:13.693" status="PASS" endtime="20170607 13:21:13.945"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170607 13:21:13.946" level="INFO">Length is 0</msg>
<status starttime="20170607 13:21:13.946" status="PASS" endtime="20170607 13:21:13.946"></status>
</kw>
<msg timestamp="20170607 13:21:13.946" level="INFO">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<status starttime="20170607 13:21:13.692" status="PASS" endtime="20170607 13:21:13.946"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg timestamp="20170607 13:21:13.947" level="INFO">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17_1.10
	op-build-v1.17-20-gbaac7a6-dirty
	buildroot-2017.02.2-7-g23118ce
	skiboot-d673ecc
	hostboot-dff36e4
	linux-4.11.2-openpower1-p062f2cf
	petitboot-v1.4.2-p9717304
	machine-xml-96746e9
	occ-bc34ad5
	hostboot-binaries-bc600e6
	capp-ucode-9c73e9f
	sbe-d770027
</msg>
<status starttime="20170607 13:21:13.946" status="PASS" endtime="20170607 13:21:13.948"></status>
</kw>
<status starttime="20170607 13:21:13.692" status="PASS" endtime="20170607 13:21:13.948"></status>
</kw>
<status starttime="20170607 13:21:13.692" status="PASS" endtime="20170607 13:21:13.948"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 13:21:13.951" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status starttime="20170607 13:21:13.951" status="FAIL" endtime="20170607 13:21:13.951"></status>
</kw>
<msg timestamp="20170607 13:21:13.951" level="INFO">${has_host} = False</msg>
<status starttime="20170607 13:21:13.950" status="PASS" endtime="20170607 13:21:13.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170607 13:21:13.952" status="PASS" endtime="20170607 13:21:13.952"></status>
</kw>
<status starttime="20170607 13:21:13.951" status="PASS" endtime="20170607 13:21:13.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 13:21:13.954" level="INFO">${port_num} = 22</msg>
<status starttime="20170607 13:21:13.954" status="PASS" endtime="20170607 13:21:13.954"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 13:21:13.954" level="INFO">${SSH_PORT} = 22</msg>
<status starttime="20170607 13:21:13.954" status="PASS" endtime="20170607 13:21:13.955"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 13:21:13.955" level="INFO">${https_num} = 443</msg>
<status starttime="20170607 13:21:13.955" status="PASS" endtime="20170607 13:21:13.955"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 13:21:13.956" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170607 13:21:13.955" status="PASS" endtime="20170607 13:21:13.956"></status>
</kw>
<status starttime="20170607 13:21:13.953" status="PASS" endtime="20170607 13:21:13.956"></status>
</kw>
<status starttime="20170607 13:21:13.953" status="PASS" endtime="20170607 13:21:13.956"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 13:21:13.957" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status starttime="20170607 13:21:13.957" status="FAIL" endtime="20170607 13:21:13.957"></status>
</kw>
<msg timestamp="20170607 13:21:13.957" level="INFO">${has_port} = False</msg>
<status starttime="20170607 13:21:13.956" status="PASS" endtime="20170607 13:21:13.957"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170607 13:21:13.959" status="PASS" endtime="20170607 13:21:13.959"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170607 13:21:13.960" status="PASS" endtime="20170607 13:21:13.960"></status>
</kw>
<status starttime="20170607 13:21:13.958" status="PASS" endtime="20170607 13:21:13.960"></status>
</kw>
<status starttime="20170607 13:21:13.958" status="PASS" endtime="20170607 13:21:13.960"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 13:21:13.961" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 13:21:15.803" level="INFO">Read output: root@witherspoon:~#</msg>
<status starttime="20170607 13:21:13.960" status="PASS" endtime="20170607 13:21:15.804"></status>
</kw>
<status starttime="20170607 13:21:13.949" status="PASS" endtime="20170607 13:21:15.804"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:21:15.805" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170607 13:21:15.882" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:21:15.882" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170607 13:21:15.882" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:21:15.804" status="PASS" endtime="20170607 13:21:15.882"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170607 13:21:15.882" level="INFO">Length is 0</msg>
<status starttime="20170607 13:21:15.882" status="PASS" endtime="20170607 13:21:15.882"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170607 13:21:15.883" level="INFO">Length is 11</msg>
<status starttime="20170607 13:21:15.883" status="PASS" endtime="20170607 13:21:15.883"></status>
</kw>
<msg timestamp="20170607 13:21:15.883" level="INFO">${bmc_model} = Witherspoon</msg>
<status starttime="20170607 13:21:13.949" status="PASS" endtime="20170607 13:21:15.883"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170607 13:21:15.884" level="INFO">BMC Model=Witherspoon</msg>
<status starttime="20170607 13:21:15.883" status="PASS" endtime="20170607 13:21:15.884"></status>
</kw>
<status starttime="20170607 13:21:13.948" status="PASS" endtime="20170607 13:21:15.884"></status>
</kw>
<status starttime="20170607 13:21:13.948" status="PASS" endtime="20170607 13:21:15.884"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 13:21:15.886" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status starttime="20170607 13:21:15.886" status="FAIL" endtime="20170607 13:21:15.886"></status>
</kw>
<msg timestamp="20170607 13:21:15.886" level="INFO">${has_host} = False</msg>
<status starttime="20170607 13:21:15.885" status="PASS" endtime="20170607 13:21:15.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170607 13:21:15.887" status="PASS" endtime="20170607 13:21:15.888"></status>
</kw>
<status starttime="20170607 13:21:15.887" status="PASS" endtime="20170607 13:21:15.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 13:21:15.889" level="INFO">${port_num} = 22</msg>
<status starttime="20170607 13:21:15.889" status="PASS" endtime="20170607 13:21:15.889"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 13:21:15.890" level="INFO">${SSH_PORT} = 22</msg>
<status starttime="20170607 13:21:15.890" status="PASS" endtime="20170607 13:21:15.890"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 13:21:15.890" level="INFO">${https_num} = 443</msg>
<status starttime="20170607 13:21:15.890" status="PASS" endtime="20170607 13:21:15.891"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 13:21:15.891" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170607 13:21:15.891" status="PASS" endtime="20170607 13:21:15.891"></status>
</kw>
<status starttime="20170607 13:21:15.888" status="PASS" endtime="20170607 13:21:15.891"></status>
</kw>
<status starttime="20170607 13:21:15.888" status="PASS" endtime="20170607 13:21:15.891"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 13:21:15.892" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status starttime="20170607 13:21:15.892" status="FAIL" endtime="20170607 13:21:15.893"></status>
</kw>
<msg timestamp="20170607 13:21:15.893" level="INFO">${has_port} = False</msg>
<status starttime="20170607 13:21:15.892" status="PASS" endtime="20170607 13:21:15.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170607 13:21:15.894" status="PASS" endtime="20170607 13:21:15.895"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170607 13:21:15.895" status="PASS" endtime="20170607 13:21:15.895"></status>
</kw>
<status starttime="20170607 13:21:15.894" status="PASS" endtime="20170607 13:21:15.895"></status>
</kw>
<status starttime="20170607 13:21:15.893" status="PASS" endtime="20170607 13:21:15.895"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 13:21:15.896" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 13:21:17.545" level="INFO">Read output: root@witherspoon:~#</msg>
<status starttime="20170607 13:21:15.896" status="PASS" endtime="20170607 13:21:17.545"></status>
</kw>
<status starttime="20170607 13:21:15.885" status="PASS" endtime="20170607 13:21:17.546"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:21:17.547" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170607 13:21:17.624" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:21:17.624" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170607 13:21:17.624" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:21:17.546" status="PASS" endtime="20170607 13:21:17.624"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170607 13:21:17.624" level="INFO">Length is 0</msg>
<status starttime="20170607 13:21:17.624" status="PASS" endtime="20170607 13:21:17.625"></status>
</kw>
<msg timestamp="20170607 13:21:17.625" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170607 13:21:17.546" status="PASS" endtime="20170607 13:21:17.625"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170607 13:21:17.625" status="PASS" endtime="20170607 13:21:17.625"></status>
</kw>
<status starttime="20170607 13:21:15.885" status="PASS" endtime="20170607 13:21:17.626"></status>
</kw>
<status starttime="20170607 13:21:15.884" status="PASS" endtime="20170607 13:21:17.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status starttime="20170607 13:21:17.626" status="PASS" endtime="20170607 13:21:17.626"></status>
</kw>
<status starttime="20170607 13:21:11.875" status="PASS" endtime="20170607 13:21:17.626"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/2878/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/2878/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:21:17.666" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:21:17.666" status="PASS" endtime="20170607 13:21:17.667"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:21:17.667" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:21:17.667" status="PASS" endtime="20170607 13:21:17.667"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:21:17.668" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:21:17.668" status="PASS" endtime="20170607 13:21:17.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:21:17.669" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:21:17.668" status="PASS" endtime="20170607 13:21:17.669"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:21:17.872" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:21:17.669" status="PASS" endtime="20170607 13:21:17.872"></status>
</kw>
<msg timestamp="20170607 13:21:17.873" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:21:17.873" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:17.669" status="PASS" endtime="20170607 13:21:17.873"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:21:17.874" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:17.873" status="PASS" endtime="20170607 13:21:17.874"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:21:17.874" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:17.874" status="PASS" endtime="20170607 13:21:17.874"></status>
</kw>
<status starttime="20170607 13:21:17.665" status="PASS" endtime="20170607 13:21:17.874"></status>
</kw>
<status starttime="20170607 13:21:17.665" status="PASS" endtime="20170607 13:21:17.875"></status>
</kw>
<status starttime="20170607 13:21:17.664" status="PASS" endtime="20170607 13:21:17.875"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:21:17.881" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:21:17.880" status="PASS" endtime="20170607 13:21:17.881"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:21:17.882" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:21:17.882" status="PASS" endtime="20170607 13:21:17.882"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:21:17.883" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:21:17.883" status="PASS" endtime="20170607 13:21:17.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:21:17.884" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:21:17.884" status="PASS" endtime="20170607 13:21:17.884"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:21:18.072" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:21:17.885" status="PASS" endtime="20170607 13:21:18.073"></status>
</kw>
<msg timestamp="20170607 13:21:18.073" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:21:18.073" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:17.885" status="PASS" endtime="20170607 13:21:18.073"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:21:18.074" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:18.073" status="PASS" endtime="20170607 13:21:18.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:21:18.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:18.074" status="PASS" endtime="20170607 13:21:18.074"></status>
</kw>
<status starttime="20170607 13:21:17.879" status="PASS" endtime="20170607 13:21:18.075"></status>
</kw>
<status starttime="20170607 13:21:17.879" status="PASS" endtime="20170607 13:21:18.075"></status>
</kw>
<status starttime="20170607 13:21:17.878" status="PASS" endtime="20170607 13:21:18.075"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:21:18.075" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:21:18.075" status="PASS" endtime="20170607 13:21:18.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:21:18.077" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:21:18.077" status="PASS" endtime="20170607 13:21:18.077"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:21:18.078" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:21:18.078" status="PASS" endtime="20170607 13:21:18.078"></status>
</kw>
<status starttime="20170607 13:21:18.078" status="PASS" endtime="20170607 13:21:18.079"></status>
</kw>
<status starttime="20170607 13:21:18.076" status="PASS" endtime="20170607 13:21:18.079"></status>
</kw>
<status starttime="20170607 13:21:18.076" status="PASS" endtime="20170607 13:21:18.079"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:21:18.143" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:21:18.143" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:18.079" status="PASS" endtime="20170607 13:21:18.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:21:18.146" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:21:18.145" status="PASS" endtime="20170607 13:21:18.146"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:21:18.147" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:21:18.147" status="PASS" endtime="20170607 13:21:18.147"></status>
</kw>
<status starttime="20170607 13:21:18.146" status="PASS" endtime="20170607 13:21:18.147"></status>
</kw>
<status starttime="20170607 13:21:18.144" status="PASS" endtime="20170607 13:21:18.147"></status>
</kw>
<status starttime="20170607 13:21:18.144" status="PASS" endtime="20170607 13:21:18.148"></status>
</kw>
<msg timestamp="20170607 13:21:18.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:17.877" status="PASS" endtime="20170607 13:21:18.148"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:21:18.148" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:18.148" status="PASS" endtime="20170607 13:21:18.148"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:21:18.149" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:21:18.149" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:21:18.149" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:21:18.149" status="PASS" endtime="20170607 13:21:18.149"></status>
</kw>
<msg timestamp="20170607 13:21:18.149" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:21:17.876" status="PASS" endtime="20170607 13:21:18.149"></status>
</kw>
<msg timestamp="20170607 13:21:18.150" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:21:17.876" status="PASS" endtime="20170607 13:21:18.150"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170607 13:21:18.151" level="FAIL">Running != Quiesced</msg>
<status starttime="20170607 13:21:18.151" status="FAIL" endtime="20170607 13:21:18.151"></status>
</kw>
<msg timestamp="20170607 13:21:18.151" level="INFO">${status} = False</msg>
<status starttime="20170607 13:21:18.150" status="PASS" endtime="20170607 13:21:18.151"></status>
</kw>
<msg timestamp="20170607 13:21:18.152" level="INFO">${status} = False</msg>
<status starttime="20170607 13:21:17.875" status="PASS" endtime="20170607 13:21:18.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170607 13:21:18.152" status="PASS" endtime="20170607 13:21:18.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170607 13:21:18.153" status="PASS" endtime="20170607 13:21:18.153"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170607 13:21:18.154" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170607 13:21:18.154" status="PASS" endtime="20170607 13:21:18.154"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170607 13:21:18.163" level="INFO">${FFDC_DIR_PATH} = </msg>
<status starttime="20170607 13:21:18.154" status="PASS" endtime="20170607 13:21:18.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 13:21:18.165" level="INFO">${cur_time} = 2017-06-07 13:21:18:164512</msg>
<status starttime="20170607 13:21:18.164" status="PASS" endtime="20170607 13:21:18.165"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 13:21:18.165" level="INFO">${cur_time} = 20170607132118164512</msg>
<status starttime="20170607 13:21:18.165" status="PASS" endtime="20170607 13:21:18.165"></status>
</kw>
<status starttime="20170607 13:21:18.164" status="PASS" endtime="20170607 13:21:18.166"></status>
</kw>
<msg timestamp="20170607 13:21:18.170" level="INFO">${FFDC_TIME} = 20170607132118164512</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170607 13:21:18.171" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170607 13:21:18.171" status="PASS" endtime="20170607 13:21:18.171"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170607 13:21:18.172" level="INFO">${suite_name} = 20170607132118164512_TestsSecurityTestSsl</msg>
<status starttime="20170607 13:21:18.171" status="PASS" endtime="20170607 13:21:18.172"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170607 13:21:18.172" level="INFO">${test_name} = TestSSLConnection</msg>
<status starttime="20170607 13:21:18.172" status="PASS" endtime="20170607 13:21:18.172"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170607 13:21:18.173" level="INFO">${test_name} = 20170607132118164512_TestSSLConnection</msg>
<status starttime="20170607 13:21:18.172" status="PASS" endtime="20170607 13:21:18.173"></status>
</kw>
<status starttime="20170607 13:21:18.170" status="PASS" endtime="20170607 13:21:18.173"></status>
</kw>
<msg timestamp="20170607 13:21:18.173" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132118164512_TestsSecurityTestSsl/20170607132118164512_TestSSLConnection/</msg>
<msg timestamp="20170607 13:21:18.178" level="INFO">${FFDC_PREFIX} = 20170607132118164512_</msg>
<status starttime="20170607 13:21:18.164" status="PASS" endtime="20170607 13:21:18.178"></status>
</kw>
<status starttime="20170607 13:21:18.163" status="PASS" endtime="20170607 13:21:18.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170607 13:21:18.178" status="PASS" endtime="20170607 13:21:18.179"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170607 13:21:18.179" html="yes" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs"&gt;/tmp/fspcibld/2878/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170607 13:21:18.179" status="PASS" endtime="20170607 13:21:18.179"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170607 13:21:18.180" level="FAIL">File '/tmp/fspcibld/2878/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170607 13:21:18.180" status="FAIL" endtime="20170607 13:21:18.181"></status>
</kw>
<msg timestamp="20170607 13:21:18.181" level="INFO">${exist} = False</msg>
<status starttime="20170607 13:21:18.180" status="PASS" endtime="20170607 13:21:18.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170607 13:21:18.182" html="yes" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:21:18.182" status="PASS" endtime="20170607 13:21:18.182"></status>
</kw>
<status starttime="20170607 13:21:18.181" status="PASS" endtime="20170607 13:21:18.182"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170607 13:21:18.182" status="PASS" endtime="20170607 13:21:18.183"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 13:21:18.184" level="INFO">${cur_time} = 2017-06-07 13:21:18:183432</msg>
<status starttime="20170607 13:21:18.183" status="PASS" endtime="20170607 13:21:18.184"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 13:21:18.184" level="INFO">${cur_time} = 20170607132118183432</msg>
<status starttime="20170607 13:21:18.184" status="PASS" endtime="20170607 13:21:18.184"></status>
</kw>
<msg timestamp="20170607 13:21:18.184" level="INFO">${cur_time} = 20170607132118183432</msg>
<status starttime="20170607 13:21:18.183" status="PASS" endtime="20170607 13:21:18.184"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170607 13:21:18.185" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:21:18.185" status="PASS" endtime="20170607 13:21:18.185"></status>
</kw>
<status starttime="20170607 13:21:18.153" status="PASS" endtime="20170607 13:21:18.185"></status>
</kw>
<status starttime="20170607 13:21:17.875" status="PASS" endtime="20170607 13:21:18.186"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170607 13:21:17.663" status="PASS" critical="yes" endtime="20170607 13:21:18.186"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170607 13:21:18.187" level="INFO">Delete All Sessions</msg>
<status starttime="20170607 13:21:18.187" status="PASS" endtime="20170607 13:21:18.187"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170607 13:21:17.629" status="PASS" endtime="20170607 13:21:18.187"></status>
</suite>
<status starttime="20170607 13:21:17.627" status="PASS" endtime="20170607 13:21:18.189"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/2878/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170607 13:21:18.230" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170607 13:21:18.230" status="PASS" endtime="20170607 13:21:18.231"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170607 13:21:18.231" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170607 13:21:18.231" status="PASS" endtime="20170607 13:21:18.231"></status>
</kw>
<msg timestamp="20170607 13:21:18.231" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170607 13:21:18.230" status="PASS" endtime="20170607 13:21:18.232"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170607 13:21:18.233" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170607 13:21:18.233" status="PASS" endtime="20170607 13:21:18.233"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170607 13:21:18.234" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170607 13:21:18.233" status="PASS" endtime="20170607 13:21:18.234"></status>
</kw>
<msg timestamp="20170607 13:21:18.234" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170607 13:21:18.232" status="PASS" endtime="20170607 13:21:18.234"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 13:21:18.235" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170607 13:21:18.235" status="PASS" endtime="20170607 13:21:18.235"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170607 13:21:18.235" status="PASS" endtime="20170607 13:21:18.235"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170607 13:21:18.241" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170607 13:21:18.244" level="INFO">${rc} = 0</msg>
<msg timestamp="20170607 13:21:18.244" level="INFO">${output} = /tmp/fspcibld/2878/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170607 13:21:18.236" status="PASS" endtime="20170607 13:21:18.244"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170607 13:21:18.246" status="PASS" endtime="20170607 13:21:18.247"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170607 13:21:18.247" status="PASS" endtime="20170607 13:21:18.248"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 13:21:18.249" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170607 13:21:18.248" status="PASS" endtime="20170607 13:21:18.249"></status>
</kw>
<msg timestamp="20170607 13:21:18.249" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170607 13:21:18.234" status="PASS" endtime="20170607 13:21:18.249"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 13:21:18.250" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170607 13:21:18.249" status="PASS" endtime="20170607 13:21:18.250"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170607 13:21:18.250" status="PASS" endtime="20170607 13:21:18.251"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170607 13:21:18.258" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170607 13:21:18.262" level="INFO">${rc} = 0</msg>
<msg timestamp="20170607 13:21:18.262" level="INFO">${os_con_pid} = </msg>
<status starttime="20170607 13:21:18.251" status="PASS" endtime="20170607 13:21:18.262"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170607 13:21:18.264" status="PASS" endtime="20170607 13:21:18.265"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 13:21:18.265" level="INFO">${cmd_buf} = kill -9 </msg>
<status starttime="20170607 13:21:18.265" status="PASS" endtime="20170607 13:21:18.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170607 13:21:18.266" status="PASS" endtime="20170607 13:21:18.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170607 13:21:18.267" level="INFO">${rc} = None</msg>
<msg timestamp="20170607 13:21:18.267" level="INFO">${output} = None</msg>
<status starttime="20170607 13:21:18.267" status="PASS" endtime="20170607 13:21:18.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170607 13:21:18.268" status="PASS" endtime="20170607 13:21:18.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170607 13:21:18.268" status="PASS" endtime="20170607 13:21:18.269"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170607 13:21:18.269" level="INFO">${output} = </msg>
<status starttime="20170607 13:21:18.269" status="PASS" endtime="20170607 13:21:18.269"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170607 13:21:18.271" level="INFO">${loc_quiet} = 1</msg>
<status starttime="20170607 13:21:18.270" status="PASS" endtime="20170607 13:21:18.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170607 13:21:18.272" status="PASS" endtime="20170607 13:21:18.329"></status>
</kw>
<msg timestamp="20170607 13:21:18.332" level="INFO">${rc} = 1</msg>
<msg timestamp="20170607 13:21:18.333" level="INFO">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status starttime="20170607 13:21:18.271" status="PASS" endtime="20170607 13:21:18.333"></status>
</kw>
<msg timestamp="20170607 13:21:18.335" level="INFO">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status starttime="20170607 13:21:18.232" status="PASS" endtime="20170607 13:21:18.335"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170607 13:21:18.343" html="yes" level="INFO">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status starttime="20170607 13:21:18.341" status="PASS" endtime="20170607 13:21:18.343"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 13:21:18.344" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170607 13:21:18.344" status="PASS" endtime="20170607 13:21:18.344"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170607 13:21:18.344" status="PASS" endtime="20170607 13:21:18.345"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170607 13:21:18.348" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170607 13:21:18.351" level="INFO">${rc} = 0</msg>
<msg timestamp="20170607 13:21:18.351" level="INFO">${output} = /tmp/fspcibld/2878/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170607 13:21:18.345" status="PASS" endtime="20170607 13:21:18.351"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170607 13:21:18.353" status="PASS" endtime="20170607 13:21:18.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170607 13:21:18.354" status="PASS" endtime="20170607 13:21:18.355"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 13:21:18.356" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170607 13:21:18.355" status="PASS" endtime="20170607 13:21:18.356"></status>
</kw>
<msg timestamp="20170607 13:21:18.356" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170607 13:21:18.343" status="PASS" endtime="20170607 13:21:18.356"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 13:21:18.357" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170607 13:21:18.357" status="PASS" endtime="20170607 13:21:18.357"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170607 13:21:18.358" status="PASS" endtime="20170607 13:21:18.358"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170607 13:21:18.362" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170607 13:21:18.364" level="INFO">${rc} = 0</msg>
<msg timestamp="20170607 13:21:18.365" level="INFO">${output} = </msg>
<status starttime="20170607 13:21:18.359" status="PASS" endtime="20170607 13:21:18.365"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170607 13:21:18.367" status="PASS" endtime="20170607 13:21:18.368"></status>
</kw>
<status starttime="20170607 13:21:18.229" status="PASS" endtime="20170607 13:21:18.368"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170607 13:21:18.369" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170607 13:21:18.371" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170607 13:21:18.370" status="PASS" endtime="20170607 13:21:18.371"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:21:18.372" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170607 13:21:18.371" status="PASS" endtime="20170607 13:21:18.372"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:21:18.376" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:21:18.375" status="PASS" endtime="20170607 13:21:18.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:21:18.377" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:21:18.377" status="PASS" endtime="20170607 13:21:18.377"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:21:18.378" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:21:18.378" status="PASS" endtime="20170607 13:21:18.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:21:18.379" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:21:18.379" status="PASS" endtime="20170607 13:21:18.379"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:21:18.848" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:21:18.380" status="PASS" endtime="20170607 13:21:18.848"></status>
</kw>
<msg timestamp="20170607 13:21:18.848" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:21:18.848" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:18.379" status="PASS" endtime="20170607 13:21:18.848"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:21:18.849" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:18.848" status="PASS" endtime="20170607 13:21:18.849"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:21:18.849" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:18.849" status="PASS" endtime="20170607 13:21:18.850"></status>
</kw>
<status starttime="20170607 13:21:18.375" status="PASS" endtime="20170607 13:21:18.850"></status>
</kw>
<status starttime="20170607 13:21:18.374" status="PASS" endtime="20170607 13:21:18.850"></status>
</kw>
<status starttime="20170607 13:21:18.373" status="PASS" endtime="20170607 13:21:18.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:21:18.850" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170607 13:21:18.850" status="PASS" endtime="20170607 13:21:18.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:21:18.851" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:21:18.851" status="PASS" endtime="20170607 13:21:18.851"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170607 13:21:18.851" status="PASS" endtime="20170607 13:21:18.852"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:21:18.853" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status starttime="20170607 13:21:18.852" status="PASS" endtime="20170607 13:21:18.853"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:21:18.854" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170607 13:21:18.854" status="PASS" endtime="20170607 13:21:18.854"></status>
</kw>
<status starttime="20170607 13:21:18.853" status="PASS" endtime="20170607 13:21:18.854"></status>
</kw>
<status starttime="20170607 13:21:18.852" status="PASS" endtime="20170607 13:21:18.855"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:21:19.221" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170607 13:21:19.221" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:18.855" status="PASS" endtime="20170607 13:21:19.221"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:21:19.223" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:21:19.222" status="PASS" endtime="20170607 13:21:19.223"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:21:19.224" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:21:19.223" status="PASS" endtime="20170607 13:21:19.224"></status>
</kw>
<status starttime="20170607 13:21:19.223" status="PASS" endtime="20170607 13:21:19.224"></status>
</kw>
<status starttime="20170607 13:21:19.221" status="PASS" endtime="20170607 13:21:19.224"></status>
</kw>
<msg timestamp="20170607 13:21:19.224" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:18.372" status="PASS" endtime="20170607 13:21:19.224"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:21:19.225" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:19.224" status="PASS" endtime="20170607 13:21:19.225"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170607 13:21:19.225" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:21:19.225" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:21:19.226" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status starttime="20170607 13:21:19.225" status="PASS" endtime="20170607 13:21:19.226"></status>
</kw>
<status starttime="20170607 13:21:18.371" status="PASS" endtime="20170607 13:21:19.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170607 13:21:19.226" status="PASS" endtime="20170607 13:21:19.226"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:21:19.231" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:21:19.231" status="PASS" endtime="20170607 13:21:19.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:21:19.232" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:21:19.231" status="PASS" endtime="20170607 13:21:19.232"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:21:19.232" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:21:19.232" status="PASS" endtime="20170607 13:21:19.232"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:21:19.233" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:21:19.233" status="PASS" endtime="20170607 13:21:19.233"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:21:21.083" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:21:19.234" status="PASS" endtime="20170607 13:21:21.083"></status>
</kw>
<msg timestamp="20170607 13:21:21.083" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:21:21.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:19.233" status="PASS" endtime="20170607 13:21:21.083"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:21:21.084" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:21.084" status="PASS" endtime="20170607 13:21:21.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:21:21.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:21.084" status="PASS" endtime="20170607 13:21:21.085"></status>
</kw>
<status starttime="20170607 13:21:19.230" status="PASS" endtime="20170607 13:21:21.085"></status>
</kw>
<status starttime="20170607 13:21:19.229" status="PASS" endtime="20170607 13:21:21.085"></status>
</kw>
<status starttime="20170607 13:21:19.229" status="PASS" endtime="20170607 13:21:21.085"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:21:21.086" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:21:21.085" status="PASS" endtime="20170607 13:21:21.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:21:21.088" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:21:21.087" status="PASS" endtime="20170607 13:21:21.088"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:21:21.089" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:21:21.089" status="PASS" endtime="20170607 13:21:21.089"></status>
</kw>
<status starttime="20170607 13:21:21.088" status="PASS" endtime="20170607 13:21:21.089"></status>
</kw>
<status starttime="20170607 13:21:21.087" status="PASS" endtime="20170607 13:21:21.089"></status>
</kw>
<status starttime="20170607 13:21:21.086" status="PASS" endtime="20170607 13:21:21.089"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:21:21.581" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:21:21.581" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:21.090" status="PASS" endtime="20170607 13:21:21.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:21:21.583" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:21:21.583" status="PASS" endtime="20170607 13:21:21.583"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:21:21.584" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:21:21.584" status="PASS" endtime="20170607 13:21:21.584"></status>
</kw>
<status starttime="20170607 13:21:21.583" status="PASS" endtime="20170607 13:21:21.584"></status>
</kw>
<status starttime="20170607 13:21:21.582" status="PASS" endtime="20170607 13:21:21.584"></status>
</kw>
<status starttime="20170607 13:21:21.582" status="PASS" endtime="20170607 13:21:21.584"></status>
</kw>
<msg timestamp="20170607 13:21:21.585" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:19.228" status="PASS" endtime="20170607 13:21:21.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:21:21.585" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:21.585" status="PASS" endtime="20170607 13:21:21.585"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:21:21.586" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:21:21.586" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:21:21.586" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:21:21.586" status="PASS" endtime="20170607 13:21:21.586"></status>
</kw>
<msg timestamp="20170607 13:21:21.586" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:21:19.228" status="PASS" endtime="20170607 13:21:21.586"></status>
</kw>
<msg timestamp="20170607 13:21:21.587" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:21:19.227" status="PASS" endtime="20170607 13:21:21.587"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:21:21.587" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:21:21.587" status="FAIL" endtime="20170607 13:21:21.587"></status>
</kw>
<status starttime="20170607 13:21:19.227" status="FAIL" endtime="20170607 13:21:21.588"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:21:31.593" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:21:31.593" status="PASS" endtime="20170607 13:21:31.593"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:21:31.594" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:21:31.594" status="PASS" endtime="20170607 13:21:31.594"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:21:31.594" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:21:31.594" status="PASS" endtime="20170607 13:21:31.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:21:31.595" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:21:31.595" status="PASS" endtime="20170607 13:21:31.595"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:21:31.794" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:21:31.596" status="PASS" endtime="20170607 13:21:31.794"></status>
</kw>
<msg timestamp="20170607 13:21:31.794" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:21:31.794" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:31.596" status="PASS" endtime="20170607 13:21:31.794"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:21:31.795" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:31.794" status="PASS" endtime="20170607 13:21:31.795"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:21:31.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:31.795" status="PASS" endtime="20170607 13:21:31.796"></status>
</kw>
<status starttime="20170607 13:21:31.592" status="PASS" endtime="20170607 13:21:31.796"></status>
</kw>
<status starttime="20170607 13:21:31.591" status="PASS" endtime="20170607 13:21:31.796"></status>
</kw>
<status starttime="20170607 13:21:31.591" status="PASS" endtime="20170607 13:21:31.796"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:21:31.796" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:21:31.796" status="PASS" endtime="20170607 13:21:31.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:21:31.798" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:21:31.798" status="PASS" endtime="20170607 13:21:31.799"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:21:31.799" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:21:31.799" status="PASS" endtime="20170607 13:21:31.800"></status>
</kw>
<status starttime="20170607 13:21:31.799" status="PASS" endtime="20170607 13:21:31.800"></status>
</kw>
<status starttime="20170607 13:21:31.797" status="PASS" endtime="20170607 13:21:31.800"></status>
</kw>
<status starttime="20170607 13:21:31.797" status="PASS" endtime="20170607 13:21:31.800"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:21:31.864" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:21:31.864" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:31.800" status="PASS" endtime="20170607 13:21:31.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:21:31.866" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:21:31.865" status="PASS" endtime="20170607 13:21:31.866"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:21:31.867" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:21:31.867" status="PASS" endtime="20170607 13:21:31.867"></status>
</kw>
<status starttime="20170607 13:21:31.866" status="PASS" endtime="20170607 13:21:31.867"></status>
</kw>
<status starttime="20170607 13:21:31.865" status="PASS" endtime="20170607 13:21:31.868"></status>
</kw>
<status starttime="20170607 13:21:31.864" status="PASS" endtime="20170607 13:21:31.868"></status>
</kw>
<msg timestamp="20170607 13:21:31.868" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:31.590" status="PASS" endtime="20170607 13:21:31.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:21:31.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:31.868" status="PASS" endtime="20170607 13:21:31.868"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:21:31.869" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:21:31.869" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:21:31.869" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:21:31.869" status="PASS" endtime="20170607 13:21:31.869"></status>
</kw>
<msg timestamp="20170607 13:21:31.870" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:21:31.589" status="PASS" endtime="20170607 13:21:31.870"></status>
</kw>
<msg timestamp="20170607 13:21:31.870" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:21:31.589" status="PASS" endtime="20170607 13:21:31.870"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:21:31.871" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:21:31.870" status="FAIL" endtime="20170607 13:21:31.871"></status>
</kw>
<status starttime="20170607 13:21:31.588" status="FAIL" endtime="20170607 13:21:31.871"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:21:41.876" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:21:41.876" status="PASS" endtime="20170607 13:21:41.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:21:41.878" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:21:41.877" status="PASS" endtime="20170607 13:21:41.878"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:21:41.879" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:21:41.878" status="PASS" endtime="20170607 13:21:41.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:21:41.880" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:21:41.879" status="PASS" endtime="20170607 13:21:41.880"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:21:42.078" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:21:41.881" status="PASS" endtime="20170607 13:21:42.078"></status>
</kw>
<msg timestamp="20170607 13:21:42.078" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:21:42.078" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:41.880" status="PASS" endtime="20170607 13:21:42.078"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:21:42.079" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:42.079" status="PASS" endtime="20170607 13:21:42.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:21:42.080" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:42.079" status="PASS" endtime="20170607 13:21:42.080"></status>
</kw>
<status starttime="20170607 13:21:41.875" status="PASS" endtime="20170607 13:21:42.080"></status>
</kw>
<status starttime="20170607 13:21:41.875" status="PASS" endtime="20170607 13:21:42.080"></status>
</kw>
<status starttime="20170607 13:21:41.874" status="PASS" endtime="20170607 13:21:42.080"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:21:42.081" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:21:42.081" status="PASS" endtime="20170607 13:21:42.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:21:42.083" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:21:42.082" status="PASS" endtime="20170607 13:21:42.083"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:21:42.084" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:21:42.084" status="PASS" endtime="20170607 13:21:42.084"></status>
</kw>
<status starttime="20170607 13:21:42.083" status="PASS" endtime="20170607 13:21:42.084"></status>
</kw>
<status starttime="20170607 13:21:42.082" status="PASS" endtime="20170607 13:21:42.084"></status>
</kw>
<status starttime="20170607 13:21:42.081" status="PASS" endtime="20170607 13:21:42.085"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:21:42.148" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:21:42.148" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:42.085" status="PASS" endtime="20170607 13:21:42.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:21:42.150" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:21:42.150" status="PASS" endtime="20170607 13:21:42.150"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:21:42.151" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:21:42.151" status="PASS" endtime="20170607 13:21:42.151"></status>
</kw>
<status starttime="20170607 13:21:42.150" status="PASS" endtime="20170607 13:21:42.151"></status>
</kw>
<status starttime="20170607 13:21:42.149" status="PASS" endtime="20170607 13:21:42.151"></status>
</kw>
<status starttime="20170607 13:21:42.149" status="PASS" endtime="20170607 13:21:42.152"></status>
</kw>
<msg timestamp="20170607 13:21:42.152" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:41.873" status="PASS" endtime="20170607 13:21:42.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:21:42.152" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:42.152" status="PASS" endtime="20170607 13:21:42.152"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:21:42.153" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:21:42.153" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:21:42.153" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:21:42.153" status="PASS" endtime="20170607 13:21:42.153"></status>
</kw>
<msg timestamp="20170607 13:21:42.153" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:21:41.873" status="PASS" endtime="20170607 13:21:42.154"></status>
</kw>
<msg timestamp="20170607 13:21:42.154" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:21:41.872" status="PASS" endtime="20170607 13:21:42.154"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:21:42.154" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:21:42.154" status="FAIL" endtime="20170607 13:21:42.155"></status>
</kw>
<status starttime="20170607 13:21:41.871" status="FAIL" endtime="20170607 13:21:42.155"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:21:52.160" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:21:52.160" status="PASS" endtime="20170607 13:21:52.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:21:52.161" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:21:52.161" status="PASS" endtime="20170607 13:21:52.161"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:21:52.162" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:21:52.161" status="PASS" endtime="20170607 13:21:52.162"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:21:52.162" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:21:52.162" status="PASS" endtime="20170607 13:21:52.163"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:21:52.355" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:21:52.163" status="PASS" endtime="20170607 13:21:52.355"></status>
</kw>
<msg timestamp="20170607 13:21:52.355" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:21:52.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:52.163" status="PASS" endtime="20170607 13:21:52.355"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:21:52.356" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:52.356" status="PASS" endtime="20170607 13:21:52.356"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:21:52.357" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:52.357" status="PASS" endtime="20170607 13:21:52.357"></status>
</kw>
<status starttime="20170607 13:21:52.159" status="PASS" endtime="20170607 13:21:52.357"></status>
</kw>
<status starttime="20170607 13:21:52.158" status="PASS" endtime="20170607 13:21:52.357"></status>
</kw>
<status starttime="20170607 13:21:52.157" status="PASS" endtime="20170607 13:21:52.357"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:21:52.358" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:21:52.358" status="PASS" endtime="20170607 13:21:52.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:21:52.360" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:21:52.359" status="PASS" endtime="20170607 13:21:52.360"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:21:52.361" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:21:52.361" status="PASS" endtime="20170607 13:21:52.361"></status>
</kw>
<status starttime="20170607 13:21:52.360" status="PASS" endtime="20170607 13:21:52.361"></status>
</kw>
<status starttime="20170607 13:21:52.359" status="PASS" endtime="20170607 13:21:52.361"></status>
</kw>
<status starttime="20170607 13:21:52.358" status="PASS" endtime="20170607 13:21:52.361"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:21:52.439" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:21:52.440" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:52.362" status="PASS" endtime="20170607 13:21:52.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:21:52.441" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:21:52.441" status="PASS" endtime="20170607 13:21:52.441"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:21:52.444" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:21:52.442" status="PASS" endtime="20170607 13:21:52.444"></status>
</kw>
<status starttime="20170607 13:21:52.442" status="PASS" endtime="20170607 13:21:52.444"></status>
</kw>
<status starttime="20170607 13:21:52.440" status="PASS" endtime="20170607 13:21:52.444"></status>
</kw>
<status starttime="20170607 13:21:52.440" status="PASS" endtime="20170607 13:21:52.445"></status>
</kw>
<msg timestamp="20170607 13:21:52.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:21:52.157" status="PASS" endtime="20170607 13:21:52.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:21:52.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:21:52.445" status="PASS" endtime="20170607 13:21:52.446"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:21:52.446" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:21:52.446" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:21:52.446" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:21:52.446" status="PASS" endtime="20170607 13:21:52.446"></status>
</kw>
<msg timestamp="20170607 13:21:52.447" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:21:52.156" status="PASS" endtime="20170607 13:21:52.447"></status>
</kw>
<msg timestamp="20170607 13:21:52.447" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:21:52.156" status="PASS" endtime="20170607 13:21:52.447"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:21:52.448" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:21:52.447" status="FAIL" endtime="20170607 13:21:52.448"></status>
</kw>
<status starttime="20170607 13:21:52.155" status="FAIL" endtime="20170607 13:21:52.448"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:22:02.454" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:22:02.453" status="PASS" endtime="20170607 13:22:02.454"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:22:02.455" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:22:02.455" status="PASS" endtime="20170607 13:22:02.455"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:22:02.456" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:22:02.455" status="PASS" endtime="20170607 13:22:02.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:22:02.457" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:22:02.456" status="PASS" endtime="20170607 13:22:02.457"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:22:02.643" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:22:02.458" status="PASS" endtime="20170607 13:22:02.643"></status>
</kw>
<msg timestamp="20170607 13:22:02.643" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:22:02.643" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:02.457" status="PASS" endtime="20170607 13:22:02.643"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:22:02.644" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:02.643" status="PASS" endtime="20170607 13:22:02.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:22:02.644" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:02.644" status="PASS" endtime="20170607 13:22:02.644"></status>
</kw>
<status starttime="20170607 13:22:02.452" status="PASS" endtime="20170607 13:22:02.645"></status>
</kw>
<status starttime="20170607 13:22:02.452" status="PASS" endtime="20170607 13:22:02.645"></status>
</kw>
<status starttime="20170607 13:22:02.451" status="PASS" endtime="20170607 13:22:02.645"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:22:02.645" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:22:02.645" status="PASS" endtime="20170607 13:22:02.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:22:02.648" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:22:02.647" status="PASS" endtime="20170607 13:22:02.648"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:22:02.649" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:22:02.649" status="PASS" endtime="20170607 13:22:02.649"></status>
</kw>
<status starttime="20170607 13:22:02.648" status="PASS" endtime="20170607 13:22:02.649"></status>
</kw>
<status starttime="20170607 13:22:02.646" status="PASS" endtime="20170607 13:22:02.649"></status>
</kw>
<status starttime="20170607 13:22:02.646" status="PASS" endtime="20170607 13:22:02.649"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:22:02.715" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:22:02.715" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:02.650" status="PASS" endtime="20170607 13:22:02.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:22:02.717" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:22:02.716" status="PASS" endtime="20170607 13:22:02.717"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:22:02.718" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:22:02.718" status="PASS" endtime="20170607 13:22:02.718"></status>
</kw>
<status starttime="20170607 13:22:02.717" status="PASS" endtime="20170607 13:22:02.718"></status>
</kw>
<status starttime="20170607 13:22:02.716" status="PASS" endtime="20170607 13:22:02.718"></status>
</kw>
<status starttime="20170607 13:22:02.715" status="PASS" endtime="20170607 13:22:02.718"></status>
</kw>
<msg timestamp="20170607 13:22:02.718" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:02.450" status="PASS" endtime="20170607 13:22:02.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:22:02.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:02.719" status="PASS" endtime="20170607 13:22:02.719"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:22:02.720" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:22:02.720" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:22:02.720" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:22:02.720" status="PASS" endtime="20170607 13:22:02.720"></status>
</kw>
<msg timestamp="20170607 13:22:02.721" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:22:02.449" status="PASS" endtime="20170607 13:22:02.721"></status>
</kw>
<msg timestamp="20170607 13:22:02.721" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:22:02.449" status="PASS" endtime="20170607 13:22:02.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:22:02.722" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:22:02.722" status="FAIL" endtime="20170607 13:22:02.722"></status>
</kw>
<status starttime="20170607 13:22:02.448" status="FAIL" endtime="20170607 13:22:02.722"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:22:12.727" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:22:12.727" status="PASS" endtime="20170607 13:22:12.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:22:12.729" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:22:12.728" status="PASS" endtime="20170607 13:22:12.729"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:22:12.730" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:22:12.729" status="PASS" endtime="20170607 13:22:12.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:22:12.730" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:22:12.730" status="PASS" endtime="20170607 13:22:12.730"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:22:12.954" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:22:12.731" status="PASS" endtime="20170607 13:22:12.954"></status>
</kw>
<msg timestamp="20170607 13:22:12.954" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:22:12.954" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:12.731" status="PASS" endtime="20170607 13:22:12.954"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:22:12.955" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:12.955" status="PASS" endtime="20170607 13:22:12.955"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:22:12.956" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:12.955" status="PASS" endtime="20170607 13:22:12.956"></status>
</kw>
<status starttime="20170607 13:22:12.726" status="PASS" endtime="20170607 13:22:12.956"></status>
</kw>
<status starttime="20170607 13:22:12.726" status="PASS" endtime="20170607 13:22:12.956"></status>
</kw>
<status starttime="20170607 13:22:12.725" status="PASS" endtime="20170607 13:22:12.956"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:22:12.957" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:22:12.956" status="PASS" endtime="20170607 13:22:12.957"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:22:12.959" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:22:12.958" status="PASS" endtime="20170607 13:22:12.959"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:22:12.960" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:22:12.959" status="PASS" endtime="20170607 13:22:12.960"></status>
</kw>
<status starttime="20170607 13:22:12.959" status="PASS" endtime="20170607 13:22:12.960"></status>
</kw>
<status starttime="20170607 13:22:12.957" status="PASS" endtime="20170607 13:22:12.960"></status>
</kw>
<status starttime="20170607 13:22:12.957" status="PASS" endtime="20170607 13:22:12.960"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:22:13.025" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:22:13.026" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:12.960" status="PASS" endtime="20170607 13:22:13.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:22:13.027" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:22:13.027" status="PASS" endtime="20170607 13:22:13.027"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:22:13.028" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:22:13.028" status="PASS" endtime="20170607 13:22:13.028"></status>
</kw>
<status starttime="20170607 13:22:13.028" status="PASS" endtime="20170607 13:22:13.029"></status>
</kw>
<status starttime="20170607 13:22:13.026" status="PASS" endtime="20170607 13:22:13.029"></status>
</kw>
<status starttime="20170607 13:22:13.026" status="PASS" endtime="20170607 13:22:13.029"></status>
</kw>
<msg timestamp="20170607 13:22:13.029" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:12.725" status="PASS" endtime="20170607 13:22:13.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:22:13.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:13.029" status="PASS" endtime="20170607 13:22:13.030"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:22:13.030" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:22:13.030" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:22:13.030" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:22:13.030" status="PASS" endtime="20170607 13:22:13.030"></status>
</kw>
<msg timestamp="20170607 13:22:13.031" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:22:12.724" status="PASS" endtime="20170607 13:22:13.031"></status>
</kw>
<msg timestamp="20170607 13:22:13.031" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:22:12.724" status="PASS" endtime="20170607 13:22:13.031"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:22:13.032" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:22:13.031" status="FAIL" endtime="20170607 13:22:13.032"></status>
</kw>
<status starttime="20170607 13:22:12.723" status="FAIL" endtime="20170607 13:22:13.032"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:22:23.039" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:22:23.038" status="PASS" endtime="20170607 13:22:23.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:22:23.040" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:22:23.040" status="PASS" endtime="20170607 13:22:23.040"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:22:23.041" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:22:23.041" status="PASS" endtime="20170607 13:22:23.041"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:22:23.042" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:22:23.042" status="PASS" endtime="20170607 13:22:23.042"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:22:23.233" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:22:23.043" status="PASS" endtime="20170607 13:22:23.233"></status>
</kw>
<msg timestamp="20170607 13:22:23.233" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:22:23.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:23.042" status="PASS" endtime="20170607 13:22:23.233"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:22:23.234" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:23.234" status="PASS" endtime="20170607 13:22:23.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:22:23.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:23.234" status="PASS" endtime="20170607 13:22:23.235"></status>
</kw>
<status starttime="20170607 13:22:23.037" status="PASS" endtime="20170607 13:22:23.235"></status>
</kw>
<status starttime="20170607 13:22:23.037" status="PASS" endtime="20170607 13:22:23.235"></status>
</kw>
<status starttime="20170607 13:22:23.036" status="PASS" endtime="20170607 13:22:23.235"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:22:23.236" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:22:23.235" status="PASS" endtime="20170607 13:22:23.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:22:23.238" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:22:23.237" status="PASS" endtime="20170607 13:22:23.238"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:22:23.239" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:22:23.239" status="PASS" endtime="20170607 13:22:23.239"></status>
</kw>
<status starttime="20170607 13:22:23.238" status="PASS" endtime="20170607 13:22:23.239"></status>
</kw>
<status starttime="20170607 13:22:23.237" status="PASS" endtime="20170607 13:22:23.239"></status>
</kw>
<status starttime="20170607 13:22:23.236" status="PASS" endtime="20170607 13:22:23.239"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:22:23.345" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:22:23.346" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:23.240" status="PASS" endtime="20170607 13:22:23.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:22:23.347" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:22:23.347" status="PASS" endtime="20170607 13:22:23.347"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:22:23.348" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:22:23.348" status="PASS" endtime="20170607 13:22:23.349"></status>
</kw>
<status starttime="20170607 13:22:23.348" status="PASS" endtime="20170607 13:22:23.349"></status>
</kw>
<status starttime="20170607 13:22:23.346" status="PASS" endtime="20170607 13:22:23.349"></status>
</kw>
<status starttime="20170607 13:22:23.346" status="PASS" endtime="20170607 13:22:23.349"></status>
</kw>
<msg timestamp="20170607 13:22:23.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:23.035" status="PASS" endtime="20170607 13:22:23.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:22:23.350" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:23.349" status="PASS" endtime="20170607 13:22:23.350"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:22:23.350" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:22:23.350" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:22:23.351" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:22:23.350" status="PASS" endtime="20170607 13:22:23.351"></status>
</kw>
<msg timestamp="20170607 13:22:23.351" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:22:23.034" status="PASS" endtime="20170607 13:22:23.351"></status>
</kw>
<msg timestamp="20170607 13:22:23.351" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:22:23.033" status="PASS" endtime="20170607 13:22:23.351"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:22:23.352" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:22:23.351" status="FAIL" endtime="20170607 13:22:23.352"></status>
</kw>
<status starttime="20170607 13:22:23.033" status="FAIL" endtime="20170607 13:22:23.352"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:22:33.357" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:22:33.357" status="PASS" endtime="20170607 13:22:33.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:22:33.358" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:22:33.358" status="PASS" endtime="20170607 13:22:33.359"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:22:33.359" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:22:33.359" status="PASS" endtime="20170607 13:22:33.359"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:22:33.360" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:22:33.359" status="PASS" endtime="20170607 13:22:33.360"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:22:33.558" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:22:33.361" status="PASS" endtime="20170607 13:22:33.558"></status>
</kw>
<msg timestamp="20170607 13:22:33.558" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:22:33.558" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:33.360" status="PASS" endtime="20170607 13:22:33.558"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:22:33.559" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:33.558" status="PASS" endtime="20170607 13:22:33.559"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:22:33.560" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:33.559" status="PASS" endtime="20170607 13:22:33.560"></status>
</kw>
<status starttime="20170607 13:22:33.356" status="PASS" endtime="20170607 13:22:33.560"></status>
</kw>
<status starttime="20170607 13:22:33.356" status="PASS" endtime="20170607 13:22:33.560"></status>
</kw>
<status starttime="20170607 13:22:33.355" status="PASS" endtime="20170607 13:22:33.560"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:22:33.561" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:22:33.561" status="PASS" endtime="20170607 13:22:33.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:22:33.564" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:22:33.563" status="PASS" endtime="20170607 13:22:33.564"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:22:33.565" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:22:33.565" status="PASS" endtime="20170607 13:22:33.566"></status>
</kw>
<status starttime="20170607 13:22:33.564" status="PASS" endtime="20170607 13:22:33.566"></status>
</kw>
<status starttime="20170607 13:22:33.562" status="PASS" endtime="20170607 13:22:33.566"></status>
</kw>
<status starttime="20170607 13:22:33.562" status="PASS" endtime="20170607 13:22:33.566"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:22:33.630" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:22:33.630" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:33.566" status="PASS" endtime="20170607 13:22:33.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:22:33.632" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:22:33.631" status="PASS" endtime="20170607 13:22:33.632"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:22:33.633" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:22:33.632" status="PASS" endtime="20170607 13:22:33.633"></status>
</kw>
<status starttime="20170607 13:22:33.632" status="PASS" endtime="20170607 13:22:33.633"></status>
</kw>
<status starttime="20170607 13:22:33.631" status="PASS" endtime="20170607 13:22:33.633"></status>
</kw>
<status starttime="20170607 13:22:33.630" status="PASS" endtime="20170607 13:22:33.633"></status>
</kw>
<msg timestamp="20170607 13:22:33.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:33.354" status="PASS" endtime="20170607 13:22:33.633"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:22:33.634" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:33.634" status="PASS" endtime="20170607 13:22:33.634"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:22:33.635" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:22:33.635" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:22:33.635" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:22:33.634" status="PASS" endtime="20170607 13:22:33.635"></status>
</kw>
<msg timestamp="20170607 13:22:33.635" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:22:33.354" status="PASS" endtime="20170607 13:22:33.635"></status>
</kw>
<msg timestamp="20170607 13:22:33.635" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:22:33.353" status="PASS" endtime="20170607 13:22:33.635"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:22:33.636" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:22:33.636" status="FAIL" endtime="20170607 13:22:33.636"></status>
</kw>
<status starttime="20170607 13:22:33.353" status="FAIL" endtime="20170607 13:22:33.636"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:22:43.641" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:22:43.641" status="PASS" endtime="20170607 13:22:43.642"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:22:43.642" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:22:43.642" status="PASS" endtime="20170607 13:22:43.642"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:22:43.643" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:22:43.643" status="PASS" endtime="20170607 13:22:43.643"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:22:43.644" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:22:43.643" status="PASS" endtime="20170607 13:22:43.644"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:22:43.829" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:22:43.644" status="PASS" endtime="20170607 13:22:43.829"></status>
</kw>
<msg timestamp="20170607 13:22:43.829" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:22:43.829" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:43.644" status="PASS" endtime="20170607 13:22:43.829"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:22:43.830" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:43.830" status="PASS" endtime="20170607 13:22:43.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:22:43.831" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:43.830" status="PASS" endtime="20170607 13:22:43.831"></status>
</kw>
<status starttime="20170607 13:22:43.640" status="PASS" endtime="20170607 13:22:43.831"></status>
</kw>
<status starttime="20170607 13:22:43.640" status="PASS" endtime="20170607 13:22:43.831"></status>
</kw>
<status starttime="20170607 13:22:43.639" status="PASS" endtime="20170607 13:22:43.831"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:22:43.832" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:22:43.831" status="PASS" endtime="20170607 13:22:43.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:22:43.834" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:22:43.833" status="PASS" endtime="20170607 13:22:43.834"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:22:43.835" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:22:43.834" status="PASS" endtime="20170607 13:22:43.835"></status>
</kw>
<status starttime="20170607 13:22:43.834" status="PASS" endtime="20170607 13:22:43.835"></status>
</kw>
<status starttime="20170607 13:22:43.832" status="PASS" endtime="20170607 13:22:43.835"></status>
</kw>
<status starttime="20170607 13:22:43.832" status="PASS" endtime="20170607 13:22:43.835"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:22:43.899" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:22:43.899" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:43.835" status="PASS" endtime="20170607 13:22:43.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:22:43.901" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:22:43.900" status="PASS" endtime="20170607 13:22:43.901"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:22:43.902" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:22:43.901" status="PASS" endtime="20170607 13:22:43.902"></status>
</kw>
<status starttime="20170607 13:22:43.901" status="PASS" endtime="20170607 13:22:43.902"></status>
</kw>
<status starttime="20170607 13:22:43.900" status="PASS" endtime="20170607 13:22:43.902"></status>
</kw>
<status starttime="20170607 13:22:43.899" status="PASS" endtime="20170607 13:22:43.902"></status>
</kw>
<msg timestamp="20170607 13:22:43.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:43.638" status="PASS" endtime="20170607 13:22:43.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:22:43.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:43.903" status="PASS" endtime="20170607 13:22:43.903"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:22:43.904" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:22:43.904" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:22:43.904" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:22:43.903" status="PASS" endtime="20170607 13:22:43.904"></status>
</kw>
<msg timestamp="20170607 13:22:43.904" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:22:43.638" status="PASS" endtime="20170607 13:22:43.904"></status>
</kw>
<msg timestamp="20170607 13:22:43.904" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:22:43.637" status="PASS" endtime="20170607 13:22:43.904"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:22:43.905" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:22:43.905" status="FAIL" endtime="20170607 13:22:43.905"></status>
</kw>
<status starttime="20170607 13:22:43.637" status="FAIL" endtime="20170607 13:22:43.905"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:22:53.910" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:22:53.910" status="PASS" endtime="20170607 13:22:53.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:22:53.911" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:22:53.911" status="PASS" endtime="20170607 13:22:53.911"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:22:53.912" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:22:53.911" status="PASS" endtime="20170607 13:22:53.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:22:53.912" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:22:53.912" status="PASS" endtime="20170607 13:22:53.912"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:22:54.103" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:22:53.913" status="PASS" endtime="20170607 13:22:54.103"></status>
</kw>
<msg timestamp="20170607 13:22:54.103" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:22:54.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:53.913" status="PASS" endtime="20170607 13:22:54.103"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:22:54.104" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:54.104" status="PASS" endtime="20170607 13:22:54.104"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:22:54.105" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:54.104" status="PASS" endtime="20170607 13:22:54.105"></status>
</kw>
<status starttime="20170607 13:22:53.909" status="PASS" endtime="20170607 13:22:54.105"></status>
</kw>
<status starttime="20170607 13:22:53.909" status="PASS" endtime="20170607 13:22:54.105"></status>
</kw>
<status starttime="20170607 13:22:53.908" status="PASS" endtime="20170607 13:22:54.105"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:22:54.106" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:22:54.106" status="PASS" endtime="20170607 13:22:54.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:22:54.108" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:22:54.107" status="PASS" endtime="20170607 13:22:54.108"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:22:54.109" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:22:54.109" status="PASS" endtime="20170607 13:22:54.109"></status>
</kw>
<status starttime="20170607 13:22:54.108" status="PASS" endtime="20170607 13:22:54.109"></status>
</kw>
<status starttime="20170607 13:22:54.107" status="PASS" endtime="20170607 13:22:54.109"></status>
</kw>
<status starttime="20170607 13:22:54.106" status="PASS" endtime="20170607 13:22:54.109"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:22:54.173" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:22:54.173" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:54.110" status="PASS" endtime="20170607 13:22:54.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:22:54.175" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:22:54.175" status="PASS" endtime="20170607 13:22:54.175"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:22:54.176" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:22:54.176" status="PASS" endtime="20170607 13:22:54.176"></status>
</kw>
<status starttime="20170607 13:22:54.176" status="PASS" endtime="20170607 13:22:54.177"></status>
</kw>
<status starttime="20170607 13:22:54.174" status="PASS" endtime="20170607 13:22:54.177"></status>
</kw>
<status starttime="20170607 13:22:54.174" status="PASS" endtime="20170607 13:22:54.177"></status>
</kw>
<msg timestamp="20170607 13:22:54.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:22:53.907" status="PASS" endtime="20170607 13:22:54.177"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:22:54.178" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:22:54.177" status="PASS" endtime="20170607 13:22:54.178"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:22:54.178" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:22:54.178" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:22:54.178" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:22:54.178" status="PASS" endtime="20170607 13:22:54.178"></status>
</kw>
<msg timestamp="20170607 13:22:54.179" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:22:53.907" status="PASS" endtime="20170607 13:22:54.179"></status>
</kw>
<msg timestamp="20170607 13:22:54.179" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:22:53.906" status="PASS" endtime="20170607 13:22:54.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:22:54.180" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:22:54.179" status="FAIL" endtime="20170607 13:22:54.180"></status>
</kw>
<status starttime="20170607 13:22:53.906" status="FAIL" endtime="20170607 13:22:54.180"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:23:04.185" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:23:04.184" status="PASS" endtime="20170607 13:23:04.185"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:23:04.186" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:23:04.185" status="PASS" endtime="20170607 13:23:04.186"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:23:04.186" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:23:04.186" status="PASS" endtime="20170607 13:23:04.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:23:04.187" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:23:04.187" status="PASS" endtime="20170607 13:23:04.187"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:23:04.379" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:23:04.188" status="PASS" endtime="20170607 13:23:04.379"></status>
</kw>
<msg timestamp="20170607 13:23:04.379" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:23:04.379" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:04.187" status="PASS" endtime="20170607 13:23:04.379"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:23:04.380" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:04.380" status="PASS" endtime="20170607 13:23:04.380"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:23:04.381" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:04.380" status="PASS" endtime="20170607 13:23:04.381"></status>
</kw>
<status starttime="20170607 13:23:04.183" status="PASS" endtime="20170607 13:23:04.381"></status>
</kw>
<status starttime="20170607 13:23:04.183" status="PASS" endtime="20170607 13:23:04.381"></status>
</kw>
<status starttime="20170607 13:23:04.182" status="PASS" endtime="20170607 13:23:04.381"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:23:04.382" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:23:04.381" status="PASS" endtime="20170607 13:23:04.382"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:23:04.384" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:23:04.383" status="PASS" endtime="20170607 13:23:04.384"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:23:04.385" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:23:04.385" status="PASS" endtime="20170607 13:23:04.385"></status>
</kw>
<status starttime="20170607 13:23:04.384" status="PASS" endtime="20170607 13:23:04.385"></status>
</kw>
<status starttime="20170607 13:23:04.383" status="PASS" endtime="20170607 13:23:04.385"></status>
</kw>
<status starttime="20170607 13:23:04.382" status="PASS" endtime="20170607 13:23:04.385"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:23:04.450" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:23:04.450" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:04.385" status="PASS" endtime="20170607 13:23:04.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:23:04.452" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:23:04.451" status="PASS" endtime="20170607 13:23:04.452"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:23:04.453" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:23:04.453" status="PASS" endtime="20170607 13:23:04.453"></status>
</kw>
<status starttime="20170607 13:23:04.452" status="PASS" endtime="20170607 13:23:04.453"></status>
</kw>
<status starttime="20170607 13:23:04.451" status="PASS" endtime="20170607 13:23:04.453"></status>
</kw>
<status starttime="20170607 13:23:04.450" status="PASS" endtime="20170607 13:23:04.454"></status>
</kw>
<msg timestamp="20170607 13:23:04.454" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:04.182" status="PASS" endtime="20170607 13:23:04.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:23:04.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:04.454" status="PASS" endtime="20170607 13:23:04.454"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:23:04.455" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:23:04.455" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:23:04.455" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:23:04.455" status="PASS" endtime="20170607 13:23:04.455"></status>
</kw>
<msg timestamp="20170607 13:23:04.455" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:23:04.181" status="PASS" endtime="20170607 13:23:04.455"></status>
</kw>
<msg timestamp="20170607 13:23:04.456" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:23:04.181" status="PASS" endtime="20170607 13:23:04.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:23:04.456" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:23:04.456" status="FAIL" endtime="20170607 13:23:04.456"></status>
</kw>
<status starttime="20170607 13:23:04.180" status="FAIL" endtime="20170607 13:23:04.457"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:23:14.462" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:23:14.461" status="PASS" endtime="20170607 13:23:14.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:23:14.463" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:23:14.462" status="PASS" endtime="20170607 13:23:14.463"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:23:14.463" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:23:14.463" status="PASS" endtime="20170607 13:23:14.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:23:14.464" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:23:14.464" status="PASS" endtime="20170607 13:23:14.464"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:23:14.656" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:23:14.465" status="PASS" endtime="20170607 13:23:14.657"></status>
</kw>
<msg timestamp="20170607 13:23:14.657" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:23:14.657" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:14.464" status="PASS" endtime="20170607 13:23:14.657"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:23:14.658" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:14.657" status="PASS" endtime="20170607 13:23:14.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:23:14.659" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:14.658" status="PASS" endtime="20170607 13:23:14.659"></status>
</kw>
<status starttime="20170607 13:23:14.461" status="PASS" endtime="20170607 13:23:14.659"></status>
</kw>
<status starttime="20170607 13:23:14.460" status="PASS" endtime="20170607 13:23:14.660"></status>
</kw>
<status starttime="20170607 13:23:14.459" status="PASS" endtime="20170607 13:23:14.660"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:23:14.661" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:23:14.660" status="PASS" endtime="20170607 13:23:14.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:23:14.664" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:23:14.663" status="PASS" endtime="20170607 13:23:14.664"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:23:14.665" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:23:14.665" status="PASS" endtime="20170607 13:23:14.665"></status>
</kw>
<status starttime="20170607 13:23:14.664" status="PASS" endtime="20170607 13:23:14.665"></status>
</kw>
<status starttime="20170607 13:23:14.662" status="PASS" endtime="20170607 13:23:14.665"></status>
</kw>
<status starttime="20170607 13:23:14.661" status="PASS" endtime="20170607 13:23:14.665"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:23:14.735" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:23:14.735" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:14.666" status="PASS" endtime="20170607 13:23:14.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:23:14.737" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:23:14.736" status="PASS" endtime="20170607 13:23:14.737"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:23:14.738" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:23:14.738" status="PASS" endtime="20170607 13:23:14.738"></status>
</kw>
<status starttime="20170607 13:23:14.737" status="PASS" endtime="20170607 13:23:14.738"></status>
</kw>
<status starttime="20170607 13:23:14.736" status="PASS" endtime="20170607 13:23:14.738"></status>
</kw>
<status starttime="20170607 13:23:14.735" status="PASS" endtime="20170607 13:23:14.738"></status>
</kw>
<msg timestamp="20170607 13:23:14.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:14.459" status="PASS" endtime="20170607 13:23:14.739"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:23:14.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:14.739" status="PASS" endtime="20170607 13:23:14.739"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:23:14.740" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:23:14.740" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:23:14.740" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:23:14.740" status="PASS" endtime="20170607 13:23:14.740"></status>
</kw>
<msg timestamp="20170607 13:23:14.740" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:23:14.458" status="PASS" endtime="20170607 13:23:14.740"></status>
</kw>
<msg timestamp="20170607 13:23:14.741" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:23:14.458" status="PASS" endtime="20170607 13:23:14.741"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:23:14.741" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:23:14.741" status="FAIL" endtime="20170607 13:23:14.741"></status>
</kw>
<status starttime="20170607 13:23:14.457" status="FAIL" endtime="20170607 13:23:14.742"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:23:24.748" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:23:24.748" status="PASS" endtime="20170607 13:23:24.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:23:24.749" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:23:24.749" status="PASS" endtime="20170607 13:23:24.749"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:23:24.750" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:23:24.750" status="PASS" endtime="20170607 13:23:24.750"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:23:24.751" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:23:24.750" status="PASS" endtime="20170607 13:23:24.751"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:23:24.978" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:23:24.752" status="PASS" endtime="20170607 13:23:24.978"></status>
</kw>
<msg timestamp="20170607 13:23:24.978" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:23:24.978" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:24.751" status="PASS" endtime="20170607 13:23:24.978"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:23:24.979" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:24.979" status="PASS" endtime="20170607 13:23:24.979"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:23:24.980" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:24.980" status="PASS" endtime="20170607 13:23:24.980"></status>
</kw>
<status starttime="20170607 13:23:24.746" status="PASS" endtime="20170607 13:23:24.980"></status>
</kw>
<status starttime="20170607 13:23:24.745" status="PASS" endtime="20170607 13:23:24.980"></status>
</kw>
<status starttime="20170607 13:23:24.744" status="PASS" endtime="20170607 13:23:24.980"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:23:24.981" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:23:24.981" status="PASS" endtime="20170607 13:23:24.981"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:23:24.983" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:23:24.982" status="PASS" endtime="20170607 13:23:24.983"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:23:24.984" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:23:24.984" status="PASS" endtime="20170607 13:23:24.984"></status>
</kw>
<status starttime="20170607 13:23:24.983" status="PASS" endtime="20170607 13:23:24.984"></status>
</kw>
<status starttime="20170607 13:23:24.982" status="PASS" endtime="20170607 13:23:24.984"></status>
</kw>
<status starttime="20170607 13:23:24.981" status="PASS" endtime="20170607 13:23:24.984"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:23:25.049" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:23:25.049" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:24.985" status="PASS" endtime="20170607 13:23:25.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:23:25.051" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:23:25.051" status="PASS" endtime="20170607 13:23:25.051"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:23:25.052" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:23:25.052" status="PASS" endtime="20170607 13:23:25.053"></status>
</kw>
<status starttime="20170607 13:23:25.051" status="PASS" endtime="20170607 13:23:25.053"></status>
</kw>
<status starttime="20170607 13:23:25.050" status="PASS" endtime="20170607 13:23:25.053"></status>
</kw>
<status starttime="20170607 13:23:25.050" status="PASS" endtime="20170607 13:23:25.053"></status>
</kw>
<msg timestamp="20170607 13:23:25.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:24.744" status="PASS" endtime="20170607 13:23:25.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:23:25.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:25.053" status="PASS" endtime="20170607 13:23:25.054"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:23:25.054" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:23:25.054" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:23:25.055" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:23:25.054" status="PASS" endtime="20170607 13:23:25.055"></status>
</kw>
<msg timestamp="20170607 13:23:25.055" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:23:24.743" status="PASS" endtime="20170607 13:23:25.055"></status>
</kw>
<msg timestamp="20170607 13:23:25.055" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:23:24.743" status="PASS" endtime="20170607 13:23:25.055"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:23:25.056" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:23:25.056" status="FAIL" endtime="20170607 13:23:25.056"></status>
</kw>
<status starttime="20170607 13:23:24.742" status="FAIL" endtime="20170607 13:23:25.056"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:23:35.061" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:23:35.061" status="PASS" endtime="20170607 13:23:35.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:23:35.062" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:23:35.062" status="PASS" endtime="20170607 13:23:35.062"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:23:35.063" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:23:35.063" status="PASS" endtime="20170607 13:23:35.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:23:35.064" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:23:35.063" status="PASS" endtime="20170607 13:23:35.064"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:23:35.251" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:23:35.064" status="PASS" endtime="20170607 13:23:35.251"></status>
</kw>
<msg timestamp="20170607 13:23:35.251" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:23:35.251" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:35.064" status="PASS" endtime="20170607 13:23:35.251"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:23:35.252" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:35.252" status="PASS" endtime="20170607 13:23:35.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:23:35.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:35.252" status="PASS" endtime="20170607 13:23:35.253"></status>
</kw>
<status starttime="20170607 13:23:35.060" status="PASS" endtime="20170607 13:23:35.253"></status>
</kw>
<status starttime="20170607 13:23:35.060" status="PASS" endtime="20170607 13:23:35.253"></status>
</kw>
<status starttime="20170607 13:23:35.059" status="PASS" endtime="20170607 13:23:35.253"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:23:35.254" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:23:35.253" status="PASS" endtime="20170607 13:23:35.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:23:35.256" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:23:35.255" status="PASS" endtime="20170607 13:23:35.256"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:23:35.257" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:23:35.257" status="PASS" endtime="20170607 13:23:35.257"></status>
</kw>
<status starttime="20170607 13:23:35.256" status="PASS" endtime="20170607 13:23:35.257"></status>
</kw>
<status starttime="20170607 13:23:35.255" status="PASS" endtime="20170607 13:23:35.257"></status>
</kw>
<status starttime="20170607 13:23:35.254" status="PASS" endtime="20170607 13:23:35.257"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:23:35.358" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:23:35.358" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:35.258" status="PASS" endtime="20170607 13:23:35.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:23:35.360" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:23:35.359" status="PASS" endtime="20170607 13:23:35.360"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:23:35.361" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:23:35.361" status="PASS" endtime="20170607 13:23:35.361"></status>
</kw>
<status starttime="20170607 13:23:35.360" status="PASS" endtime="20170607 13:23:35.361"></status>
</kw>
<status starttime="20170607 13:23:35.359" status="PASS" endtime="20170607 13:23:35.361"></status>
</kw>
<status starttime="20170607 13:23:35.358" status="PASS" endtime="20170607 13:23:35.361"></status>
</kw>
<msg timestamp="20170607 13:23:35.361" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:35.059" status="PASS" endtime="20170607 13:23:35.361"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:23:35.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:35.362" status="PASS" endtime="20170607 13:23:35.362"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:23:35.363" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:23:35.363" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:23:35.363" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:23:35.362" status="PASS" endtime="20170607 13:23:35.363"></status>
</kw>
<msg timestamp="20170607 13:23:35.363" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:23:35.058" status="PASS" endtime="20170607 13:23:35.363"></status>
</kw>
<msg timestamp="20170607 13:23:35.363" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:23:35.057" status="PASS" endtime="20170607 13:23:35.363"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:23:35.364" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:23:35.364" status="FAIL" endtime="20170607 13:23:35.364"></status>
</kw>
<status starttime="20170607 13:23:35.057" status="FAIL" endtime="20170607 13:23:35.364"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:23:45.369" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:23:45.369" status="PASS" endtime="20170607 13:23:45.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:23:45.371" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:23:45.370" status="PASS" endtime="20170607 13:23:45.371"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:23:45.371" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:23:45.371" status="PASS" endtime="20170607 13:23:45.371"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:23:45.372" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:23:45.372" status="PASS" endtime="20170607 13:23:45.372"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:23:45.557" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:23:45.373" status="PASS" endtime="20170607 13:23:45.558"></status>
</kw>
<msg timestamp="20170607 13:23:45.558" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:23:45.558" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:45.372" status="PASS" endtime="20170607 13:23:45.558"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:23:45.559" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:45.558" status="PASS" endtime="20170607 13:23:45.559"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:23:45.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:45.559" status="PASS" endtime="20170607 13:23:45.559"></status>
</kw>
<status starttime="20170607 13:23:45.368" status="PASS" endtime="20170607 13:23:45.559"></status>
</kw>
<status starttime="20170607 13:23:45.368" status="PASS" endtime="20170607 13:23:45.560"></status>
</kw>
<status starttime="20170607 13:23:45.367" status="PASS" endtime="20170607 13:23:45.560"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:23:45.560" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:23:45.560" status="PASS" endtime="20170607 13:23:45.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:23:45.562" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:23:45.562" status="PASS" endtime="20170607 13:23:45.562"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:23:45.564" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:23:45.563" status="PASS" endtime="20170607 13:23:45.564"></status>
</kw>
<status starttime="20170607 13:23:45.563" status="PASS" endtime="20170607 13:23:45.564"></status>
</kw>
<status starttime="20170607 13:23:45.561" status="PASS" endtime="20170607 13:23:45.564"></status>
</kw>
<status starttime="20170607 13:23:45.561" status="PASS" endtime="20170607 13:23:45.564"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:23:45.628" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:23:45.629" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:45.564" status="PASS" endtime="20170607 13:23:45.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:23:45.630" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:23:45.630" status="PASS" endtime="20170607 13:23:45.630"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:23:45.631" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:23:45.631" status="PASS" endtime="20170607 13:23:45.631"></status>
</kw>
<status starttime="20170607 13:23:45.631" status="PASS" endtime="20170607 13:23:45.632"></status>
</kw>
<status starttime="20170607 13:23:45.629" status="PASS" endtime="20170607 13:23:45.632"></status>
</kw>
<status starttime="20170607 13:23:45.629" status="PASS" endtime="20170607 13:23:45.632"></status>
</kw>
<msg timestamp="20170607 13:23:45.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:45.367" status="PASS" endtime="20170607 13:23:45.632"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:23:45.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:45.632" status="PASS" endtime="20170607 13:23:45.633"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:23:45.633" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:23:45.633" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:23:45.633" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:23:45.633" status="PASS" endtime="20170607 13:23:45.633"></status>
</kw>
<msg timestamp="20170607 13:23:45.634" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:23:45.366" status="PASS" endtime="20170607 13:23:45.634"></status>
</kw>
<msg timestamp="20170607 13:23:45.634" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:23:45.365" status="PASS" endtime="20170607 13:23:45.634"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:23:45.635" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:23:45.634" status="FAIL" endtime="20170607 13:23:45.635"></status>
</kw>
<status starttime="20170607 13:23:45.365" status="FAIL" endtime="20170607 13:23:45.635"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:23:55.640" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:23:55.640" status="PASS" endtime="20170607 13:23:55.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:23:55.641" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:23:55.641" status="PASS" endtime="20170607 13:23:55.641"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:23:55.642" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:23:55.642" status="PASS" endtime="20170607 13:23:55.642"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:23:55.643" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:23:55.642" status="PASS" endtime="20170607 13:23:55.643"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:23:55.838" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:23:55.644" status="PASS" endtime="20170607 13:23:55.839"></status>
</kw>
<msg timestamp="20170607 13:23:55.839" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:23:55.839" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:55.643" status="PASS" endtime="20170607 13:23:55.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:23:55.840" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:55.839" status="PASS" endtime="20170607 13:23:55.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:23:55.840" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:55.840" status="PASS" endtime="20170607 13:23:55.840"></status>
</kw>
<status starttime="20170607 13:23:55.640" status="PASS" endtime="20170607 13:23:55.840"></status>
</kw>
<status starttime="20170607 13:23:55.639" status="PASS" endtime="20170607 13:23:55.841"></status>
</kw>
<status starttime="20170607 13:23:55.638" status="PASS" endtime="20170607 13:23:55.841"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:23:55.841" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:23:55.841" status="PASS" endtime="20170607 13:23:55.841"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:23:55.843" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:23:55.843" status="PASS" endtime="20170607 13:23:55.843"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:23:55.844" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:23:55.844" status="PASS" endtime="20170607 13:23:55.845"></status>
</kw>
<status starttime="20170607 13:23:55.844" status="PASS" endtime="20170607 13:23:55.845"></status>
</kw>
<status starttime="20170607 13:23:55.842" status="PASS" endtime="20170607 13:23:55.845"></status>
</kw>
<status starttime="20170607 13:23:55.842" status="PASS" endtime="20170607 13:23:55.845"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:23:55.931" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:23:55.931" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:55.845" status="PASS" endtime="20170607 13:23:55.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:23:55.933" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:23:55.933" status="PASS" endtime="20170607 13:23:55.933"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:23:55.934" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:23:55.934" status="PASS" endtime="20170607 13:23:55.934"></status>
</kw>
<status starttime="20170607 13:23:55.933" status="PASS" endtime="20170607 13:23:55.934"></status>
</kw>
<status starttime="20170607 13:23:55.932" status="PASS" endtime="20170607 13:23:55.935"></status>
</kw>
<status starttime="20170607 13:23:55.932" status="PASS" endtime="20170607 13:23:55.935"></status>
</kw>
<msg timestamp="20170607 13:23:55.935" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:23:55.638" status="PASS" endtime="20170607 13:23:55.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:23:55.935" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:23:55.935" status="PASS" endtime="20170607 13:23:55.936"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:23:55.936" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:23:55.936" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:23:55.936" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:23:55.936" status="PASS" endtime="20170607 13:23:55.936"></status>
</kw>
<msg timestamp="20170607 13:23:55.937" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:23:55.637" status="PASS" endtime="20170607 13:23:55.937"></status>
</kw>
<msg timestamp="20170607 13:23:55.937" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:23:55.636" status="PASS" endtime="20170607 13:23:55.937"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:23:55.938" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:23:55.937" status="FAIL" endtime="20170607 13:23:55.938"></status>
</kw>
<status starttime="20170607 13:23:55.635" status="FAIL" endtime="20170607 13:23:55.938"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:24:05.944" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:24:05.944" status="PASS" endtime="20170607 13:24:05.945"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:24:05.946" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:24:05.945" status="PASS" endtime="20170607 13:24:05.946"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:24:05.946" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:24:05.946" status="PASS" endtime="20170607 13:24:05.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:24:05.947" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:24:05.947" status="PASS" endtime="20170607 13:24:05.947"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:24:06.144" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:24:05.948" status="PASS" endtime="20170607 13:24:06.144"></status>
</kw>
<msg timestamp="20170607 13:24:06.144" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:06.144" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:05.947" status="PASS" endtime="20170607 13:24:06.144"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:24:06.145" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:06.145" status="PASS" endtime="20170607 13:24:06.145"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:06.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:06.145" status="PASS" endtime="20170607 13:24:06.146"></status>
</kw>
<status starttime="20170607 13:24:05.943" status="PASS" endtime="20170607 13:24:06.146"></status>
</kw>
<status starttime="20170607 13:24:05.942" status="PASS" endtime="20170607 13:24:06.146"></status>
</kw>
<status starttime="20170607 13:24:05.941" status="PASS" endtime="20170607 13:24:06.146"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:24:06.147" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:24:06.147" status="PASS" endtime="20170607 13:24:06.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:24:06.150" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:24:06.149" status="PASS" endtime="20170607 13:24:06.150"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:24:06.151" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:24:06.151" status="PASS" endtime="20170607 13:24:06.152"></status>
</kw>
<status starttime="20170607 13:24:06.150" status="PASS" endtime="20170607 13:24:06.152"></status>
</kw>
<status starttime="20170607 13:24:06.148" status="PASS" endtime="20170607 13:24:06.152"></status>
</kw>
<status starttime="20170607 13:24:06.148" status="PASS" endtime="20170607 13:24:06.152"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:24:06.217" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:24:06.217" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:06.152" status="PASS" endtime="20170607 13:24:06.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:24:06.219" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:24:06.218" status="PASS" endtime="20170607 13:24:06.219"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:24:06.220" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:24:06.219" status="PASS" endtime="20170607 13:24:06.220"></status>
</kw>
<status starttime="20170607 13:24:06.219" status="PASS" endtime="20170607 13:24:06.220"></status>
</kw>
<status starttime="20170607 13:24:06.218" status="PASS" endtime="20170607 13:24:06.220"></status>
</kw>
<status starttime="20170607 13:24:06.217" status="PASS" endtime="20170607 13:24:06.220"></status>
</kw>
<msg timestamp="20170607 13:24:06.220" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:05.940" status="PASS" endtime="20170607 13:24:06.220"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:06.221" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:06.220" status="PASS" endtime="20170607 13:24:06.221"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:24:06.221" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:24:06.221" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:24:06.222" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:24:06.221" status="PASS" endtime="20170607 13:24:06.222"></status>
</kw>
<msg timestamp="20170607 13:24:06.222" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:24:05.940" status="PASS" endtime="20170607 13:24:06.222"></status>
</kw>
<msg timestamp="20170607 13:24:06.222" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:24:05.939" status="PASS" endtime="20170607 13:24:06.222"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:24:06.223" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:24:06.223" status="FAIL" endtime="20170607 13:24:06.223"></status>
</kw>
<status starttime="20170607 13:24:05.938" status="FAIL" endtime="20170607 13:24:06.223"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:24:16.229" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:24:16.229" status="PASS" endtime="20170607 13:24:16.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:24:16.230" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:24:16.230" status="PASS" endtime="20170607 13:24:16.230"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:24:16.231" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:24:16.230" status="PASS" endtime="20170607 13:24:16.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:24:16.231" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:24:16.231" status="PASS" endtime="20170607 13:24:16.232"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:24:16.417" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:24:16.232" status="PASS" endtime="20170607 13:24:16.417"></status>
</kw>
<msg timestamp="20170607 13:24:16.417" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:16.417" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:16.232" status="PASS" endtime="20170607 13:24:16.417"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:24:16.418" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:16.418" status="PASS" endtime="20170607 13:24:16.418"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:16.419" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:16.418" status="PASS" endtime="20170607 13:24:16.419"></status>
</kw>
<status starttime="20170607 13:24:16.228" status="PASS" endtime="20170607 13:24:16.419"></status>
</kw>
<status starttime="20170607 13:24:16.227" status="PASS" endtime="20170607 13:24:16.419"></status>
</kw>
<status starttime="20170607 13:24:16.226" status="PASS" endtime="20170607 13:24:16.419"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:24:16.420" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:24:16.419" status="PASS" endtime="20170607 13:24:16.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:24:16.422" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:24:16.421" status="PASS" endtime="20170607 13:24:16.422"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:24:16.423" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:24:16.423" status="PASS" endtime="20170607 13:24:16.423"></status>
</kw>
<status starttime="20170607 13:24:16.422" status="PASS" endtime="20170607 13:24:16.423"></status>
</kw>
<status starttime="20170607 13:24:16.421" status="PASS" endtime="20170607 13:24:16.423"></status>
</kw>
<status starttime="20170607 13:24:16.420" status="PASS" endtime="20170607 13:24:16.423"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:24:16.488" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:24:16.489" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:16.424" status="PASS" endtime="20170607 13:24:16.489"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:24:16.490" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:24:16.490" status="PASS" endtime="20170607 13:24:16.490"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:24:16.492" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:24:16.491" status="PASS" endtime="20170607 13:24:16.492"></status>
</kw>
<status starttime="20170607 13:24:16.491" status="PASS" endtime="20170607 13:24:16.492"></status>
</kw>
<status starttime="20170607 13:24:16.489" status="PASS" endtime="20170607 13:24:16.492"></status>
</kw>
<status starttime="20170607 13:24:16.489" status="PASS" endtime="20170607 13:24:16.492"></status>
</kw>
<msg timestamp="20170607 13:24:16.492" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:16.226" status="PASS" endtime="20170607 13:24:16.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:16.493" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:16.493" status="PASS" endtime="20170607 13:24:16.493"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:24:16.494" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:24:16.494" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:24:16.494" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:24:16.493" status="PASS" endtime="20170607 13:24:16.494"></status>
</kw>
<msg timestamp="20170607 13:24:16.494" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:24:16.225" status="PASS" endtime="20170607 13:24:16.494"></status>
</kw>
<msg timestamp="20170607 13:24:16.495" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:24:16.224" status="PASS" endtime="20170607 13:24:16.495"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:24:16.495" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:24:16.495" status="FAIL" endtime="20170607 13:24:16.495"></status>
</kw>
<status starttime="20170607 13:24:16.224" status="FAIL" endtime="20170607 13:24:16.495"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:24:26.500" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:24:26.500" status="PASS" endtime="20170607 13:24:26.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:24:26.501" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:24:26.501" status="PASS" endtime="20170607 13:24:26.502"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:24:26.502" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:24:26.502" status="PASS" endtime="20170607 13:24:26.502"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:24:26.503" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:24:26.502" status="PASS" endtime="20170607 13:24:26.503"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:24:26.721" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:24:26.504" status="PASS" endtime="20170607 13:24:26.721"></status>
</kw>
<msg timestamp="20170607 13:24:26.721" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:26.721" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:26.503" status="PASS" endtime="20170607 13:24:26.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:24:26.722" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:26.721" status="PASS" endtime="20170607 13:24:26.722"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:26.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:26.722" status="PASS" endtime="20170607 13:24:26.723"></status>
</kw>
<status starttime="20170607 13:24:26.500" status="PASS" endtime="20170607 13:24:26.723"></status>
</kw>
<status starttime="20170607 13:24:26.499" status="PASS" endtime="20170607 13:24:26.723"></status>
</kw>
<status starttime="20170607 13:24:26.498" status="PASS" endtime="20170607 13:24:26.723"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:24:26.724" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:24:26.723" status="PASS" endtime="20170607 13:24:26.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:24:26.726" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:24:26.725" status="PASS" endtime="20170607 13:24:26.726"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:24:26.727" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:24:26.727" status="PASS" endtime="20170607 13:24:26.727"></status>
</kw>
<status starttime="20170607 13:24:26.726" status="PASS" endtime="20170607 13:24:26.727"></status>
</kw>
<status starttime="20170607 13:24:26.725" status="PASS" endtime="20170607 13:24:26.727"></status>
</kw>
<status starttime="20170607 13:24:26.724" status="PASS" endtime="20170607 13:24:26.727"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:24:26.793" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:24:26.793" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:26.727" status="PASS" endtime="20170607 13:24:26.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:24:26.795" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:24:26.794" status="PASS" endtime="20170607 13:24:26.795"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:24:26.795" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:24:26.795" status="PASS" endtime="20170607 13:24:26.796"></status>
</kw>
<status starttime="20170607 13:24:26.795" status="PASS" endtime="20170607 13:24:26.796"></status>
</kw>
<status starttime="20170607 13:24:26.793" status="PASS" endtime="20170607 13:24:26.796"></status>
</kw>
<status starttime="20170607 13:24:26.793" status="PASS" endtime="20170607 13:24:26.796"></status>
</kw>
<msg timestamp="20170607 13:24:26.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:26.498" status="PASS" endtime="20170607 13:24:26.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:26.797" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:26.796" status="PASS" endtime="20170607 13:24:26.797"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:24:26.797" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:24:26.797" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:24:26.797" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:24:26.797" status="PASS" endtime="20170607 13:24:26.797"></status>
</kw>
<msg timestamp="20170607 13:24:26.798" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:24:26.497" status="PASS" endtime="20170607 13:24:26.798"></status>
</kw>
<msg timestamp="20170607 13:24:26.798" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:24:26.497" status="PASS" endtime="20170607 13:24:26.798"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170607 13:24:26.799" level="FAIL">Off != Running</msg>
<status starttime="20170607 13:24:26.798" status="FAIL" endtime="20170607 13:24:26.799"></status>
</kw>
<status starttime="20170607 13:24:26.496" status="FAIL" endtime="20170607 13:24:26.799"></status>
</kw>
<msg timestamp="20170607 13:24:26.799" level="FAIL">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</msg>
<status starttime="20170607 13:21:19.227" status="FAIL" endtime="20170607 13:24:26.799"></status>
</kw>
<status starttime="20170607 13:21:18.370" status="FAIL" endtime="20170607 13:24:26.799"></status>
</kw>
<status starttime="20170607 13:21:18.369" status="FAIL" endtime="20170607 13:24:26.800"></status>
</kw>
<status starttime="20170607 13:21:18.368" status="FAIL" endtime="20170607 13:24:26.800"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:24:26.805" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:24:26.805" status="PASS" endtime="20170607 13:24:26.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:24:26.806" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:24:26.806" status="PASS" endtime="20170607 13:24:26.806"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:24:26.807" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:24:26.806" status="PASS" endtime="20170607 13:24:26.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:24:26.807" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:24:26.807" status="PASS" endtime="20170607 13:24:26.807"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:24:26.991" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:24:26.808" status="PASS" endtime="20170607 13:24:26.991"></status>
</kw>
<msg timestamp="20170607 13:24:26.991" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:26.991" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:26.808" status="PASS" endtime="20170607 13:24:26.991"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:24:26.992" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:26.992" status="PASS" endtime="20170607 13:24:26.992"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:26.993" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:26.992" status="PASS" endtime="20170607 13:24:26.993"></status>
</kw>
<status starttime="20170607 13:24:26.804" status="PASS" endtime="20170607 13:24:26.993"></status>
</kw>
<status starttime="20170607 13:24:26.803" status="PASS" endtime="20170607 13:24:26.993"></status>
</kw>
<status starttime="20170607 13:24:26.803" status="PASS" endtime="20170607 13:24:26.993"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:24:26.994" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170607 13:24:26.993" status="PASS" endtime="20170607 13:24:26.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:24:26.997" level="INFO">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:24:26.996" status="PASS" endtime="20170607 13:24:26.997"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:24:26.998" level="INFO">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170607 13:24:26.998" status="PASS" endtime="20170607 13:24:26.998"></status>
</kw>
<status starttime="20170607 13:24:26.997" status="PASS" endtime="20170607 13:24:26.998"></status>
</kw>
<status starttime="20170607 13:24:26.996" status="PASS" endtime="20170607 13:24:26.998"></status>
</kw>
<status starttime="20170607 13:24:26.994" status="PASS" endtime="20170607 13:24:26.998"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:24:27.063" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170607 13:24:27.063" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:26.999" status="PASS" endtime="20170607 13:24:27.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170607 13:24:27.065" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:24:27.064" status="PASS" endtime="20170607 13:24:27.065"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170607 13:24:27.066" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170607 13:24:27.065" status="PASS" endtime="20170607 13:24:27.066"></status>
</kw>
<status starttime="20170607 13:24:27.065" status="PASS" endtime="20170607 13:24:27.066"></status>
</kw>
<status starttime="20170607 13:24:27.064" status="PASS" endtime="20170607 13:24:27.066"></status>
</kw>
<status starttime="20170607 13:24:27.063" status="PASS" endtime="20170607 13:24:27.067"></status>
</kw>
<msg timestamp="20170607 13:24:27.067" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:26.802" status="PASS" endtime="20170607 13:24:27.067"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:27.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:27.067" status="PASS" endtime="20170607 13:24:27.067"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170607 13:24:27.068" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:24:27.068" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170607 13:24:27.068" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status starttime="20170607 13:24:27.068" status="PASS" endtime="20170607 13:24:27.068"></status>
</kw>
<msg timestamp="20170607 13:24:27.068" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170607 13:24:26.801" status="PASS" endtime="20170607 13:24:27.068"></status>
</kw>
<msg timestamp="20170607 13:24:27.069" level="INFO">${host_state} = Running</msg>
<status starttime="20170607 13:24:26.801" status="PASS" endtime="20170607 13:24:27.069"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170607 13:24:27.070" level="FAIL">Running != Quiesced</msg>
<status starttime="20170607 13:24:27.069" status="FAIL" endtime="20170607 13:24:27.070"></status>
</kw>
<msg timestamp="20170607 13:24:27.070" level="INFO">${status} = False</msg>
<status starttime="20170607 13:24:27.069" status="PASS" endtime="20170607 13:24:27.070"></status>
</kw>
<msg timestamp="20170607 13:24:27.070" level="INFO">${status} = False</msg>
<status starttime="20170607 13:24:26.801" status="PASS" endtime="20170607 13:24:27.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170607 13:24:27.084" level="INFO">Length is 10</msg>
<status starttime="20170607 13:24:27.083" status="PASS" endtime="20170607 13:24:27.084"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170607 13:24:27.089" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170607 13:24:30.093" level="INFO">${RC} = 0</msg>
<msg timestamp="20170607 13:24:30.093" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.732 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.697 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status starttime="20170607 13:24:27.084" status="PASS" endtime="20170607 13:24:30.093"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.097" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.732 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.697 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.645 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.659 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.645/0.683/0.732/0.038 ms</msg>
<status starttime="20170607 13:24:30.095" status="PASS" endtime="20170607 13:24:30.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170607 13:24:30.097" status="PASS" endtime="20170607 13:24:30.097"></status>
</kw>
<status starttime="20170607 13:24:27.083" status="PASS" endtime="20170607 13:24:30.098"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 13:24:30.124" level="INFO">${cur_time} = 2017-06-07 13:24:30:123501</msg>
<status starttime="20170607 13:24:30.123" status="PASS" endtime="20170607 13:24:30.124"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 13:24:30.125" level="INFO">${cur_time} = 20170607132430123501</msg>
<status starttime="20170607 13:24:30.124" status="PASS" endtime="20170607 13:24:30.125"></status>
</kw>
<status starttime="20170607 13:24:30.123" status="PASS" endtime="20170607 13:24:30.125"></status>
</kw>
<msg timestamp="20170607 13:24:30.125" level="INFO">${FFDC_TIME} = 20170607132430123501</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170607 13:24:30.127" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170607 13:24:30.126" status="PASS" endtime="20170607 13:24:30.127"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170607 13:24:30.127" level="INFO">${suite_name} = 20170607132430123501_TestsTestBasicPoweron</msg>
<status starttime="20170607 13:24:30.127" status="PASS" endtime="20170607 13:24:30.127"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170607 13:24:30.128" level="INFO">${test_name} = PowerOnTest</msg>
<status starttime="20170607 13:24:30.127" status="PASS" endtime="20170607 13:24:30.128"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170607 13:24:30.128" level="INFO">${test_name} = 20170607132430123501_PowerOnTest</msg>
<status starttime="20170607 13:24:30.128" status="PASS" endtime="20170607 13:24:30.128"></status>
</kw>
<status starttime="20170607 13:24:30.126" status="PASS" endtime="20170607 13:24:30.129"></status>
</kw>
<msg timestamp="20170607 13:24:30.129" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/</msg>
<msg timestamp="20170607 13:24:30.129" level="INFO">${FFDC_PREFIX} = 20170607132430123501_</msg>
<msg timestamp="20170607 13:24:30.149" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/</arg>
</arguments>
<msg timestamp="20170607 13:24:30.150" html="yes" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:30.149" status="PASS" endtime="20170607 13:24:30.150"></status>
</kw>
<msg timestamp="20170607 13:24:30.155" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.166" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:30.166" status="PASS" endtime="20170607 13:24:30.166"></status>
</kw>
<status starttime="20170607 13:24:30.165" status="PASS" endtime="20170607 13:24:30.166"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.168" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:30.167" status="PASS" endtime="20170607 13:24:30.168"></status>
</kw>
<status starttime="20170607 13:24:30.167" status="PASS" endtime="20170607 13:24:30.168"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.169" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:30.169" status="PASS" endtime="20170607 13:24:30.169"></status>
</kw>
<status starttime="20170607 13:24:30.168" status="PASS" endtime="20170607 13:24:30.169"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.170" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:30.170" status="PASS" endtime="20170607 13:24:30.170"></status>
</kw>
<status starttime="20170607 13:24:30.169" status="PASS" endtime="20170607 13:24:30.171"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.172" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:30.171" status="PASS" endtime="20170607 13:24:30.172"></status>
</kw>
<status starttime="20170607 13:24:30.171" status="PASS" endtime="20170607 13:24:30.172"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.173" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:30.173" status="PASS" endtime="20170607 13:24:30.173"></status>
</kw>
<status starttime="20170607 13:24:30.172" status="PASS" endtime="20170607 13:24:30.173"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.174" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:30.174" status="PASS" endtime="20170607 13:24:30.174"></status>
</kw>
<status starttime="20170607 13:24:30.173" status="PASS" endtime="20170607 13:24:30.175"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.176" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:30.175" status="PASS" endtime="20170607 13:24:30.176"></status>
</kw>
<status starttime="20170607 13:24:30.175" status="PASS" endtime="20170607 13:24:30.176"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.177" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:30.177" status="PASS" endtime="20170607 13:24:30.177"></status>
</kw>
<status starttime="20170607 13:24:30.176" status="PASS" endtime="20170607 13:24:30.177"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.179" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:30.179" status="PASS" endtime="20170607 13:24:30.179"></status>
</kw>
<status starttime="20170607 13:24:30.178" status="PASS" endtime="20170607 13:24:30.179"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.180" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:30.180" status="PASS" endtime="20170607 13:24:30.180"></status>
</kw>
<status starttime="20170607 13:24:30.179" status="PASS" endtime="20170607 13:24:30.180"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.182" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:30.181" status="PASS" endtime="20170607 13:24:30.182"></status>
</kw>
<status starttime="20170607 13:24:30.181" status="PASS" endtime="20170607 13:24:30.182"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.183" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:30.183" status="PASS" endtime="20170607 13:24:30.183"></status>
</kw>
<status starttime="20170607 13:24:30.182" status="PASS" endtime="20170607 13:24:30.183"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 13:24:30.185" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status starttime="20170607 13:24:30.185" status="FAIL" endtime="20170607 13:24:30.185"></status>
</kw>
<msg timestamp="20170607 13:24:30.185" level="INFO">${has_host} = False</msg>
<status starttime="20170607 13:24:30.185" status="PASS" endtime="20170607 13:24:30.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170607 13:24:30.186" status="PASS" endtime="20170607 13:24:30.187"></status>
</kw>
<status starttime="20170607 13:24:30.186" status="PASS" endtime="20170607 13:24:30.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 13:24:30.188" level="INFO">${port_num} = 22</msg>
<status starttime="20170607 13:24:30.188" status="PASS" endtime="20170607 13:24:30.188"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 13:24:30.189" level="INFO">${SSH_PORT} = 22</msg>
<status starttime="20170607 13:24:30.189" status="PASS" endtime="20170607 13:24:30.189"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 13:24:30.189" level="INFO">${https_num} = 443</msg>
<status starttime="20170607 13:24:30.189" status="PASS" endtime="20170607 13:24:30.190"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.190" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170607 13:24:30.190" status="PASS" endtime="20170607 13:24:30.190"></status>
</kw>
<status starttime="20170607 13:24:30.188" status="PASS" endtime="20170607 13:24:30.190"></status>
</kw>
<status starttime="20170607 13:24:30.187" status="PASS" endtime="20170607 13:24:30.191"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 13:24:30.192" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status starttime="20170607 13:24:30.191" status="FAIL" endtime="20170607 13:24:30.192"></status>
</kw>
<msg timestamp="20170607 13:24:30.192" level="INFO">${has_port} = False</msg>
<status starttime="20170607 13:24:30.191" status="PASS" endtime="20170607 13:24:30.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170607 13:24:30.193" status="PASS" endtime="20170607 13:24:30.193"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170607 13:24:30.194" status="PASS" endtime="20170607 13:24:30.195"></status>
</kw>
<status starttime="20170607 13:24:30.193" status="PASS" endtime="20170607 13:24:30.195"></status>
</kw>
<status starttime="20170607 13:24:30.192" status="PASS" endtime="20170607 13:24:30.195"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 13:24:30.195" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 13:24:31.856" level="INFO">Read output: root@witherspoon:~#</msg>
<status starttime="20170607 13:24:30.195" status="PASS" endtime="20170607 13:24:31.857"></status>
</kw>
<status starttime="20170607 13:24:30.184" status="PASS" endtime="20170607 13:24:31.857"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:24:31.857" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170607 13:24:31.935" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:24:31.935" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170607 13:24:31.935" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:24:31.857" status="PASS" endtime="20170607 13:24:31.936"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170607 13:24:31.936" level="INFO">Length is 0</msg>
<status starttime="20170607 13:24:31.936" status="PASS" endtime="20170607 13:24:31.936"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170607 13:24:31.937" level="INFO">Length is 11</msg>
<status starttime="20170607 13:24:31.936" status="PASS" endtime="20170607 13:24:31.937"></status>
</kw>
<msg timestamp="20170607 13:24:31.937" level="INFO">${model_name} = Witherspoon</msg>
<status starttime="20170607 13:24:30.183" status="PASS" endtime="20170607 13:24:31.937"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:31.938" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:31.938" status="PASS" endtime="20170607 13:24:31.939"></status>
</kw>
<status starttime="20170607 13:24:31.937" status="PASS" endtime="20170607 13:24:31.939"></status>
</kw>
<status starttime="20170607 13:24:30.177" status="PASS" endtime="20170607 13:24:31.939"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:31.940" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:31.940" status="PASS" endtime="20170607 13:24:31.940"></status>
</kw>
<status starttime="20170607 13:24:31.939" status="PASS" endtime="20170607 13:24:31.940"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170607 13:24:31.941" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status starttime="20170607 13:24:31.940" status="PASS" endtime="20170607 13:24:31.941"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:31.942" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:31.942" status="PASS" endtime="20170607 13:24:31.942"></status>
</kw>
<status starttime="20170607 13:24:31.941" status="PASS" endtime="20170607 13:24:31.942"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:31.943" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:31.943" status="PASS" endtime="20170607 13:24:31.944"></status>
</kw>
<status starttime="20170607 13:24:31.943" status="PASS" endtime="20170607 13:24:31.944"></status>
</kw>
<status starttime="20170607 13:24:31.941" status="PASS" endtime="20170607 13:24:31.944"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:31.945" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:31.945" status="PASS" endtime="20170607 13:24:31.945"></status>
</kw>
<status starttime="20170607 13:24:31.944" status="PASS" endtime="20170607 13:24:31.945"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:31.946" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:31.946" status="PASS" endtime="20170607 13:24:31.946"></status>
</kw>
<status starttime="20170607 13:24:31.945" status="PASS" endtime="20170607 13:24:31.947"></status>
</kw>
<status starttime="20170607 13:24:31.944" status="PASS" endtime="20170607 13:24:31.947"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:31.948" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:31.948" status="PASS" endtime="20170607 13:24:31.948"></status>
</kw>
<status starttime="20170607 13:24:31.947" status="PASS" endtime="20170607 13:24:31.948"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:31.949" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:31.949" status="PASS" endtime="20170607 13:24:31.950"></status>
</kw>
<status starttime="20170607 13:24:31.948" status="PASS" endtime="20170607 13:24:31.950"></status>
</kw>
<status starttime="20170607 13:24:31.947" status="PASS" endtime="20170607 13:24:31.950"></status>
</kw>
<status starttime="20170607 13:24:31.941" status="PASS" endtime="20170607 13:24:31.950"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:31.951" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:31.951" status="PASS" endtime="20170607 13:24:31.951"></status>
</kw>
<status starttime="20170607 13:24:31.950" status="PASS" endtime="20170607 13:24:31.951"></status>
</kw>
<status starttime="20170607 13:24:30.165" status="PASS" endtime="20170607 13:24:31.951"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170607 13:24:31.958" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170607 13:24:31.957" status="PASS" endtime="20170607 13:24:31.958"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170607 13:24:31.959" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('BMC Specific Files', 'BMC FFDC ...</msg>
<status starttime="20170607 13:24:31.959" status="PASS" endtime="20170607 13:24:31.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170607 13:24:31.960" status="PASS" endtime="20170607 13:24:31.960"></status>
</kw>
<msg timestamp="20170607 13:24:31.960" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Core Files | OS FFDC | Get Request FFDC | BMC Specific Files | SEL Log ]</msg>
<status starttime="20170607 13:24:31.959" status="PASS" endtime="20170607 13:24:31.960"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170607 13:24:31.962" status="PASS" endtime="20170607 13:24:31.962"></status>
</kw>
<msg timestamp="20170607 13:24:31.962" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:31.963" level="INFO">${ret_values} = None</msg>
<status starttime="20170607 13:24:31.962" status="PASS" endtime="20170607 13:24:31.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170607 13:24:31.963" status="PASS" endtime="20170607 13:24:31.963"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 13:24:31.981" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status starttime="20170607 13:24:31.981" status="FAIL" endtime="20170607 13:24:31.982"></status>
</kw>
<msg timestamp="20170607 13:24:31.982" level="INFO">${has_host} = False</msg>
<status starttime="20170607 13:24:31.980" status="PASS" endtime="20170607 13:24:31.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170607 13:24:31.982" status="PASS" endtime="20170607 13:24:31.983"></status>
</kw>
<status starttime="20170607 13:24:31.982" status="PASS" endtime="20170607 13:24:31.983"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 13:24:31.984" level="INFO">${port_num} = 22</msg>
<status starttime="20170607 13:24:31.984" status="PASS" endtime="20170607 13:24:31.984"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 13:24:31.985" level="INFO">${SSH_PORT} = 22</msg>
<status starttime="20170607 13:24:31.985" status="PASS" endtime="20170607 13:24:31.985"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 13:24:31.986" level="INFO">${https_num} = 443</msg>
<status starttime="20170607 13:24:31.985" status="PASS" endtime="20170607 13:24:31.986"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 13:24:31.987" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170607 13:24:31.986" status="PASS" endtime="20170607 13:24:31.987"></status>
</kw>
<status starttime="20170607 13:24:31.984" status="PASS" endtime="20170607 13:24:31.987"></status>
</kw>
<status starttime="20170607 13:24:31.983" status="PASS" endtime="20170607 13:24:31.987"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 13:24:31.989" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status starttime="20170607 13:24:31.988" status="FAIL" endtime="20170607 13:24:31.989"></status>
</kw>
<msg timestamp="20170607 13:24:31.989" level="INFO">${has_port} = False</msg>
<status starttime="20170607 13:24:31.988" status="PASS" endtime="20170607 13:24:31.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170607 13:24:31.991" status="PASS" endtime="20170607 13:24:31.992"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170607 13:24:31.992" status="PASS" endtime="20170607 13:24:31.992"></status>
</kw>
<status starttime="20170607 13:24:31.991" status="PASS" endtime="20170607 13:24:31.993"></status>
</kw>
<status starttime="20170607 13:24:31.990" status="PASS" endtime="20170607 13:24:31.993"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 13:24:31.993" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 13:24:33.640" level="INFO">Read output: root@witherspoon:~#</msg>
<status starttime="20170607 13:24:31.993" status="PASS" endtime="20170607 13:24:33.640"></status>
</kw>
<status starttime="20170607 13:24:31.980" status="PASS" endtime="20170607 13:24:33.640"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170607 13:24:33.641" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status starttime="20170607 13:24:33.641" status="PASS" endtime="20170607 13:24:33.641"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170607 13:24:33.642" level="INFO">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') ]</msg>
<status starttime="20170607 13:24:33.642" status="PASS" endtime="20170607 13:24:33.643"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.648" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170607 13:24:33.643" status="PASS" endtime="20170607 13:24:33.648"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.651" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.651" status="PASS" endtime="20170607 13:24:33.652"></status>
</kw>
<status starttime="20170607 13:24:33.650" status="PASS" endtime="20170607 13:24:33.652"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.653" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.653" status="PASS" endtime="20170607 13:24:33.653"></status>
</kw>
<status starttime="20170607 13:24:33.652" status="PASS" endtime="20170607 13:24:33.653"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.654" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.654" status="PASS" endtime="20170607 13:24:33.654"></status>
</kw>
<status starttime="20170607 13:24:33.653" status="PASS" endtime="20170607 13:24:33.654"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.655" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.655" status="PASS" endtime="20170607 13:24:33.656"></status>
</kw>
<status starttime="20170607 13:24:33.655" status="PASS" endtime="20170607 13:24:33.656"></status>
</kw>
<status starttime="20170607 13:24:33.650" status="PASS" endtime="20170607 13:24:33.656"></status>
</kw>
<status starttime="20170607 13:24:33.650" status="PASS" endtime="20170607 13:24:33.656"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:24:33.656" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170607 13:24:33.713" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:24:33.713" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg timestamp="20170607 13:24:33.713" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:24:33.656" status="PASS" endtime="20170607 13:24:33.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.719" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.719" status="PASS" endtime="20170607 13:24:33.720"></status>
</kw>
<status starttime="20170607 13:24:33.718" status="PASS" endtime="20170607 13:24:33.720"></status>
</kw>
<status starttime="20170607 13:24:33.713" status="PASS" endtime="20170607 13:24:33.720"></status>
</kw>
<status starttime="20170607 13:24:33.649" status="PASS" endtime="20170607 13:24:33.720"></status>
</kw>
<status starttime="20170607 13:24:33.648" status="PASS" endtime="20170607 13:24:33.720"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.723" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.722" status="PASS" endtime="20170607 13:24:33.723"></status>
</kw>
<status starttime="20170607 13:24:33.722" status="PASS" endtime="20170607 13:24:33.723"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.725" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.724" status="PASS" endtime="20170607 13:24:33.725"></status>
</kw>
<status starttime="20170607 13:24:33.723" status="PASS" endtime="20170607 13:24:33.725"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.726" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.725" status="PASS" endtime="20170607 13:24:33.726"></status>
</kw>
<status starttime="20170607 13:24:33.725" status="PASS" endtime="20170607 13:24:33.726"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.727" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.727" status="PASS" endtime="20170607 13:24:33.727"></status>
</kw>
<status starttime="20170607 13:24:33.726" status="PASS" endtime="20170607 13:24:33.727"></status>
</kw>
<status starttime="20170607 13:24:33.721" status="PASS" endtime="20170607 13:24:33.727"></status>
</kw>
<status starttime="20170607 13:24:33.721" status="PASS" endtime="20170607 13:24:33.727"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:24:33.728" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170607 13:24:33.813" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:24:33.813" level="INFO">${stdout} = Linux witherspoon 4.10.5-8736136e756ec127de0bbe2c7e2de683204d4512 #1 Wed Jun 7 12:23:43 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170607 13:24:33.813" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:24:33.728" status="PASS" endtime="20170607 13:24:33.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.819" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.819" status="PASS" endtime="20170607 13:24:33.819"></status>
</kw>
<status starttime="20170607 13:24:33.818" status="PASS" endtime="20170607 13:24:33.819"></status>
</kw>
<status starttime="20170607 13:24:33.813" status="PASS" endtime="20170607 13:24:33.819"></status>
</kw>
<status starttime="20170607 13:24:33.720" status="PASS" endtime="20170607 13:24:33.820"></status>
</kw>
<status starttime="20170607 13:24:33.720" status="PASS" endtime="20170607 13:24:33.820"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.823" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.822" status="PASS" endtime="20170607 13:24:33.823"></status>
</kw>
<status starttime="20170607 13:24:33.822" status="PASS" endtime="20170607 13:24:33.823"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.824" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.824" status="PASS" endtime="20170607 13:24:33.824"></status>
</kw>
<status starttime="20170607 13:24:33.823" status="PASS" endtime="20170607 13:24:33.824"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.825" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.825" status="PASS" endtime="20170607 13:24:33.825"></status>
</kw>
<status starttime="20170607 13:24:33.824" status="PASS" endtime="20170607 13:24:33.825"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.827" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.826" status="PASS" endtime="20170607 13:24:33.827"></status>
</kw>
<status starttime="20170607 13:24:33.826" status="PASS" endtime="20170607 13:24:33.827"></status>
</kw>
<status starttime="20170607 13:24:33.821" status="PASS" endtime="20170607 13:24:33.827"></status>
</kw>
<status starttime="20170607 13:24:33.821" status="PASS" endtime="20170607 13:24:33.827"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:24:33.827" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170607 13:24:33.942" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:24:33.942" level="INFO">${stdout} =  13:24:42 up 16 min,  load average: 0.08, 0.42, 0.62</msg>
<msg timestamp="20170607 13:24:33.943" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:24:33.827" status="PASS" endtime="20170607 13:24:33.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.949" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.948" status="PASS" endtime="20170607 13:24:33.949"></status>
</kw>
<status starttime="20170607 13:24:33.948" status="PASS" endtime="20170607 13:24:33.949"></status>
</kw>
<status starttime="20170607 13:24:33.943" status="PASS" endtime="20170607 13:24:33.950"></status>
</kw>
<status starttime="20170607 13:24:33.820" status="PASS" endtime="20170607 13:24:33.950"></status>
</kw>
<status starttime="20170607 13:24:33.820" status="PASS" endtime="20170607 13:24:33.950"></status>
</kw>
<status starttime="20170607 13:24:33.648" status="PASS" endtime="20170607 13:24:33.950"></status>
</kw>
<status starttime="20170607 13:24:33.641" status="PASS" endtime="20170607 13:24:33.950"></status>
</kw>
<status starttime="20170607 13:24:33.641" status="PASS" endtime="20170607 13:24:33.950"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170607 13:24:33.951" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status starttime="20170607 13:24:33.951" status="PASS" endtime="20170607 13:24:33.951"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.952" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170607 13:24:33.951" status="PASS" endtime="20170607 13:24:33.952"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.955" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.954" status="PASS" endtime="20170607 13:24:33.955"></status>
</kw>
<status starttime="20170607 13:24:33.954" status="PASS" endtime="20170607 13:24:33.955"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.956" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.956" status="PASS" endtime="20170607 13:24:33.956"></status>
</kw>
<status starttime="20170607 13:24:33.955" status="PASS" endtime="20170607 13:24:33.956"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.957" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.957" status="PASS" endtime="20170607 13:24:33.958"></status>
</kw>
<status starttime="20170607 13:24:33.957" status="PASS" endtime="20170607 13:24:33.958"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:33.959" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:33.958" status="PASS" endtime="20170607 13:24:33.959"></status>
</kw>
<status starttime="20170607 13:24:33.958" status="PASS" endtime="20170607 13:24:33.959"></status>
</kw>
<status starttime="20170607 13:24:33.953" status="PASS" endtime="20170607 13:24:33.959"></status>
</kw>
<status starttime="20170607 13:24:33.953" status="PASS" endtime="20170607 13:24:33.959"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:24:33.960" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170607 13:24:34.034" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:24:34.034" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.6-78"
VERSION_ID="v1.99.6-78-gfd4d3cc"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170607 13:24:34.035" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:24:33.959" status="PASS" endtime="20170607 13:24:34.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:34.041" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:34.040" status="PASS" endtime="20170607 13:24:34.041"></status>
</kw>
<status starttime="20170607 13:24:34.040" status="PASS" endtime="20170607 13:24:34.041"></status>
</kw>
<status starttime="20170607 13:24:34.035" status="PASS" endtime="20170607 13:24:34.041"></status>
</kw>
<status starttime="20170607 13:24:33.952" status="PASS" endtime="20170607 13:24:34.041"></status>
</kw>
<status starttime="20170607 13:24:33.952" status="PASS" endtime="20170607 13:24:34.041"></status>
</kw>
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:34.045" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:34.044" status="PASS" endtime="20170607 13:24:34.045"></status>
</kw>
<status starttime="20170607 13:24:34.043" status="PASS" endtime="20170607 13:24:34.045"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:34.046" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:34.046" status="PASS" endtime="20170607 13:24:34.046"></status>
</kw>
<status starttime="20170607 13:24:34.045" status="PASS" endtime="20170607 13:24:34.046"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:34.047" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:34.047" status="PASS" endtime="20170607 13:24:34.047"></status>
</kw>
<status starttime="20170607 13:24:34.046" status="PASS" endtime="20170607 13:24:34.047"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:34.049" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:34.048" status="PASS" endtime="20170607 13:24:34.049"></status>
</kw>
<status starttime="20170607 13:24:34.048" status="PASS" endtime="20170607 13:24:34.049"></status>
</kw>
<status starttime="20170607 13:24:34.043" status="PASS" endtime="20170607 13:24:34.049"></status>
</kw>
<status starttime="20170607 13:24:34.042" status="PASS" endtime="20170607 13:24:34.049"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:24:34.049" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170607 13:24:34.124" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170607 13:24:34.124" level="INFO">${stdout} = </msg>
<msg timestamp="20170607 13:24:34.124" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status starttime="20170607 13:24:34.049" status="PASS" endtime="20170607 13:24:34.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:34.133" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:34.133" status="PASS" endtime="20170607 13:24:34.133"></status>
</kw>
<status starttime="20170607 13:24:34.132" status="PASS" endtime="20170607 13:24:34.134"></status>
</kw>
<status starttime="20170607 13:24:34.125" status="PASS" endtime="20170607 13:24:34.134"></status>
</kw>
<status starttime="20170607 13:24:34.042" status="PASS" endtime="20170607 13:24:34.134"></status>
</kw>
<status starttime="20170607 13:24:34.041" status="PASS" endtime="20170607 13:24:34.134"></status>
</kw>
<status starttime="20170607 13:24:33.952" status="PASS" endtime="20170607 13:24:34.134"></status>
</kw>
<status starttime="20170607 13:24:33.950" status="PASS" endtime="20170607 13:24:34.134"></status>
</kw>
<status starttime="20170607 13:24:33.950" status="PASS" endtime="20170607 13:24:34.134"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170607 13:24:34.135" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20170607 13:24:34.135" status="PASS" endtime="20170607 13:24:34.135"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170607 13:24:34.136" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170607 13:24:34.135" status="PASS" endtime="20170607 13:24:34.136"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:34.139" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:34.139" status="PASS" endtime="20170607 13:24:34.139"></status>
</kw>
<status starttime="20170607 13:24:34.138" status="PASS" endtime="20170607 13:24:34.139"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:34.140" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:34.140" status="PASS" endtime="20170607 13:24:34.140"></status>
</kw>
<status starttime="20170607 13:24:34.139" status="PASS" endtime="20170607 13:24:34.141"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:34.142" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:34.141" status="PASS" endtime="20170607 13:24:34.142"></status>
</kw>
<status starttime="20170607 13:24:34.141" status="PASS" endtime="20170607 13:24:34.142"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:34.143" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:34.143" status="PASS" endtime="20170607 13:24:34.143"></status>
</kw>
<status starttime="20170607 13:24:34.142" status="PASS" endtime="20170607 13:24:34.143"></status>
</kw>
<status starttime="20170607 13:24:34.138" status="PASS" endtime="20170607 13:24:34.144"></status>
</kw>
<status starttime="20170607 13:24:34.137" status="PASS" endtime="20170607 13:24:34.144"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:24:34.144" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170607 13:24:35.437" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:24:35.438" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg timestamp="20170607 13:24:35.438" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:24:34.144" status="PASS" endtime="20170607 13:24:35.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:35.444" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:35.444" status="PASS" endtime="20170607 13:24:35.444"></status>
</kw>
<status starttime="20170607 13:24:35.443" status="PASS" endtime="20170607 13:24:35.444"></status>
</kw>
<status starttime="20170607 13:24:35.438" status="PASS" endtime="20170607 13:24:35.444"></status>
</kw>
<status starttime="20170607 13:24:34.136" status="PASS" endtime="20170607 13:24:35.444"></status>
</kw>
<status starttime="20170607 13:24:34.136" status="PASS" endtime="20170607 13:24:35.445"></status>
</kw>
<status starttime="20170607 13:24:34.136" status="PASS" endtime="20170607 13:24:35.445"></status>
</kw>
<status starttime="20170607 13:24:34.134" status="PASS" endtime="20170607 13:24:35.445"></status>
</kw>
<status starttime="20170607 13:24:34.134" status="PASS" endtime="20170607 13:24:35.445"></status>
</kw>
<status starttime="20170607 13:24:33.641" status="PASS" endtime="20170607 13:24:35.445"></status>
</kw>
<status starttime="20170607 13:24:31.979" status="PASS" endtime="20170607 13:24:35.445"></status>
</kw>
<status starttime="20170607 13:24:31.964" status="PASS" endtime="20170607 13:24:35.445"></status>
</kw>
<status starttime="20170607 13:24:31.961" status="PASS" endtime="20170607 13:24:35.445"></status>
</kw>
<status starttime="20170607 13:24:31.961" status="PASS" endtime="20170607 13:24:35.445"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170607 13:24:35.447" status="PASS" endtime="20170607 13:24:35.447"></status>
</kw>
<msg timestamp="20170607 13:24:35.447" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:35.447" level="INFO">${ret_values} = None</msg>
<status starttime="20170607 13:24:35.446" status="PASS" endtime="20170607 13:24:35.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170607 13:24:35.447" status="PASS" endtime="20170607 13:24:35.448"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 13:24:35.466" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status starttime="20170607 13:24:35.465" status="FAIL" endtime="20170607 13:24:35.466"></status>
</kw>
<msg timestamp="20170607 13:24:35.466" level="INFO">${has_host} = False</msg>
<status starttime="20170607 13:24:35.465" status="PASS" endtime="20170607 13:24:35.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170607 13:24:35.467" status="PASS" endtime="20170607 13:24:35.467"></status>
</kw>
<status starttime="20170607 13:24:35.466" status="PASS" endtime="20170607 13:24:35.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 13:24:35.469" level="INFO">${port_num} = 22</msg>
<status starttime="20170607 13:24:35.468" status="PASS" endtime="20170607 13:24:35.469"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 13:24:35.469" level="INFO">${SSH_PORT} = 22</msg>
<status starttime="20170607 13:24:35.469" status="PASS" endtime="20170607 13:24:35.469"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 13:24:35.470" level="INFO">${https_num} = 443</msg>
<status starttime="20170607 13:24:35.470" status="PASS" endtime="20170607 13:24:35.470"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 13:24:35.471" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170607 13:24:35.470" status="PASS" endtime="20170607 13:24:35.471"></status>
</kw>
<status starttime="20170607 13:24:35.468" status="PASS" endtime="20170607 13:24:35.471"></status>
</kw>
<status starttime="20170607 13:24:35.467" status="PASS" endtime="20170607 13:24:35.471"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 13:24:35.472" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status starttime="20170607 13:24:35.472" status="FAIL" endtime="20170607 13:24:35.472"></status>
</kw>
<msg timestamp="20170607 13:24:35.472" level="INFO">${has_port} = False</msg>
<status starttime="20170607 13:24:35.471" status="PASS" endtime="20170607 13:24:35.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170607 13:24:35.474" status="PASS" endtime="20170607 13:24:35.474"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170607 13:24:35.474" status="PASS" endtime="20170607 13:24:35.475"></status>
</kw>
<status starttime="20170607 13:24:35.473" status="PASS" endtime="20170607 13:24:35.475"></status>
</kw>
<status starttime="20170607 13:24:35.472" status="PASS" endtime="20170607 13:24:35.475"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 13:24:35.475" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 13:24:37.224" level="INFO">Read output: root@witherspoon:~#</msg>
<status starttime="20170607 13:24:35.475" status="PASS" endtime="20170607 13:24:37.224"></status>
</kw>
<status starttime="20170607 13:24:35.464" status="PASS" endtime="20170607 13:24:37.225"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170607 13:24:37.225" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170607 13:24:37.282" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170607 13:24:37.282" level="INFO">${core_files} = </msg>
<status starttime="20170607 13:24:37.225" status="PASS" endtime="20170607 13:24:37.282"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170607 13:24:37.282" level="INFO">@{core_list} = [ ]</msg>
<status starttime="20170607 13:24:37.282" status="PASS" endtime="20170607 13:24:37.282"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170607 13:24:37.283" status="PASS" endtime="20170607 13:24:37.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170607 13:24:37.291" status="PASS" endtime="20170607 13:24:37.928"></status>
</kw>
<status starttime="20170607 13:24:37.291" status="PASS" endtime="20170607 13:24:37.928"></status>
</kw>
<status starttime="20170607 13:24:37.290" status="PASS" endtime="20170607 13:24:37.928"></status>
</kw>
<status starttime="20170607 13:24:37.283" status="PASS" endtime="20170607 13:24:37.928"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status starttime="20170607 13:24:37.928" status="PASS" endtime="20170607 13:24:37.928"></status>
</kw>
<status starttime="20170607 13:24:35.464" status="PASS" endtime="20170607 13:24:37.929"></status>
</kw>
<status starttime="20170607 13:24:35.448" status="PASS" endtime="20170607 13:24:37.929"></status>
</kw>
<status starttime="20170607 13:24:35.445" status="PASS" endtime="20170607 13:24:37.929"></status>
</kw>
<status starttime="20170607 13:24:35.445" status="PASS" endtime="20170607 13:24:37.929"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170607 13:24:37.931" status="PASS" endtime="20170607 13:24:37.931"></status>
</kw>
<msg timestamp="20170607 13:24:37.931" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:37.931" level="INFO">${ret_values} = None</msg>
<status starttime="20170607 13:24:37.930" status="PASS" endtime="20170607 13:24:37.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170607 13:24:37.931" status="PASS" endtime="20170607 13:24:37.932"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170607 13:24:37.949" level="INFO">Returning from the enclosing user keyword.</msg>
<status starttime="20170607 13:24:37.949" status="PASS" endtime="20170607 13:24:37.949"></status>
</kw>
<status starttime="20170607 13:24:37.948" status="PASS" endtime="20170607 13:24:37.949"></status>
</kw>
<status starttime="20170607 13:24:37.932" status="PASS" endtime="20170607 13:24:37.949"></status>
</kw>
<status starttime="20170607 13:24:37.929" status="PASS" endtime="20170607 13:24:37.949"></status>
</kw>
<status starttime="20170607 13:24:37.929" status="PASS" endtime="20170607 13:24:37.949"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170607 13:24:37.951" status="PASS" endtime="20170607 13:24:37.951"></status>
</kw>
<msg timestamp="20170607 13:24:37.951" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:37.951" level="INFO">${ret_values} = None</msg>
<status starttime="20170607 13:24:37.951" status="PASS" endtime="20170607 13:24:37.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170607 13:24:37.952" status="PASS" endtime="20170607 13:24:37.952"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 13:24:37.970" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status starttime="20170607 13:24:37.970" status="FAIL" endtime="20170607 13:24:37.971"></status>
</kw>
<msg timestamp="20170607 13:24:37.971" level="INFO">${has_host} = False</msg>
<status starttime="20170607 13:24:37.970" status="PASS" endtime="20170607 13:24:37.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170607 13:24:37.971" status="PASS" endtime="20170607 13:24:37.972"></status>
</kw>
<status starttime="20170607 13:24:37.971" status="PASS" endtime="20170607 13:24:37.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 13:24:37.973" level="INFO">${port_num} = 22</msg>
<status starttime="20170607 13:24:37.973" status="PASS" endtime="20170607 13:24:37.973"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 13:24:37.974" level="INFO">${SSH_PORT} = 22</msg>
<status starttime="20170607 13:24:37.974" status="PASS" endtime="20170607 13:24:37.974"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 13:24:38.005" level="INFO">${https_num} = 443</msg>
<status starttime="20170607 13:24:37.974" status="PASS" endtime="20170607 13:24:38.005"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 13:24:38.007" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170607 13:24:38.006" status="PASS" endtime="20170607 13:24:38.007"></status>
</kw>
<status starttime="20170607 13:24:37.973" status="PASS" endtime="20170607 13:24:38.007"></status>
</kw>
<status starttime="20170607 13:24:37.972" status="PASS" endtime="20170607 13:24:38.007"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 13:24:38.008" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status starttime="20170607 13:24:38.008" status="FAIL" endtime="20170607 13:24:38.008"></status>
</kw>
<msg timestamp="20170607 13:24:38.009" level="INFO">${has_port} = False</msg>
<status starttime="20170607 13:24:38.007" status="PASS" endtime="20170607 13:24:38.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170607 13:24:38.011" status="PASS" endtime="20170607 13:24:38.011"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170607 13:24:38.011" status="PASS" endtime="20170607 13:24:38.012"></status>
</kw>
<status starttime="20170607 13:24:38.010" status="PASS" endtime="20170607 13:24:38.012"></status>
</kw>
<status starttime="20170607 13:24:38.009" status="PASS" endtime="20170607 13:24:38.012"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 13:24:38.013" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 13:24:39.722" level="INFO">Read output: root@witherspoon:~#</msg>
<status starttime="20170607 13:24:38.013" status="PASS" endtime="20170607 13:24:39.722"></status>
</kw>
<status starttime="20170607 13:24:37.969" status="PASS" endtime="20170607 13:24:39.723"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170607 13:24:39.723" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170607 13:24:39.723" status="PASS" endtime="20170607 13:24:39.723"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170607 13:24:39.725" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_led', '/org/op...</msg>
<status starttime="20170607 13:24:39.724" status="PASS" endtime="20170607 13:24:39.725"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 13:24:39.726" level="INFO">${logpath} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_sensor_list.txt</msg>
<status starttime="20170607 13:24:39.725" status="PASS" endtime="20170607 13:24:39.726"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:24:39.729" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:24:39.729" status="PASS" endtime="20170607 13:24:39.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:24:39.730" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:24:39.730" status="PASS" endtime="20170607 13:24:39.730"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:24:39.731" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:24:39.731" status="PASS" endtime="20170607 13:24:39.731"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:24:39.732" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:24:39.732" status="PASS" endtime="20170607 13:24:39.732"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:24:39.912" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:24:39.733" status="PASS" endtime="20170607 13:24:39.913"></status>
</kw>
<msg timestamp="20170607 13:24:39.913" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:39.913" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:39.733" status="PASS" endtime="20170607 13:24:39.913"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:24:39.913" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:39.913" status="PASS" endtime="20170607 13:24:39.914"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:39.914" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:39.914" status="PASS" endtime="20170607 13:24:39.914"></status>
</kw>
<status starttime="20170607 13:24:39.728" status="PASS" endtime="20170607 13:24:39.914"></status>
</kw>
<status starttime="20170607 13:24:39.727" status="PASS" endtime="20170607 13:24:39.914"></status>
</kw>
<status starttime="20170607 13:24:39.727" status="PASS" endtime="20170607 13:24:39.915"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:24:39.915" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170607 13:24:39.915" status="PASS" endtime="20170607 13:24:39.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170607 13:24:39.916" status="PASS" endtime="20170607 13:24:39.916"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:24:40.137" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170607 13:24:40.137" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:39.916" status="PASS" endtime="20170607 13:24:40.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170607 13:24:40.137" status="PASS" endtime="20170607 13:24:40.138"></status>
</kw>
<msg timestamp="20170607 13:24:40.138" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:39.726" status="PASS" endtime="20170607 13:24:40.138"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:40.139" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:40.138" status="PASS" endtime="20170607 13:24:40.139"></status>
</kw>
<msg timestamp="20170607 13:24:40.139" level="INFO">${status} = True</msg>
<status starttime="20170607 13:24:40.138" status="PASS" endtime="20170607 13:24:40.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170607 13:24:40.140" status="PASS" endtime="20170607 13:24:40.140"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170607 13:24:40.141" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 1
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:24:40.141" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170607 13:24:40.141" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 1
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170607 13:24:40.140" status="PASS" endtime="20170607 13:24:40.141"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:40.144" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_sensor_list.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:40.143" status="PASS" endtime="20170607 13:24:40.144"></status>
</kw>
<status starttime="20170607 13:24:40.142" status="PASS" endtime="20170607 13:24:40.144"></status>
</kw>
<status starttime="20170607 13:24:39.725" status="PASS" endtime="20170607 13:24:40.144"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 13:24:40.145" level="INFO">${logpath} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_elog.txt</msg>
<status starttime="20170607 13:24:40.144" status="PASS" endtime="20170607 13:24:40.145"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:24:40.147" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:24:40.147" status="PASS" endtime="20170607 13:24:40.148"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:24:40.148" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:24:40.148" status="PASS" endtime="20170607 13:24:40.148"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:24:40.149" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:24:40.149" status="PASS" endtime="20170607 13:24:40.149"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:24:40.150" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:24:40.149" status="PASS" endtime="20170607 13:24:40.150"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:24:40.370" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:24:40.151" status="PASS" endtime="20170607 13:24:40.370"></status>
</kw>
<msg timestamp="20170607 13:24:40.370" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:40.370" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:40.150" status="PASS" endtime="20170607 13:24:40.370"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:24:40.371" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:40.371" status="PASS" endtime="20170607 13:24:40.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:40.372" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:40.371" status="PASS" endtime="20170607 13:24:40.372"></status>
</kw>
<status starttime="20170607 13:24:40.147" status="PASS" endtime="20170607 13:24:40.372"></status>
</kw>
<status starttime="20170607 13:24:40.146" status="PASS" endtime="20170607 13:24:40.372"></status>
</kw>
<status starttime="20170607 13:24:40.146" status="PASS" endtime="20170607 13:24:40.372"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:24:40.373" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170607 13:24:40.372" status="PASS" endtime="20170607 13:24:40.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170607 13:24:40.373" status="PASS" endtime="20170607 13:24:40.373"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:24:40.417" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170607 13:24:40.417" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170607 13:24:40.373" status="PASS" endtime="20170607 13:24:40.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170607 13:24:40.417" status="PASS" endtime="20170607 13:24:40.417"></status>
</kw>
<msg timestamp="20170607 13:24:40.418" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170607 13:24:40.145" status="PASS" endtime="20170607 13:24:40.418"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:40.419" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170607 13:24:40.420" level="FAIL">404 != 200</msg>
<status starttime="20170607 13:24:40.419" status="FAIL" endtime="20170607 13:24:40.420"></status>
</kw>
<msg timestamp="20170607 13:24:40.420" level="INFO">${status} = False</msg>
<status starttime="20170607 13:24:40.418" status="PASS" endtime="20170607 13:24:40.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170607 13:24:40.421" level="INFO">Continuing for loop from the next iteration.</msg>
<status starttime="20170607 13:24:40.421" status="PASS" endtime="20170607 13:24:40.421"></status>
</kw>
<status starttime="20170607 13:24:40.420" status="PASS" endtime="20170607 13:24:40.422"></status>
</kw>
<status starttime="20170607 13:24:40.144" status="PASS" endtime="20170607 13:24:40.422"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 13:24:40.423" level="INFO">${logpath} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_record_log.txt</msg>
<status starttime="20170607 13:24:40.422" status="PASS" endtime="20170607 13:24:40.423"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:24:40.427" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:24:40.426" status="PASS" endtime="20170607 13:24:40.427"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:24:40.428" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:24:40.428" status="PASS" endtime="20170607 13:24:40.428"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:24:40.429" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:24:40.429" status="PASS" endtime="20170607 13:24:40.429"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:24:40.430" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:24:40.430" status="PASS" endtime="20170607 13:24:40.430"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:24:40.612" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:24:40.431" status="PASS" endtime="20170607 13:24:40.612"></status>
</kw>
<msg timestamp="20170607 13:24:40.612" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:40.613" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:40.430" status="PASS" endtime="20170607 13:24:40.613"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:24:40.613" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:40.613" status="PASS" endtime="20170607 13:24:40.613"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:40.614" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:40.614" status="PASS" endtime="20170607 13:24:40.614"></status>
</kw>
<status starttime="20170607 13:24:40.425" status="PASS" endtime="20170607 13:24:40.614"></status>
</kw>
<status starttime="20170607 13:24:40.425" status="PASS" endtime="20170607 13:24:40.614"></status>
</kw>
<status starttime="20170607 13:24:40.424" status="PASS" endtime="20170607 13:24:40.615"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:24:40.615" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170607 13:24:40.615" status="PASS" endtime="20170607 13:24:40.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170607 13:24:40.616" status="PASS" endtime="20170607 13:24:40.616"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:24:40.659" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170607 13:24:40.659" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170607 13:24:40.616" status="PASS" endtime="20170607 13:24:40.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170607 13:24:40.660" status="PASS" endtime="20170607 13:24:40.660"></status>
</kw>
<msg timestamp="20170607 13:24:40.660" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170607 13:24:40.423" status="PASS" endtime="20170607 13:24:40.660"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:40.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170607 13:24:40.662" level="FAIL">404 != 200</msg>
<status starttime="20170607 13:24:40.661" status="FAIL" endtime="20170607 13:24:40.662"></status>
</kw>
<msg timestamp="20170607 13:24:40.662" level="INFO">${status} = False</msg>
<status starttime="20170607 13:24:40.660" status="PASS" endtime="20170607 13:24:40.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170607 13:24:40.663" level="INFO">Continuing for loop from the next iteration.</msg>
<status starttime="20170607 13:24:40.663" status="PASS" endtime="20170607 13:24:40.663"></status>
</kw>
<status starttime="20170607 13:24:40.662" status="PASS" endtime="20170607 13:24:40.663"></status>
</kw>
<status starttime="20170607 13:24:40.422" status="PASS" endtime="20170607 13:24:40.663"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 13:24:40.665" level="INFO">${logpath} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_led.txt</msg>
<status starttime="20170607 13:24:40.663" status="PASS" endtime="20170607 13:24:40.665"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:24:40.667" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:24:40.667" status="PASS" endtime="20170607 13:24:40.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:24:40.668" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:24:40.668" status="PASS" endtime="20170607 13:24:40.668"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:24:40.669" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:24:40.669" status="PASS" endtime="20170607 13:24:40.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:24:40.670" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:24:40.669" status="PASS" endtime="20170607 13:24:40.670"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:24:40.849" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:24:40.671" status="PASS" endtime="20170607 13:24:40.849"></status>
</kw>
<msg timestamp="20170607 13:24:40.849" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:40.849" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:40.670" status="PASS" endtime="20170607 13:24:40.849"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:24:40.850" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:40.850" status="PASS" endtime="20170607 13:24:40.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:40.851" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:40.850" status="PASS" endtime="20170607 13:24:40.851"></status>
</kw>
<status starttime="20170607 13:24:40.666" status="PASS" endtime="20170607 13:24:40.851"></status>
</kw>
<status starttime="20170607 13:24:40.666" status="PASS" endtime="20170607 13:24:40.851"></status>
</kw>
<status starttime="20170607 13:24:40.665" status="PASS" endtime="20170607 13:24:40.851"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:24:40.852" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170607 13:24:40.852" status="PASS" endtime="20170607 13:24:40.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170607 13:24:40.852" status="PASS" endtime="20170607 13:24:40.853"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:24:40.896" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170607 13:24:40.896" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170607 13:24:40.853" status="PASS" endtime="20170607 13:24:40.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170607 13:24:40.897" status="PASS" endtime="20170607 13:24:40.897"></status>
</kw>
<msg timestamp="20170607 13:24:40.897" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170607 13:24:40.665" status="PASS" endtime="20170607 13:24:40.897"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:40.898" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170607 13:24:40.898" level="FAIL">404 != 200</msg>
<status starttime="20170607 13:24:40.898" status="FAIL" endtime="20170607 13:24:40.899"></status>
</kw>
<msg timestamp="20170607 13:24:40.899" level="INFO">${status} = False</msg>
<status starttime="20170607 13:24:40.897" status="PASS" endtime="20170607 13:24:40.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170607 13:24:40.900" level="INFO">Continuing for loop from the next iteration.</msg>
<status starttime="20170607 13:24:40.899" status="PASS" endtime="20170607 13:24:40.900"></status>
</kw>
<status starttime="20170607 13:24:40.899" status="PASS" endtime="20170607 13:24:40.900"></status>
</kw>
<status starttime="20170607 13:24:40.663" status="PASS" endtime="20170607 13:24:40.900"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 13:24:40.901" level="INFO">${logpath} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_inventory.txt</msg>
<status starttime="20170607 13:24:40.900" status="PASS" endtime="20170607 13:24:40.901"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:24:40.903" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:24:40.903" status="PASS" endtime="20170607 13:24:40.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:24:40.904" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:24:40.904" status="PASS" endtime="20170607 13:24:40.904"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:24:40.905" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:24:40.905" status="PASS" endtime="20170607 13:24:40.905"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:24:40.906" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:24:40.906" status="PASS" endtime="20170607 13:24:40.906"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:24:41.087" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:24:40.907" status="PASS" endtime="20170607 13:24:41.087"></status>
</kw>
<msg timestamp="20170607 13:24:41.087" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:41.087" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:40.907" status="PASS" endtime="20170607 13:24:41.087"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:24:41.088" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:41.087" status="PASS" endtime="20170607 13:24:41.088"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:41.088" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:41.088" status="PASS" endtime="20170607 13:24:41.088"></status>
</kw>
<status starttime="20170607 13:24:40.902" status="PASS" endtime="20170607 13:24:41.089"></status>
</kw>
<status starttime="20170607 13:24:40.902" status="PASS" endtime="20170607 13:24:41.089"></status>
</kw>
<status starttime="20170607 13:24:40.901" status="PASS" endtime="20170607 13:24:41.089"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:24:41.089" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170607 13:24:41.089" status="PASS" endtime="20170607 13:24:41.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170607 13:24:41.090" status="PASS" endtime="20170607 13:24:41.090"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:24:42.750" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170607 13:24:42.750" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:41.090" status="PASS" endtime="20170607 13:24:42.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170607 13:24:42.751" status="PASS" endtime="20170607 13:24:42.751"></status>
</kw>
<msg timestamp="20170607 13:24:42.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:40.901" status="PASS" endtime="20170607 13:24:42.752"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:42.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:42.752" status="PASS" endtime="20170607 13:24:42.753"></status>
</kw>
<msg timestamp="20170607 13:24:42.753" level="INFO">${status} = True</msg>
<status starttime="20170607 13:24:42.752" status="PASS" endtime="20170607 13:24:42.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170607 13:24:42.753" status="PASS" endtime="20170607 13:24:42.753"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170607 13:24:42.756" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "2", 
      "PartNumber": "0000000000000000", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775622", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775618", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1983", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ec", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170607 13:24:42.757" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170607 13:24:42.757" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
 ...</msg>
<status starttime="20170607 13:24:42.754" status="PASS" endtime="20170607 13:24:42.757"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:42.759" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_inventory.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:42.758" status="PASS" endtime="20170607 13:24:42.759"></status>
</kw>
<status starttime="20170607 13:24:42.757" status="PASS" endtime="20170607 13:24:42.759"></status>
</kw>
<status starttime="20170607 13:24:40.900" status="PASS" endtime="20170607 13:24:42.759"></status>
</kw>
<status starttime="20170607 13:24:39.725" status="PASS" endtime="20170607 13:24:42.759"></status>
</kw>
<status starttime="20170607 13:24:39.724" status="PASS" endtime="20170607 13:24:42.759"></status>
</kw>
<status starttime="20170607 13:24:39.723" status="PASS" endtime="20170607 13:24:42.759"></status>
</kw>
<status starttime="20170607 13:24:39.723" status="PASS" endtime="20170607 13:24:42.759"></status>
</kw>
<status starttime="20170607 13:24:37.969" status="PASS" endtime="20170607 13:24:42.759"></status>
</kw>
<status starttime="20170607 13:24:37.952" status="PASS" endtime="20170607 13:24:42.760"></status>
</kw>
<status starttime="20170607 13:24:37.950" status="PASS" endtime="20170607 13:24:42.760"></status>
</kw>
<status starttime="20170607 13:24:37.950" status="PASS" endtime="20170607 13:24:42.760"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170607 13:24:42.761" status="PASS" endtime="20170607 13:24:42.762"></status>
</kw>
<msg timestamp="20170607 13:24:42.762" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:42.762" level="INFO">${ret_values} = None</msg>
<status starttime="20170607 13:24:42.761" status="PASS" endtime="20170607 13:24:42.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170607 13:24:42.762" status="PASS" endtime="20170607 13:24:42.762"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170607 13:24:42.781" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status starttime="20170607 13:24:42.780" status="FAIL" endtime="20170607 13:24:42.781"></status>
</kw>
<msg timestamp="20170607 13:24:42.781" level="INFO">${has_host} = False</msg>
<status starttime="20170607 13:24:42.780" status="PASS" endtime="20170607 13:24:42.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170607 13:24:42.782" status="PASS" endtime="20170607 13:24:42.782"></status>
</kw>
<status starttime="20170607 13:24:42.781" status="PASS" endtime="20170607 13:24:42.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170607 13:24:42.784" level="INFO">${port_num} = 22</msg>
<status starttime="20170607 13:24:42.784" status="PASS" endtime="20170607 13:24:42.784"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170607 13:24:42.784" level="INFO">${SSH_PORT} = 22</msg>
<status starttime="20170607 13:24:42.784" status="PASS" endtime="20170607 13:24:42.784"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170607 13:24:42.785" level="INFO">${https_num} = 443</msg>
<status starttime="20170607 13:24:42.785" status="PASS" endtime="20170607 13:24:42.785"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170607 13:24:42.786" level="INFO">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170607 13:24:42.785" status="PASS" endtime="20170607 13:24:42.786"></status>
</kw>
<status starttime="20170607 13:24:42.783" status="PASS" endtime="20170607 13:24:42.786"></status>
</kw>
<status starttime="20170607 13:24:42.783" status="PASS" endtime="20170607 13:24:42.786"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170607 13:24:42.788" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status starttime="20170607 13:24:42.787" status="FAIL" endtime="20170607 13:24:42.788"></status>
</kw>
<msg timestamp="20170607 13:24:42.788" level="INFO">${has_port} = False</msg>
<status starttime="20170607 13:24:42.787" status="PASS" endtime="20170607 13:24:42.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170607 13:24:42.789" status="PASS" endtime="20170607 13:24:42.790"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170607 13:24:42.790" status="PASS" endtime="20170607 13:24:42.790"></status>
</kw>
<status starttime="20170607 13:24:42.789" status="PASS" endtime="20170607 13:24:42.790"></status>
</kw>
<status starttime="20170607 13:24:42.788" status="PASS" endtime="20170607 13:24:42.790"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170607 13:24:42.791" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170607 13:24:44.437" level="INFO">Read output: root@witherspoon:~#</msg>
<status starttime="20170607 13:24:42.791" status="PASS" endtime="20170607 13:24:44.437"></status>
</kw>
<status starttime="20170607 13:24:42.779" status="PASS" endtime="20170607 13:24:44.437"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170607 13:24:44.438" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170607 13:24:44.437" status="PASS" endtime="20170607 13:24:44.438"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170607 13:24:44.439" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') ]</msg>
<status starttime="20170607 13:24:44.439" status="PASS" endtime="20170607 13:24:44.439"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 13:24:44.440" level="INFO">${logpath} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_proc_list.txt</msg>
<status starttime="20170607 13:24:44.440" status="PASS" endtime="20170607 13:24:44.440"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170607 13:24:44.442" status="PASS" endtime="20170607 13:24:44.442"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:24:44.443" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170607 13:24:44.783" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:24:44.784" level="INFO">${stdout} = Mem: 162644K used, 270232K free, 14632K shrd, 10724K buff, 50296K cached
CPU:   7% usr  15% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.38 0.47 0.64 1/140 1924
  PID  PPID USER  ...</msg>
<msg timestamp="20170607 13:24:44.784" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:24:44.442" status="PASS" endtime="20170607 13:24:44.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:44.791" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_proc_list.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:44.790" status="PASS" endtime="20170607 13:24:44.791"></status>
</kw>
<status starttime="20170607 13:24:44.790" status="PASS" endtime="20170607 13:24:44.791"></status>
</kw>
<status starttime="20170607 13:24:44.784" status="PASS" endtime="20170607 13:24:44.791"></status>
</kw>
<status starttime="20170607 13:24:44.441" status="PASS" endtime="20170607 13:24:44.791"></status>
</kw>
<status starttime="20170607 13:24:44.439" status="PASS" endtime="20170607 13:24:44.791"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 13:24:44.792" level="INFO">${logpath} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_dmesg.txt</msg>
<status starttime="20170607 13:24:44.792" status="PASS" endtime="20170607 13:24:44.792"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170607 13:24:44.793" status="PASS" endtime="20170607 13:24:44.793"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:24:44.794" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170607 13:24:44.911" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:24:44.911" level="INFO">${stdout} = Freeing unused kernel memory: 1024K
jffs2: notice: (458) jffs2_build_xattr_subsystem: complete building xattr subsystem, 0 of xdatum (0 unchecked, 0 orphan) and 0 of xref (0 dead, 0 orphan) found.
sys...</msg>
<msg timestamp="20170607 13:24:44.911" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:24:44.794" status="PASS" endtime="20170607 13:24:44.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:44.919" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_dmesg.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:44.919" status="PASS" endtime="20170607 13:24:44.919"></status>
</kw>
<status starttime="20170607 13:24:44.918" status="PASS" endtime="20170607 13:24:44.920"></status>
</kw>
<status starttime="20170607 13:24:44.911" status="PASS" endtime="20170607 13:24:44.920"></status>
</kw>
<status starttime="20170607 13:24:44.792" status="PASS" endtime="20170607 13:24:44.920"></status>
</kw>
<status starttime="20170607 13:24:44.791" status="PASS" endtime="20170607 13:24:44.920"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 13:24:44.921" level="INFO">${logpath} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_journalctl.txt</msg>
<status starttime="20170607 13:24:44.920" status="PASS" endtime="20170607 13:24:44.921"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170607 13:24:44.922" status="PASS" endtime="20170607 13:24:44.922"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:24:44.922" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170607 13:24:48.956" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:24:48.963" level="INFO">${stdout} = -- Logs begin at Wed 2017-06-07 13:08:28 UTC, end at Wed 2017-06-07 13:24:52 UTC. --
Jun 07 13:08:28 witherspoon kernel: Booting Linux on physical CPU 0x0
Jun 07 13:08:28 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170607 13:24:48.963" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:24:44.922" status="PASS" endtime="20170607 13:24:48.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:48.977" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_journalctl.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:48.972" status="PASS" endtime="20170607 13:24:48.977"></status>
</kw>
<status starttime="20170607 13:24:48.969" status="PASS" endtime="20170607 13:24:48.977"></status>
</kw>
<status starttime="20170607 13:24:48.963" status="PASS" endtime="20170607 13:24:48.977"></status>
</kw>
<status starttime="20170607 13:24:44.921" status="PASS" endtime="20170607 13:24:48.977"></status>
</kw>
<status starttime="20170607 13:24:44.920" status="PASS" endtime="20170607 13:24:48.977"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 13:24:48.978" level="INFO">${logpath} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_meminfo.txt</msg>
<status starttime="20170607 13:24:48.977" status="PASS" endtime="20170607 13:24:48.978"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170607 13:24:48.979" status="PASS" endtime="20170607 13:24:48.980"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:24:48.980" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170607 13:24:49.060" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:24:49.061" level="INFO">${stdout} = MemTotal:         432876 kB
MemFree:          270232 kB
MemAvailable:     312936 kB
Buffers:           10724 kB
Cached:            50300 kB
SwapCached:            0 kB
Active:           112596 kB
Inac...</msg>
<msg timestamp="20170607 13:24:49.061" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:24:48.980" status="PASS" endtime="20170607 13:24:49.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:49.068" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_meminfo.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:49.067" status="PASS" endtime="20170607 13:24:49.068"></status>
</kw>
<status starttime="20170607 13:24:49.066" status="PASS" endtime="20170607 13:24:49.068"></status>
</kw>
<status starttime="20170607 13:24:49.061" status="PASS" endtime="20170607 13:24:49.069"></status>
</kw>
<status starttime="20170607 13:24:48.979" status="PASS" endtime="20170607 13:24:49.069"></status>
</kw>
<status starttime="20170607 13:24:48.977" status="PASS" endtime="20170607 13:24:49.069"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170607 13:24:49.069" level="INFO">${logpath} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_procinfo.txt</msg>
<status starttime="20170607 13:24:49.069" status="PASS" endtime="20170607 13:24:49.069"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170607 13:24:49.070" status="PASS" endtime="20170607 13:24:49.071"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170607 13:24:49.071" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170607 13:24:49.147" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170607 13:24:49.147" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170607 13:24:49.147" level="INFO">${stderr} = </msg>
<status starttime="20170607 13:24:49.071" status="PASS" endtime="20170607 13:24:49.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170607 13:24:49.153" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_procinfo.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/20170607132430123501_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:49.153" status="PASS" endtime="20170607 13:24:49.153"></status>
</kw>
<status starttime="20170607 13:24:49.152" status="PASS" endtime="20170607 13:24:49.153"></status>
</kw>
<status starttime="20170607 13:24:49.147" status="PASS" endtime="20170607 13:24:49.154"></status>
</kw>
<status starttime="20170607 13:24:49.070" status="PASS" endtime="20170607 13:24:49.154"></status>
</kw>
<status starttime="20170607 13:24:49.069" status="PASS" endtime="20170607 13:24:49.154"></status>
</kw>
<status starttime="20170607 13:24:44.439" status="PASS" endtime="20170607 13:24:49.154"></status>
</kw>
<status starttime="20170607 13:24:44.438" status="PASS" endtime="20170607 13:24:49.154"></status>
</kw>
<status starttime="20170607 13:24:44.438" status="PASS" endtime="20170607 13:24:49.154"></status>
</kw>
<status starttime="20170607 13:24:44.438" status="PASS" endtime="20170607 13:24:49.154"></status>
</kw>
<status starttime="20170607 13:24:42.779" status="PASS" endtime="20170607 13:24:49.154"></status>
</kw>
<status starttime="20170607 13:24:42.763" status="PASS" endtime="20170607 13:24:49.154"></status>
</kw>
<status starttime="20170607 13:24:42.760" status="PASS" endtime="20170607 13:24:49.154"></status>
</kw>
<status starttime="20170607 13:24:42.760" status="PASS" endtime="20170607 13:24:49.154"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170607 13:24:49.156" status="PASS" endtime="20170607 13:24:49.156"></status>
</kw>
<msg timestamp="20170607 13:24:49.157" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:49.157" level="INFO">${ret_values} = None</msg>
<status starttime="20170607 13:24:49.156" status="PASS" endtime="20170607 13:24:49.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170607 13:24:49.157" status="PASS" endtime="20170607 13:24:49.157"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170607 13:24:49.179" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170607 13:24:49.178" status="PASS" endtime="20170607 13:24:49.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170607 13:24:49.180" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170607 13:24:49.179" status="PASS" endtime="20170607 13:24:49.180"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170607 13:24:49.180" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170607 13:24:49.180" status="PASS" endtime="20170607 13:24:49.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170607 13:24:49.181" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170607 13:24:49.181" status="PASS" endtime="20170607 13:24:49.181"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170607 13:24:49.363" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170607 13:24:49.182" status="PASS" endtime="20170607 13:24:49.363"></status>
</kw>
<msg timestamp="20170607 13:24:49.363" level="INFO">${status} = PASS</msg>
<msg timestamp="20170607 13:24:49.364" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170607 13:24:49.181" status="PASS" endtime="20170607 13:24:49.364"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170607 13:24:49.364" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:49.364" status="PASS" endtime="20170607 13:24:49.364"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:49.365" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170607 13:24:49.365" status="PASS" endtime="20170607 13:24:49.365"></status>
</kw>
<status starttime="20170607 13:24:49.178" status="PASS" endtime="20170607 13:24:49.365"></status>
</kw>
<status starttime="20170607 13:24:49.177" status="PASS" endtime="20170607 13:24:49.365"></status>
</kw>
<status starttime="20170607 13:24:49.177" status="PASS" endtime="20170607 13:24:49.365"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170607 13:24:49.366" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170607 13:24:49.366" status="PASS" endtime="20170607 13:24:49.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170607 13:24:49.366" status="PASS" endtime="20170607 13:24:49.367"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170607 13:24:49.410" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170607 13:24:49.410" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170607 13:24:49.367" status="PASS" endtime="20170607 13:24:49.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170607 13:24:49.410" status="PASS" endtime="20170607 13:24:49.411"></status>
</kw>
<msg timestamp="20170607 13:24:49.411" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170607 13:24:49.176" status="PASS" endtime="20170607 13:24:49.411"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170607 13:24:49.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170607 13:24:49.412" level="FAIL">404 != 200</msg>
<status starttime="20170607 13:24:49.411" status="FAIL" endtime="20170607 13:24:49.412"></status>
</kw>
<msg timestamp="20170607 13:24:49.412" level="INFO">${status} = False</msg>
<status starttime="20170607 13:24:49.411" status="PASS" endtime="20170607 13:24:49.412"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170607 13:24:49.413" level="INFO">Returning from the enclosing user keyword.</msg>
<status starttime="20170607 13:24:49.412" status="PASS" endtime="20170607 13:24:49.413"></status>
</kw>
<status starttime="20170607 13:24:49.176" status="PASS" endtime="20170607 13:24:49.413"></status>
</kw>
<status starttime="20170607 13:24:49.158" status="PASS" endtime="20170607 13:24:49.413"></status>
</kw>
<status starttime="20170607 13:24:49.155" status="PASS" endtime="20170607 13:24:49.413"></status>
</kw>
<status starttime="20170607 13:24:49.154" status="PASS" endtime="20170607 13:24:49.413"></status>
</kw>
<status starttime="20170607 13:24:31.960" status="PASS" endtime="20170607 13:24:49.413"></status>
</kw>
<status starttime="20170607 13:24:31.958" status="PASS" endtime="20170607 13:24:49.413"></status>
</kw>
<status starttime="20170607 13:24:31.958" status="PASS" endtime="20170607 13:24:49.413"></status>
</kw>
<status starttime="20170607 13:24:31.958" status="PASS" endtime="20170607 13:24:49.413"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20170607 13:24:49.414" status="PASS" endtime="20170607 13:24:49.574"></status>
</kw>
<status starttime="20170607 13:24:31.957" status="PASS" endtime="20170607 13:24:49.574"></status>
</kw>
<status starttime="20170607 13:24:27.071" status="PASS" endtime="20170607 13:24:49.574"></status>
</kw>
<status starttime="20170607 13:24:27.071" status="PASS" endtime="20170607 13:24:49.574"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170607 13:24:49.575" status="PASS" endtime="20170607 13:24:49.575"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170607 13:24:49.576" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170607 13:24:49.576" status="PASS" endtime="20170607 13:24:49.576"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170607 13:24:49.576" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/2878/obmc-robot/logs/20170607132430123501_TestsTestBasicPoweron/20170607132430123501_PowerOnTest/</msg>
<status starttime="20170607 13:24:49.576" status="PASS" endtime="20170607 13:24:49.576"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170607 13:24:49.577" status="PASS" endtime="20170607 13:24:49.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170607 13:24:49.577" status="PASS" endtime="20170607 13:24:49.578"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170607 13:24:49.578" html="yes" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs"&gt;/tmp/fspcibld/2878/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170607 13:24:49.578" status="PASS" endtime="20170607 13:24:49.578"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170607 13:24:49.579" html="yes" level="INFO">File '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170607 13:24:49.579" status="PASS" endtime="20170607 13:24:49.579"></status>
</kw>
<msg timestamp="20170607 13:24:49.579" level="INFO">${exist} = True</msg>
<status starttime="20170607 13:24:49.579" status="PASS" endtime="20170607 13:24:49.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170607 13:24:49.580" status="PASS" endtime="20170607 13:24:49.580"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170607 13:24:49.580" status="PASS" endtime="20170607 13:24:49.581"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 13:24:49.581" level="INFO">${cur_time} = 2017-06-07 13:24:49:581351</msg>
<status starttime="20170607 13:24:49.581" status="PASS" endtime="20170607 13:24:49.582"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170607 13:24:49.582" level="INFO">${cur_time} = 20170607132449581351</msg>
<status starttime="20170607 13:24:49.582" status="PASS" endtime="20170607 13:24:49.582"></status>
</kw>
<msg timestamp="20170607 13:24:49.582" level="INFO">${cur_time} = 20170607132449581351</msg>
<status starttime="20170607 13:24:49.581" status="PASS" endtime="20170607 13:24:49.582"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170607 13:24:49.583" html="yes" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2878/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2878/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170607 13:24:49.583" status="PASS" endtime="20170607 13:24:49.583"></status>
</kw>
<status starttime="20170607 13:24:49.575" status="PASS" endtime="20170607 13:24:49.583"></status>
</kw>
<status starttime="20170607 13:24:26.800" status="PASS" endtime="20170607 13:24:49.584"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170607 13:24:49.585" level="INFO">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170607 13:24:49.585" status="PASS" endtime="20170607 13:24:49.585"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170607 13:24:49.586" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170607 13:24:49.585" status="PASS" endtime="20170607 13:24:49.586"></status>
</kw>
<msg timestamp="20170607 13:24:49.586" level="INFO">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170607 13:24:49.584" status="PASS" endtime="20170607 13:24:49.586"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 13:24:49.587" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170607 13:24:49.587" status="PASS" endtime="20170607 13:24:49.587"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170607 13:24:49.587" status="PASS" endtime="20170607 13:24:49.588"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170607 13:24:49.592" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170607 13:24:49.595" level="INFO">${rc} = 0</msg>
<msg timestamp="20170607 13:24:49.595" level="INFO">${output} = /tmp/fspcibld/2878/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170607 13:24:49.588" status="PASS" endtime="20170607 13:24:49.596"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170607 13:24:49.598" status="PASS" endtime="20170607 13:24:49.599"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170607 13:24:49.599" status="PASS" endtime="20170607 13:24:49.600"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 13:24:49.600" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170607 13:24:49.600" status="PASS" endtime="20170607 13:24:49.600"></status>
</kw>
<msg timestamp="20170607 13:24:49.601" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status starttime="20170607 13:24:49.586" status="PASS" endtime="20170607 13:24:49.601"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 13:24:49.602" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170607 13:24:49.601" status="PASS" endtime="20170607 13:24:49.602"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170607 13:24:49.602" status="PASS" endtime="20170607 13:24:49.602"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170607 13:24:49.607" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170607 13:24:49.618" level="INFO">${rc} = 0</msg>
<msg timestamp="20170607 13:24:49.618" level="INFO">${os_con_pid} = </msg>
<status starttime="20170607 13:24:49.602" status="PASS" endtime="20170607 13:24:49.619"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170607 13:24:49.621" status="PASS" endtime="20170607 13:24:49.622"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170607 13:24:49.623" level="INFO">${cmd_buf} = kill -9 </msg>
<status starttime="20170607 13:24:49.622" status="PASS" endtime="20170607 13:24:49.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170607 13:24:49.623" status="PASS" endtime="20170607 13:24:49.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170607 13:24:49.627" level="INFO">${rc} = None</msg>
<msg timestamp="20170607 13:24:49.627" level="INFO">${output} = None</msg>
<status starttime="20170607 13:24:49.626" status="PASS" endtime="20170607 13:24:49.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170607 13:24:49.627" status="PASS" endtime="20170607 13:24:49.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170607 13:24:49.628" status="PASS" endtime="20170607 13:24:49.628"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170607 13:24:49.629" level="INFO">${output} = </msg>
<status starttime="20170607 13:24:49.628" status="PASS" endtime="20170607 13:24:49.629"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170607 13:24:49.629" level="INFO">${loc_quiet} = 1</msg>
<status starttime="20170607 13:24:49.629" status="PASS" endtime="20170607 13:24:49.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170607 13:24:49.630" status="PASS" endtime="20170607 13:24:49.661"></status>
</kw>
<msg timestamp="20170607 13:24:49.663" level="INFO">${rc} = 0</msg>
<msg timestamp="20170607 13:24:49.663" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
[   28.083998048,5] IPMI...</msg>
<status starttime="20170607 13:24:49.630" status="PASS" endtime="20170607 13:24:49.663"></status>
</kw>
<msg timestamp="20170607 13:24:49.665" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
[   28.083998048,5] IPMI...</msg>
<status starttime="20170607 13:24:49.584" status="PASS" endtime="20170607 13:24:49.665"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170607 13:24:49.667" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
[   28.083998048,5] IPMI: Soft shutdown requested
[    7.106460] opal-power: Poweroff requested
[    7.106737] reboot: Failed to start orderly shutdown: forcing the issue
[    7.110558] reboot: Power down
[   28.100067296,5] OPAL: Shutdown request type 0x0...
[   28.138030] INFO: rcu_sched detected stalls on CPUs/tasks:
[   28.138145] 	0-...: (1 ticks this GP) idle=43b/140000000000000/0 softirq=9/9 fqs=984 
[   28.138373] 	(detected by 25, t=2102 jiffies, g=-221, c=-222, q=296)
[   28.138525] Task dump for CPU 0:
[   28.138619] kworker/28:1    R  running task        0   218      2 0x00000804
[   28.138794] Workqueue: events poweroff_work_func
[   28.138909] Call Trace:
[   28.138976] [c000201fe6f07800] [0000000000000000]           (null)
[   29.278041] INFO: rcu_sched detected expedited stalls on CPUs/tasks: { 0-... } 2108 jiffies s: 5 root: 0x1/.
[   29.278313] blocking rcu_node structures:
[   29.278406] Task dump for CPU 0:
[   29.278508] kworker/28:1    R  running task        0   218      2 0x00000804
[   29.278669] Workqueue: events poweroff_work_func
[   29.278798] Call Trace:
[   29.278860] [c000201fe6f07800] [0000000000000000]           (null)
[   91.188027] INFO: rcu_sched detected stalls on CPUs/tasks:
[   91.188126] 	0-...: (1 ticks this GP) idle=43b/140000000000000/0 softirq=9/9 fqs=3870 
[   91.188350] 	(detected by 26, t=8407 jiffies, g=-221, c=-222, q=296)
[   91.188510] Task dump for CPU 0:
[   91.188614] kworker/28:1    R  running task        0   218      2 0x00000804
[   91.188793] Workqueue: events poweroff_work_func
[   91.188919] Call Trace:
[   91.188987] [c000201fe6f07800] [0000000000000000]           (null)
[   95.208039] INFO: rcu_sched detected expedited stalls on CPUs/tasks: { 0-... } 8701 jiffies s: 5 root: 0x1/.
[   95.208270] blocking rcu_node structures:
[   95.208372] Task dump for CPU 0:
[   95.208452] kworker/28:1    R  running task        0   218      2 0x00000804
[   95.208628] Workqueue: events poweroff_work_func
[   95.208739] Call Trace:
[   95.208803] [c000201fe6f07800] [0000000000000000]           (null)
[  154.238028] INFO: rcu_sched detected stalls on CPUs/tasks:
[  154.238137] 	0-...: (1 ticks this GP) idle=43b/140000000000000/0 softirq=9/9 fqs=6761 
[  154.238343] 	(detected by 30, t=14712 jiffies, g=-221, c=-222, q=296)
[  154.238490] Task dump for CPU 0:
[  154.238577] kworker/28:1    R  running task        0   218      2 0x00000804
[  154.238748] Workqueue: events poweroff_work_func
[  154.238867] Call Trace:
[  154.238935] [c000201fe6f07800] [0000000000000000]           (null)
[  161.758039] INFO: rcu_sched detected expedited stalls on CPUs/tasks: { 0-... } 15356 jiffies s: 5 root: 0x1/.
[  161.758300] blocking rcu_node structures:
[  161.758414] Task dump for CPU 0:
[  161.758524] kworker/28:1    R  running task        0   218      2 0x00000804
[  161.758690] Workqueue: events poweroff_work_func
[  161.758800] Call Trace:
[  161.758861] [c000201fe6f07800] [0000000000000000]           (null)
</msg>
<status starttime="20170607 13:24:49.667" status="PASS" endtime="20170607 13:24:49.668"></status>
</kw>
<status starttime="20170607 13:24:26.800" status="PASS" endtime="20170607 13:24:49.668"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170607 13:21:18.229" status="FAIL" critical="yes" endtime="20170607 13:24:49.668">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170607 13:21:18.191" status="FAIL" endtime="20170607 13:24:49.670"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170607 13:21:11.016" status="FAIL" endtime="20170607 13:24:49.673"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" fail="1" pass="1" name="Tests">Tests</stat>
<stat id="s1-s1" fail="0" pass="1" name="Security">Tests.Security</stat>
<stat id="s1-s1-s1" fail="0" pass="1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" fail="1" pass="0" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
