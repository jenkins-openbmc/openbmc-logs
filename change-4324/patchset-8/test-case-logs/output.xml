<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170607 03:41:16.560">
<suite id="s1" source="/tmp/fspcibld/29220/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:41:17.534">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 03:41:17.534" starttime="20170607 03:41:17.533"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:17.534">${has_host} = False</msg>
<status status="PASS" endtime="20170607 03:41:17.534" starttime="20170607 03:41:17.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:17.535" starttime="20170607 03:41:17.535"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:17.535" starttime="20170607 03:41:17.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:17.537">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 03:41:17.537" starttime="20170607 03:41:17.536"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:17.537">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 03:41:17.537" starttime="20170607 03:41:17.537"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:17.538">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 03:41:17.538" starttime="20170607 03:41:17.538"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:17.539">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 03:41:17.539" starttime="20170607 03:41:17.538"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:17.539" starttime="20170607 03:41:17.536"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:17.539" starttime="20170607 03:41:17.536"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:41:17.540">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 03:41:17.540" starttime="20170607 03:41:17.540"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:17.540">${has_port} = False</msg>
<status status="PASS" endtime="20170607 03:41:17.540" starttime="20170607 03:41:17.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:17.542" starttime="20170607 03:41:17.542"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:17.544" starttime="20170607 03:41:17.543"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:17.544" starttime="20170607 03:41:17.541"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:17.544" starttime="20170607 03:41:17.540"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:17.545">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170607 03:41:19.364">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 03:41:19.364" starttime="20170607 03:41:17.545"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:19.364" starttime="20170607 03:41:17.531"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:19.366">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170607 03:41:19.495">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:41:19.495">${output} = VERSION_ID="v1.99.6-78-gfd4d3cc"</msg>
<msg level="INFO" timestamp="20170607 03:41:19.496">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:41:19.496" starttime="20170607 03:41:19.366"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:19.496">Length is 0</msg>
<status status="PASS" endtime="20170607 03:41:19.496" starttime="20170607 03:41:19.496"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:19.497">VERSION_ID="v1.99.6-78-gfd4d3cc"</msg>
<status status="PASS" endtime="20170607 03:41:19.497" starttime="20170607 03:41:19.497"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:19.497" starttime="20170607 03:41:19.365"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:19.497" starttime="20170607 03:41:19.365"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:19.499">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170607 03:41:19.646">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:41:19.646">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<msg level="INFO" timestamp="20170607 03:41:19.646">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:41:19.646" starttime="20170607 03:41:19.499"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:19.647">Length is 0</msg>
<status status="PASS" endtime="20170607 03:41:19.647" starttime="20170607 03:41:19.646"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:19.647">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<status status="PASS" endtime="20170607 03:41:19.647" starttime="20170607 03:41:19.498"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:19.647">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17_1.10
	op-build-v1.17-20-gbaac7a6-dirty
	buildroot-2017.02.2-7-g23118ce
	skiboot-d673ecc
	hostboot-dff36e4
	linux-4.11.2-openpower1-p062f2cf
	petitboot-v1.4.2-p9717304
	machine-xml-96746e9
	occ-bc34ad5
	hostboot-binaries-bc600e6
	capp-ucode-9c73e9f
	sbe-d770027
</msg>
<status status="PASS" endtime="20170607 03:41:19.648" starttime="20170607 03:41:19.647"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:19.649" starttime="20170607 03:41:19.498"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:19.649" starttime="20170607 03:41:19.498"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:41:19.651">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 03:41:19.651" starttime="20170607 03:41:19.651"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:19.651">${has_host} = False</msg>
<status status="PASS" endtime="20170607 03:41:19.651" starttime="20170607 03:41:19.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:19.653" starttime="20170607 03:41:19.652"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:19.653" starttime="20170607 03:41:19.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:19.654">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 03:41:19.654" starttime="20170607 03:41:19.654"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:19.655">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 03:41:19.655" starttime="20170607 03:41:19.654"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:19.655">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 03:41:19.655" starttime="20170607 03:41:19.655"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:19.656">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 03:41:19.656" starttime="20170607 03:41:19.656"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:19.656" starttime="20170607 03:41:19.653"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:19.656" starttime="20170607 03:41:19.653"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:41:19.657">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 03:41:19.657" starttime="20170607 03:41:19.657"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:19.658">${has_port} = False</msg>
<status status="PASS" endtime="20170607 03:41:19.658" starttime="20170607 03:41:19.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:19.660" starttime="20170607 03:41:19.659"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:19.660" starttime="20170607 03:41:19.660"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:19.660" starttime="20170607 03:41:19.659"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:19.660" starttime="20170607 03:41:19.658"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:19.661">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170607 03:41:21.547">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 03:41:21.548" starttime="20170607 03:41:19.661"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:21.548" starttime="20170607 03:41:19.650"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:21.549">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170607 03:41:21.627">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:41:21.627">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170607 03:41:21.627">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:41:21.627" starttime="20170607 03:41:21.548"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:21.628">Length is 0</msg>
<status status="PASS" endtime="20170607 03:41:21.628" starttime="20170607 03:41:21.628"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:21.629">Length is 11</msg>
<status status="PASS" endtime="20170607 03:41:21.629" starttime="20170607 03:41:21.628"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:21.629">${bmc_model} = Witherspoon</msg>
<status status="PASS" endtime="20170607 03:41:21.629" starttime="20170607 03:41:19.649"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:21.629">BMC Model=Witherspoon</msg>
<status status="PASS" endtime="20170607 03:41:21.629" starttime="20170607 03:41:21.629"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:21.630" starttime="20170607 03:41:19.649"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:21.630" starttime="20170607 03:41:19.649"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:41:21.632">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 03:41:21.632" starttime="20170607 03:41:21.632"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:21.632">${has_host} = False</msg>
<status status="PASS" endtime="20170607 03:41:21.632" starttime="20170607 03:41:21.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:21.633" starttime="20170607 03:41:21.633"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:21.633" starttime="20170607 03:41:21.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:21.635">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 03:41:21.635" starttime="20170607 03:41:21.635"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:21.636">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 03:41:21.636" starttime="20170607 03:41:21.635"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:21.636">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 03:41:21.636" starttime="20170607 03:41:21.636"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:21.637">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 03:41:21.637" starttime="20170607 03:41:21.636"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:21.637" starttime="20170607 03:41:21.634"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:21.637" starttime="20170607 03:41:21.634"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:41:21.638">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 03:41:21.638" starttime="20170607 03:41:21.638"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:21.638">${has_port} = False</msg>
<status status="PASS" endtime="20170607 03:41:21.638" starttime="20170607 03:41:21.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:21.641" starttime="20170607 03:41:21.640"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:21.641" starttime="20170607 03:41:21.641"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:21.642" starttime="20170607 03:41:21.640"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:21.642" starttime="20170607 03:41:21.639"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:21.642">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170607 03:41:23.496">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 03:41:23.496" starttime="20170607 03:41:21.642"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:23.496" starttime="20170607 03:41:21.631"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:23.497">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170607 03:41:23.575">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:41:23.576">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170607 03:41:23.576">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:41:23.576" starttime="20170607 03:41:23.497"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:23.577">Length is 0</msg>
<status status="PASS" endtime="20170607 03:41:23.577" starttime="20170607 03:41:23.576"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:23.577">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" endtime="20170607 03:41:23.577" starttime="20170607 03:41:23.496"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:23.578" starttime="20170607 03:41:23.577"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:23.578" starttime="20170607 03:41:21.630"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:23.578" starttime="20170607 03:41:21.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:23.578" starttime="20170607 03:41:23.578"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:23.579" starttime="20170607 03:41:17.530"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/29220/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/29220/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:23.619">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:41:23.620" starttime="20170607 03:41:23.619"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:23.621">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:41:23.621" starttime="20170607 03:41:23.620"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:23.622">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:41:23.622" starttime="20170607 03:41:23.621"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:23.622">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:41:23.622" starttime="20170607 03:41:23.622"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:23.867">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:41:23.867" starttime="20170607 03:41:23.623"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:23.867">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:41:23.868">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:23.868" starttime="20170607 03:41:23.623"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:23.868">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:23.868" starttime="20170607 03:41:23.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:23.869">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:23.869" starttime="20170607 03:41:23.869"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:23.869" starttime="20170607 03:41:23.618"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:23.869" starttime="20170607 03:41:23.618"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:23.870" starttime="20170607 03:41:23.617"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:23.874">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:41:23.875" starttime="20170607 03:41:23.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:23.875">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:41:23.875" starttime="20170607 03:41:23.875"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:23.876">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:41:23.876" starttime="20170607 03:41:23.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:23.877">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:41:23.877" starttime="20170607 03:41:23.876"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:24.065">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:41:24.065" starttime="20170607 03:41:23.877"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.065">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:41:24.065">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:24.065" starttime="20170607 03:41:23.877"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:24.066">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:24.066" starttime="20170607 03:41:24.066"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:24.067">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:24.067" starttime="20170607 03:41:24.066"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.067" starttime="20170607 03:41:23.873"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.067" starttime="20170607 03:41:23.873"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.067" starttime="20170607 03:41:23.872"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.068">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:41:24.068" starttime="20170607 03:41:24.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.070">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:41:24.070" starttime="20170607 03:41:24.069"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:24.071">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:41:24.071" starttime="20170607 03:41:24.071"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.071" starttime="20170607 03:41:24.070"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.071" starttime="20170607 03:41:24.069"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.071" starttime="20170607 03:41:24.068"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.147">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:41:24.147">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:24.147" starttime="20170607 03:41:24.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.149">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:41:24.149" starttime="20170607 03:41:24.148"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:24.150">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:41:24.150" starttime="20170607 03:41:24.150"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.150" starttime="20170607 03:41:24.149"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.150" starttime="20170607 03:41:24.148"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.150" starttime="20170607 03:41:24.147"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.150">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:24.150" starttime="20170607 03:41:23.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:24.151">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:24.151" starttime="20170607 03:41:24.151"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.152">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:41:24.152">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:41:24.152">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:41:24.152" starttime="20170607 03:41:24.151"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.152">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:41:24.152" starttime="20170607 03:41:23.871"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.152">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:41:24.153" starttime="20170607 03:41:23.871"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:41:24.154">Running != Quiesced</msg>
<status status="FAIL" endtime="20170607 03:41:24.154" starttime="20170607 03:41:24.153"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.154">${status} = False</msg>
<status status="PASS" endtime="20170607 03:41:24.154" starttime="20170607 03:41:24.153"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.155">${status} = False</msg>
<status status="PASS" endtime="20170607 03:41:24.155" starttime="20170607 03:41:23.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.155" starttime="20170607 03:41:24.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.156" starttime="20170607 03:41:24.156"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.157">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170607 03:41:24.158" starttime="20170607 03:41:24.157"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.167">${FFDC_DIR_PATH} = </msg>
<status status="PASS" endtime="20170607 03:41:24.167" starttime="20170607 03:41:24.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.169">${cur_time} = 2017-06-07 03:41:24:168334</msg>
<status status="PASS" endtime="20170607 03:41:24.169" starttime="20170607 03:41:24.168"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.169">${cur_time} = 20170607034124168334</msg>
<status status="PASS" endtime="20170607 03:41:24.169" starttime="20170607 03:41:24.169"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.169" starttime="20170607 03:41:24.168"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.174">${FFDC_TIME} = 20170607034124168334</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.175">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" endtime="20170607 03:41:24.175" starttime="20170607 03:41:24.175"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.176">${suite_name} = 20170607034124168334_TestsSecurityTestSsl</msg>
<status status="PASS" endtime="20170607 03:41:24.176" starttime="20170607 03:41:24.175"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.176">${test_name} = TestSSLConnection</msg>
<status status="PASS" endtime="20170607 03:41:24.176" starttime="20170607 03:41:24.176"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.177">${test_name} = 20170607034124168334_TestSSLConnection</msg>
<status status="PASS" endtime="20170607 03:41:24.177" starttime="20170607 03:41:24.176"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.177" starttime="20170607 03:41:24.174"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.177">${FFDC_DIR_PATH} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034124168334_TestsSecurityTestSsl/20170607034124168334_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170607 03:41:24.182">${FFDC_PREFIX} = 20170607034124168334_</msg>
<status status="PASS" endtime="20170607 03:41:24.182" starttime="20170607 03:41:24.167"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.182" starttime="20170607 03:41:24.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.183" starttime="20170607 03:41:24.183"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:24.184" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs"&gt;/tmp/fspcibld/29220/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:41:24.184" starttime="20170607 03:41:24.183"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:41:24.185">File '/tmp/fspcibld/29220/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170607 03:41:24.185" starttime="20170607 03:41:24.185"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.185">${exist} = False</msg>
<status status="PASS" endtime="20170607 03:41:24.185" starttime="20170607 03:41:24.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:24.186" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:41:24.187" starttime="20170607 03:41:24.186"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.187" starttime="20170607 03:41:24.186"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.187" starttime="20170607 03:41:24.187"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.188">${cur_time} = 2017-06-07 03:41:24:188098</msg>
<status status="PASS" endtime="20170607 03:41:24.188" starttime="20170607 03:41:24.188"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.189">${cur_time} = 20170607034124188098</msg>
<status status="PASS" endtime="20170607 03:41:24.189" starttime="20170607 03:41:24.189"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.189">${cur_time} = 20170607034124188098</msg>
<status status="PASS" endtime="20170607 03:41:24.189" starttime="20170607 03:41:24.187"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:24.190" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:41:24.190" starttime="20170607 03:41:24.189"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.190" starttime="20170607 03:41:24.157"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.190" starttime="20170607 03:41:23.870"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" critical="yes" endtime="20170607 03:41:24.190" starttime="20170607 03:41:23.617"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170607 03:41:24.191">Delete All Sessions</msg>
<status status="PASS" endtime="20170607 03:41:24.191" starttime="20170607 03:41:24.191"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" endtime="20170607 03:41:24.191" starttime="20170607 03:41:23.581"></status>
</suite>
<status status="PASS" endtime="20170607 03:41:24.193" starttime="20170607 03:41:23.579"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/29220/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.233">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 03:41:24.233" starttime="20170607 03:41:24.233"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.234">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 03:41:24.234" starttime="20170607 03:41:24.233"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.234">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 03:41:24.234" starttime="20170607 03:41:24.232"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.236">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 03:41:24.236" starttime="20170607 03:41:24.235"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.236">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 03:41:24.236" starttime="20170607 03:41:24.236"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.237">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 03:41:24.237" starttime="20170607 03:41:24.235"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.237">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170607 03:41:24.237" starttime="20170607 03:41:24.237"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.238" starttime="20170607 03:41:24.238"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.244">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170607 03:41:24.250">${rc} = 0</msg>
<msg level="INFO" timestamp="20170607 03:41:24.250">${output} = /tmp/fspcibld/29220/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170607 03:41:24.250" starttime="20170607 03:41:24.238"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.253" starttime="20170607 03:41:24.253"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.254" starttime="20170607 03:41:24.254"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.255">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170607 03:41:24.255" starttime="20170607 03:41:24.255"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.255">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170607 03:41:24.255" starttime="20170607 03:41:24.237"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.257">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170607 03:41:24.257" starttime="20170607 03:41:24.256"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.258" starttime="20170607 03:41:24.257"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.261">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170607 03:41:24.276">${rc} = 0</msg>
<msg level="INFO" timestamp="20170607 03:41:24.276">${os_con_pid} = </msg>
<status status="PASS" endtime="20170607 03:41:24.276" starttime="20170607 03:41:24.258"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.280" starttime="20170607 03:41:24.279"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.281">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170607 03:41:24.281" starttime="20170607 03:41:24.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.282" starttime="20170607 03:41:24.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.283">${rc} = None</msg>
<msg level="INFO" timestamp="20170607 03:41:24.283">${output} = None</msg>
<status status="PASS" endtime="20170607 03:41:24.283" starttime="20170607 03:41:24.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.283" starttime="20170607 03:41:24.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.284" starttime="20170607 03:41:24.284"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.285">${output} = </msg>
<status status="PASS" endtime="20170607 03:41:24.285" starttime="20170607 03:41:24.284"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.286">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170607 03:41:24.286" starttime="20170607 03:41:24.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.322" starttime="20170607 03:41:24.287"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.323">${rc} = 1</msg>
<msg level="INFO" timestamp="20170607 03:41:24.323">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170607 03:41:24.323" starttime="20170607 03:41:24.287"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.323">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status status="PASS" endtime="20170607 03:41:24.324" starttime="20170607 03:41:24.234"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:24.326" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:41:24.326" starttime="20170607 03:41:24.325"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.327">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170607 03:41:24.327" starttime="20170607 03:41:24.327"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.328" starttime="20170607 03:41:24.327"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.331">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170607 03:41:24.335">${rc} = 0</msg>
<msg level="INFO" timestamp="20170607 03:41:24.335">${output} = /tmp/fspcibld/29220/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170607 03:41:24.335" starttime="20170607 03:41:24.328"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.338" starttime="20170607 03:41:24.337"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.339" starttime="20170607 03:41:24.338"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.340">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170607 03:41:24.340" starttime="20170607 03:41:24.339"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:24.340">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170607 03:41:24.340" starttime="20170607 03:41:24.326"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.341">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" endtime="20170607 03:41:24.341" starttime="20170607 03:41:24.340"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.341" starttime="20170607 03:41:24.341"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.345">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170607 03:41:24.348">${rc} = 0</msg>
<msg level="INFO" timestamp="20170607 03:41:24.348">${output} = </msg>
<status status="PASS" endtime="20170607 03:41:24.348" starttime="20170607 03:41:24.342"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:24.351" starttime="20170607 03:41:24.351"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:24.352" starttime="20170607 03:41:24.232"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:24.353">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.355">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170607 03:41:24.355" starttime="20170607 03:41:24.354"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.356">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170607 03:41:24.356" starttime="20170607 03:41:24.355"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:24.360">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:41:24.361" starttime="20170607 03:41:24.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.362">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:41:24.362" starttime="20170607 03:41:24.362"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.363">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:41:24.363" starttime="20170607 03:41:24.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:24.365">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:41:24.365" starttime="20170607 03:41:24.364"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:25.126">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:41:25.127" starttime="20170607 03:41:24.366"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:25.127">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:41:25.127">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:25.127" starttime="20170607 03:41:24.365"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:25.128">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:25.128" starttime="20170607 03:41:25.127"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:25.128">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:25.129" starttime="20170607 03:41:25.128"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:25.129" starttime="20170607 03:41:24.359"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:25.129" starttime="20170607 03:41:24.358"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:25.129" starttime="20170607 03:41:24.357"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:25.129">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170607 03:41:25.129" starttime="20170607 03:41:25.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:25.130">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:41:25.130" starttime="20170607 03:41:25.130"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:25.131" starttime="20170607 03:41:25.130"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:25.132">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" endtime="20170607 03:41:25.132" starttime="20170607 03:41:25.131"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:25.133">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170607 03:41:25.133" starttime="20170607 03:41:25.133"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:25.133" starttime="20170607 03:41:25.132"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:25.133" starttime="20170607 03:41:25.131"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:25.727">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170607 03:41:25.727">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:25.727" starttime="20170607 03:41:25.134"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:25.729">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:41:25.729" starttime="20170607 03:41:25.728"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:25.730">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:41:25.730" starttime="20170607 03:41:25.729"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:25.730" starttime="20170607 03:41:25.729"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:25.730" starttime="20170607 03:41:25.727"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:25.730">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:25.730" starttime="20170607 03:41:24.356"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:25.731">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:25.731" starttime="20170607 03:41:25.731"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:25.732">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:41:25.732">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:41:25.732">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:41:25.732" starttime="20170607 03:41:25.731"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:25.732" starttime="20170607 03:41:24.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170607 03:41:25.732" starttime="20170607 03:41:25.732"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:25.737">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:41:25.737" starttime="20170607 03:41:25.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:25.738">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:41:25.738" starttime="20170607 03:41:25.737"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:25.738">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:41:25.738" starttime="20170607 03:41:25.738"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:25.739">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:41:25.739" starttime="20170607 03:41:25.739"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:27.311">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:41:27.311" starttime="20170607 03:41:25.740"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:27.311">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:41:27.311">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:27.311" starttime="20170607 03:41:25.739"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:27.312">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:27.312" starttime="20170607 03:41:27.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:27.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:27.313" starttime="20170607 03:41:27.312"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:27.313" starttime="20170607 03:41:25.736"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:27.313" starttime="20170607 03:41:25.736"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:27.313" starttime="20170607 03:41:25.735"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:27.314">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:41:27.314" starttime="20170607 03:41:27.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:27.316">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:41:27.316" starttime="20170607 03:41:27.315"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:27.317">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:41:27.317" starttime="20170607 03:41:27.317"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:27.317" starttime="20170607 03:41:27.316"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:27.318" starttime="20170607 03:41:27.315"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:27.318" starttime="20170607 03:41:27.314"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:28.448">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:41:28.448">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:28.448" starttime="20170607 03:41:27.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:28.451">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:41:28.451" starttime="20170607 03:41:28.450"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:28.451">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:41:28.452" starttime="20170607 03:41:28.451"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:28.452" starttime="20170607 03:41:28.451"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:28.452" starttime="20170607 03:41:28.449"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:28.452" starttime="20170607 03:41:28.449"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:28.452">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:28.452" starttime="20170607 03:41:25.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:28.453">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:28.453" starttime="20170607 03:41:28.452"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:28.453">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:41:28.453">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:41:28.454">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:41:28.454" starttime="20170607 03:41:28.453"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:28.454">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:41:28.454" starttime="20170607 03:41:25.734"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:28.454">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:41:28.454" starttime="20170607 03:41:25.733"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:41:28.455">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:41:28.455" starttime="20170607 03:41:28.455"></status>
</kw>
<status status="FAIL" endtime="20170607 03:41:28.455" starttime="20170607 03:41:25.733"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:38.461">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:41:38.462" starttime="20170607 03:41:38.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:38.463">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:41:38.463" starttime="20170607 03:41:38.462"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:38.463">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:41:38.463" starttime="20170607 03:41:38.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:38.464">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:41:38.464" starttime="20170607 03:41:38.464"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:38.656">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:41:38.656" starttime="20170607 03:41:38.465"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:38.656">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:41:38.656">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:38.656" starttime="20170607 03:41:38.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:38.657">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:38.657" starttime="20170607 03:41:38.656"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:38.657">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:38.658" starttime="20170607 03:41:38.657"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:38.658" starttime="20170607 03:41:38.460"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:38.658" starttime="20170607 03:41:38.460"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:38.658" starttime="20170607 03:41:38.459"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:38.659">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:41:38.659" starttime="20170607 03:41:38.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:38.661">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:41:38.661" starttime="20170607 03:41:38.660"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:38.662">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:41:38.662" starttime="20170607 03:41:38.662"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:38.662" starttime="20170607 03:41:38.661"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:38.662" starttime="20170607 03:41:38.659"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:38.662" starttime="20170607 03:41:38.659"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:38.751">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:41:38.751">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:38.751" starttime="20170607 03:41:38.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:38.753">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:41:38.753" starttime="20170607 03:41:38.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:38.754">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:41:38.754" starttime="20170607 03:41:38.754"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:38.754" starttime="20170607 03:41:38.753"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:38.755" starttime="20170607 03:41:38.752"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:38.755" starttime="20170607 03:41:38.751"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:38.755">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:38.755" starttime="20170607 03:41:38.458"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:38.756">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:38.756" starttime="20170607 03:41:38.755"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:38.756">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:41:38.756">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:41:38.756">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:41:38.756" starttime="20170607 03:41:38.756"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:38.757">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:41:38.757" starttime="20170607 03:41:38.457"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:38.757">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:41:38.757" starttime="20170607 03:41:38.457"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:41:38.758">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:41:38.758" starttime="20170607 03:41:38.757"></status>
</kw>
<status status="FAIL" endtime="20170607 03:41:38.758" starttime="20170607 03:41:38.456"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:48.763">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:41:48.763" starttime="20170607 03:41:48.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:48.764">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:41:48.764" starttime="20170607 03:41:48.763"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:48.764">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:41:48.764" starttime="20170607 03:41:48.764"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:48.765">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:41:48.765" starttime="20170607 03:41:48.765"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:48.953">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:41:48.953" starttime="20170607 03:41:48.766"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:48.953">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:41:48.953">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:48.953" starttime="20170607 03:41:48.765"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:48.954">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:48.954" starttime="20170607 03:41:48.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:48.955">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:48.956" starttime="20170607 03:41:48.955"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:48.956" starttime="20170607 03:41:48.762"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:48.956" starttime="20170607 03:41:48.761"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:48.956" starttime="20170607 03:41:48.761"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:48.956">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:41:48.956" starttime="20170607 03:41:48.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:48.959">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:41:48.959" starttime="20170607 03:41:48.958"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:48.960">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:41:48.960" starttime="20170607 03:41:48.959"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:48.960" starttime="20170607 03:41:48.959"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:48.960" starttime="20170607 03:41:48.957"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:48.960" starttime="20170607 03:41:48.957"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:49.025">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:41:49.025">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:49.025" starttime="20170607 03:41:48.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:49.027">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:41:49.027" starttime="20170607 03:41:49.027"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:49.028">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:41:49.028" starttime="20170607 03:41:49.028"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:49.028" starttime="20170607 03:41:49.027"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:49.028" starttime="20170607 03:41:49.026"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:49.029" starttime="20170607 03:41:49.026"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:49.029">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:49.029" starttime="20170607 03:41:48.760"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:49.029">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:49.029" starttime="20170607 03:41:49.029"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:49.030">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:41:49.030">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:41:49.030">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:41:49.030" starttime="20170607 03:41:49.030"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:49.030">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:41:49.030" starttime="20170607 03:41:48.759"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:49.031">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:41:49.031" starttime="20170607 03:41:48.759"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:41:49.031">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:41:49.031" starttime="20170607 03:41:49.031"></status>
</kw>
<status status="FAIL" endtime="20170607 03:41:49.032" starttime="20170607 03:41:48.758"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:59.037">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:41:59.037" starttime="20170607 03:41:59.037"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:59.038">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:41:59.038" starttime="20170607 03:41:59.038"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:59.039">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:41:59.039" starttime="20170607 03:41:59.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:59.040">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:41:59.040" starttime="20170607 03:41:59.039"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:59.331">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:41:59.331" starttime="20170607 03:41:59.040"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:59.331">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:41:59.331">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:59.331" starttime="20170607 03:41:59.040"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:59.332">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:59.332" starttime="20170607 03:41:59.331"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:59.332">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:59.333" starttime="20170607 03:41:59.332"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:59.333" starttime="20170607 03:41:59.036"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:59.333" starttime="20170607 03:41:59.035"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:59.333" starttime="20170607 03:41:59.035"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:59.333">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:41:59.334" starttime="20170607 03:41:59.333"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:59.336">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:41:59.336" starttime="20170607 03:41:59.335"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:59.337">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:41:59.337" starttime="20170607 03:41:59.336"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:59.337" starttime="20170607 03:41:59.336"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:59.337" starttime="20170607 03:41:59.334"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:59.337" starttime="20170607 03:41:59.334"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:59.481">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:41:59.481">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:59.481" starttime="20170607 03:41:59.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:59.483">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:41:59.483" starttime="20170607 03:41:59.482"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:59.486">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:41:59.486" starttime="20170607 03:41:59.484"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:59.486" starttime="20170607 03:41:59.483"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:59.486" starttime="20170607 03:41:59.482"></status>
</kw>
<status status="PASS" endtime="20170607 03:41:59.487" starttime="20170607 03:41:59.481"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:59.487">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:41:59.487" starttime="20170607 03:41:59.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:41:59.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:41:59.488" starttime="20170607 03:41:59.487"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:41:59.488">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:41:59.488">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:41:59.488">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:41:59.488" starttime="20170607 03:41:59.488"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:59.489">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:41:59.489" starttime="20170607 03:41:59.033"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:41:59.489">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:41:59.489" starttime="20170607 03:41:59.033"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:41:59.490">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:41:59.490" starttime="20170607 03:41:59.489"></status>
</kw>
<status status="FAIL" endtime="20170607 03:41:59.490" starttime="20170607 03:41:59.032"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:09.495">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:42:09.496" starttime="20170607 03:42:09.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:09.496">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:42:09.496" starttime="20170607 03:42:09.496"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:09.497">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:42:09.497" starttime="20170607 03:42:09.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:09.497">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:42:09.497" starttime="20170607 03:42:09.497"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:09.702">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:42:09.702" starttime="20170607 03:42:09.498"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:09.702">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:42:09.702">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:09.702" starttime="20170607 03:42:09.498"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:09.703">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:09.703" starttime="20170607 03:42:09.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:09.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:09.704" starttime="20170607 03:42:09.703"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:09.704" starttime="20170607 03:42:09.494"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:09.704" starttime="20170607 03:42:09.494"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:09.704" starttime="20170607 03:42:09.493"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:09.704">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:42:09.704" starttime="20170607 03:42:09.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:09.707">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:42:09.707" starttime="20170607 03:42:09.706"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:09.708">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:42:09.708" starttime="20170607 03:42:09.708"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:09.708" starttime="20170607 03:42:09.707"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:09.708" starttime="20170607 03:42:09.705"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:09.708" starttime="20170607 03:42:09.705"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:09.783">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:42:09.783">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:09.783" starttime="20170607 03:42:09.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:09.785">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:42:09.785" starttime="20170607 03:42:09.784"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:09.786">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:42:09.786" starttime="20170607 03:42:09.785"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:09.786" starttime="20170607 03:42:09.785"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:09.786" starttime="20170607 03:42:09.784"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:09.786" starttime="20170607 03:42:09.783"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:09.786">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:09.786" starttime="20170607 03:42:09.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:09.787">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:09.787" starttime="20170607 03:42:09.786"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:09.787">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:42:09.787">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:42:09.788">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:42:09.788" starttime="20170607 03:42:09.787"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:09.788">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:42:09.788" starttime="20170607 03:42:09.492"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:09.788">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:42:09.788" starttime="20170607 03:42:09.491"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:42:09.789">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:42:09.789" starttime="20170607 03:42:09.789"></status>
</kw>
<status status="FAIL" endtime="20170607 03:42:09.789" starttime="20170607 03:42:09.490"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:19.794">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:42:19.795" starttime="20170607 03:42:19.794"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:19.795">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:42:19.795" starttime="20170607 03:42:19.795"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:19.796">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:42:19.796" starttime="20170607 03:42:19.796"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:19.797">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:42:19.797" starttime="20170607 03:42:19.796"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:19.988">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:42:19.988" starttime="20170607 03:42:19.797"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:19.988">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:42:19.989">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:19.989" starttime="20170607 03:42:19.797"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:19.989">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:19.989" starttime="20170607 03:42:19.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:19.990">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:19.990" starttime="20170607 03:42:19.990"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:19.990" starttime="20170607 03:42:19.793"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:19.990" starttime="20170607 03:42:19.793"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:19.990" starttime="20170607 03:42:19.792"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:19.991">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:42:19.991" starttime="20170607 03:42:19.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:19.993">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:42:19.993" starttime="20170607 03:42:19.992"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:19.994">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:42:19.994" starttime="20170607 03:42:19.994"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:19.994" starttime="20170607 03:42:19.993"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:19.994" starttime="20170607 03:42:19.992"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:19.994" starttime="20170607 03:42:19.991"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:20.060">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:42:20.060">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:20.060" starttime="20170607 03:42:19.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:20.062">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:42:20.062" starttime="20170607 03:42:20.061"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:20.063">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:42:20.063" starttime="20170607 03:42:20.062"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:20.063" starttime="20170607 03:42:20.062"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:20.063" starttime="20170607 03:42:20.061"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:20.063" starttime="20170607 03:42:20.060"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:20.063">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:20.063" starttime="20170607 03:42:19.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:20.064">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:20.064" starttime="20170607 03:42:20.064"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:20.065">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:42:20.065">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:42:20.065">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:42:20.065" starttime="20170607 03:42:20.064"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:20.065">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:42:20.065" starttime="20170607 03:42:19.791"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:20.065">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:42:20.065" starttime="20170607 03:42:19.790"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:42:20.066">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:42:20.066" starttime="20170607 03:42:20.066"></status>
</kw>
<status status="FAIL" endtime="20170607 03:42:20.066" starttime="20170607 03:42:19.790"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:30.072">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:42:30.073" starttime="20170607 03:42:30.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:30.073">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:42:30.073" starttime="20170607 03:42:30.073"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:30.074">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:42:30.074" starttime="20170607 03:42:30.073"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:30.075">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:42:30.075" starttime="20170607 03:42:30.074"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:30.259">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:42:30.259" starttime="20170607 03:42:30.075"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:30.259">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:42:30.259">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:30.259" starttime="20170607 03:42:30.075"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:30.260">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:30.260" starttime="20170607 03:42:30.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:30.261">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:30.261" starttime="20170607 03:42:30.260"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:30.261" starttime="20170607 03:42:30.071"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:30.261" starttime="20170607 03:42:30.071"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:30.261" starttime="20170607 03:42:30.070"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:30.262">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:42:30.262" starttime="20170607 03:42:30.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:30.264">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:42:30.264" starttime="20170607 03:42:30.263"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:30.265">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:42:30.265" starttime="20170607 03:42:30.265"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:30.265" starttime="20170607 03:42:30.264"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:30.265" starttime="20170607 03:42:30.263"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:30.265" starttime="20170607 03:42:30.262"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:30.329">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:42:30.330">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:30.330" starttime="20170607 03:42:30.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:30.331">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:42:30.331" starttime="20170607 03:42:30.331"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:30.332">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:42:30.332" starttime="20170607 03:42:30.332"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:30.332" starttime="20170607 03:42:30.332"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:30.333" starttime="20170607 03:42:30.330"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:30.333" starttime="20170607 03:42:30.330"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:30.333">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:30.333" starttime="20170607 03:42:30.069"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:30.333">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:30.334" starttime="20170607 03:42:30.333"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:30.334">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:42:30.334">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:42:30.334">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:42:30.334" starttime="20170607 03:42:30.334"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:30.335">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:42:30.335" starttime="20170607 03:42:30.068"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:30.335">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:42:30.335" starttime="20170607 03:42:30.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:42:30.336">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:42:30.336" starttime="20170607 03:42:30.335"></status>
</kw>
<status status="FAIL" endtime="20170607 03:42:30.336" starttime="20170607 03:42:30.067"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:40.341">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:42:40.342" starttime="20170607 03:42:40.341"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:40.342">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:42:40.342" starttime="20170607 03:42:40.342"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:40.343">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:42:40.343" starttime="20170607 03:42:40.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:40.344">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:42:40.344" starttime="20170607 03:42:40.343"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:41.064">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:42:41.065" starttime="20170607 03:42:40.344"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:41.065">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:42:41.065">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:41.065" starttime="20170607 03:42:40.344"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:41.066">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:41.066" starttime="20170607 03:42:41.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:41.067">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:41.067" starttime="20170607 03:42:41.066"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:41.067" starttime="20170607 03:42:40.340"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:41.067" starttime="20170607 03:42:40.340"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:41.067" starttime="20170607 03:42:40.339"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:41.068">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:42:41.068" starttime="20170607 03:42:41.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:41.071">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:42:41.071" starttime="20170607 03:42:41.070"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:41.072">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:42:41.073" starttime="20170607 03:42:41.072"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:41.073" starttime="20170607 03:42:41.071"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:41.073" starttime="20170607 03:42:41.069"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:41.073" starttime="20170607 03:42:41.069"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:41.253">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:42:41.254">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:41.254" starttime="20170607 03:42:41.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:41.256">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:42:41.256" starttime="20170607 03:42:41.255"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:41.257">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:42:41.257" starttime="20170607 03:42:41.256"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:41.257" starttime="20170607 03:42:41.256"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:41.257" starttime="20170607 03:42:41.255"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:41.257" starttime="20170607 03:42:41.254"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:41.257">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:41.257" starttime="20170607 03:42:40.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:41.258">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:41.258" starttime="20170607 03:42:41.258"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:41.259">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:42:41.259">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:42:41.259">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:42:41.259" starttime="20170607 03:42:41.258"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:41.259">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:42:41.259" starttime="20170607 03:42:40.338"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:41.259">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:42:41.259" starttime="20170607 03:42:40.337"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:42:41.260">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:42:41.260" starttime="20170607 03:42:41.260"></status>
</kw>
<status status="FAIL" endtime="20170607 03:42:41.260" starttime="20170607 03:42:40.336"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:51.266">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:42:51.266" starttime="20170607 03:42:51.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:51.267">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:42:51.267" starttime="20170607 03:42:51.267"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:51.268">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:42:51.268" starttime="20170607 03:42:51.267"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:51.268">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:42:51.268" starttime="20170607 03:42:51.268"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:51.898">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:42:51.898" starttime="20170607 03:42:51.269"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:51.898">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:42:51.898">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:51.898" starttime="20170607 03:42:51.269"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:51.899">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:51.899" starttime="20170607 03:42:51.899"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:51.900">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:51.900" starttime="20170607 03:42:51.899"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:51.900" starttime="20170607 03:42:51.265"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:51.901" starttime="20170607 03:42:51.264"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:51.901" starttime="20170607 03:42:51.263"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:51.901">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:42:51.901" starttime="20170607 03:42:51.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:51.903">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:42:51.903" starttime="20170607 03:42:51.903"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:51.904">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:42:51.904" starttime="20170607 03:42:51.904"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:51.905" starttime="20170607 03:42:51.904"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:51.905" starttime="20170607 03:42:51.902"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:51.905" starttime="20170607 03:42:51.902"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:52.085">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:42:52.085">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:52.085" starttime="20170607 03:42:51.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:52.087">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:42:52.087" starttime="20170607 03:42:52.086"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:52.088">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:42:52.089" starttime="20170607 03:42:52.088"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:52.089" starttime="20170607 03:42:52.087"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:52.089" starttime="20170607 03:42:52.086"></status>
</kw>
<status status="PASS" endtime="20170607 03:42:52.089" starttime="20170607 03:42:52.085"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:52.089">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:42:52.089" starttime="20170607 03:42:51.263"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:42:52.090">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:42:52.090" starttime="20170607 03:42:52.089"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:42:52.090">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:42:52.090">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:42:52.091">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:42:52.091" starttime="20170607 03:42:52.090"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:52.091">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:42:52.091" starttime="20170607 03:42:51.262"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:42:52.091">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:42:52.091" starttime="20170607 03:42:51.262"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:42:52.092">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:42:52.092" starttime="20170607 03:42:52.091"></status>
</kw>
<status status="FAIL" endtime="20170607 03:42:52.092" starttime="20170607 03:42:51.261"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:02.098">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:43:02.098" starttime="20170607 03:43:02.097"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:02.099">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:43:02.099" starttime="20170607 03:43:02.099"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:02.100">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:43:02.100" starttime="20170607 03:43:02.099"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:02.100">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:43:02.100" starttime="20170607 03:43:02.100"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:02.284">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:43:02.285" starttime="20170607 03:43:02.101"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:02.285">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:43:02.285">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:02.285" starttime="20170607 03:43:02.101"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:02.285">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:02.286" starttime="20170607 03:43:02.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:02.287">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:02.287" starttime="20170607 03:43:02.286"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:02.287" starttime="20170607 03:43:02.097"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:02.287" starttime="20170607 03:43:02.096"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:02.287" starttime="20170607 03:43:02.096"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:02.288">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:43:02.288" starttime="20170607 03:43:02.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:02.290">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:43:02.290" starttime="20170607 03:43:02.289"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:02.291">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:43:02.291" starttime="20170607 03:43:02.290"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:02.291" starttime="20170607 03:43:02.290"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:02.291" starttime="20170607 03:43:02.288"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:02.291" starttime="20170607 03:43:02.288"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:02.357">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:43:02.357">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:02.357" starttime="20170607 03:43:02.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:02.359">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:43:02.359" starttime="20170607 03:43:02.358"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:02.360">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:43:02.360" starttime="20170607 03:43:02.360"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:02.360" starttime="20170607 03:43:02.359"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:02.360" starttime="20170607 03:43:02.358"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:02.360" starttime="20170607 03:43:02.357"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:02.360">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:02.360" starttime="20170607 03:43:02.095"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:02.361">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:02.361" starttime="20170607 03:43:02.361"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:02.362">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:43:02.362">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:43:02.362">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:43:02.362" starttime="20170607 03:43:02.361"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:02.362">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:43:02.362" starttime="20170607 03:43:02.094"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:02.363">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:43:02.363" starttime="20170607 03:43:02.094"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:43:02.363">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:43:02.363" starttime="20170607 03:43:02.363"></status>
</kw>
<status status="FAIL" endtime="20170607 03:43:02.363" starttime="20170607 03:43:02.093"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:12.369">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:43:12.369" starttime="20170607 03:43:12.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:12.370">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:43:12.370" starttime="20170607 03:43:12.370"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:12.371">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:43:12.371" starttime="20170607 03:43:12.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:12.371">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:43:12.371" starttime="20170607 03:43:12.371"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:12.620">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:43:12.620" starttime="20170607 03:43:12.372"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:12.621">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:43:12.621">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:12.621" starttime="20170607 03:43:12.372"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:12.621">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:12.622" starttime="20170607 03:43:12.621"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:12.622">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:12.622" starttime="20170607 03:43:12.622"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:12.623" starttime="20170607 03:43:12.368"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:12.623" starttime="20170607 03:43:12.367"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:12.623" starttime="20170607 03:43:12.366"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:12.623">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:43:12.623" starttime="20170607 03:43:12.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:12.626">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:43:12.626" starttime="20170607 03:43:12.625"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:12.626">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:43:12.627" starttime="20170607 03:43:12.626"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:12.627" starttime="20170607 03:43:12.626"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:12.627" starttime="20170607 03:43:12.624"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:12.627" starttime="20170607 03:43:12.624"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:12.736">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:43:12.736">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:12.736" starttime="20170607 03:43:12.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:12.738">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:43:12.738" starttime="20170607 03:43:12.737"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:12.739">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:43:12.739" starttime="20170607 03:43:12.738"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:12.739" starttime="20170607 03:43:12.738"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:12.739" starttime="20170607 03:43:12.737"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:12.739" starttime="20170607 03:43:12.736"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:12.740">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:12.740" starttime="20170607 03:43:12.366"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:12.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:12.742" starttime="20170607 03:43:12.741"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:12.742">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:43:12.742">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:43:12.742">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:43:12.742" starttime="20170607 03:43:12.742"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:12.743">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:43:12.743" starttime="20170607 03:43:12.365"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:12.743">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:43:12.743" starttime="20170607 03:43:12.365"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:43:12.744">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:43:12.744" starttime="20170607 03:43:12.743"></status>
</kw>
<status status="FAIL" endtime="20170607 03:43:12.744" starttime="20170607 03:43:12.364"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:22.749">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:43:22.750" starttime="20170607 03:43:22.749"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:22.750">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:43:22.750" starttime="20170607 03:43:22.750"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:22.751">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:43:22.751" starttime="20170607 03:43:22.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:22.751">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:43:22.752" starttime="20170607 03:43:22.751"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:22.934">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:43:22.934" starttime="20170607 03:43:22.752"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:22.934">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:43:22.934">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:22.934" starttime="20170607 03:43:22.752"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:22.935">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:22.935" starttime="20170607 03:43:22.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:22.936">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:22.936" starttime="20170607 03:43:22.935"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:22.936" starttime="20170607 03:43:22.748"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:22.936" starttime="20170607 03:43:22.748"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:22.937" starttime="20170607 03:43:22.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:22.937">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:43:22.937" starttime="20170607 03:43:22.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:22.939">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:43:22.939" starttime="20170607 03:43:22.938"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:22.940">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:43:22.940" starttime="20170607 03:43:22.940"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:22.940" starttime="20170607 03:43:22.939"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:22.941" starttime="20170607 03:43:22.938"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:22.941" starttime="20170607 03:43:22.937"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:23.028">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:43:23.028">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:23.029" starttime="20170607 03:43:22.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:23.031">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:43:23.031" starttime="20170607 03:43:23.030"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:23.032">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:43:23.032" starttime="20170607 03:43:23.031"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:23.032" starttime="20170607 03:43:23.031"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:23.032" starttime="20170607 03:43:23.030"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:23.032" starttime="20170607 03:43:23.029"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:23.032">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:23.032" starttime="20170607 03:43:22.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:23.033">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:23.033" starttime="20170607 03:43:23.033"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:23.034">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:43:23.034">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:43:23.034">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:43:23.034" starttime="20170607 03:43:23.033"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:23.034">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:43:23.034" starttime="20170607 03:43:22.746"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:23.034">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:43:23.034" starttime="20170607 03:43:22.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:43:23.035">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:43:23.035" starttime="20170607 03:43:23.035"></status>
</kw>
<status status="FAIL" endtime="20170607 03:43:23.035" starttime="20170607 03:43:22.744"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:33.043">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:43:33.044" starttime="20170607 03:43:33.043"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:33.044">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:43:33.044" starttime="20170607 03:43:33.044"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:33.045">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:43:33.045" starttime="20170607 03:43:33.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:33.046">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:43:33.046" starttime="20170607 03:43:33.045"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:33.230">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:43:33.230" starttime="20170607 03:43:33.046"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:33.230">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:43:33.230">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:33.230" starttime="20170607 03:43:33.046"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:33.231">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:33.231" starttime="20170607 03:43:33.231"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:33.232">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:33.232" starttime="20170607 03:43:33.231"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:33.232" starttime="20170607 03:43:33.039"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:33.232" starttime="20170607 03:43:33.039"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:33.232" starttime="20170607 03:43:33.038"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:33.233">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:43:33.233" starttime="20170607 03:43:33.232"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:33.235">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:43:33.235" starttime="20170607 03:43:33.234"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:33.236">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:43:33.236" starttime="20170607 03:43:33.236"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:33.236" starttime="20170607 03:43:33.235"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:33.236" starttime="20170607 03:43:33.234"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:33.236" starttime="20170607 03:43:33.233"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:33.300">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:43:33.300">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:33.300" starttime="20170607 03:43:33.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:33.302">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:43:33.302" starttime="20170607 03:43:33.301"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:33.303">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:43:33.303" starttime="20170607 03:43:33.302"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:33.303" starttime="20170607 03:43:33.302"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:33.303" starttime="20170607 03:43:33.301"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:33.303" starttime="20170607 03:43:33.300"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:33.304">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:33.304" starttime="20170607 03:43:33.037"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:33.304">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:33.304" starttime="20170607 03:43:33.304"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:33.305">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:43:33.305">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:43:33.305">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:43:33.305" starttime="20170607 03:43:33.304"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:33.305">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:43:33.305" starttime="20170607 03:43:33.037"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:33.306">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:43:33.306" starttime="20170607 03:43:33.036"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:43:33.306">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:43:33.306" starttime="20170607 03:43:33.306"></status>
</kw>
<status status="FAIL" endtime="20170607 03:43:33.306" starttime="20170607 03:43:33.036"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:43.312">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:43:43.312" starttime="20170607 03:43:43.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:43.313">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:43:43.313" starttime="20170607 03:43:43.312"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:43.313">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:43:43.313" starttime="20170607 03:43:43.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:43.314">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:43:43.314" starttime="20170607 03:43:43.314"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:43.634">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:43:43.634" starttime="20170607 03:43:43.315"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:43.634">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:43:43.635">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:43.635" starttime="20170607 03:43:43.314"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:43.635">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:43.635" starttime="20170607 03:43:43.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:43.636">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:43.636" starttime="20170607 03:43:43.636"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:43.636" starttime="20170607 03:43:43.311"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:43.637" starttime="20170607 03:43:43.310"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:43.637" starttime="20170607 03:43:43.310"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:43.637">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:43:43.638" starttime="20170607 03:43:43.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:43.640">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:43:43.640" starttime="20170607 03:43:43.640"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:43.641">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:43:43.641" starttime="20170607 03:43:43.641"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:43.641" starttime="20170607 03:43:43.640"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:43.642" starttime="20170607 03:43:43.639"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:43.642" starttime="20170607 03:43:43.638"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:43.823">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:43:43.823">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:43.823" starttime="20170607 03:43:43.642"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:43.825">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:43:43.825" starttime="20170607 03:43:43.824"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:43.826">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:43:43.826" starttime="20170607 03:43:43.826"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:43.826" starttime="20170607 03:43:43.825"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:43.826" starttime="20170607 03:43:43.824"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:43.826" starttime="20170607 03:43:43.823"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:43.826">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:43.826" starttime="20170607 03:43:43.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:43.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:43.827" starttime="20170607 03:43:43.827"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:43.828">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:43:43.828">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:43:43.828">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:43:43.828" starttime="20170607 03:43:43.827"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:43.828">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:43:43.828" starttime="20170607 03:43:43.308"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:43.828">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:43:43.829" starttime="20170607 03:43:43.308"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:43:43.829">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:43:43.829" starttime="20170607 03:43:43.829"></status>
</kw>
<status status="FAIL" endtime="20170607 03:43:43.829" starttime="20170607 03:43:43.307"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:53.835">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:43:53.836" starttime="20170607 03:43:53.834"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:53.836">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:43:53.836" starttime="20170607 03:43:53.836"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:53.837">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:43:53.837" starttime="20170607 03:43:53.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:53.837">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:43:53.838" starttime="20170607 03:43:53.837"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:54.018">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:43:54.019" starttime="20170607 03:43:53.838"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:54.019">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:43:54.019">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:54.019" starttime="20170607 03:43:53.838"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:54.020">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:54.020" starttime="20170607 03:43:54.019"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:54.020">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:54.020" starttime="20170607 03:43:54.020"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:54.021" starttime="20170607 03:43:53.834"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:54.021" starttime="20170607 03:43:53.833"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:54.021" starttime="20170607 03:43:53.833"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:54.021">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:43:54.021" starttime="20170607 03:43:54.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:54.024">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:43:54.024" starttime="20170607 03:43:54.023"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:54.024">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:43:54.025" starttime="20170607 03:43:54.024"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:54.025" starttime="20170607 03:43:54.024"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:54.025" starttime="20170607 03:43:54.022"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:54.025" starttime="20170607 03:43:54.022"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:54.093">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:43:54.093">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:54.094" starttime="20170607 03:43:54.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:54.096">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:43:54.096" starttime="20170607 03:43:54.095"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:54.097">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:43:54.097" starttime="20170607 03:43:54.096"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:54.097" starttime="20170607 03:43:54.096"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:54.097" starttime="20170607 03:43:54.095"></status>
</kw>
<status status="PASS" endtime="20170607 03:43:54.097" starttime="20170607 03:43:54.094"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:54.097">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:43:54.097" starttime="20170607 03:43:53.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:43:54.098">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:43:54.098" starttime="20170607 03:43:54.098"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:43:54.098">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:43:54.099">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:43:54.099">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:43:54.099" starttime="20170607 03:43:54.098"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:54.099">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:43:54.099" starttime="20170607 03:43:53.831"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:43:54.099">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:43:54.099" starttime="20170607 03:43:53.831"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:43:54.100">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:43:54.100" starttime="20170607 03:43:54.100"></status>
</kw>
<status status="FAIL" endtime="20170607 03:43:54.100" starttime="20170607 03:43:53.830"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:04.106">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:44:04.106" starttime="20170607 03:44:04.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:04.107">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:44:04.107" starttime="20170607 03:44:04.107"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:04.108">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:44:04.108" starttime="20170607 03:44:04.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:04.108">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:44:04.108" starttime="20170607 03:44:04.108"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:04.314">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:44:04.314" starttime="20170607 03:44:04.109"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:04.315">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:04.315">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:04.315" starttime="20170607 03:44:04.109"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:04.315">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:04.316" starttime="20170607 03:44:04.315"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:04.316">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:04.316" starttime="20170607 03:44:04.316"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:04.316" starttime="20170607 03:44:04.105"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:04.316" starttime="20170607 03:44:04.105"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:04.317" starttime="20170607 03:44:04.104"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:04.317">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:44:04.317" starttime="20170607 03:44:04.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:04.319">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:44:04.319" starttime="20170607 03:44:04.319"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:04.320">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:44:04.320" starttime="20170607 03:44:04.320"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:04.320" starttime="20170607 03:44:04.319"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:04.320" starttime="20170607 03:44:04.318"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:04.320" starttime="20170607 03:44:04.317"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:04.441">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:44:04.442">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:04.442" starttime="20170607 03:44:04.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:04.443">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:44:04.443" starttime="20170607 03:44:04.443"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:04.444">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:44:04.444" starttime="20170607 03:44:04.444"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:04.445" starttime="20170607 03:44:04.444"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:04.445" starttime="20170607 03:44:04.442"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:04.445" starttime="20170607 03:44:04.442"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:04.445">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:04.445" starttime="20170607 03:44:04.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:04.446">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:04.446" starttime="20170607 03:44:04.445"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:04.446">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:44:04.446">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:44:04.446">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:44:04.446" starttime="20170607 03:44:04.446"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:04.447">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:44:04.447" starttime="20170607 03:44:04.102"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:04.447">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:44:04.447" starttime="20170607 03:44:04.102"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:04.448">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:44:04.448" starttime="20170607 03:44:04.447"></status>
</kw>
<status status="FAIL" endtime="20170607 03:44:04.448" starttime="20170607 03:44:04.101"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:14.453">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:44:14.453" starttime="20170607 03:44:14.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:14.454">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:44:14.454" starttime="20170607 03:44:14.453"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:14.454">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:44:14.454" starttime="20170607 03:44:14.454"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:14.455">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:44:14.455" starttime="20170607 03:44:14.455"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:14.646">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:44:14.646" starttime="20170607 03:44:14.456"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:14.647">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:14.647">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:14.647" starttime="20170607 03:44:14.455"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:14.647">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:14.647" starttime="20170607 03:44:14.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:14.648">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:14.648" starttime="20170607 03:44:14.648"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:14.648" starttime="20170607 03:44:14.452"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:14.648" starttime="20170607 03:44:14.451"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:14.648" starttime="20170607 03:44:14.451"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:14.649">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:44:14.649" starttime="20170607 03:44:14.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:14.651">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:44:14.651" starttime="20170607 03:44:14.650"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:14.652">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:44:14.652" starttime="20170607 03:44:14.652"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:14.652" starttime="20170607 03:44:14.651"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:14.652" starttime="20170607 03:44:14.650"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:14.652" starttime="20170607 03:44:14.649"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:14.716">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:44:14.716">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:14.716" starttime="20170607 03:44:14.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:14.718">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:44:14.718" starttime="20170607 03:44:14.718"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:14.719">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:44:14.719" starttime="20170607 03:44:14.719"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:14.719" starttime="20170607 03:44:14.718"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:14.719" starttime="20170607 03:44:14.717"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:14.719" starttime="20170607 03:44:14.717"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:14.720">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:14.720" starttime="20170607 03:44:14.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:14.720">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:14.720" starttime="20170607 03:44:14.720"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:14.721">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:44:14.721">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:44:14.721">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:44:14.721" starttime="20170607 03:44:14.721"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:14.721">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:44:14.722" starttime="20170607 03:44:14.450"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:14.722">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:44:14.722" starttime="20170607 03:44:14.449"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:14.723">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:44:14.723" starttime="20170607 03:44:14.722"></status>
</kw>
<status status="FAIL" endtime="20170607 03:44:14.723" starttime="20170607 03:44:14.448"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:24.728">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:44:24.728" starttime="20170607 03:44:24.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:24.729">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:44:24.729" starttime="20170607 03:44:24.729"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:24.730">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:44:24.730" starttime="20170607 03:44:24.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:24.730">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:44:24.730" starttime="20170607 03:44:24.730"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:24.908">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:44:24.908" starttime="20170607 03:44:24.731"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:24.908">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:24.908">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:24.909" starttime="20170607 03:44:24.731"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:24.909">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:24.909" starttime="20170607 03:44:24.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:24.910">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:24.910" starttime="20170607 03:44:24.910"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:24.910" starttime="20170607 03:44:24.727"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:24.910" starttime="20170607 03:44:24.726"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:24.910" starttime="20170607 03:44:24.726"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:24.911">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:44:24.911" starttime="20170607 03:44:24.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:24.913">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:44:24.913" starttime="20170607 03:44:24.912"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:24.914">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:44:24.914" starttime="20170607 03:44:24.914"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:24.914" starttime="20170607 03:44:24.913"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:24.914" starttime="20170607 03:44:24.912"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:24.914" starttime="20170607 03:44:24.911"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:25.012">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:44:25.012">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:25.012" starttime="20170607 03:44:24.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:25.014">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:44:25.014" starttime="20170607 03:44:25.013"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:25.015">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:44:25.015" starttime="20170607 03:44:25.015"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:25.015" starttime="20170607 03:44:25.014"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:25.016" starttime="20170607 03:44:25.013"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:25.016" starttime="20170607 03:44:25.013"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:25.016">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:25.016" starttime="20170607 03:44:24.725"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:25.016">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:25.017" starttime="20170607 03:44:25.016"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:25.017">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:44:25.017">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:44:25.017">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:44:25.017" starttime="20170607 03:44:25.017"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:25.018">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:44:25.018" starttime="20170607 03:44:24.724"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:25.018">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:44:25.018" starttime="20170607 03:44:24.724"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:25.018">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:44:25.019" starttime="20170607 03:44:25.018"></status>
</kw>
<status status="FAIL" endtime="20170607 03:44:25.019" starttime="20170607 03:44:24.723"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.026">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:44:35.026" starttime="20170607 03:44:35.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.027">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:44:35.027" starttime="20170607 03:44:35.027"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.028">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:44:35.028" starttime="20170607 03:44:35.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.028">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:44:35.028" starttime="20170607 03:44:35.028"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.227">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:44:35.227" starttime="20170607 03:44:35.029"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:35.227">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:35.227">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:35.227" starttime="20170607 03:44:35.028"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.228">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:35.228" starttime="20170607 03:44:35.228"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.229">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:35.229" starttime="20170607 03:44:35.228"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.229" starttime="20170607 03:44:35.025"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.229" starttime="20170607 03:44:35.024"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.229" starttime="20170607 03:44:35.023"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.230">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:44:35.230" starttime="20170607 03:44:35.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.232">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:44:35.232" starttime="20170607 03:44:35.232"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.233">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:44:35.233" starttime="20170607 03:44:35.233"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.233" starttime="20170607 03:44:35.232"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.233" starttime="20170607 03:44:35.231"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.233" starttime="20170607 03:44:35.230"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.299">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:44:35.299">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:35.299" starttime="20170607 03:44:35.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.300">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:44:35.301" starttime="20170607 03:44:35.300"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.301">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:44:35.302" starttime="20170607 03:44:35.301"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.302" starttime="20170607 03:44:35.301"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.302" starttime="20170607 03:44:35.300"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.302" starttime="20170607 03:44:35.299"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:35.302">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:35.302" starttime="20170607 03:44:35.022"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.303">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:35.303" starttime="20170607 03:44:35.302"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.303">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:44:35.303">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:44:35.304">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:44:35.304" starttime="20170607 03:44:35.303"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:35.304">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:44:35.304" starttime="20170607 03:44:35.022"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:35.304">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:44:35.304" starttime="20170607 03:44:35.021"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:35.305">Off != Running</msg>
<status status="FAIL" endtime="20170607 03:44:35.305" starttime="20170607 03:44:35.305"></status>
</kw>
<status status="FAIL" endtime="20170607 03:44:35.305" starttime="20170607 03:44:35.019"></status>
</kw>
<msg level="FAIL" timestamp="20170607 03:44:35.305">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</msg>
<status status="FAIL" endtime="20170607 03:44:35.305" starttime="20170607 03:41:25.733"></status>
</kw>
<status status="FAIL" endtime="20170607 03:44:35.306" starttime="20170607 03:41:24.353"></status>
</kw>
<status status="FAIL" endtime="20170607 03:44:35.306" starttime="20170607 03:41:24.353"></status>
</kw>
<status status="FAIL" endtime="20170607 03:44:35.306" starttime="20170607 03:41:24.352"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.311">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:44:35.312" starttime="20170607 03:44:35.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.312">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:44:35.312" starttime="20170607 03:44:35.312"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.313">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:44:35.313" starttime="20170607 03:44:35.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.313">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:44:35.313" starttime="20170607 03:44:35.313"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.520">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:44:35.520" starttime="20170607 03:44:35.314"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:35.520">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:35.520">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:35.520" starttime="20170607 03:44:35.314"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.520">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:35.521" starttime="20170607 03:44:35.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.521">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:35.521" starttime="20170607 03:44:35.521"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.521" starttime="20170607 03:44:35.310"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.522" starttime="20170607 03:44:35.310"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.522" starttime="20170607 03:44:35.309"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.522">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170607 03:44:35.522" starttime="20170607 03:44:35.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.524">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:44:35.524" starttime="20170607 03:44:35.524"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.525">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20170607 03:44:35.525" starttime="20170607 03:44:35.525"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.526" starttime="20170607 03:44:35.525"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.526" starttime="20170607 03:44:35.523"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.526" starttime="20170607 03:44:35.523"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.590">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:44:35.590">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:35.590" starttime="20170607 03:44:35.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.592">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:44:35.592" starttime="20170607 03:44:35.592"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.593">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170607 03:44:35.594" starttime="20170607 03:44:35.593"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.594" starttime="20170607 03:44:35.592"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.594" starttime="20170607 03:44:35.591"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:35.594" starttime="20170607 03:44:35.591"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:35.594">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:35.594" starttime="20170607 03:44:35.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.595">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:35.595" starttime="20170607 03:44:35.595"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.596">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:44:35.596">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170607 03:44:35.596">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20170607 03:44:35.596" starttime="20170607 03:44:35.595"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:35.596">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20170607 03:44:35.596" starttime="20170607 03:44:35.308"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:35.596">${host_state} = Running</msg>
<status status="PASS" endtime="20170607 03:44:35.596" starttime="20170607 03:44:35.307"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:35.598">Running != Quiesced</msg>
<status status="FAIL" endtime="20170607 03:44:35.598" starttime="20170607 03:44:35.597"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:35.598">${status} = False</msg>
<status status="PASS" endtime="20170607 03:44:35.598" starttime="20170607 03:44:35.597"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:35.598">${status} = False</msg>
<status status="PASS" endtime="20170607 03:44:35.598" starttime="20170607 03:44:35.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:35.612">Length is 10</msg>
<status status="PASS" endtime="20170607 03:44:35.612" starttime="20170607 03:44:35.612"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:35.617">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170607 03:44:38.624">${RC} = 0</msg>
<msg level="INFO" timestamp="20170607 03:44:38.625">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.59 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.592 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170607 03:44:38.625" starttime="20170607 03:44:35.612"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.628">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.59 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.592 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.616 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.653 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.592/1.114/2.596/0.856 ms</msg>
<status status="PASS" endtime="20170607 03:44:38.628" starttime="20170607 03:44:38.627"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:38.629" starttime="20170607 03:44:38.628"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.629" starttime="20170607 03:44:35.611"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:38.655">${cur_time} = 2017-06-07 03:44:38:654953</msg>
<status status="PASS" endtime="20170607 03:44:38.655" starttime="20170607 03:44:38.655"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:38.656">${cur_time} = 20170607034438654953</msg>
<status status="PASS" endtime="20170607 03:44:38.656" starttime="20170607 03:44:38.655"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.656" starttime="20170607 03:44:38.654"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:38.656">${FFDC_TIME} = 20170607034438654953</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:38.657">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20170607 03:44:38.658" starttime="20170607 03:44:38.657"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:38.658">${suite_name} = 20170607034438654953_TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20170607 03:44:38.658" starttime="20170607 03:44:38.658"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:38.659">${test_name} = PowerOnTest</msg>
<status status="PASS" endtime="20170607 03:44:38.659" starttime="20170607 03:44:38.658"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:38.659">${test_name} = 20170607034438654953_PowerOnTest</msg>
<status status="PASS" endtime="20170607 03:44:38.659" starttime="20170607 03:44:38.659"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.660" starttime="20170607 03:44:38.657"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:38.660">${FFDC_DIR_PATH} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170607 03:44:38.660">${FFDC_PREFIX} = 20170607034438654953_</msg>
<msg level="INFO" timestamp="20170607 03:44:38.682">${LOG_PREFIX} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.683" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:38.683" starttime="20170607 03:44:38.683"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:38.688">${FFDC_FILE_PATH} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.699" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:38.700" starttime="20170607 03:44:38.699"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.700" starttime="20170607 03:44:38.698"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.701" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:38.701" starttime="20170607 03:44:38.700"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.701" starttime="20170607 03:44:38.700"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.702" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:38.702" starttime="20170607 03:44:38.702"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.702" starttime="20170607 03:44:38.701"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.703" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:38.704" starttime="20170607 03:44:38.703"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.704" starttime="20170607 03:44:38.703"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.705" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:38.705" starttime="20170607 03:44:38.704"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.705" starttime="20170607 03:44:38.704"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.706" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:38.706" starttime="20170607 03:44:38.706"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.706" starttime="20170607 03:44:38.705"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.707" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:38.708" starttime="20170607 03:44:38.707"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.708" starttime="20170607 03:44:38.706"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.709" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:38.709" starttime="20170607 03:44:38.709"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.709" starttime="20170607 03:44:38.708"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.710" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:38.710" starttime="20170607 03:44:38.710"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.711" starttime="20170607 03:44:38.709"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.712" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:38.712" starttime="20170607 03:44:38.712"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.713" starttime="20170607 03:44:38.711"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.714" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:38.714" starttime="20170607 03:44:38.713"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.714" starttime="20170607 03:44:38.713"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.715" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:38.715" starttime="20170607 03:44:38.715"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.715" starttime="20170607 03:44:38.714"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.716" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:38.716" starttime="20170607 03:44:38.716"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.716" starttime="20170607 03:44:38.715"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:38.718">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 03:44:38.718" starttime="20170607 03:44:38.718"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:38.719">${has_host} = False</msg>
<status status="PASS" endtime="20170607 03:44:38.719" starttime="20170607 03:44:38.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:38.720" starttime="20170607 03:44:38.719"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.720" starttime="20170607 03:44:38.719"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:38.721">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 03:44:38.721" starttime="20170607 03:44:38.721"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:38.722">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 03:44:38.722" starttime="20170607 03:44:38.722"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:38.723">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 03:44:38.723" starttime="20170607 03:44:38.722"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.723">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 03:44:38.723" starttime="20170607 03:44:38.723"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.724" starttime="20170607 03:44:38.721"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.724" starttime="20170607 03:44:38.720"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:38.725">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 03:44:38.725" starttime="20170607 03:44:38.724"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:38.725">${has_port} = False</msg>
<status status="PASS" endtime="20170607 03:44:38.725" starttime="20170607 03:44:38.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:38.727" starttime="20170607 03:44:38.726"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:38.728" starttime="20170607 03:44:38.727"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.728" starttime="20170607 03:44:38.726"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:38.728" starttime="20170607 03:44:38.725"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:38.728">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170607 03:44:40.374">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 03:44:40.374" starttime="20170607 03:44:38.728"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.374" starttime="20170607 03:44:38.717"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:40.375">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170607 03:44:40.452">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:44:40.452">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170607 03:44:40.452">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:44:40.452" starttime="20170607 03:44:40.375"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:40.452">Length is 0</msg>
<status status="PASS" endtime="20170607 03:44:40.453" starttime="20170607 03:44:40.452"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:40.453">Length is 11</msg>
<status status="PASS" endtime="20170607 03:44:40.453" starttime="20170607 03:44:40.453"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:40.453">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170607 03:44:40.453" starttime="20170607 03:44:38.717"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:40.455" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:40.455" starttime="20170607 03:44:40.454"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.455" starttime="20170607 03:44:40.453"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.455" starttime="20170607 03:44:38.711"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:40.456" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:40.456" starttime="20170607 03:44:40.456"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.456" starttime="20170607 03:44:40.455"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:40.457">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" endtime="20170607 03:44:40.457" starttime="20170607 03:44:40.457"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:40.458" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:40.458" starttime="20170607 03:44:40.458"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.458" starttime="20170607 03:44:40.457"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:40.459" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:40.460" starttime="20170607 03:44:40.459"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.460" starttime="20170607 03:44:40.459"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.460" starttime="20170607 03:44:40.457"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:40.461" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:40.461" starttime="20170607 03:44:40.461"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.461" starttime="20170607 03:44:40.460"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:40.462" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:40.462" starttime="20170607 03:44:40.462"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.463" starttime="20170607 03:44:40.461"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.463" starttime="20170607 03:44:40.460"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:40.464" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:40.464" starttime="20170607 03:44:40.464"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.464" starttime="20170607 03:44:40.463"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:40.465" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:40.466" starttime="20170607 03:44:40.465"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.466" starttime="20170607 03:44:40.465"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.466" starttime="20170607 03:44:40.463"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.466" starttime="20170607 03:44:40.457"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:40.467" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:40.467" starttime="20170607 03:44:40.466"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.467" starttime="20170607 03:44:40.466"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.467" starttime="20170607 03:44:38.698"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:40.473">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170607 03:44:40.473" starttime="20170607 03:44:40.473"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:40.475">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('FFDC Generic Report', 'BMC FFDC Man...</msg>
<status status="PASS" endtime="20170607 03:44:40.475" starttime="20170607 03:44:40.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:40.476" starttime="20170607 03:44:40.476"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:40.476">@{ffdc_function_list} = [ BMC Specific Files | Get Request FFDC | OS FFDC | Core Files | FFDC Generic Report | SEL Log ]</msg>
<status status="PASS" endtime="20170607 03:44:40.476" starttime="20170607 03:44:40.475"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:40.478" starttime="20170607 03:44:40.478"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:40.478">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:40.478">${ret_values} = None</msg>
<status status="PASS" endtime="20170607 03:44:40.478" starttime="20170607 03:44:40.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:40.479" starttime="20170607 03:44:40.479"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:40.497">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 03:44:40.497" starttime="20170607 03:44:40.497"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:40.497">${has_host} = False</msg>
<status status="PASS" endtime="20170607 03:44:40.497" starttime="20170607 03:44:40.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:40.498" starttime="20170607 03:44:40.498"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.499" starttime="20170607 03:44:40.498"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:40.500">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 03:44:40.500" starttime="20170607 03:44:40.500"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:40.501">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 03:44:40.501" starttime="20170607 03:44:40.500"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:40.501">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 03:44:40.501" starttime="20170607 03:44:40.501"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:40.502">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 03:44:40.502" starttime="20170607 03:44:40.502"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.502" starttime="20170607 03:44:40.499"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.502" starttime="20170607 03:44:40.499"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:40.503">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 03:44:40.503" starttime="20170607 03:44:40.503"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:40.503">${has_port} = False</msg>
<status status="PASS" endtime="20170607 03:44:40.503" starttime="20170607 03:44:40.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:40.505" starttime="20170607 03:44:40.505"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:40.506" starttime="20170607 03:44:40.505"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.506" starttime="20170607 03:44:40.504"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:40.506" starttime="20170607 03:44:40.504"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:40.506">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170607 03:44:42.260">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 03:44:42.260" starttime="20170607 03:44:40.506"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:42.260" starttime="20170607 03:44:40.495"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:42.261">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170607 03:44:42.261" starttime="20170607 03:44:42.260"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:42.262">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status status="PASS" endtime="20170607 03:44:42.262" starttime="20170607 03:44:42.262"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:42.263">${logpath} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170607 03:44:42.264" starttime="20170607 03:44:42.263"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:42.265" starttime="20170607 03:44:42.264"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:42.265">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170607 03:44:42.312">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:44:42.312">${stdout} = MemTotal:         432876 kB
MemFree:          277828 kB
MemAvailable:     320244 kB
Buffers:           10724 kB
Cached:            50288 kB
SwapCached:            0 kB
Active:           105568 kB
Inac...</msg>
<msg level="INFO" timestamp="20170607 03:44:42.312">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:44:42.312" starttime="20170607 03:44:42.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:42.320" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_meminfo.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:42.320" starttime="20170607 03:44:42.319"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:42.320" starttime="20170607 03:44:42.318"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:42.320" starttime="20170607 03:44:42.312"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:42.320" starttime="20170607 03:44:42.264"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:42.320" starttime="20170607 03:44:42.263"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:42.321">${logpath} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170607 03:44:42.321" starttime="20170607 03:44:42.320"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:42.322" starttime="20170607 03:44:42.322"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:42.323">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170607 03:44:44.733">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:44:44.735">${stdout} = -- Logs begin at Wed 2017-06-07 03:31:12 UTC, end at Wed 2017-06-07 03:44:49 UTC. --
Jun 07 03:31:12 witherspoon kernel: Booting Linux on physical CPU 0x0
Jun 07 03:31:12 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170607 03:44:44.735">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:44:44.735" starttime="20170607 03:44:42.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:44.744" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_journalctl.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:44.744" starttime="20170607 03:44:44.742"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:44.744" starttime="20170607 03:44:44.741"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:44.744" starttime="20170607 03:44:44.735"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:44.744" starttime="20170607 03:44:42.321"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:44.744" starttime="20170607 03:44:42.320"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:44.745">${logpath} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170607 03:44:44.745" starttime="20170607 03:44:44.745"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:44.747" starttime="20170607 03:44:44.746"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:44.747">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170607 03:44:44.795">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:44:44.795">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170607 03:44:44.795">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:44:44.795" starttime="20170607 03:44:44.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:44.802" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_procinfo.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:44.802" starttime="20170607 03:44:44.801"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:44.802" starttime="20170607 03:44:44.800"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:44.802" starttime="20170607 03:44:44.795"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:44.802" starttime="20170607 03:44:44.745"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:44.802" starttime="20170607 03:44:44.744"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:44.803">${logpath} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170607 03:44:44.803" starttime="20170607 03:44:44.802"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:44.804" starttime="20170607 03:44:44.804"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:44.805">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170607 03:44:44.890">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:44:44.890">${stdout} = RPC: Registered tcp NFSv4.1 backchannel transport module.
Trying to unpack rootfs image as initramfs...
Freeing initrd memory: 1544K
workingset: timestamp_bits=30 max_order=17 bucket_order=0
squashfs:...</msg>
<msg level="INFO" timestamp="20170607 03:44:44.890">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:44:44.890" starttime="20170607 03:44:44.804"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:44.899" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_dmesg.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:44.899" starttime="20170607 03:44:44.898"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:44.899" starttime="20170607 03:44:44.897"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:44.899" starttime="20170607 03:44:44.890"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:44.899" starttime="20170607 03:44:44.803"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:44.899" starttime="20170607 03:44:44.802"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:44.900">${logpath} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170607 03:44:44.900" starttime="20170607 03:44:44.900"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:44.901" starttime="20170607 03:44:44.901"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:44.902">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170607 03:44:45.339">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:44:45.339">${stdout} = Mem: 155204K used, 277672K free, 14660K shrd, 10724K buff, 50296K cached
CPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq
Load average: 0.24 0.71 0.70 1/134 1443
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170607 03:44:45.340">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:44:45.340" starttime="20170607 03:44:44.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:45.346" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_proc_list.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:45.346" starttime="20170607 03:44:45.346"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.346" starttime="20170607 03:44:45.345"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.347" starttime="20170607 03:44:45.340"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.347" starttime="20170607 03:44:44.900"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.347" starttime="20170607 03:44:44.899"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.347" starttime="20170607 03:44:42.262"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.347" starttime="20170607 03:44:42.261"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.347" starttime="20170607 03:44:42.261"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.347" starttime="20170607 03:44:42.261"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.347" starttime="20170607 03:44:40.495"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.347" starttime="20170607 03:44:40.479"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.347" starttime="20170607 03:44:40.477"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.347" starttime="20170607 03:44:40.476"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:45.349" starttime="20170607 03:44:45.349"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:45.349">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:45.349">${ret_values} = None</msg>
<status status="PASS" endtime="20170607 03:44:45.349" starttime="20170607 03:44:45.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:45.350" starttime="20170607 03:44:45.350"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:45.368">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 03:44:45.368" starttime="20170607 03:44:45.368"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:45.368">${has_host} = False</msg>
<status status="PASS" endtime="20170607 03:44:45.368" starttime="20170607 03:44:45.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:45.369" starttime="20170607 03:44:45.369"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.369" starttime="20170607 03:44:45.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:45.371">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 03:44:45.371" starttime="20170607 03:44:45.371"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:45.372">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 03:44:45.372" starttime="20170607 03:44:45.372"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:45.372">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 03:44:45.372" starttime="20170607 03:44:45.372"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:45.373">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 03:44:45.373" starttime="20170607 03:44:45.373"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.373" starttime="20170607 03:44:45.371"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.374" starttime="20170607 03:44:45.370"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:45.375">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 03:44:45.375" starttime="20170607 03:44:45.374"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:45.375">${has_port} = False</msg>
<status status="PASS" endtime="20170607 03:44:45.375" starttime="20170607 03:44:45.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:45.378" starttime="20170607 03:44:45.377"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:45.378" starttime="20170607 03:44:45.378"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.379" starttime="20170607 03:44:45.376"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:45.379" starttime="20170607 03:44:45.375"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:45.379">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170607 03:44:47.088">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 03:44:47.089" starttime="20170607 03:44:45.379"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:47.089" starttime="20170607 03:44:45.367"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.089">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170607 03:44:47.090" starttime="20170607 03:44:47.089"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.091">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_led', '/org/op...</msg>
<status status="PASS" endtime="20170607 03:44:47.091" starttime="20170607 03:44:47.091"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.092">${logpath} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170607 03:44:47.092" starttime="20170607 03:44:47.091"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:47.095">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:44:47.096" starttime="20170607 03:44:47.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.096">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:44:47.096" starttime="20170607 03:44:47.096"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.097">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:44:47.097" starttime="20170607 03:44:47.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.097">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:44:47.097" starttime="20170607 03:44:47.097"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:47.314">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:44:47.315" starttime="20170607 03:44:47.098"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:47.315">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:47.315">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:47.315" starttime="20170607 03:44:47.098"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:47.316">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:47.316" starttime="20170607 03:44:47.315"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:47.316">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:47.316" starttime="20170607 03:44:47.316"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:47.316" starttime="20170607 03:44:47.094"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:47.317" starttime="20170607 03:44:47.093"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:47.317" starttime="20170607 03:44:47.093"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.317">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170607 03:44:47.317" starttime="20170607 03:44:47.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:47.318" starttime="20170607 03:44:47.318"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.362">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:44:47.362">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:47.362" starttime="20170607 03:44:47.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:47.363" starttime="20170607 03:44:47.362"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:47.363">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:47.363" starttime="20170607 03:44:47.092"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:47.364">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170607 03:44:47.364">404 != 200</msg>
<status status="FAIL" endtime="20170607 03:44:47.364" starttime="20170607 03:44:47.364"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:47.364">${status} = False</msg>
<status status="PASS" endtime="20170607 03:44:47.364" starttime="20170607 03:44:47.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170607 03:44:47.365">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170607 03:44:47.365" starttime="20170607 03:44:47.365"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:47.365" starttime="20170607 03:44:47.365"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:47.365" starttime="20170607 03:44:47.091"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.366">${logpath} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_elog.txt</msg>
<status status="PASS" endtime="20170607 03:44:47.366" starttime="20170607 03:44:47.366"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:47.369">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:44:47.370" starttime="20170607 03:44:47.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.371">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:44:47.371" starttime="20170607 03:44:47.370"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.371">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:44:47.371" starttime="20170607 03:44:47.371"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.372">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:44:47.372" starttime="20170607 03:44:47.371"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:47.549">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:44:47.550" starttime="20170607 03:44:47.373"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:47.550">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:47.550">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:47.550" starttime="20170607 03:44:47.372"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:47.550">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:47.550" starttime="20170607 03:44:47.550"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:47.551">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:47.551" starttime="20170607 03:44:47.551"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:47.551" starttime="20170607 03:44:47.368"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:47.551" starttime="20170607 03:44:47.368"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:47.551" starttime="20170607 03:44:47.367"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.552">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170607 03:44:47.552" starttime="20170607 03:44:47.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:47.553" starttime="20170607 03:44:47.552"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.604">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:44:47.604">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:47.604" starttime="20170607 03:44:47.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:47.605" starttime="20170607 03:44:47.604"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:47.605">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:47.605" starttime="20170607 03:44:47.367"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:47.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170607 03:44:47.606">404 != 200</msg>
<status status="FAIL" endtime="20170607 03:44:47.606" starttime="20170607 03:44:47.606"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:47.606">${status} = False</msg>
<status status="PASS" endtime="20170607 03:44:47.606" starttime="20170607 03:44:47.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170607 03:44:47.607">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170607 03:44:47.607" starttime="20170607 03:44:47.607"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:47.608" starttime="20170607 03:44:47.607"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:47.608" starttime="20170607 03:44:47.366"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.608">${logpath} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170607 03:44:47.608" starttime="20170607 03:44:47.608"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:47.612">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:44:47.613" starttime="20170607 03:44:47.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.613">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:44:47.613" starttime="20170607 03:44:47.613"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.614">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:44:47.614" starttime="20170607 03:44:47.614"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.615">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:44:47.615" starttime="20170607 03:44:47.615"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:47.798">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:44:47.799" starttime="20170607 03:44:47.616"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:47.799">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:47.799">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:47.799" starttime="20170607 03:44:47.616"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:47.799">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:47.800" starttime="20170607 03:44:47.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:47.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:47.800" starttime="20170607 03:44:47.800"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:47.800" starttime="20170607 03:44:47.611"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:47.800" starttime="20170607 03:44:47.610"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:47.801" starttime="20170607 03:44:47.609"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:47.801">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170607 03:44:47.801" starttime="20170607 03:44:47.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:47.802" starttime="20170607 03:44:47.801"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:48.022">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:44:48.022">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:48.022" starttime="20170607 03:44:47.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:48.023" starttime="20170607 03:44:48.023"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:48.023">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:48.023" starttime="20170607 03:44:47.609"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:48.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:48.025" starttime="20170607 03:44:48.024"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:48.025">${status} = True</msg>
<status status="PASS" endtime="20170607 03:44:48.025" starttime="20170607 03:44:48.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:48.025" starttime="20170607 03:44:48.025"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:48.026">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:44:48.026">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170607 03:44:48.026">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170607 03:44:48.026" starttime="20170607 03:44:48.025"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:48.028" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_sensor_list.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:48.028" starttime="20170607 03:44:48.028"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:48.028" starttime="20170607 03:44:48.027"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:48.028" starttime="20170607 03:44:47.608"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:48.029">${logpath} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_led.txt</msg>
<status status="PASS" endtime="20170607 03:44:48.029" starttime="20170607 03:44:48.029"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:48.033">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:44:48.034" starttime="20170607 03:44:48.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:48.035">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:44:48.035" starttime="20170607 03:44:48.034"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:48.035">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:44:48.036" starttime="20170607 03:44:48.035"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:48.036">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:44:48.036" starttime="20170607 03:44:48.036"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:48.320">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:44:48.320" starttime="20170607 03:44:48.037"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:48.320">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:48.320">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:48.320" starttime="20170607 03:44:48.037"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:48.321">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:48.321" starttime="20170607 03:44:48.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:48.322">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:48.322" starttime="20170607 03:44:48.321"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:48.322" starttime="20170607 03:44:48.031"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:48.322" starttime="20170607 03:44:48.031"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:48.322" starttime="20170607 03:44:48.030"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:48.323">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170607 03:44:48.323" starttime="20170607 03:44:48.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:48.323" starttime="20170607 03:44:48.323"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:48.398">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:44:48.398">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:48.398" starttime="20170607 03:44:48.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:48.399" starttime="20170607 03:44:48.399"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:48.399">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:48.399" starttime="20170607 03:44:48.029"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:48.400">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170607 03:44:48.400">404 != 200</msg>
<status status="FAIL" endtime="20170607 03:44:48.400" starttime="20170607 03:44:48.400"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:48.400">${status} = False</msg>
<status status="PASS" endtime="20170607 03:44:48.401" starttime="20170607 03:44:48.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170607 03:44:48.401">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170607 03:44:48.402" starttime="20170607 03:44:48.401"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:48.402" starttime="20170607 03:44:48.401"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:48.402" starttime="20170607 03:44:48.028"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:48.402">${logpath} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170607 03:44:48.403" starttime="20170607 03:44:48.402"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:48.406">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:44:48.435" starttime="20170607 03:44:48.406"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:48.436">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:44:48.436" starttime="20170607 03:44:48.436"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:48.437">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:44:48.437" starttime="20170607 03:44:48.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:48.438">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:44:48.438" starttime="20170607 03:44:48.438"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:48.616">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:44:48.616" starttime="20170607 03:44:48.439"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:48.616">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:48.616">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:48.616" starttime="20170607 03:44:48.438"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:48.617">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:48.617" starttime="20170607 03:44:48.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:48.618">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:48.618" starttime="20170607 03:44:48.617"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:48.618" starttime="20170607 03:44:48.405"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:48.618" starttime="20170607 03:44:48.404"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:48.618" starttime="20170607 03:44:48.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:48.619">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170607 03:44:48.619" starttime="20170607 03:44:48.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:48.619" starttime="20170607 03:44:48.619"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:50.371">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:44:50.371">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:50.371" starttime="20170607 03:44:48.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:50.372" starttime="20170607 03:44:50.371"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:50.372">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:50.372" starttime="20170607 03:44:48.403"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:50.373">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:50.373" starttime="20170607 03:44:50.373"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:50.373">${status} = True</msg>
<status status="PASS" endtime="20170607 03:44:50.373" starttime="20170607 03:44:50.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:50.374" starttime="20170607 03:44:50.374"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:50.377">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "2", 
      "PartNumber": "0000000000000000", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775622", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775618", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1983", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ec", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170607 03:44:50.377">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170607 03:44:50.378">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
 ...</msg>
<status status="PASS" endtime="20170607 03:44:50.378" starttime="20170607 03:44:50.374"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:50.379" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_inventory.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:50.379" starttime="20170607 03:44:50.379"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.379" starttime="20170607 03:44:50.378"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.379" starttime="20170607 03:44:48.402"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.380" starttime="20170607 03:44:47.091"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.380" starttime="20170607 03:44:47.090"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.380" starttime="20170607 03:44:47.090"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.380" starttime="20170607 03:44:47.090"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.380" starttime="20170607 03:44:45.366"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.380" starttime="20170607 03:44:45.350"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.380" starttime="20170607 03:44:45.348"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.380" starttime="20170607 03:44:45.347"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:50.382" starttime="20170607 03:44:50.382"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:50.382">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:50.382">${ret_values} = None</msg>
<status status="PASS" endtime="20170607 03:44:50.382" starttime="20170607 03:44:50.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:50.383" starttime="20170607 03:44:50.382"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:50.400">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170607 03:44:50.400" starttime="20170607 03:44:50.400"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.400" starttime="20170607 03:44:50.399"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.401" starttime="20170607 03:44:50.383"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.401" starttime="20170607 03:44:50.380"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.401" starttime="20170607 03:44:50.380"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:50.403" starttime="20170607 03:44:50.402"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:50.403">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:50.403">${ret_values} = None</msg>
<status status="PASS" endtime="20170607 03:44:50.403" starttime="20170607 03:44:50.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:50.403" starttime="20170607 03:44:50.403"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:50.421">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 03:44:50.421" starttime="20170607 03:44:50.421"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:50.421">${has_host} = False</msg>
<status status="PASS" endtime="20170607 03:44:50.421" starttime="20170607 03:44:50.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:50.422" starttime="20170607 03:44:50.422"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.422" starttime="20170607 03:44:50.421"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:50.424">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 03:44:50.424" starttime="20170607 03:44:50.424"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:50.424">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 03:44:50.425" starttime="20170607 03:44:50.424"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:50.425">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 03:44:50.425" starttime="20170607 03:44:50.425"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:50.426">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 03:44:50.426" starttime="20170607 03:44:50.425"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.426" starttime="20170607 03:44:50.423"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.426" starttime="20170607 03:44:50.423"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:50.427">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 03:44:50.427" starttime="20170607 03:44:50.427"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:50.427">${has_port} = False</msg>
<status status="PASS" endtime="20170607 03:44:50.427" starttime="20170607 03:44:50.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:50.429" starttime="20170607 03:44:50.429"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:50.430" starttime="20170607 03:44:50.430"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.430" starttime="20170607 03:44:50.428"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:50.430" starttime="20170607 03:44:50.428"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:50.431">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170607 03:44:52.176">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 03:44:52.177" starttime="20170607 03:44:50.430"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:52.177" starttime="20170607 03:44:50.420"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:52.177">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170607 03:44:52.226">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170607 03:44:52.226">${core_files} = </msg>
<status status="PASS" endtime="20170607 03:44:52.226" starttime="20170607 03:44:52.177"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:52.226">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170607 03:44:52.226" starttime="20170607 03:44:52.226"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:52.234" starttime="20170607 03:44:52.227"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:52.870" starttime="20170607 03:44:52.235"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:52.870" starttime="20170607 03:44:52.235"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:52.870" starttime="20170607 03:44:52.234"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:52.871" starttime="20170607 03:44:52.226"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170607 03:44:52.871" starttime="20170607 03:44:52.871"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:52.871" starttime="20170607 03:44:50.419"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:52.871" starttime="20170607 03:44:50.404"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:52.871" starttime="20170607 03:44:50.401"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:52.871" starttime="20170607 03:44:50.401"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:52.874" starttime="20170607 03:44:52.873"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:52.874">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:52.874">${ret_values} = None</msg>
<status status="PASS" endtime="20170607 03:44:52.874" starttime="20170607 03:44:52.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:52.875" starttime="20170607 03:44:52.874"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:52.893">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170607 03:44:52.893" starttime="20170607 03:44:52.893"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:52.893">${has_host} = False</msg>
<status status="PASS" endtime="20170607 03:44:52.893" starttime="20170607 03:44:52.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:52.894" starttime="20170607 03:44:52.894"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:52.894" starttime="20170607 03:44:52.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:52.896">${port_num} = 22</msg>
<status status="PASS" endtime="20170607 03:44:52.896" starttime="20170607 03:44:52.896"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:52.897">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20170607 03:44:52.897" starttime="20170607 03:44:52.896"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:52.897">${https_num} = 443</msg>
<status status="PASS" endtime="20170607 03:44:52.897" starttime="20170607 03:44:52.897"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:52.898">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20170607 03:44:52.898" starttime="20170607 03:44:52.897"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:52.898" starttime="20170607 03:44:52.895"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:52.898" starttime="20170607 03:44:52.895"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170607 03:44:52.899">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170607 03:44:52.899" starttime="20170607 03:44:52.899"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:52.899">${has_port} = False</msg>
<status status="PASS" endtime="20170607 03:44:52.899" starttime="20170607 03:44:52.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:52.902" starttime="20170607 03:44:52.901"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:52.902" starttime="20170607 03:44:52.902"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:52.902" starttime="20170607 03:44:52.901"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:52.902" starttime="20170607 03:44:52.900"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:52.903">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170607 03:44:54.650">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170607 03:44:54.651" starttime="20170607 03:44:52.903"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.651" starttime="20170607 03:44:52.892"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:54.652">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" endtime="20170607 03:44:54.652" starttime="20170607 03:44:54.651"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:54.653">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') ]</msg>
<status status="PASS" endtime="20170607 03:44:54.653" starttime="20170607 03:44:54.653"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.658">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170607 03:44:54.659" starttime="20170607 03:44:54.654"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.662" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.662" starttime="20170607 03:44:54.661"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.662" starttime="20170607 03:44:54.661"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.664" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.664" starttime="20170607 03:44:54.663"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.664" starttime="20170607 03:44:54.662"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.665" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.665" starttime="20170607 03:44:54.665"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.665" starttime="20170607 03:44:54.664"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.666" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.666" starttime="20170607 03:44:54.666"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.666" starttime="20170607 03:44:54.665"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.666" starttime="20170607 03:44:54.660"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.667" starttime="20170607 03:44:54.660"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:54.667">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170607 03:44:54.726">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:44:54.726">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg level="INFO" timestamp="20170607 03:44:54.727">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:44:54.727" starttime="20170607 03:44:54.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.735" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.735" starttime="20170607 03:44:54.734"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.735" starttime="20170607 03:44:54.733"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.735" starttime="20170607 03:44:54.727"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.735" starttime="20170607 03:44:54.659"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.735" starttime="20170607 03:44:54.659"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.738" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.738" starttime="20170607 03:44:54.738"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.738" starttime="20170607 03:44:54.737"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.739" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.739" starttime="20170607 03:44:54.739"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.740" starttime="20170607 03:44:54.738"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.741" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.741" starttime="20170607 03:44:54.740"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.741" starttime="20170607 03:44:54.740"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.742" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.742" starttime="20170607 03:44:54.742"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.742" starttime="20170607 03:44:54.741"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.743" starttime="20170607 03:44:54.737"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.743" starttime="20170607 03:44:54.736"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:54.743">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170607 03:44:54.801">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:44:54.802">${stdout} = Linux witherspoon 4.10.5-8736136e756ec127de0bbe2c7e2de683204d4512 #1 Tue Jun 6 22:38:49 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170607 03:44:54.802">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:44:54.802" starttime="20170607 03:44:54.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.808" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.808" starttime="20170607 03:44:54.808"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.808" starttime="20170607 03:44:54.807"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.808" starttime="20170607 03:44:54.802"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.808" starttime="20170607 03:44:54.735"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.809" starttime="20170607 03:44:54.735"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.811" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.811" starttime="20170607 03:44:54.811"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.812" starttime="20170607 03:44:54.810"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.813" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.813" starttime="20170607 03:44:54.812"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.813" starttime="20170607 03:44:54.812"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.814" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.814" starttime="20170607 03:44:54.814"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.814" starttime="20170607 03:44:54.813"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.815" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.815" starttime="20170607 03:44:54.815"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.816" starttime="20170607 03:44:54.814"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.816" starttime="20170607 03:44:54.810"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.816" starttime="20170607 03:44:54.810"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:54.816">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170607 03:44:54.901">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:44:54.901">${stdout} =  03:45:03 up 14 min,  load average: 0.50, 0.74, 0.71</msg>
<msg level="INFO" timestamp="20170607 03:44:54.902">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:44:54.902" starttime="20170607 03:44:54.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.908" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.908" starttime="20170607 03:44:54.908"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.909" starttime="20170607 03:44:54.907"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.909" starttime="20170607 03:44:54.902"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.909" starttime="20170607 03:44:54.809"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.909" starttime="20170607 03:44:54.809"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.909" starttime="20170607 03:44:54.659"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.909" starttime="20170607 03:44:54.652"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.909" starttime="20170607 03:44:54.652"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:54.910">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170607 03:44:54.910" starttime="20170607 03:44:54.910"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.911">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170607 03:44:54.911" starttime="20170607 03:44:54.910"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.914" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.914" starttime="20170607 03:44:54.914"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.915" starttime="20170607 03:44:54.913"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.916" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.916" starttime="20170607 03:44:54.915"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.916" starttime="20170607 03:44:54.915"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.917" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.917" starttime="20170607 03:44:54.917"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.917" starttime="20170607 03:44:54.916"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:54.918" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:54.918" starttime="20170607 03:44:54.918"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.918" starttime="20170607 03:44:54.917"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.919" starttime="20170607 03:44:54.913"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:54.919" starttime="20170607 03:44:54.912"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:54.919">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170607 03:44:55.024">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170607 03:44:55.024">${stdout} = </msg>
<msg level="INFO" timestamp="20170607 03:44:55.024">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170607 03:44:55.024" starttime="20170607 03:44:54.919"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:55.031" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:55.031" starttime="20170607 03:44:55.030"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.031" starttime="20170607 03:44:55.029"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.031" starttime="20170607 03:44:55.025"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.031" starttime="20170607 03:44:54.911"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.031" starttime="20170607 03:44:54.911"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:55.034" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:55.034" starttime="20170607 03:44:55.034"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.034" starttime="20170607 03:44:55.033"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:55.036" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:55.036" starttime="20170607 03:44:55.035"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.036" starttime="20170607 03:44:55.034"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:55.037" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:55.037" starttime="20170607 03:44:55.037"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.037" starttime="20170607 03:44:55.036"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:55.039" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:55.039" starttime="20170607 03:44:55.038"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.039" starttime="20170607 03:44:55.037"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.039" starttime="20170607 03:44:55.033"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.039" starttime="20170607 03:44:55.032"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:55.040">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170607 03:44:55.198">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:44:55.199">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.6-78"
VERSION_ID="v1.99.6-78-gfd4d3cc"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170607 03:44:55.199">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:44:55.199" starttime="20170607 03:44:55.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:55.208" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:55.209" starttime="20170607 03:44:55.208"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.209" starttime="20170607 03:44:55.207"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.209" starttime="20170607 03:44:55.200"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.209" starttime="20170607 03:44:55.031"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.209" starttime="20170607 03:44:55.031"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.209" starttime="20170607 03:44:54.911"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.209" starttime="20170607 03:44:54.909"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.209" starttime="20170607 03:44:54.909"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:55.210">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170607 03:44:55.210" starttime="20170607 03:44:55.210"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:55.211">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170607 03:44:55.211" starttime="20170607 03:44:55.211"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:55.215" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:55.215" starttime="20170607 03:44:55.214"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.215" starttime="20170607 03:44:55.214"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:55.216" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:55.216" starttime="20170607 03:44:55.216"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.216" starttime="20170607 03:44:55.215"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:55.217" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:55.218" starttime="20170607 03:44:55.217"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.218" starttime="20170607 03:44:55.217"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:55.219" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:55.219" starttime="20170607 03:44:55.218"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.219" starttime="20170607 03:44:55.218"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.219" starttime="20170607 03:44:55.213"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:55.219" starttime="20170607 03:44:55.213"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:55.220">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170607 03:44:56.657">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170607 03:44:56.658">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg level="INFO" timestamp="20170607 03:44:56.658">${stderr} = </msg>
<status status="PASS" endtime="20170607 03:44:56.658" starttime="20170607 03:44:55.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:56.665" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/20170607034438654953_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:56.665" starttime="20170607 03:44:56.664"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.665" starttime="20170607 03:44:56.664"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.665" starttime="20170607 03:44:56.658"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.665" starttime="20170607 03:44:55.211"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.665" starttime="20170607 03:44:55.211"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.665" starttime="20170607 03:44:55.211"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.666" starttime="20170607 03:44:55.209"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.666" starttime="20170607 03:44:55.209"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.666" starttime="20170607 03:44:54.652"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.666" starttime="20170607 03:44:52.891"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.666" starttime="20170607 03:44:52.875"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.666" starttime="20170607 03:44:52.872"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.666" starttime="20170607 03:44:52.871"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:56.668" starttime="20170607 03:44:56.667"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:56.668">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:56.668">${ret_values} = None</msg>
<status status="PASS" endtime="20170607 03:44:56.668" starttime="20170607 03:44:56.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:56.669" starttime="20170607 03:44:56.668"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:56.688">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170607 03:44:56.688" starttime="20170607 03:44:56.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:56.689">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170607 03:44:56.689" starttime="20170607 03:44:56.689"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:56.690">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170607 03:44:56.690" starttime="20170607 03:44:56.689"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:56.690">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170607 03:44:56.690" starttime="20170607 03:44:56.690"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:56.974">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170607 03:44:56.974" starttime="20170607 03:44:56.691"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:56.974">${status} = PASS</msg>
<msg level="INFO" timestamp="20170607 03:44:56.974">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:56.974" starttime="20170607 03:44:56.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:56.975">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:56.975" starttime="20170607 03:44:56.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:56.976">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170607 03:44:56.976" starttime="20170607 03:44:56.975"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.976" starttime="20170607 03:44:56.687"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.976" starttime="20170607 03:44:56.687"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:56.976" starttime="20170607 03:44:56.686"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:56.977">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170607 03:44:56.977" starttime="20170607 03:44:56.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:56.977" starttime="20170607 03:44:56.977"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.020">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170607 03:44:57.020">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:57.021" starttime="20170607 03:44:56.978"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.021" starttime="20170607 03:44:57.021"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:57.021">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170607 03:44:57.021" starttime="20170607 03:44:56.685"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:57.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170607 03:44:57.023">404 != 200</msg>
<status status="FAIL" endtime="20170607 03:44:57.023" starttime="20170607 03:44:57.022"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:57.023">${status} = False</msg>
<status status="PASS" endtime="20170607 03:44:57.023" starttime="20170607 03:44:57.022"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:57.023">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170607 03:44:57.024" starttime="20170607 03:44:57.023"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:57.024" starttime="20170607 03:44:56.685"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:57.024" starttime="20170607 03:44:56.669"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:57.024" starttime="20170607 03:44:56.666"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:57.024" starttime="20170607 03:44:56.666"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:57.024" starttime="20170607 03:44:40.476"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:57.024" starttime="20170607 03:44:40.474"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:57.024" starttime="20170607 03:44:40.474"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:57.024" starttime="20170607 03:44:40.473"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170607 03:44:57.217" starttime="20170607 03:44:57.024"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:57.217" starttime="20170607 03:44:40.473"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:57.217" starttime="20170607 03:44:35.599"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:57.217" starttime="20170607 03:44:35.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.218" starttime="20170607 03:44:57.218"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.219">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170607 03:44:57.219" starttime="20170607 03:44:57.219"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.220">${FFDC_DIR_PATH} = /tmp/fspcibld/29220/obmc-robot/logs/20170607034438654953_TestsTestBasicPoweron/20170607034438654953_PowerOnTest/</msg>
<status status="PASS" endtime="20170607 03:44:57.220" starttime="20170607 03:44:57.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.220" starttime="20170607 03:44:57.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.221" starttime="20170607 03:44:57.221"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:57.222" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs"&gt;/tmp/fspcibld/29220/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170607 03:44:57.222" starttime="20170607 03:44:57.221"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:57.223" html="yes">File '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170607 03:44:57.223" starttime="20170607 03:44:57.222"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:57.223">${exist} = True</msg>
<status status="PASS" endtime="20170607 03:44:57.223" starttime="20170607 03:44:57.222"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.224" starttime="20170607 03:44:57.223"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.224" starttime="20170607 03:44:57.224"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.225">${cur_time} = 2017-06-07 03:44:57:224854</msg>
<status status="PASS" endtime="20170607 03:44:57.225" starttime="20170607 03:44:57.225"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.226">${cur_time} = 20170607034457224854</msg>
<status status="PASS" endtime="20170607 03:44:57.226" starttime="20170607 03:44:57.225"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:57.226">${cur_time} = 20170607034457224854</msg>
<status status="PASS" endtime="20170607 03:44:57.226" starttime="20170607 03:44:57.224"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:57.227" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/29220/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/29220/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170607 03:44:57.227" starttime="20170607 03:44:57.226"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:57.227" starttime="20170607 03:44:57.218"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:57.227" starttime="20170607 03:44:35.307"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.229">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 03:44:57.229" starttime="20170607 03:44:57.228"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.229">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 03:44:57.229" starttime="20170607 03:44:57.229"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:57.229">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" endtime="20170607 03:44:57.230" starttime="20170607 03:44:57.228"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.230">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" endtime="20170607 03:44:57.230" starttime="20170607 03:44:57.230"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.231" starttime="20170607 03:44:57.231"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.236">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170607 03:44:57.239">${rc} = 0</msg>
<msg level="INFO" timestamp="20170607 03:44:57.240">${output} = /tmp/fspcibld/29220/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20170607 03:44:57.240" starttime="20170607 03:44:57.231"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.243" starttime="20170607 03:44:57.242"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.244" starttime="20170607 03:44:57.243"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.245">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170607 03:44:57.245" starttime="20170607 03:44:57.244"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:57.245">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20170607 03:44:57.245" starttime="20170607 03:44:57.230"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.246">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20170607 03:44:57.246" starttime="20170607 03:44:57.246"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.247" starttime="20170607 03:44:57.246"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.252">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170607 03:44:57.262">${rc} = 0</msg>
<msg level="INFO" timestamp="20170607 03:44:57.262">${os_con_pid} = </msg>
<status status="PASS" endtime="20170607 03:44:57.262" starttime="20170607 03:44:57.248"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.265" starttime="20170607 03:44:57.264"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.266">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20170607 03:44:57.266" starttime="20170607 03:44:57.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.270" starttime="20170607 03:44:57.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.271">${rc} = None</msg>
<msg level="INFO" timestamp="20170607 03:44:57.271">${output} = None</msg>
<status status="PASS" endtime="20170607 03:44:57.271" starttime="20170607 03:44:57.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.271" starttime="20170607 03:44:57.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.272" starttime="20170607 03:44:57.272"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.273">${output} = </msg>
<status status="PASS" endtime="20170607 03:44:57.273" starttime="20170607 03:44:57.272"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170607 03:44:57.273">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20170607 03:44:57.273" starttime="20170607 03:44:57.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" endtime="20170607 03:44:57.307" starttime="20170607 03:44:57.274"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:57.309">${rc} = 0</msg>
<msg level="INFO" timestamp="20170607 03:44:57.309">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
[    2.373274] PCI: Prob...</msg>
<status status="PASS" endtime="20170607 03:44:57.309" starttime="20170607 03:44:57.274"></status>
</kw>
<msg level="INFO" timestamp="20170607 03:44:57.310">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
[    2.373274] PCI: Prob...</msg>
<status status="PASS" endtime="20170607 03:44:57.311" starttime="20170607 03:44:57.227"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170607 03:44:57.313">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 
[    2.373274] PCI: Probing PCI hardware
[    2.373437] PCI host bridge to bus 0000:00
[    2.373578] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    2.373777] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003f7fffffff 64bit pref]
[    2.373958] pci_bus 0000:00: root bus resource [bus 00-ff]
[    2.374517] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    2.374797] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    2.375040] PCI host bridge to bus 0001:00
[    2.375133] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    2.375344] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007effffffff 64bit pref]
[    2.375520] pci_bus 0001:00: root bus resource [bus 00-ff]
[    2.376613] pci 0001:00:00.0: PCI bridge to [bus 01]
[    2.376869] PCI host bridge to bus 0002:00
[    2.376959] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    2.377170] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600beffffffff 64bit pref]
[    2.377344] pci_bus 0002:00: root bus resource [bus 00-ff]
[    2.378412] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    2.379188] pci 0002:01:00.0: PCI bridge to [bus 02]
[    2.379434] PCI host bridge to bus 0003:00
[    2.379518] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    2.379727] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023f7fffffff 64bit pref]
[    2.379899] pci_bus 0003:00: root bus resource [bus 00-ff]
[    2.380383] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    2.380664] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    2.380896] PCI host bridge to bus 0004:00
[    2.380984] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    2.381189] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027effffffff 64bit pref]
[    2.381362] pci_bus 0004:00: root bus resource [bus 00-ff]
[    2.384393] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    2.386902] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    2.388218] pci 0004:02:02.0: PCI bridge to [bus 03]
[    2.388495] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    2.388781] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    2.389055] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    2.389349] PCI host bridge to bus 0005:00
[    2.389425] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    2.389635] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602beffffffff 64bit pref]
[    2.389816] pci_bus 0005:00: root bus resource [bus 00-ff]
[    2.391591] pci 0005:00:00.0: PCI bridge to [bus 01]
[    2.391900] PCI host bridge to bus 0030:00
[    2.391975] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    2.392187] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203f7fffffff 64bit pref]
[    2.392360] pci_bus 0030:00: root bus resource [bus 00-ff]
[    2.392889] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    2.393197] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    2.393289] random: fast init done
[    2.393498] PCI host bridge to bus 0033:00
[    2.393580] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    2.393788] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223f7fffffff 64bit pref]
[    2.393963] pci_bus 0033:00: root bus resource [bus 00-ff]
[    2.394494] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    2.394803] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    2.395038] PCI host bridge to bus 0034:00
[    2.395126] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    2.395333] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227effffffff 64bit pref]
[    2.395509] pci_bus 0034:00: root bus resource [bus 00-ff]
[    2.396035] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    2.396339] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    2.396566] PCI host bridge to bus 0035:00
[    2.396651] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    2.396851] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622beffffffff 64bit pref]
[    2.397028] pci_bus 0035:00: root bus resource [bus 00-ff]
[    2.398305] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    2.399809] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    2.400374] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    2.400657] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    2.400951] PCI host bridge to bus 0006:00
[    2.401033] pci_bus 0006:00: root bus resource [mem 0x6030201400000-0x603020151ffff]
[    2.401191] pci_bus 0006:00: root bus resource [bus 00-ff]
[   23.088889664,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    2.403183] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   23.089040336,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    2.403461] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   23.089180176,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    2.403732] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[    2.403963] PCI host bridge to bus 0007:00
[    2.404050] pci_bus 0007:00: root bus resource [mem 0x6230201400000-0x623020151ffff]
[    2.404205] pci_bus 0007:00: root bus resource [bus 00-ff]
[   23.090452336,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    2.406234] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   23.090600320,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    2.406502] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   23.090736160,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    2.406767] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[    2.406989] pci 0000:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    2.407170] pci 0000:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    2.407408] pci 0000:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    2.407997] pci 0000:00:00.0: PCI bridge to [bus 01]
[    2.408173] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c080ffffff]
[    2.408332] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    2.408518] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    2.408709] pci 0001:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    2.409291] pci 0001:01     : [PE# 7d] Secondary bus 1 associated with PE#7d
[    2.409875] pci 0001:01     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    2.421997] IOMMU table initialized, virtual merging enabled
[    2.422098] pci 0001:01     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    2.422269] pci 0001:01     : [PE# 7d] Enabling 64-bit DMA bypass
[    2.422393] pci 0001:00:00.0: PCI bridge to [bus 01]
[    2.422507] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    2.422753] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    2.422902] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    2.423061] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    2.423186] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    2.423316] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    2.423476] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    2.423643] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    2.423765] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    2.423897] pci 0002:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    2.424478] pci 0002:02     : [PE# 7d] Secondary bus 2..2 associated with PE#7d
[    2.425070] pci 0002:02     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    2.437194] pci 0002:02     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    2.437319] pci 0002:02     : [PE# 7d] Enabling 64-bit DMA bypass
[    2.437432] pci 0002:01:00.0: PCI bridge to [bus 02]
[    2.437556] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    2.437749] pci 0002:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
[    2.438331] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    2.438423] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    2.438618] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    2.438865] pci 0003:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    2.439074] pci 0003:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    2.439277] pci 0003:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    2.439852] pci 0003:00:00.0: PCI bridge to [bus 01]
[    2.440164] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    2.440330] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c201ffffff]
[    2.440492] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    2.440668] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    2.440827] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c201000000-0x600c20103ffff]
[    2.440989] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c201040000-0x600c201041fff]
[    2.441154] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c201042000-0x600c201043fff]
[    2.441317] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c201044000-0x600c201045fff]
[    2.441481] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c201046000-0x600c201047fff]
[    2.441647] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    2.441773] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    2.441902] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    2.442025] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    2.442159] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    2.442336] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    2.442496] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    2.442616] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    2.442732] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    2.442861] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    2.442995] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    2.443159] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    2.443326] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    2.443450] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    2.443577] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    2.443701] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    2.443827] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    2.443950] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    2.444079] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    2.444203] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    2.444331] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    2.444457] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    2.444585] pci 0004:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    2.445166] pci 0004:03     : [PE# 7d] Secondary bus 3 associated with PE#7d
[    2.445733] pci 0004:03     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    2.457851] pci 0004:03     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    2.457978] pci 0004:03     : [PE# 7d] Enabling 64-bit DMA bypass
[    2.458113] pci 0004:02:02.0: PCI bridge to [bus 03]
[    2.458231] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c200ffffff]
[    2.458397] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    2.458590] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    2.458718] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    2.458852] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    2.458988] pci 0004:02     : [PE# 7c] Secondary bus 2 associated with PE#7c
[    2.459570] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    2.459678] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    2.459820] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027efff0ffff 64bit pref]
[    2.460008] pci 0004:01     : [PE# 7b] Secondary bus 1 associated with PE#7b
[    2.460594] pci 0004:01     : [PE# 7b] Setting up 32-bit TCE table at 0..80000000
[    2.472705] pci 0004:01     : [PE# 7b] Setting up window#0 0..7fffffff pg=1000
[    2.472836] pci 0004:01     : [PE# 7b] Enabling 64-bit DMA bypass
[    2.472948] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    2.473082] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    2.473242] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027efff0ffff 64bit pref]
[    2.473432] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    2.473699] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602807fffffff 64bit pref]
[    2.473884] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    2.474085] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    2.474283] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    2.474482] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    2.474686] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    2.474890] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    2.475097] pci 0005:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    2.475685] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    2.476220] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    2.488337] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    2.488468] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    2.488609] pci 0005:00:00.0: PCI bridge to [bus 01]
[    2.488732] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602beffffffff 64bit pref]
[    2.488982] pci 0030:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    2.489193] pci 0030:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    2.489393] pci 0030:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    2.489972] pci 0030:00:00.0: PCI bridge to [bus 01]
[    2.490141] pci 0033:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    2.490354] pci 0033:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    2.490557] pci 0033:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    2.491138] pci 0033:00:00.0: PCI bridge to [bus 01]
[    2.491302] pci 0034:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    2.491508] pci 0034:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    2.491713] pci 0034:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    2.492289] pci 0034:00:00.0: PCI bridge to [bus 01]
[    2.492535] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c280ffffff]
[    2.492692] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    2.492859] pci 0035:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    2.493443] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    2.493540] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    2.493675] pci 0035:02     : [PE# 7d] Secondary bus 2 associated with PE#7d
[    2.494258] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    2.494376] pci 0035:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
[    2.494958] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    2.495053] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    2.495279] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201400000-0x603020141ffff 64bit]
[    2.495502] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201420000-0x603020143ffff 64bit]
[    2.495720] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201440000-0x603020145ffff 64bit]
[    2.495933] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201460000-0x603020147ffff 64bit]
[    2.496148] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201480000-0x603020149ffff 64bit]
[    2.496362] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302014a0000-0x60302014bffff 64bit]
[    2.496577] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302014c0000-0x60302014cffff 64bit]
[    2.496793] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302014d0000-0x60302014dffff 64bit]
[    2.497009] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302014e0000-0x60302014effff 64bit]
[    2.497226] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302014f0000-0x60302014fffff 64bit]
[    2.497435] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201500000-0x603020150ffff 64bit]
[    2.497631] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201510000-0x603020151ffff 64bit]
[    2.497865] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201400000-0x623020141ffff 64bit]
[    2.498088] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201420000-0x623020143ffff 64bit]
[    2.498311] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201440000-0x623020145ffff 64bit]
[    2.498540] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201460000-0x623020147ffff 64bit]
[    2.498764] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201480000-0x623020149ffff 64bit]
[    2.498993] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302014a0000-0x62302014bffff 64bit]
[    2.499216] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302014c0000-0x62302014cffff 64bit]
[    2.499429] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302014d0000-0x62302014dffff 64bit]
[    2.499653] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302014e0000-0x62302014effff 64bit]
[    2.499871] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302014f0000-0x62302014fffff 64bit]
[    2.500091] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201500000-0x623020150ffff 64bit]
[    2.500316] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201510000-0x623020151ffff 64bit]
[    2.500556] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    2.500690] pci 0006:00:00.1: Associating to existing PE d
[    2.500806] pci 0006:00:01.0: Associating to existing PE d
[    2.500920] pci 0006:00:01.1: Associating to existing PE d
[    2.501037] pci 0006:00:02.0: Associating to existing PE d
[    2.501151] pci 0006:00:02.1: Associating to existing PE d
[    2.501268] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    2.501397] pci 0007:00:00.1: Associating to existing PE d
[    2.501511] pci 0007:00:01.0: Associating to existing PE d
[    2.501625] pci 0007:00:01.1: Associating to existing PE d
[    2.501742] pci 0007:00:02.0: Associating to existing PE d
[    2.501860] pci 0007:00:02.1: Associating to existing PE d
[    2.508260] EEH: PCI Enhanced I/O Error Handling Enabled
[    2.521862] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    2.522028] pci 0002:02:00.0: vgaarb: bridge control possible
[    2.522156] vgaarb: loaded
[    2.522730] SCSI subsystem initialized
[    2.523016] usbcore: registered new interface driver usbfs
[    2.523158] usbcore: registered new interface driver hub
[    2.523462] usbcore: registered new device driver usb
[    2.523653] pps_core: LinuxPPS API ver. 1 registered
[    2.523755] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    2.523949] PTP clock support registered
[    2.524665] clocksource: Switched to clocksource timebase
[    2.530461] NET: Registered protocol family 2
[    2.530992] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    2.534556] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    2.535281] TCP: Hash tables configured (established 524288 bind 65536)
[    2.535550] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    2.536839] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    2.538647] NET: Registered protocol family 1
[    2.538787] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[   24.267289408,5] IPMI: Soft shutdown requested
[    3.751626] opal-power: Poweroff requested
[    3.751844] reboot: Failed to start orderly shutdown: forcing the issue
[    3.756087] reboot: Power down
[   24.281655088,5] OPAL: Shutdown request type 0x0...
[   25.034627] INFO: rcu_sched detected stalls on CPUs/tasks:
[   25.034726] 	0-...: (1 GPs behind) idle=d01/140000000000000/0 softirq=15/15 fqs=1051 
[   25.034933] 	(detected by 4, t=2102 jiffies, g=-275, c=-276, q=1028)
[   25.035085] Task dump for CPU 0:
[   25.035163] kworker/16:1    R  running task        0   218      2 0x00000804
[   25.035321] Workqueue: events poweroff_work_func
[   25.035428] Call Trace:
[   25.035492] [c000001feaa6b800] [0000000000000000]           (null)
[   29.914642] INFO: rcu_sched detected expedited stalls on CPUs/tasks: { 0-... } 2131 jiffies s: 5 root: 0x1/.
[   29.914873] blocking rcu_node structures:
[   29.914936] Task dump for CPU 0:
[   29.915009] kworker/16:1    R  running task        0   218      2 0x00000804
[   29.915162] Workqueue: events poweroff_work_func
[   29.915270] Call Trace:
[   29.915335] [c000001feaa6b800] [0000000000000000]           (null)
[   88.084625] INFO: rcu_sched detected stalls on CPUs/tasks:
[   88.084716] 	0-...: (1 GPs behind) idle=d01/140000000000000/0 softirq=15/15 fqs=4196 
[   88.084854] 	(detected by 2, t=8407 jiffies, g=-275, c=-276, q=1028)
[   88.084983] Task dump for CPU 0:
[   88.085053] kworker/16:1    R  running task        0   218      2 0x00000804
[   88.085189] Workqueue: events poweroff_work_func
[   88.085284] Call Trace:
[   88.085338] [c000001feaa6b800] [0000000000000000]           (null)
[   95.194643] INFO: rcu_sched detected expedited stalls on CPUs/tasks: { 0-... } 8659 jiffies s: 5 root: 0x1/.
[   95.194798] blocking rcu_node structures:
[   95.194907] Task dump for CPU 0:
[   95.194973] kworker/16:1    R  running task        0   218      2 0x00000804
[   95.195121] Workqueue: events poweroff_work_func
[   95.195222] Call Trace:
[   95.195287] [c000001feaa6b800] [0000000000000000]           (null)
[  151.134626] INFO: rcu_sched detected stalls on CPUs/tasks:
[  151.134734] 	0-...: (1 GPs behind) idle=d01/140000000000000/0 softirq=15/15 fqs=7349 
[  151.134928] 	(detected by 20, t=14712 jiffies, g=-275, c=-276, q=1028)
[  151.135071] Task dump for CPU 0:
[  151.135155] kworker/16:1    R  running task        0   218      2 0x00000804
[  151.135310] Workqueue: events poweroff_work_func
[  151.135424] Call Trace:
[  151.135490] [c000001feaa6b800] [0000000000000000]           (null)
[  161.754642] INFO: rcu_sched detected expedited stalls on CPUs/tasks: { 0-... } 15315 jiffies s: 5 root: 0x1/.
[  161.754821] blocking rcu_node structures:
[  161.754887] Task dump for CPU 0:
[  161.754962] kworker/16:1    R  running task        0   218      2 0x00000804
[  161.755106] Workqueue: events poweroff_work_func
[  161.755213] Call Trace:
[  161.755275] [c000001feaa6b800] [0000000000000000]           (null)
</msg>
<status status="PASS" endtime="20170607 03:44:57.314" starttime="20170607 03:44:57.312"></status>
</kw>
<status status="PASS" endtime="20170607 03:44:57.314" starttime="20170607 03:44:35.306"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20170607 03:44:57.315" starttime="20170607 03:41:24.231">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" endtime="20170607 03:44:57.316" starttime="20170607 03:41:24.195"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" endtime="20170607 03:44:57.319" starttime="20170607 03:41:16.562"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" fail="1" name="Tests" pass="1">Tests</stat>
<stat id="s1-s1" fail="0" name="Security" pass="1">Tests.Security</stat>
<stat id="s1-s1-s1" fail="0" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" fail="1" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
