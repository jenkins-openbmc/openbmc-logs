<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171026 01:35:43.938" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<kw type="setup" name="Suite Setup Execution">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:35:44.865" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:35:44.866" starttime="20171026 01:35:44.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:35:44.867" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:35:44.867" starttime="20171026 01:35:44.866"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:35:44.867" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:35:44.868" starttime="20171026 01:35:44.867"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:35:44.868" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:35:44.868" starttime="20171026 01:35:44.868"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:35:45.346" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:35:45.346" starttime="20171026 01:35:44.869"></status>
</kw>
<msg timestamp="20171026 01:35:45.346" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:35:45.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:45.346" starttime="20171026 01:35:44.869"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:35:45.347" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:45.347" starttime="20171026 01:35:45.346"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:35:45.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:45.348" starttime="20171026 01:35:45.347"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:45.348" starttime="20171026 01:35:44.864"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:45.348" starttime="20171026 01:35:44.864"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:45.348" starttime="20171026 01:35:44.862"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:35:45.349" level="INFO">${base_uri} = /xyz/openbmc_project//dump/entry/list</msg>
<status status="PASS" endtime="20171026 01:35:45.349" starttime="20171026 01:35:45.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:35:45.350" starttime="20171026 01:35:45.349"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:35:45.428" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project//dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171026 01:35:45.428" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:45.428" starttime="20171026 01:35:45.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:35:45.429" starttime="20171026 01:35:45.428"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:35:45.429" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:35:45.429" starttime="20171026 01:35:45.429"></status>
</kw>
<msg timestamp="20171026 01:35:45.429" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:45.429" starttime="20171026 01:35:44.861"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171026 01:35:45.430" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:35:45.430" starttime="20171026 01:35:45.430"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:45.430" starttime="20171026 01:35:44.861"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Smart Power Off</arg>
</arguments>
<kw name="Smart Power Off" library="boot_utils">
<doc>Do a smart power off.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${quiet}</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20171026 01:35:45.432" level="INFO">${loc_quiet} = 0</msg>
<status status="PASS" endtime="20171026 01:35:45.432" starttime="20171026 01:35:45.431"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>REST Power Off \ stack_mode=skip</arg>
<arg>\ \ quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:35:45.432" level="INFO">${cmd_buf} = REST Power Off  stack_mode=skip   quiet=0</msg>
<status status="PASS" endtime="20171026 01:35:45.432" starttime="20171026 01:35:45.432"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
<arg>quiet=${loc_quiet}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="REST Power Off" library="boot_utils">
<doc>Do "REST Power Off" boot test.</doc>
<arguments>
<arg>stack_mode=skip</arg>
<arg>quiet=0</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=REST Power Off</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:35:45.436" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=REST Power Off  loc_stack_mode=skip  loc_quiet=0</msg>
<status status="PASS" endtime="20171026 01:35:45.436" starttime="20171026 01:35:45.434"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=REST Power Off</arg>
<arg>loc_stack_mode=skip</arg>
<arg>loc_quiet=0</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:35:45.445" starttime="20171026 01:35:45.445"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20171026 01:35:45.447" level="INFO">${boot_stack} = REST Power Off</msg>
<msg timestamp="20171026 01:35:45.447" level="INFO">${stack_mode} = skip</msg>
<msg timestamp="20171026 01:35:45.448" level="INFO">${quiet} = 0</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171026 01:35:45.558" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:35:45.558" level="INFO">Logging into '9.5.180.47:22' as 'root'.</msg>
<msg timestamp="20171026 01:35:46.908" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20171026 01:35:46.909" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171026 01:35:47.165" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171026 01:35:47.174" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171026 01:35:47.174" level="INFO">${stderr} = </msg>
<msg timestamp="20171026 01:35:47.174" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171026 01:35:47.174" starttime="20171026 01:35:45.547"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171026 01:35:47.175" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171026 01:35:47.175" starttime="20171026 01:35:47.175"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171026 01:35:47.176" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171026 01:35:47.176" starttime="20171026 01:35:47.175"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:47.176" starttime="20171026 01:35:45.546"></status>
</kw>
<msg timestamp="20171026 01:35:47.176" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20171026 01:35:47.380" level="INFO">${plug_in_packages_list} = []</msg>
<msg timestamp="20171026 01:35:47.391" level="INFO">${program_pid} = 1</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:35:47.418" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:35:47.419" starttime="20171026 01:35:47.417"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:35:47.420" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:35:47.420" starttime="20171026 01:35:47.419"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:35:47.420" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:35:47.420" starttime="20171026 01:35:47.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:35:47.421" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:35:47.421" starttime="20171026 01:35:47.421"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:35:47.816" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:35:47.816" starttime="20171026 01:35:47.422"></status>
</kw>
<msg timestamp="20171026 01:35:47.817" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:35:47.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:47.817" starttime="20171026 01:35:47.421"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:35:47.817" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:47.817" starttime="20171026 01:35:47.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:35:47.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:47.818" starttime="20171026 01:35:47.818"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:47.818" starttime="20171026 01:35:47.417"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:47.818" starttime="20171026 01:35:47.416"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:47.818" starttime="20171026 01:35:47.416"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:35:47.819" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171026 01:35:47.819" starttime="20171026 01:35:47.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:35:47.822" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:35:47.822" starttime="20171026 01:35:47.821"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:35:47.823" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:35:47.823" starttime="20171026 01:35:47.822"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:47.823" starttime="20171026 01:35:47.822"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:47.823" starttime="20171026 01:35:47.820"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:47.823" starttime="20171026 01:35:47.820"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:35:47.928" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171026 01:35:47.928" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:47.928" starttime="20171026 01:35:47.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:35:47.930" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:35:47.930" starttime="20171026 01:35:47.930"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:35:47.931" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:35:47.931" starttime="20171026 01:35:47.931"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:47.931" starttime="20171026 01:35:47.930"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:47.931" starttime="20171026 01:35:47.929"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:47.931" starttime="20171026 01:35:47.929"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:35:47.932" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:35:47.932" starttime="20171026 01:35:47.932"></status>
</kw>
<msg timestamp="20171026 01:35:47.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:47.932" starttime="20171026 01:35:47.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:35:47.933" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:47.933" starttime="20171026 01:35:47.933"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 01:35:47.934" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:35:47.934" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 01:35:47.934" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171026 01:35:47.934" starttime="20171026 01:35:47.933"></status>
</kw>
<msg timestamp="20171026 01:35:47.934" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:35:47.934" starttime="20171026 01:35:47.414"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:47.934" starttime="20171026 01:35:47.414"></status>
</kw>
<msg timestamp="20171026 01:35:47.954" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20171026 01:35:47.959" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20171026 01:35:47.959" starttime="20171026 01:35:47.406"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:35:47.961" starttime="20171026 01:35:47.961"></status>
</kw>
<msg timestamp="20171026 01:35:47.961" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:35:47.961" starttime="20171026 01:35:47.960"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20171026 01:35:47.980" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171026 01:35:47.980" starttime="20171026 01:35:47.979"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<doc>Write a D-Bus attribute with REST.</doc>
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:35:47.981" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20171026 01:35:47.981" starttime="20171026 01:35:47.981"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:35:47.984" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:35:47.984" starttime="20171026 01:35:47.983"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:35:47.986" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:35:47.986" starttime="20171026 01:35:47.986"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:35:47.987" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:35:47.987" starttime="20171026 01:35:47.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:35:47.987" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:35:47.987" starttime="20171026 01:35:47.987"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:35:48.382" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:35:48.382" starttime="20171026 01:35:47.988"></status>
</kw>
<msg timestamp="20171026 01:35:48.382" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:35:48.382" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:48.382" starttime="20171026 01:35:47.988"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:35:48.383" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:48.383" starttime="20171026 01:35:48.383"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:35:48.384" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:48.384" starttime="20171026 01:35:48.384"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:48.384" starttime="20171026 01:35:47.983"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:48.384" starttime="20171026 01:35:47.982"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:48.384" starttime="20171026 01:35:47.982"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:35:48.385" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171026 01:35:48.385" starttime="20171026 01:35:48.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:35:48.386" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:35:48.386" starttime="20171026 01:35:48.385"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:35:48.386" starttime="20171026 01:35:48.386"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:35:48.388" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Res...</msg>
<status status="PASS" endtime="20171026 01:35:48.388" starttime="20171026 01:35:48.387"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:35:48.389" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171026 01:35:48.389" starttime="20171026 01:35:48.389"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:48.389" starttime="20171026 01:35:48.388"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:48.389" starttime="20171026 01:35:48.386"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:35:48.603" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20171026 01:35:48.603" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:48.603" starttime="20171026 01:35:48.389"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:35:48.605" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:35:48.605" starttime="20171026 01:35:48.604"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:35:48.606" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:35:48.606" starttime="20171026 01:35:48.605"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:48.606" starttime="20171026 01:35:48.605"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:48.606" starttime="20171026 01:35:48.603"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:35:48.606" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:35:48.606" starttime="20171026 01:35:48.606"></status>
</kw>
<msg timestamp="20171026 01:35:48.607" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:48.607" starttime="20171026 01:35:47.981"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:35:48.607" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:48.607" starttime="20171026 01:35:48.607"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${verify} == ${FALSE}</arg>
</arguments>
<msg timestamp="20171026 01:35:48.608" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:35:48.608" starttime="20171026 01:35:48.608"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:48.608" starttime="20171026 01:35:47.980"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:48.608" starttime="20171026 01:35:47.978"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:48.608" starttime="20171026 01:35:47.962"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20171026 01:35:48.610" starttime="20171026 01:35:48.609"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:35:48.612" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20171026 01:35:48.612" starttime="20171026 01:35:48.610"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:35:48.616" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:35:48.616" starttime="20171026 01:35:48.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:35:48.617" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:35:48.617" starttime="20171026 01:35:48.616"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:35:48.617" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:35:48.617" starttime="20171026 01:35:48.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:35:48.618" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:35:48.618" starttime="20171026 01:35:48.618"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:35:48.994" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:35:48.994" starttime="20171026 01:35:48.619"></status>
</kw>
<msg timestamp="20171026 01:35:48.994" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:35:48.994" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:48.994" starttime="20171026 01:35:48.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:35:48.995" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:48.995" starttime="20171026 01:35:48.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:35:48.995" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:48.995" starttime="20171026 01:35:48.995"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:48.996" starttime="20171026 01:35:48.615"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:48.996" starttime="20171026 01:35:48.614"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:48.996" starttime="20171026 01:35:48.614"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:35:48.996" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20171026 01:35:48.996" starttime="20171026 01:35:48.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:35:48.999" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:35:48.999" starttime="20171026 01:35:48.998"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:35:49.000" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:35:49.000" starttime="20171026 01:35:49.000"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:49.000" starttime="20171026 01:35:48.999"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:49.000" starttime="20171026 01:35:48.997"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:49.001" starttime="20171026 01:35:48.997"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:35:49.130" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20171026 01:35:49.130" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:49.130" starttime="20171026 01:35:49.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:35:49.132" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:35:49.132" starttime="20171026 01:35:49.131"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:35:49.133" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:35:49.133" starttime="20171026 01:35:49.132"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:49.133" starttime="20171026 01:35:49.132"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:49.133" starttime="20171026 01:35:49.131"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:49.133" starttime="20171026 01:35:49.130"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:35:49.134" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:35:49.134" starttime="20171026 01:35:49.134"></status>
</kw>
<msg timestamp="20171026 01:35:49.134" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:49.134" starttime="20171026 01:35:48.613"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:35:49.135" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:49.135" starttime="20171026 01:35:49.135"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 01:35:49.136" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:35:49.136" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 01:35:49.136" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20171026 01:35:49.136" starttime="20171026 01:35:49.135"></status>
</kw>
<msg timestamp="20171026 01:35:49.136" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:35:49.136" starttime="20171026 01:35:48.613"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:49.136" starttime="20171026 01:35:48.612"></status>
</kw>
<msg timestamp="20171026 01:35:49.137" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:35:49.137" starttime="20171026 01:35:48.612"></status>
</kw>
<msg timestamp="20171026 01:35:49.137" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20171026 01:35:49.137" starttime="20171026 01:35:48.609"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20171026 01:35:49.137" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:49.137" starttime="20171026 01:35:49.137"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:49.138" starttime="20171026 01:35:47.405"></status>
</kw>
<msg timestamp="20171026 01:35:49.189" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 01:35:49.221" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 01:35:49.227" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20171026 01:35:49.227" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/enumerate</arg>
<arg>quiet=${0}</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:35:49.269" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:35:49.270" starttime="20171026 01:35:49.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:35:49.271" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:35:49.271" starttime="20171026 01:35:49.271"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:35:49.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:35:49.272" starttime="20171026 01:35:49.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:35:49.272" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:35:49.272" starttime="20171026 01:35:49.272"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:35:49.683" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:35:49.683" starttime="20171026 01:35:49.273"></status>
</kw>
<msg timestamp="20171026 01:35:49.683" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:35:49.683" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:49.683" starttime="20171026 01:35:49.273"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:35:49.684" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:49.684" starttime="20171026 01:35:49.684"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:35:49.685" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:49.685" starttime="20171026 01:35:49.684"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:49.685" starttime="20171026 01:35:49.268"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:49.685" starttime="20171026 01:35:49.267"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:49.685" starttime="20171026 01:35:49.266"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:35:49.687" level="INFO">${base_uri} = /xyz/openbmc_project/state/enumerate</msg>
<status status="PASS" endtime="20171026 01:35:49.687" starttime="20171026 01:35:49.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:35:49.689" level="INFO">${msg} = URI:https://9.5.180.47/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:35:49.689" starttime="20171026 01:35:49.688"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:35:49.690" level="INFO">URI:https://9.5.180.47/xyz/openbmc_project/state/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20171026 01:35:49.690" starttime="20171026 01:35:49.689"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:49.690" starttime="20171026 01:35:49.689"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:49.690" starttime="20171026 01:35:49.687"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:49.690" starttime="20171026 01:35:49.687"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:35:50.009" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:35:50.010" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:50.010" starttime="20171026 01:35:49.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20171026 01:35:50.011" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc...</msg>
<status status="PASS" endtime="20171026 01:35:50.012" starttime="20171026 01:35:50.011"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20171026 01:35:50.013" level="INFO">Response code:200, Content:{
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171026 01:35:50.013" starttime="20171026 01:35:50.013"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:50.013" starttime="20171026 01:35:50.012"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:50.013" starttime="20171026 01:35:50.010"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:50.013" starttime="20171026 01:35:50.010"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:35:50.014" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:35:50.014" starttime="20171026 01:35:50.014"></status>
</kw>
<msg timestamp="20171026 01:35:50.014" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:35:50.014" starttime="20171026 01:35:49.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:35:50.015" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:35:50.015" starttime="20171026 01:35:50.014"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20171026 01:35:50.016" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/state/bmc0": {
      "CurrentBMCState": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
      "RequestedBMCTransition": "xyz.openbmc_project.State.BMC.Transition.None"
    }, 
    "/xyz/openbmc_project/state/chassis0": {
      "CurrentPowerState": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
      "RequestedPowerTransition": "xyz.openbmc_project.State.Chassis.Transition.Off"
    }, 
    "/xyz/openbmc_project/state/host0": {
      "AttemptsLeft": 3, 
      "BootProgress": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
      "CurrentHostState": "xyz.openbmc_project.State.Host.HostState.Off", 
      "OperatingSystemState": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
      "RequestedHostTransition": "xyz.openbmc_project.State.Host.Transition.Off"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:35:50.016" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20171026 01:35:50.016" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/state/host0': {u'CurrentHostState': u'xyz.openbmc_project.State.Host.HostState.Off', u'RequestedHostTransition': u'xyz.openbm...</msg>
<status status="PASS" endtime="20171026 01:35:50.016" starttime="20171026 01:35:50.015"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:50.016" starttime="20171026 01:35:49.263"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:50.075" starttime="20171026 01:35:45.446"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20171026 01:35:50.080" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20171026 01:35:50.090" level="INFO">${boot_stack} = </msg>
<msg timestamp="20171026 01:35:50.091" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20171026 01:35:50.091" level="INFO">${quiet} = 0</msg>
<status status="PASS" endtime="20171026 01:35:50.091" starttime="20171026 01:35:50.075"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:50.091" starttime="20171026 01:35:45.444"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:50.091" starttime="20171026 01:35:45.436"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:50.091" starttime="20171026 01:35:45.433"></status>
</kw>
<msg timestamp="20171026 01:35:50.092" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:35:50.092" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:35:50.092" starttime="20171026 01:35:45.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'PASS'</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20171026 01:35:50.093" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:35:50.093" starttime="20171026 01:35:50.093"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:50.093" starttime="20171026 01:35:50.092"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:50.093" starttime="20171026 01:35:45.431"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:50.093" starttime="20171026 01:35:45.431"></status>
</kw>
<status status="PASS" endtime="20171026 01:35:50.093" starttime="20171026 01:35:44.857"></status>
</kw>
<test id="s1-t1" name="REST BMC Code Update">
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20171026 01:35:50.095" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20171026 01:35:50.095" starttime="20171026 01:35:50.095"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20171026 01:35:50.111" level="INFO">${image_version} = v1.99.10-211-g2e47004</msg>
<status status="PASS" endtime="20171026 01:35:50.111" starttime="20171026 01:35:50.096"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20171026 01:35:50.112" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20171026 01:36:02.587" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20171026 01:36:02.588" starttime="20171026 01:35:50.112"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:36:02.592" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:36:02.593" starttime="20171026 01:36:02.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:36:02.594" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:36:02.594" starttime="20171026 01:36:02.593"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:36:02.594" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:36:02.594" starttime="20171026 01:36:02.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:36:02.595" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:36:02.595" starttime="20171026 01:36:02.595"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:36:03.088" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:36:03.088" starttime="20171026 01:36:02.596"></status>
</kw>
<msg timestamp="20171026 01:36:03.088" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:03.088" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:03.088" starttime="20171026 01:36:02.596"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:36:03.090" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:03.090" starttime="20171026 01:36:03.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:03.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:03.091" starttime="20171026 01:36:03.091"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:03.091" starttime="20171026 01:36:02.591"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:03.091" starttime="20171026 01:36:02.590"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:03.092" starttime="20171026 01:36:02.589"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:36:03.092" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20171026 01:36:03.092" starttime="20171026 01:36:03.092"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:36:03.093" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20171026 01:36:03.093" starttime="20171026 01:36:03.092"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:03.094" starttime="20171026 01:36:03.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:03.095" starttime="20171026 01:36:03.094"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:36:13.113" level="FAIL">SSLError: ('The write operation timed out',)</msg>
<status status="FAIL" endtime="20171026 01:36:13.113" starttime="20171026 01:36:03.095"></status>
</kw>
<status status="FAIL" endtime="20171026 01:36:13.113" starttime="20171026 01:36:02.588"></status>
</kw>
<status status="FAIL" endtime="20171026 01:36:13.113" starttime="20171026 01:35:50.094"></status>
</kw>
<kw type="teardown" name="REST BMC Code Update Teardown">
<doc>Do code update test teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.5.180.47</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20171026 01:36:13.126" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20171026 01:36:13.126" starttime="20171026 01:36:13.126"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20171026 01:36:13.135" level="INFO">Running command 'ping -c 4 9.5.180.47 2&gt;&amp;1'.</msg>
<msg timestamp="20171026 01:36:16.196" level="INFO">${RC} = 0</msg>
<msg timestamp="20171026 01:36:16.197" level="INFO">${output} = PING 9.5.180.47 (9.5.180.47) 56(84) bytes of data.
64 bytes from 9.5.180.47: icmp_seq=1 ttl=50 time=39.5 ms
64 bytes from 9.5.180.47: icmp_seq=2 ttl=50 time=78.4 ms
64 bytes from 9.5.180.47: icmp_seq=...</msg>
<status status="PASS" endtime="20171026 01:36:16.197" starttime="20171026 01:36:13.127"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.201" level="INFO">RC: 0
Output:
PING 9.5.180.47 (9.5.180.47) 56(84) bytes of data.
64 bytes from 9.5.180.47: icmp_seq=1 ttl=50 time=39.5 ms
64 bytes from 9.5.180.47: icmp_seq=2 ttl=50 time=78.4 ms
64 bytes from 9.5.180.47: icmp_seq=3 ttl=50 time=80.6 ms
64 bytes from 9.5.180.47: icmp_seq=4 ttl=50 time=58.7 ms

--- 9.5.180.47 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 39.535/64.342/80.620/16.655 ms</msg>
<status status="PASS" endtime="20171026 01:36:16.201" starttime="20171026 01:36:16.200"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:16.202" starttime="20171026 01:36:16.201"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.202" starttime="20171026 01:36:13.124"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 01:36:16.216" level="INFO">${cur_time} = 2017-10-26 01:36:16:215605</msg>
<status status="PASS" endtime="20171026 01:36:16.216" starttime="20171026 01:36:16.215"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 01:36:16.217" level="INFO">${cur_time} = 20171026013616215605</msg>
<status status="PASS" endtime="20171026 01:36:16.217" starttime="20171026 01:36:16.216"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.217" starttime="20171026 01:36:16.214"></status>
</kw>
<msg timestamp="20171026 01:36:16.222" level="INFO">${FFDC_TIME} = 20171026013616215605</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171026 01:36:16.224" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20171026 01:36:16.224" starttime="20171026 01:36:16.223"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20171026 01:36:16.225" level="INFO">${suite_name} = 20171026013616215605_BmcCodeUpdate</msg>
<status status="PASS" endtime="20171026 01:36:16.225" starttime="20171026 01:36:16.224"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171026 01:36:16.225" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171026 01:36:16.225" starttime="20171026 01:36:16.225"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20171026 01:36:16.226" level="INFO">${test_name} = 20171026013616215605_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20171026 01:36:16.226" starttime="20171026 01:36:16.225"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.226" starttime="20171026 01:36:16.223"></status>
</kw>
<msg timestamp="20171026 01:36:16.226" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/</msg>
<msg timestamp="20171026 01:36:16.227" level="INFO">${FFDC_PREFIX} = 20171026013616215605_</msg>
<msg timestamp="20171026 01:36:16.246" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20171026 01:36:16.247" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.247" starttime="20171026 01:36:16.247"></status>
</kw>
<msg timestamp="20171026 01:36:16.253" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.263" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.263" starttime="20171026 01:36:16.263"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.263" starttime="20171026 01:36:16.262"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.264" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.265" starttime="20171026 01:36:16.264"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.265" starttime="20171026 01:36:16.264"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.266" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.266" starttime="20171026 01:36:16.266"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.266" starttime="20171026 01:36:16.265"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.267" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.268" starttime="20171026 01:36:16.267"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.268" starttime="20171026 01:36:16.266"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.269" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.269" starttime="20171026 01:36:16.269"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.269" starttime="20171026 01:36:16.268"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.274" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.274" starttime="20171026 01:36:16.270"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.275" starttime="20171026 01:36:16.269"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.276" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.276" starttime="20171026 01:36:16.276"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.276" starttime="20171026 01:36:16.275"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.277" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.277" starttime="20171026 01:36:16.277"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.278" starttime="20171026 01:36:16.276"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.279" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.279" starttime="20171026 01:36:16.278"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.279" starttime="20171026 01:36:16.278"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.280" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.280" starttime="20171026 01:36:16.280"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.281" starttime="20171026 01:36:16.279"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.282" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.282" starttime="20171026 01:36:16.281"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.282" starttime="20171026 01:36:16.281"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.283" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.283" starttime="20171026 01:36:16.283"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.283" starttime="20171026 01:36:16.282"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.284" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.285" starttime="20171026 01:36:16.284"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.285" starttime="20171026 01:36:16.283"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
<arg>test_mode=0</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171026 01:36:16.294" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:36:16.295" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20171026 01:36:16.497" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20171026 01:36:16.506" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20171026 01:36:16.506" level="INFO">${stderr} = </msg>
<msg timestamp="20171026 01:36:16.506" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20171026 01:36:16.506" starttime="20171026 01:36:16.285"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.506" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20171026 01:36:16.506" starttime="20171026 01:36:16.506"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.507" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20171026 01:36:16.507" starttime="20171026 01:36:16.507"></status>
</kw>
<msg timestamp="20171026 01:36:16.507" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20171026 01:36:16.507" starttime="20171026 01:36:16.285"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.508" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.509" starttime="20171026 01:36:16.508"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.509" starttime="20171026 01:36:16.507"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.509" starttime="20171026 01:36:16.279"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.510" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.510" starttime="20171026 01:36:16.510"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.511" starttime="20171026 01:36:16.509"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:36:16.511" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171026 01:36:16.511" starttime="20171026 01:36:16.511"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.513" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.513" starttime="20171026 01:36:16.512"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.513" starttime="20171026 01:36:16.511"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.514" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.514" starttime="20171026 01:36:16.514"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.514" starttime="20171026 01:36:16.513"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.514" starttime="20171026 01:36:16.511"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.515" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.516" starttime="20171026 01:36:16.515"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.516" starttime="20171026 01:36:16.514"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.517" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.517" starttime="20171026 01:36:16.516"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.517" starttime="20171026 01:36:16.516"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.517" starttime="20171026 01:36:16.514"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.518" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.518" starttime="20171026 01:36:16.518"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.519" starttime="20171026 01:36:16.517"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.520" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.520" starttime="20171026 01:36:16.519"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.520" starttime="20171026 01:36:16.519"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.520" starttime="20171026 01:36:16.517"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.520" starttime="20171026 01:36:16.511"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.521" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.521" starttime="20171026 01:36:16.521"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.521" starttime="20171026 01:36:16.520"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.521" starttime="20171026 01:36:16.262"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:36:16.527" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20171026 01:36:16.527" starttime="20171026 01:36:16.526"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20171026 01:36:16.528" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20171026 01:36:16.528" starttime="20171026 01:36:16.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:16.529" starttime="20171026 01:36:16.529"></status>
</kw>
<msg timestamp="20171026 01:36:16.530" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20171026 01:36:16.530" starttime="20171026 01:36:16.529"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:16.532" starttime="20171026 01:36:16.532"></status>
</kw>
<msg timestamp="20171026 01:36:16.532" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:16.532" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:36:16.532" starttime="20171026 01:36:16.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:16.533" starttime="20171026 01:36:16.533"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:36:16.547" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20171026 01:36:16.547" starttime="20171026 01:36:16.547"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:36:16.548" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20171026 01:36:16.548" starttime="20171026 01:36:16.548"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.555" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20171026 01:36:16.555" starttime="20171026 01:36:16.549"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.558" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.558" starttime="20171026 01:36:16.558"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.558" starttime="20171026 01:36:16.557"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.560" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.560" starttime="20171026 01:36:16.559"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.560" starttime="20171026 01:36:16.558"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.561" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.561" starttime="20171026 01:36:16.561"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.561" starttime="20171026 01:36:16.560"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:16.562" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:16.563" starttime="20171026 01:36:16.562"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.563" starttime="20171026 01:36:16.562"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.563" starttime="20171026 01:36:16.557"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:16.563" starttime="20171026 01:36:16.556"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:36:16.564" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:36:16.564" starttime="20171026 01:36:16.563"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:36:16.605" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:36:16.605" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20171026 01:36:18.657" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:36:18.657" starttime="20171026 01:36:16.581"></status>
</kw>
<msg timestamp="20171026 01:36:18.657" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:18.657" level="INFO">${ret_values} = (u'CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState    : xyz.openbmc_project.State.Host.Host...</msg>
<status status="PASS" endtime="20171026 01:36:18.657" starttime="20171026 01:36:16.564"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:36:18.658" level="INFO">${stdout} = CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState    : xyz.openbmc_project.State.Host.HostState...</msg>
<status status="PASS" endtime="20171026 01:36:18.658" starttime="20171026 01:36:18.658"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:36:18.659" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:36:18.659" starttime="20171026 01:36:18.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:18.666" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:18.667" starttime="20171026 01:36:18.666"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.667" starttime="20171026 01:36:18.665"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.667" starttime="20171026 01:36:18.659"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.667" starttime="20171026 01:36:16.555"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.667" starttime="20171026 01:36:16.555"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.667" starttime="20171026 01:36:16.555"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.667" starttime="20171026 01:36:16.548"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.667" starttime="20171026 01:36:16.547"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:36:18.668" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20171026 01:36:18.668" starttime="20171026 01:36:18.668"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171026 01:36:18.669" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20171026 01:36:18.669" starttime="20171026 01:36:18.669"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:18.672" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:18.672" starttime="20171026 01:36:18.672"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.672" starttime="20171026 01:36:18.671"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:18.674" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:18.674" starttime="20171026 01:36:18.673"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.674" starttime="20171026 01:36:18.673"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:18.675" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:18.675" starttime="20171026 01:36:18.675"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.676" starttime="20171026 01:36:18.674"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:18.677" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:18.677" starttime="20171026 01:36:18.676"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.677" starttime="20171026 01:36:18.676"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.677" starttime="20171026 01:36:18.671"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.677" starttime="20171026 01:36:18.670"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:36:18.678" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:36:18.678" starttime="20171026 01:36:18.677"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:36:18.718" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:36:18.719" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20171026 01:36:18.975" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:36:18.975" starttime="20171026 01:36:18.696"></status>
</kw>
<msg timestamp="20171026 01:36:18.975" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:18.975" level="INFO">${ret_values} = (u'20171026004218', u'', 0)</msg>
<status status="PASS" endtime="20171026 01:36:18.975" starttime="20171026 01:36:18.678"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:36:18.976" level="INFO">${stdout} = 20171026004218</msg>
<status status="PASS" endtime="20171026 01:36:18.976" starttime="20171026 01:36:18.975"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:36:18.976" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:36:18.976" starttime="20171026 01:36:18.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:18.984" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:18.984" starttime="20171026 01:36:18.984"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.984" starttime="20171026 01:36:18.983"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.984" starttime="20171026 01:36:18.977"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.984" starttime="20171026 01:36:18.669"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.984" starttime="20171026 01:36:18.669"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:18.987" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:18.987" starttime="20171026 01:36:18.987"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.988" starttime="20171026 01:36:18.986"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:18.989" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:18.989" starttime="20171026 01:36:18.989"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.989" starttime="20171026 01:36:18.988"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:18.990" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:18.990" starttime="20171026 01:36:18.990"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.990" starttime="20171026 01:36:18.989"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:18.992" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:18.992" starttime="20171026 01:36:18.991"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.992" starttime="20171026 01:36:18.991"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.992" starttime="20171026 01:36:18.986"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:18.992" starttime="20171026 01:36:18.986"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:36:18.993" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:36:18.993" starttime="20171026 01:36:18.993"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:36:19.034" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:36:19.035" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20171026 01:36:19.309" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:36:19.310" starttime="20171026 01:36:19.011"></status>
</kw>
<msg timestamp="20171026 01:36:19.310" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:19.310" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-210"\nVERSION_ID="v1.99.10-210-gbd5b518"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status status="PASS" endtime="20171026 01:36:19.310" starttime="20171026 01:36:18.993"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:36:19.311" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-210"
VERSION_ID="v1.99.10-210-gbd5b518"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status status="PASS" endtime="20171026 01:36:19.311" starttime="20171026 01:36:19.310"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:36:19.311" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:36:19.311" starttime="20171026 01:36:19.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:19.319" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:19.319" starttime="20171026 01:36:19.319"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.319" starttime="20171026 01:36:19.318"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.319" starttime="20171026 01:36:19.312"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.319" starttime="20171026 01:36:18.985"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.319" starttime="20171026 01:36:18.984"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.319" starttime="20171026 01:36:18.669"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.320" starttime="20171026 01:36:18.667"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.320" starttime="20171026 01:36:18.667"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:36:19.321" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20171026 01:36:19.321" starttime="20171026 01:36:19.320"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20171026 01:36:19.321" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20171026 01:36:19.322" starttime="20171026 01:36:19.321"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:19.325" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:19.325" starttime="20171026 01:36:19.324"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.325" starttime="20171026 01:36:19.324"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:19.326" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:19.326" starttime="20171026 01:36:19.326"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.326" starttime="20171026 01:36:19.325"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:19.328" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:19.328" starttime="20171026 01:36:19.327"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.328" starttime="20171026 01:36:19.327"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:19.329" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:19.329" starttime="20171026 01:36:19.329"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.329" starttime="20171026 01:36:19.328"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.330" starttime="20171026 01:36:19.323"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.330" starttime="20171026 01:36:19.323"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:36:19.330" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:36:19.330" starttime="20171026 01:36:19.330"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:36:19.371" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:36:19.371" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20171026 01:36:19.675" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:36:19.675" starttime="20171026 01:36:19.348"></status>
</kw>
<msg timestamp="20171026 01:36:19.675" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:19.676" level="INFO">${ret_values} = (u' 01:36:30 up 38 min,  load average: 0.25, 0.25, 0.47', u'', 0)</msg>
<status status="PASS" endtime="20171026 01:36:19.676" starttime="20171026 01:36:19.331"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:36:19.676" level="INFO">${stdout} =  01:36:30 up 38 min,  load average: 0.25, 0.25, 0.47</msg>
<status status="PASS" endtime="20171026 01:36:19.676" starttime="20171026 01:36:19.676"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:36:19.677" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:36:19.677" starttime="20171026 01:36:19.677"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:19.685" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:19.685" starttime="20171026 01:36:19.684"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.685" starttime="20171026 01:36:19.683"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.685" starttime="20171026 01:36:19.677"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.685" starttime="20171026 01:36:19.322"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.685" starttime="20171026 01:36:19.322"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:19.688" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:19.688" starttime="20171026 01:36:19.688"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.688" starttime="20171026 01:36:19.687"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:19.690" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:19.690" starttime="20171026 01:36:19.689"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.690" starttime="20171026 01:36:19.689"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:19.691" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:19.691" starttime="20171026 01:36:19.691"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.691" starttime="20171026 01:36:19.690"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:19.692" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:19.692" starttime="20171026 01:36:19.692"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.693" starttime="20171026 01:36:19.691"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.693" starttime="20171026 01:36:19.687"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:19.693" starttime="20171026 01:36:19.686"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:36:19.693" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:36:19.694" starttime="20171026 01:36:19.693"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:36:19.734" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:36:19.741" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20171026 01:36:20.051" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:36:20.051" starttime="20171026 01:36:19.712"></status>
</kw>
<msg timestamp="20171026 01:36:20.051" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:20.051" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20171026 01:36:20.051" starttime="20171026 01:36:19.694"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:36:20.052" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20171026 01:36:20.052" starttime="20171026 01:36:20.052"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:36:20.052" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:36:20.053" starttime="20171026 01:36:20.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:20.061" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:20.061" starttime="20171026 01:36:20.060"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.061" starttime="20171026 01:36:20.059"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.061" starttime="20171026 01:36:20.053"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.061" starttime="20171026 01:36:19.685"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.061" starttime="20171026 01:36:19.685"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:20.064" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:20.064" starttime="20171026 01:36:20.064"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.064" starttime="20171026 01:36:20.063"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:20.066" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:20.066" starttime="20171026 01:36:20.065"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.066" starttime="20171026 01:36:20.064"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:20.067" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:20.067" starttime="20171026 01:36:20.067"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.067" starttime="20171026 01:36:20.066"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:20.068" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:20.068" starttime="20171026 01:36:20.068"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.068" starttime="20171026 01:36:20.067"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.069" starttime="20171026 01:36:20.063"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.069" starttime="20171026 01:36:20.062"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:36:20.069" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:36:20.069" starttime="20171026 01:36:20.069"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:36:20.111" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:36:20.112" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20171026 01:36:20.438" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:36:20.438" starttime="20171026 01:36:20.088"></status>
</kw>
<msg timestamp="20171026 01:36:20.438" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:20.439" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-da78428ac543d6d9ac2493dfa77364eb300a47cb #1 Mon Oct 23 15:28:01 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20171026 01:36:20.439" starttime="20171026 01:36:20.070"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:36:20.439" level="INFO">${stdout} = Linux witherspoon 4.10.17-da78428ac543d6d9ac2493dfa77364eb300a47cb #1 Mon Oct 23 15:28:01 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20171026 01:36:20.439" starttime="20171026 01:36:20.439"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:36:20.440" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:36:20.440" starttime="20171026 01:36:20.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:20.448" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:20.448" starttime="20171026 01:36:20.448"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.448" starttime="20171026 01:36:20.447"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.448" starttime="20171026 01:36:20.440"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.448" starttime="20171026 01:36:20.061"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.448" starttime="20171026 01:36:20.061"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.449" starttime="20171026 01:36:19.322"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.449" starttime="20171026 01:36:19.320"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.449" starttime="20171026 01:36:19.320"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.449" starttime="20171026 01:36:16.547"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.449" starttime="20171026 01:36:16.546"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.449" starttime="20171026 01:36:16.533"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.449" starttime="20171026 01:36:16.530"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.449" starttime="20171026 01:36:16.530"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:20.451" starttime="20171026 01:36:20.451"></status>
</kw>
<msg timestamp="20171026 01:36:20.451" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:20.451" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:36:20.451" starttime="20171026 01:36:20.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:20.452" starttime="20171026 01:36:20.451"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:36:20.466" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20171026 01:36:20.466" starttime="20171026 01:36:20.465"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:36:20.467" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20171026 01:36:20.467" starttime="20171026 01:36:20.467"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:36:20.468" level="INFO">${logpath} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20171026 01:36:20.468" starttime="20171026 01:36:20.468"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:36:20.471" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:36:20.472" starttime="20171026 01:36:20.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:36:20.472" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:36:20.472" starttime="20171026 01:36:20.472"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:36:20.473" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:36:20.473" starttime="20171026 01:36:20.473"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:36:20.474" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:36:20.474" starttime="20171026 01:36:20.473"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:36:20.808" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:36:20.808" starttime="20171026 01:36:20.475"></status>
</kw>
<msg timestamp="20171026 01:36:20.808" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:20.808" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:20.808" starttime="20171026 01:36:20.474"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:36:20.809" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:20.809" starttime="20171026 01:36:20.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:20.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:20.810" starttime="20171026 01:36:20.809"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.810" starttime="20171026 01:36:20.470"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.810" starttime="20171026 01:36:20.470"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:20.810" starttime="20171026 01:36:20.469"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:36:20.811" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20171026 01:36:20.811" starttime="20171026 01:36:20.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:20.811" starttime="20171026 01:36:20.811"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:36:21.577" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:36:21.577" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:21.577" starttime="20171026 01:36:20.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:21.578" starttime="20171026 01:36:21.578"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:36:21.578" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:36:21.579" starttime="20171026 01:36:21.578"></status>
</kw>
<msg timestamp="20171026 01:36:21.579" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:21.579" starttime="20171026 01:36:20.468"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:21.580" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:21.580" starttime="20171026 01:36:21.580"></status>
</kw>
<msg timestamp="20171026 01:36:21.580" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:36:21.580" starttime="20171026 01:36:21.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:21.581" starttime="20171026 01:36:21.581"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:36:21.583" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 180000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 125, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 170000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 7200, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 7200, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 7200, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 20000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 2500000000, 
      "CriticalLow": 0, 
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 20000000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 2350000000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 35000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21981, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 25000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 2000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 85000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 2000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 80000, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 203000, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 300000, 
      "CriticalLow": 180000, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 204500, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 290000, 
      "WarningLow": 200000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "CriticalAlarmHigh": 0, 
      "CriticalAlarmLow": 0, 
      "CriticalHigh": 13000, 
      "CriticalLow": 0, 
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0, 
      "WarningAlarmHigh": 0, 
      "WarningAlarmLow": 0, 
      "WarningHigh": 12700, 
      "WarningLow": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:36:21.583" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:36:21.583" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "CriticalAlarmHigh": 0,
            "CriticalAlarmLow": 0,
            "CriticalHigh": 180000,
        ...</msg>
<status status="PASS" endtime="20171026 01:36:21.583" starttime="20171026 01:36:21.581"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:21.585" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:21.585" starttime="20171026 01:36:21.584"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:21.585" starttime="20171026 01:36:21.583"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:21.585" starttime="20171026 01:36:20.467"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:36:21.586" level="INFO">${logpath} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_OCC_state.txt</msg>
<status status="PASS" endtime="20171026 01:36:21.586" starttime="20171026 01:36:21.586"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:36:21.589" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:36:21.589" starttime="20171026 01:36:21.589"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:36:21.590" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:36:21.590" starttime="20171026 01:36:21.590"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:36:21.590" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:36:21.591" starttime="20171026 01:36:21.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:36:21.592" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:36:21.592" starttime="20171026 01:36:21.591"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:36:21.908" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:36:21.908" starttime="20171026 01:36:21.592"></status>
</kw>
<msg timestamp="20171026 01:36:21.908" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:21.908" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:21.908" starttime="20171026 01:36:21.592"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:36:21.909" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:21.909" starttime="20171026 01:36:21.908"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:21.909" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:21.909" starttime="20171026 01:36:21.909"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:21.910" starttime="20171026 01:36:21.588"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:21.910" starttime="20171026 01:36:21.588"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:21.910" starttime="20171026 01:36:21.587"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:36:21.910" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20171026 01:36:21.910" starttime="20171026 01:36:21.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:21.911" starttime="20171026 01:36:21.911"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:36:22.093" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:36:22.094" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:22.094" starttime="20171026 01:36:21.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:22.094" starttime="20171026 01:36:22.094"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:36:22.095" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:36:22.095" starttime="20171026 01:36:22.095"></status>
</kw>
<msg timestamp="20171026 01:36:22.095" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:22.095" starttime="20171026 01:36:21.586"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:22.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:22.096" starttime="20171026 01:36:22.096"></status>
</kw>
<msg timestamp="20171026 01:36:22.097" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:36:22.097" starttime="20171026 01:36:22.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:22.097" starttime="20171026 01:36:22.097"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:36:22.098" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:36:22.098" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:36:22.098" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0,
            "ThrottleMemTemp": 0,
            "ThrottleProcPower": 0,...</msg>
<status status="PASS" endtime="20171026 01:36:22.098" starttime="20171026 01:36:22.097"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:22.099" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_OCC_state.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:22.100" starttime="20171026 01:36:22.099"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:22.100" starttime="20171026 01:36:22.098"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:22.100" starttime="20171026 01:36:21.585"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:36:22.101" level="INFO">${logpath} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_control_list.txt</msg>
<status status="PASS" endtime="20171026 01:36:22.101" starttime="20171026 01:36:22.100"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:36:22.103" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:36:22.104" starttime="20171026 01:36:22.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:36:22.105" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:36:22.105" starttime="20171026 01:36:22.105"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:36:22.106" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:36:22.106" starttime="20171026 01:36:22.105"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:36:22.106" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:36:22.106" starttime="20171026 01:36:22.106"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:36:22.571" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:36:22.571" starttime="20171026 01:36:22.107"></status>
</kw>
<msg timestamp="20171026 01:36:22.571" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:22.571" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:22.571" starttime="20171026 01:36:22.107"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:36:22.572" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:22.572" starttime="20171026 01:36:22.571"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:22.572" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:22.573" starttime="20171026 01:36:22.572"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:22.573" starttime="20171026 01:36:22.102"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:22.573" starttime="20171026 01:36:22.102"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:22.573" starttime="20171026 01:36:22.101"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:36:22.573" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20171026 01:36:22.573" starttime="20171026 01:36:22.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:22.574" starttime="20171026 01:36:22.574"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:36:22.841" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:36:22.841" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:22.841" starttime="20171026 01:36:22.574"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:22.842" starttime="20171026 01:36:22.842"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:36:22.842" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:36:22.843" starttime="20171026 01:36:22.842"></status>
</kw>
<msg timestamp="20171026 01:36:22.843" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:22.843" starttime="20171026 01:36:22.101"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:22.844" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:22.844" starttime="20171026 01:36:22.844"></status>
</kw>
<msg timestamp="20171026 01:36:22.844" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:36:22.844" starttime="20171026 01:36:22.843"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:22.845" starttime="20171026 01:36:22.844"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:36:22.846" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:36:22.846" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:36:22.846" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20171026 01:36:22.846" starttime="20171026 01:36:22.845"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:22.847" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_control_list.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:22.847" starttime="20171026 01:36:22.847"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:22.848" starttime="20171026 01:36:22.846"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:22.848" starttime="20171026 01:36:22.100"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:36:22.848" level="INFO">${logpath} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_led.txt</msg>
<status status="PASS" endtime="20171026 01:36:22.848" starttime="20171026 01:36:22.848"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:36:22.851" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:36:22.853" starttime="20171026 01:36:22.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:36:22.854" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:36:22.854" starttime="20171026 01:36:22.854"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:36:22.855" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:36:22.855" starttime="20171026 01:36:22.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:36:22.855" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:36:22.856" starttime="20171026 01:36:22.855"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:36:23.186" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:36:23.186" starttime="20171026 01:36:22.856"></status>
</kw>
<msg timestamp="20171026 01:36:23.186" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:23.186" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:23.186" starttime="20171026 01:36:22.856"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:36:23.187" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:23.187" starttime="20171026 01:36:23.187"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:23.188" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:23.188" starttime="20171026 01:36:23.187"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:23.188" starttime="20171026 01:36:22.850"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:23.188" starttime="20171026 01:36:22.850"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:23.188" starttime="20171026 01:36:22.849"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:36:23.189" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20171026 01:36:23.189" starttime="20171026 01:36:23.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:23.190" starttime="20171026 01:36:23.189"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:36:25.005" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:36:25.006" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:25.006" starttime="20171026 01:36:23.190"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:25.006" starttime="20171026 01:36:25.006"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:36:25.007" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:36:25.007" starttime="20171026 01:36:25.007"></status>
</kw>
<msg timestamp="20171026 01:36:25.007" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:25.008" starttime="20171026 01:36:22.849"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:25.009" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:25.009" starttime="20171026 01:36:25.008"></status>
</kw>
<msg timestamp="20171026 01:36:25.009" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:36:25.009" starttime="20171026 01:36:25.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:25.009" starttime="20171026 01:36:25.009"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:36:25.011" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:36:25.012" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:36:25.012" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20171026 01:36:25.012" starttime="20171026 01:36:25.010"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:25.013" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_led.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:25.013" starttime="20171026 01:36:25.013"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:25.014" starttime="20171026 01:36:25.012"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:25.014" starttime="20171026 01:36:22.848"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:36:25.014" level="INFO">${logpath} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20171026 01:36:25.014" starttime="20171026 01:36:25.014"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:36:25.017" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:36:25.018" starttime="20171026 01:36:25.017"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:36:25.019" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:36:25.019" starttime="20171026 01:36:25.018"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:36:25.019" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:36:25.019" starttime="20171026 01:36:25.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:36:25.020" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:36:25.020" starttime="20171026 01:36:25.020"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:36:25.375" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:36:25.375" starttime="20171026 01:36:25.021"></status>
</kw>
<msg timestamp="20171026 01:36:25.375" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:25.375" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:25.375" starttime="20171026 01:36:25.020"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:36:25.376" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:25.376" starttime="20171026 01:36:25.375"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:25.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:25.377" starttime="20171026 01:36:25.376"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:25.377" starttime="20171026 01:36:25.016"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:25.377" starttime="20171026 01:36:25.016"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:25.377" starttime="20171026 01:36:25.015"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:36:25.378" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20171026 01:36:25.378" starttime="20171026 01:36:25.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:25.378" starttime="20171026 01:36:25.378"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:36:25.718" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:36:25.718" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:25.718" starttime="20171026 01:36:25.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:25.719" starttime="20171026 01:36:25.719"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:36:25.720" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:36:25.720" starttime="20171026 01:36:25.719"></status>
</kw>
<msg timestamp="20171026 01:36:25.720" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:25.720" starttime="20171026 01:36:25.015"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:25.721" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:25.721" starttime="20171026 01:36:25.721"></status>
</kw>
<msg timestamp="20171026 01:36:25.721" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:36:25.721" starttime="20171026 01:36:25.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:25.722" starttime="20171026 01:36:25.722"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:36:25.723" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/0fab445b": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-210-gbd5b518", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/0fab445b/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/0fab445b/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/347855ea": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-208-g69b2e34", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/347855ea/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/347855ea/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/390e9d0f": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1471-g8043efb,buildroot-2017.08-8-g5e23247,skiboot-v5.8-150-gabb1d4e81f33-p74eca7d,hostboot-b01e6bb,linux-4.13.5-openpower1-pd2c0bbb,petitboot-v1.6.0-p3dc37e1,machine-xml-389c56f,occ-ba4e81e,hostboot-binaries-0886586,capp-ucode-p9-dd2-v2,sbe-374add4", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-ibm-OP9_v1.19_1.62", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/390e9d0f/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/390e9d0f/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/347855ea", 
        "/xyz/openbmc_project/software/0fab445b", 
        "/xyz/openbmc_project/software/390e9d0f"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/0fab445b", 
        "/xyz/openbmc_project/software/390e9d0f"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:36:25.723" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:36:25.723" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/0fab445b": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" endtime="20171026 01:36:25.723" starttime="20171026 01:36:25.722"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:25.725" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:25.725" starttime="20171026 01:36:25.724"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:25.725" starttime="20171026 01:36:25.723"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:25.725" starttime="20171026 01:36:25.014"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:36:25.726" level="INFO">${logpath} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_elog.txt</msg>
<status status="PASS" endtime="20171026 01:36:25.726" starttime="20171026 01:36:25.725"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:36:25.729" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:36:25.729" starttime="20171026 01:36:25.728"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:36:25.730" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:36:25.730" starttime="20171026 01:36:25.730"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:36:25.731" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:36:25.731" starttime="20171026 01:36:25.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:36:25.731" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:36:25.731" starttime="20171026 01:36:25.731"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:36:26.086" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:36:26.086" starttime="20171026 01:36:25.732"></status>
</kw>
<msg timestamp="20171026 01:36:26.086" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:26.086" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:26.086" starttime="20171026 01:36:25.732"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:36:26.087" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:26.087" starttime="20171026 01:36:26.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:26.087" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:26.088" starttime="20171026 01:36:26.087"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:26.088" starttime="20171026 01:36:25.728"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:26.088" starttime="20171026 01:36:25.727"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:26.088" starttime="20171026 01:36:25.727"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:36:26.088" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20171026 01:36:26.089" starttime="20171026 01:36:26.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:26.089" starttime="20171026 01:36:26.089"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:36:26.178" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:36:26.178" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:26.178" starttime="20171026 01:36:26.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:26.179" starttime="20171026 01:36:26.178"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:36:26.179" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:36:26.179" starttime="20171026 01:36:26.179"></status>
</kw>
<msg timestamp="20171026 01:36:26.180" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:26.180" starttime="20171026 01:36:25.726"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:26.181" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 01:36:26.181" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171026 01:36:26.181" starttime="20171026 01:36:26.180"></status>
</kw>
<msg timestamp="20171026 01:36:26.181" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171026 01:36:26.181" starttime="20171026 01:36:26.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20171026 01:36:26.182" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171026 01:36:26.183" starttime="20171026 01:36:26.182"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:26.183" starttime="20171026 01:36:26.182"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:26.183" starttime="20171026 01:36:25.725"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:36:26.183" level="INFO">${logpath} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_inventory.txt</msg>
<status status="PASS" endtime="20171026 01:36:26.183" starttime="20171026 01:36:26.183"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:36:26.186" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:36:26.187" starttime="20171026 01:36:26.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:36:26.188" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:36:26.188" starttime="20171026 01:36:26.187"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:36:26.188" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:36:26.188" starttime="20171026 01:36:26.188"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:36:26.189" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:36:26.189" starttime="20171026 01:36:26.189"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:36:26.554" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:36:26.554" starttime="20171026 01:36:26.190"></status>
</kw>
<msg timestamp="20171026 01:36:26.554" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:26.554" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:26.554" starttime="20171026 01:36:26.189"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:36:26.555" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:26.555" starttime="20171026 01:36:26.554"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:26.555" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:26.555" starttime="20171026 01:36:26.555"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:26.556" starttime="20171026 01:36:26.186"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:26.556" starttime="20171026 01:36:26.185"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:26.556" starttime="20171026 01:36:26.184"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:36:26.556" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20171026 01:36:26.556" starttime="20171026 01:36:26.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:26.557" starttime="20171026 01:36:26.557"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:36:28.458" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:36:28.458" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:28.458" starttime="20171026 01:36:26.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:28.459" starttime="20171026 01:36:28.458"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:36:28.459" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:36:28.459" starttime="20171026 01:36:28.459"></status>
</kw>
<msg timestamp="20171026 01:36:28.460" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:36:28.460" starttime="20171026 01:36:26.184"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:36:28.461" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:36:28.461" starttime="20171026 01:36:28.460"></status>
</kw>
<msg timestamp="20171026 01:36:28.461" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171026 01:36:28.461" starttime="20171026 01:36:28.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:28.462" starttime="20171026 01:36:28.461"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20171026 01:36:28.464" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "'8335-GTW000000'", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "'1318AAA0000000'"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/390e9d0f"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM WS", 
      "Model": "", 
      "PartNumber": "'00VK5250000000'", 
      "Present": 1, 
      "PrettyName": "FRU DESCRIPTION", 
      "SerialNumber": "Y130UF72702N0000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/0fab445b", 
        "/xyz/openbmc_project/software/347855ea"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:2a:08", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA862", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA1934095325", 
      "Version": "21"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "02AA862", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA1934095327", 
      "Version": "21"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447ab88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x34479965", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106206", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106774", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x1610632b", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x161067d9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16105459", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106032", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447b3cb", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447b1ae", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x347a74db", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447a78b", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x3447ab90", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A4K40BB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x347a7465", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x161067bc", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF4G72PZ-2G6D1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16106204", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 0, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20171026 01:36:28.465" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20171026 01:36:28.465" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20171026 01:36:28.465" starttime="20171026 01:36:28.462"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:36:28.467" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_inventory.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:36:28.467" starttime="20171026 01:36:28.466"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:28.467" starttime="20171026 01:36:28.465"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:28.467" starttime="20171026 01:36:26.183"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:28.467" starttime="20171026 01:36:20.467"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:28.467" starttime="20171026 01:36:20.466"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:28.467" starttime="20171026 01:36:20.466"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:28.467" starttime="20171026 01:36:20.466"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:28.467" starttime="20171026 01:36:20.465"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:28.467" starttime="20171026 01:36:20.452"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:28.468" starttime="20171026 01:36:20.449"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:28.468" starttime="20171026 01:36:20.449"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:28.470" starttime="20171026 01:36:28.469"></status>
</kw>
<msg timestamp="20171026 01:36:28.470" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:28.470" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:36:28.470" starttime="20171026 01:36:28.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:28.470" starttime="20171026 01:36:28.470"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:28.485" starttime="20171026 01:36:28.484"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20171026 01:36:28.486" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20171026 01:36:28.486" starttime="20171026 01:36:28.485"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:28.486" starttime="20171026 01:36:28.484"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:28.486" starttime="20171026 01:36:28.471"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:28.486" starttime="20171026 01:36:28.468"></status>
</kw>
<status status="PASS" endtime="20171026 01:36:28.486" starttime="20171026 01:36:28.468"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:28.488" starttime="20171026 01:36:28.488"></status>
</kw>
<msg timestamp="20171026 01:36:28.488" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:36:28.488" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:36:28.488" starttime="20171026 01:36:28.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:28.489" starttime="20171026 01:36:28.488"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20171026 01:36:28.523" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:36:28.524" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20171026 01:36:28.723" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20171026 01:36:28.733" level="INFO">${core_files} = None</msg>
<msg timestamp="20171026 01:36:28.733" level="INFO">${stderr} = None</msg>
<msg timestamp="20171026 01:36:28.733" level="INFO">${rc} = None</msg>
<msg timestamp="20171026 01:36:28.733" level="FAIL">#(UTC) 2017/10/26 01:36:28.732211 -    0.208948 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20171026 01:36:28.733" starttime="20171026 01:36:28.503"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20171026 01:36:28.734" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20171026 01:36:28.734" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20171026 01:36:28.734" starttime="20171026 01:36:28.734"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20171026 01:36:28.743" starttime="20171026 01:36:28.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<msg timestamp="20171026 01:41:29.067" level="FAIL">EOFError</msg>
<status status="FAIL" endtime="20171026 01:41:29.067" starttime="20171026 01:36:28.744"></status>
</kw>
<status status="FAIL" endtime="20171026 01:41:29.067" starttime="20171026 01:36:28.744"></status>
</kw>
<status status="FAIL" endtime="20171026 01:41:29.067" starttime="20171026 01:36:28.742"></status>
</kw>
<msg timestamp="20171026 01:41:29.068" level="FAIL">EOFError</msg>
<status status="FAIL" endtime="20171026 01:41:29.068" starttime="20171026 01:36:28.734"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20171026 01:41:29.068" starttime="20171026 01:41:29.068"></status>
</kw>
<status status="FAIL" endtime="20171026 01:41:29.069" starttime="20171026 01:36:28.502"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:29.069" starttime="20171026 01:36:28.489"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:29.069" starttime="20171026 01:36:28.486"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:29.069" starttime="20171026 01:36:28.486"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:29.072" starttime="20171026 01:41:29.071"></status>
</kw>
<msg timestamp="20171026 01:41:29.072" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:41:29.072" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:41:29.072" starttime="20171026 01:41:29.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:29.072" starttime="20171026 01:41:29.072"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20171026 01:41:29.088" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20171026 01:41:29.088" starttime="20171026 01:41:29.087"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20171026 01:41:29.090" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20171026 01:41:29.090" starttime="20171026 01:41:29.089"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:41:29.091" level="INFO">${logpath} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20171026 01:41:29.091" starttime="20171026 01:41:29.090"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:29.092" starttime="20171026 01:41:29.092"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:41:29.093" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:41:29.093" starttime="20171026 01:41:29.093"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:41:29.135" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:41:29.135" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20171026 01:41:29.314" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:41:29.314" starttime="20171026 01:41:29.111"></status>
</kw>
<msg timestamp="20171026 01:41:29.314" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:41:29.314" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20171026 01:41:29.315" starttime="20171026 01:41:29.093"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:41:29.315" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20171026 01:41:29.315" starttime="20171026 01:41:29.315"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:41:29.316" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:41:29.316" starttime="20171026 01:41:29.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:41:29.324" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:41:29.324" starttime="20171026 01:41:29.323"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:29.324" starttime="20171026 01:41:29.323"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:29.324" starttime="20171026 01:41:29.316"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:29.324" starttime="20171026 01:41:29.091"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:29.324" starttime="20171026 01:41:29.090"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:41:29.325" level="INFO">${logpath} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20171026 01:41:29.325" starttime="20171026 01:41:29.325"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:29.327" starttime="20171026 01:41:29.326"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:41:29.327" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:41:29.327" starttime="20171026 01:41:29.327"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:41:29.369" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:41:29.369" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20171026 01:41:30.032" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:41:30.033" starttime="20171026 01:41:29.345"></status>
</kw>
<msg timestamp="20171026 01:41:30.033" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:41:30.034" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct 26 01:12 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct 26 01:12 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20171026 01:41:30.034" starttime="20171026 01:41:29.328"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:41:30.035" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct 26 01:12 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct 26 01:12 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20171026 01:41:30.035" starttime="20171026 01:41:30.034"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:41:30.035" level="INFO">${stderr} = ls: /proc/2786/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20171026 01:41:30.036" starttime="20171026 01:41:30.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:41:30.044" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:41:30.044" starttime="20171026 01:41:30.043"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:30.044" starttime="20171026 01:41:30.042"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:30.044" starttime="20171026 01:41:30.036"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:30.044" starttime="20171026 01:41:29.325"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:30.044" starttime="20171026 01:41:29.324"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:41:30.045" level="INFO">${logpath} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20171026 01:41:30.045" starttime="20171026 01:41:30.045"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:30.047" starttime="20171026 01:41:30.046"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:41:30.047" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:41:30.047" starttime="20171026 01:41:30.047"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:41:30.088" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:41:30.089" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20171026 01:41:32.751" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:41:32.751" starttime="20171026 01:41:30.065"></status>
</kw>
<msg timestamp="20171026 01:41:32.751" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:41:32.755" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-10-26 00:58:29 UTC, end at Thu 2017-10-26 01:41:39 UTC. --\nOct 26 00:58:29 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 26 00:58:29 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20171026 01:41:32.755" starttime="20171026 01:41:30.048"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:41:32.757" level="INFO">${stdout} = -- Logs begin at Thu 2017-10-26 00:58:29 UTC, end at Thu 2017-10-26 01:41:39 UTC. --
Oct 26 00:58:29 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 26 00:58:29 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20171026 01:41:32.757" starttime="20171026 01:41:32.755"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:41:32.757" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:41:32.757" starttime="20171026 01:41:32.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:41:32.767" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:41:32.767" starttime="20171026 01:41:32.766"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:32.767" starttime="20171026 01:41:32.764"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:32.767" starttime="20171026 01:41:32.758"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:32.767" starttime="20171026 01:41:30.045"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:32.767" starttime="20171026 01:41:30.044"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:41:32.768" level="INFO">${logpath} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20171026 01:41:32.768" starttime="20171026 01:41:32.767"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:32.769" starttime="20171026 01:41:32.769"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:41:32.770" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:41:32.770" starttime="20171026 01:41:32.770"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:41:32.812" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:41:32.812" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20171026 01:41:40.360" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:41:40.363" starttime="20171026 01:41:32.788"></status>
</kw>
<msg timestamp="20171026 01:41:40.364" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:41:40.404" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=fa0051fb1ad740b9b27528d1b107b98c;i=1;b=6f1ce2ce89de44d482f279d541f8230a;m=c46bc6;t=55c68aba2a6ec;x=c18f24fe3377bfee",\n\t"__REALTIME_TIMESTAMP" : "1508979509470956",\n\t"__MONO...</msg>
<status status="PASS" endtime="20171026 01:41:40.404" starttime="20171026 01:41:32.770"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:41:40.414" level="INFO">${stdout} = {
	"__CURSOR" : "s=fa0051fb1ad740b9b27528d1b107b98c;i=1;b=6f1ce2ce89de44d482f279d541f8230a;m=c46bc6;t=55c68aba2a6ec;x=c18f24fe3377bfee",
	"__REALTIME_TIMESTAMP" : "1508979509470956",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" endtime="20171026 01:41:40.414" starttime="20171026 01:41:40.405"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:41:40.415" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:41:40.415" starttime="20171026 01:41:40.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:41:40.439" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:41:40.439" starttime="20171026 01:41:40.432"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:40.439" starttime="20171026 01:41:40.421"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:40.439" starttime="20171026 01:41:40.415"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:40.439" starttime="20171026 01:41:32.768"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:40.439" starttime="20171026 01:41:32.767"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:41:40.440" level="INFO">${logpath} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20171026 01:41:40.440" starttime="20171026 01:41:40.440"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:40.442" starttime="20171026 01:41:40.441"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:41:40.442" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:41:40.442" starttime="20171026 01:41:40.442"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:41:40.483" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:41:40.483" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20171026 01:41:40.690" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:41:40.690" starttime="20171026 01:41:40.460"></status>
</kw>
<msg timestamp="20171026 01:41:40.690" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:41:40.690" level="INFO">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          218960 kB\nMemAvailable:     327268 kB\nBuffers:           33172 kB\nCached:            85456 kB\nSwapCached:            0 kB\nActive:           16375...</msg>
<status status="PASS" endtime="20171026 01:41:40.690" starttime="20171026 01:41:40.443"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:41:40.691" level="INFO">${stdout} = MemTotal:         432252 kB
MemFree:          218960 kB
MemAvailable:     327268 kB
Buffers:           33172 kB
Cached:            85456 kB
SwapCached:            0 kB
Active:           163752 kB
Inac...</msg>
<status status="PASS" endtime="20171026 01:41:40.691" starttime="20171026 01:41:40.691"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:41:40.692" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:41:40.692" starttime="20171026 01:41:40.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:41:40.700" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:41:40.700" starttime="20171026 01:41:40.699"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:40.700" starttime="20171026 01:41:40.698"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:40.700" starttime="20171026 01:41:40.692"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:40.700" starttime="20171026 01:41:40.440"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:40.700" starttime="20171026 01:41:40.439"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:41:40.701" level="INFO">${logpath} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20171026 01:41:40.701" starttime="20171026 01:41:40.700"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:40.702" starttime="20171026 01:41:40.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:41:40.703" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:41:40.703" starttime="20171026 01:41:40.703"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:41:40.744" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:41:40.744" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20171026 01:41:41.160" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:41:41.160" starttime="20171026 01:41:40.721"></status>
</kw>
<msg timestamp="20171026 01:41:41.160" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:41:41.160" level="INFO">${ret_values} = (u'Mem: 213292K used, 218960K free, 8948K shrd, 33172K buff, 85456K cached\nCPU:  15% usr   7% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.49 0.32 0.44 1/152 2790\n  PID  PPID U...</msg>
<status status="PASS" endtime="20171026 01:41:41.160" starttime="20171026 01:41:40.703"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:41:41.161" level="INFO">${stdout} = Mem: 213292K used, 218960K free, 8948K shrd, 33172K buff, 85456K cached
CPU:  15% usr   7% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.49 0.32 0.44 1/152 2790
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20171026 01:41:41.161" starttime="20171026 01:41:41.161"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:41:41.162" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:41:41.162" starttime="20171026 01:41:41.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:41:41.170" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:41:41.170" starttime="20171026 01:41:41.169"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.170" starttime="20171026 01:41:41.168"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.170" starttime="20171026 01:41:41.162"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.170" starttime="20171026 01:41:40.701"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.170" starttime="20171026 01:41:40.700"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20171026 01:41:41.171" level="INFO">${logpath} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20171026 01:41:41.171" starttime="20171026 01:41:41.170"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:41.172" starttime="20171026 01:41:41.172"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20171026 01:41:41.173" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20171026 01:41:41.173" starttime="20171026 01:41:41.173"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20171026 01:41:41.214" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.5.180.47
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20171026 01:41:41.214" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20171026 01:41:41.383" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171026 01:41:41.383" starttime="20171026 01:41:41.191"></status>
</kw>
<msg timestamp="20171026 01:41:41.383" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:41:41.384" level="INFO">${ret_values} = (u'[    0.650000] console [ttyS4] enabled\n[    0.790000] timeriomem_rng 1e6e2078.hwrng: 32bits from 0xf00e2078 @ 1us\n[    0.810000] random: fast init done\n[    0.840000] brd: module loaded\n[    0....</msg>
<status status="PASS" endtime="20171026 01:41:41.384" starttime="20171026 01:41:41.173"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20171026 01:41:41.385" level="INFO">${stdout} = [    0.650000] console [ttyS4] enabled
[    0.790000] timeriomem_rng 1e6e2078.hwrng: 32bits from 0xf00e2078 @ 1us
[    0.810000] random: fast init done
[    0.840000] brd: module loaded
[    0.870000]...</msg>
<status status="PASS" endtime="20171026 01:41:41.385" starttime="20171026 01:41:41.384"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20171026 01:41:41.386" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20171026 01:41:41.386" starttime="20171026 01:41:41.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20171026 01:41:41.398" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/20171026013616215605_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:41:41.398" starttime="20171026 01:41:41.397"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.398" starttime="20171026 01:41:41.396"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.398" starttime="20171026 01:41:41.386"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.398" starttime="20171026 01:41:41.171"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.398" starttime="20171026 01:41:41.170"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.398" starttime="20171026 01:41:29.090"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.398" starttime="20171026 01:41:29.088"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.398" starttime="20171026 01:41:29.088"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.398" starttime="20171026 01:41:29.088"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.398" starttime="20171026 01:41:29.087"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.398" starttime="20171026 01:41:29.073"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.399" starttime="20171026 01:41:29.069"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.399" starttime="20171026 01:41:29.069"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:41.401" starttime="20171026 01:41:41.400"></status>
</kw>
<msg timestamp="20171026 01:41:41.401" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:41:41.401" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:41:41.401" starttime="20171026 01:41:41.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:41.401" starttime="20171026 01:41:41.401"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:41:41.418" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:41:41.419" starttime="20171026 01:41:41.418"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:41:41.419" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:41:41.419" starttime="20171026 01:41:41.419"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:41:41.420" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:41:41.420" starttime="20171026 01:41:41.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:41:41.421" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:41:41.421" starttime="20171026 01:41:41.420"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:41:41.739" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:41:41.739" starttime="20171026 01:41:41.422"></status>
</kw>
<msg timestamp="20171026 01:41:41.739" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:41:41.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:41:41.739" starttime="20171026 01:41:41.421"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:41:41.740" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:41:41.740" starttime="20171026 01:41:41.739"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:41:41.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:41:41.741" starttime="20171026 01:41:41.740"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.741" starttime="20171026 01:41:41.417"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.741" starttime="20171026 01:41:41.417"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.741" starttime="20171026 01:41:41.416"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:41:41.742" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20171026 01:41:41.742" starttime="20171026 01:41:41.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:41.742" starttime="20171026 01:41:41.742"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:41:41.835" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20171026 01:41:41.835" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:41:41.835" starttime="20171026 01:41:41.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:41.836" starttime="20171026 01:41:41.836"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:41:41.836" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:41:41.836" starttime="20171026 01:41:41.836"></status>
</kw>
<msg timestamp="20171026 01:41:41.837" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:41:41.837" starttime="20171026 01:41:41.415"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:41:41.838" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171026 01:41:41.838" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20171026 01:41:41.838" starttime="20171026 01:41:41.838"></status>
</kw>
<msg timestamp="20171026 01:41:41.838" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171026 01:41:41.838" starttime="20171026 01:41:41.837"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20171026 01:41:41.839" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:41:41.839" starttime="20171026 01:41:41.839"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.839" starttime="20171026 01:41:41.415"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.839" starttime="20171026 01:41:41.402"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.839" starttime="20171026 01:41:41.399"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.839" starttime="20171026 01:41:41.399"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:41.841" starttime="20171026 01:41:41.841"></status>
</kw>
<msg timestamp="20171026 01:41:41.841" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:41:41.841" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20171026 01:41:41.842" starttime="20171026 01:41:41.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:41.842" starttime="20171026 01:41:41.842"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20171026 01:41:41.856" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:41:41.857" starttime="20171026 01:41:41.856"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.857" starttime="20171026 01:41:41.855"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.857" starttime="20171026 01:41:41.842"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.857" starttime="20171026 01:41:41.840"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.857" starttime="20171026 01:41:41.839"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.857" starttime="20171026 01:36:16.530"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.857" starttime="20171026 01:36:16.527"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.857" starttime="20171026 01:36:16.527"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.857" starttime="20171026 01:36:16.527"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171026 01:41:41.863" starttime="20171026 01:41:41.863"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.864" starttime="20171026 01:41:41.857"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.864" starttime="20171026 01:36:16.526"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.864" starttime="20171026 01:36:13.115"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.864" starttime="20171026 01:36:13.115"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20171026 01:41:41.865" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20171026 01:41:41.865" starttime="20171026 01:41:41.865"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20171026 01:41:41.866" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20171026013616215605_BmcCodeUpdate/20171026013616215605_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20171026 01:41:41.866" starttime="20171026 01:41:41.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:41.866" starttime="20171026 01:41:41.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:41.867" starttime="20171026 01:41:41.867"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20171026 01:41:41.868" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20171026 01:41:41.868" starttime="20171026 01:41:41.867"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171026 01:41:41.869" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20171026 01:41:41.869" starttime="20171026 01:41:41.869"></status>
</kw>
<msg timestamp="20171026 01:41:41.870" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20171026 01:41:41.870" starttime="20171026 01:41:41.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20171026 01:41:41.871" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:41:41.871" starttime="20171026 01:41:41.870"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.871" starttime="20171026 01:41:41.870"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:41.872" starttime="20171026 01:41:41.871"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 01:41:41.874" level="INFO">${cur_time} = 2017-10-26 01:41:41:873500</msg>
<status status="PASS" endtime="20171026 01:41:41.874" starttime="20171026 01:41:41.873"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20171026 01:41:41.874" level="INFO">${cur_time} = 20171026014141873500</msg>
<status status="PASS" endtime="20171026 01:41:41.874" starttime="20171026 01:41:41.874"></status>
</kw>
<msg timestamp="20171026 01:41:41.875" level="INFO">${cur_time} = 20171026014141873500</msg>
<status status="PASS" endtime="20171026 01:41:41.875" starttime="20171026 01:41:41.872"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20171026 01:41:41.875" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171026 01:41:41.876" starttime="20171026 01:41:41.875"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:41.876" starttime="20171026 01:41:41.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:41:41.880" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:41:41.880" starttime="20171026 01:41:41.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:41:41.881" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:41:41.881" starttime="20171026 01:41:41.881"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:41:41.882" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:41:41.882" starttime="20171026 01:41:41.881"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:41:41.883" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:41:41.883" starttime="20171026 01:41:41.882"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:41:42.209" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:41:42.209" starttime="20171026 01:41:41.883"></status>
</kw>
<msg timestamp="20171026 01:41:42.209" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:41:42.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:41:42.209" starttime="20171026 01:41:41.883"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:41:42.210" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:41:42.210" starttime="20171026 01:41:42.209"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:41:42.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:41:42.211" starttime="20171026 01:41:42.210"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:42.211" starttime="20171026 01:41:41.879"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:42.211" starttime="20171026 01:41:41.879"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:42.211" starttime="20171026 01:41:41.878"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:41:42.212" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171026 01:41:42.212" starttime="20171026 01:41:42.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:42.212" starttime="20171026 01:41:42.212"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:41:42.288" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20171026 01:41:42.288" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:41:42.288" starttime="20171026 01:41:42.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:42.288" starttime="20171026 01:41:42.288"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:41:42.289" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:41:42.289" starttime="20171026 01:41:42.289"></status>
</kw>
<msg timestamp="20171026 01:41:42.289" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:41:42.289" starttime="20171026 01:41:41.877"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171026 01:41:42.290" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:41:42.290" starttime="20171026 01:41:42.290"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:42.290" starttime="20171026 01:41:41.877"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20171026 01:41:42.293" level="INFO">Creating Session using : alias=openbmc, url=https://9.5.180.47, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171026 01:41:42.294" starttime="20171026 01:41:42.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20171026 01:41:42.294" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171026 01:41:42.294" starttime="20171026 01:41:42.294"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20171026 01:41:42.295" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171026 01:41:42.295" starttime="20171026 01:41:42.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20171026 01:41:42.296" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171026 01:41:42.296" starttime="20171026 01:41:42.295"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20171026 01:41:42.601" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171026 01:41:42.602" starttime="20171026 01:41:42.297"></status>
</kw>
<msg timestamp="20171026 01:41:42.602" level="INFO">${status} = PASS</msg>
<msg timestamp="20171026 01:41:42.602" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171026 01:41:42.602" starttime="20171026 01:41:42.296"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20171026 01:41:42.602" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:41:42.602" starttime="20171026 01:41:42.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20171026 01:41:42.603" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171026 01:41:42.603" starttime="20171026 01:41:42.603"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:42.603" starttime="20171026 01:41:42.293"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:42.603" starttime="20171026 01:41:42.292"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:42.604" starttime="20171026 01:41:42.291"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20171026 01:41:42.604" level="INFO">${base_uri} = /xyz/openbmc_project//dump/entry/list</msg>
<status status="PASS" endtime="20171026 01:41:42.604" starttime="20171026 01:41:42.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:42.605" starttime="20171026 01:41:42.605"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171026 01:41:42.718" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project//dump/entry/list, headers=None json=None</msg>
<msg timestamp="20171026 01:41:42.719" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:41:42.719" starttime="20171026 01:41:42.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171026 01:41:42.719" starttime="20171026 01:41:42.719"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20171026 01:41:42.720" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20171026 01:41:42.720" starttime="20171026 01:41:42.720"></status>
</kw>
<msg timestamp="20171026 01:41:42.720" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171026 01:41:42.720" starttime="20171026 01:41:42.291"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20171026 01:41:42.721" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171026 01:41:42.721" starttime="20171026 01:41:42.720"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:42.721" starttime="20171026 01:41:42.290"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:42.721" starttime="20171026 01:41:41.877"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:42.721" starttime="20171026 01:41:41.876"></status>
</kw>
<status status="PASS" endtime="20171026 01:41:42.721" starttime="20171026 01:36:13.114"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Fatal Error</arg>
<arg>msg=Code update failed.</arg>
</arguments>
<kw name="Fatal Error" library="BuiltIn">
<doc>Stops the whole test execution.</doc>
<arguments>
<arg>msg=Code update failed.</arg>
</arguments>
<msg timestamp="20171026 01:41:42.722" level="FAIL">Code update failed.</msg>
<status status="FAIL" endtime="20171026 01:41:42.722" starttime="20171026 01:41:42.722"></status>
</kw>
<status status="FAIL" endtime="20171026 01:41:42.723" starttime="20171026 01:41:42.722"></status>
</kw>
<status status="FAIL" endtime="20171026 01:41:42.723" starttime="20171026 01:36:13.114">Code update failed.</status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>BMC_Code_Update</tag>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20171026 01:41:42.723" critical="yes" starttime="20171026 01:35:50.093">SSLError: ('The write operation timed out',)

Also teardown failed:
Code update failed.</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20171026 01:41:42.724" starttime="20171026 01:35:43.939"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">BMC_Code_Update</stat>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
