<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170913 13:46:54.474" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/host_code_update.robot" id="s1" name="Host Code Update">
<test id="s1-t1" name="REST Host Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170913 13:46:55.353" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170913 13:46:55.354" starttime="20170913 13:46:55.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:46:55.355" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:46:55.355" starttime="20170913 13:46:55.354"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170913 13:46:55.356" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170913 13:46:55.356" starttime="20170913 13:46:55.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:46:55.356" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170913 13:46:55.356" starttime="20170913 13:46:55.356"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170913 13:46:55.540" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170913 13:46:55.540" starttime="20170913 13:46:55.357"></status>
</kw>
<msg timestamp="20170913 13:46:55.540" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:46:55.540" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:55.540" starttime="20170913 13:46:55.357"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170913 13:46:55.541" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:55.541" starttime="20170913 13:46:55.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:46:55.542" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:55.542" starttime="20170913 13:46:55.541"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:55.542" starttime="20170913 13:46:55.352"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:55.542" starttime="20170913 13:46:55.352"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:55.542" starttime="20170913 13:46:55.351"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170913 13:46:55.543" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170913 13:46:55.543" starttime="20170913 13:46:55.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:55.544" starttime="20170913 13:46:55.543"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170913 13:46:55.596" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170913 13:46:55.596" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:55.596" starttime="20170913 13:46:55.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:55.597" starttime="20170913 13:46:55.596"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170913 13:46:55.597" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170913 13:46:55.597" starttime="20170913 13:46:55.597"></status>
</kw>
<msg timestamp="20170913 13:46:55.597" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:55.597" starttime="20170913 13:46:55.351"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:55.598" starttime="20170913 13:46:55.598"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${DUMP_ENTRY_URI}</arg>
</arguments>
<assign>
<var>${dump_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170913 13:46:55.602" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170913 13:46:55.602" starttime="20170913 13:46:55.602"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:46:55.603" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:46:55.603" starttime="20170913 13:46:55.603"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170913 13:46:55.604" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170913 13:46:55.604" starttime="20170913 13:46:55.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:46:55.604" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170913 13:46:55.604" starttime="20170913 13:46:55.604"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170913 13:46:55.871" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170913 13:46:55.871" starttime="20170913 13:46:55.605"></status>
</kw>
<msg timestamp="20170913 13:46:55.871" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:46:55.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:55.871" starttime="20170913 13:46:55.605"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170913 13:46:55.872" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:55.872" starttime="20170913 13:46:55.872"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:46:55.873" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:55.873" starttime="20170913 13:46:55.872"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:55.873" starttime="20170913 13:46:55.601"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:55.873" starttime="20170913 13:46:55.601"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:55.873" starttime="20170913 13:46:55.600"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170913 13:46:55.874" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry//list</msg>
<status status="PASS" endtime="20170913 13:46:55.874" starttime="20170913 13:46:55.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:55.874" starttime="20170913 13:46:55.874"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170913 13:46:56.915" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry//list, headers=None json=None</msg>
<msg timestamp="20170913 13:46:56.916" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:56.916" starttime="20170913 13:46:55.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:56.916" starttime="20170913 13:46:56.916"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170913 13:46:56.917" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170913 13:46:56.917" starttime="20170913 13:46:56.917"></status>
</kw>
<msg timestamp="20170913 13:46:56.917" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:56.917" starttime="20170913 13:46:55.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:46:56.918" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:56.918" starttime="20170913 13:46:56.918"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170913 13:46:56.919" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/dump/entry/1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170913 13:46:56.919" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170913 13:46:56.919" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'/xyz/openbmc_project/dump/entry/1']}</msg>
<status status="PASS" endtime="20170913 13:46:56.919" starttime="20170913 13:46:56.918"></status>
</kw>
<msg timestamp="20170913 13:46:56.919" level="INFO">${url_list} = [u'/xyz/openbmc_project/dump/entry/1']</msg>
<status status="PASS" endtime="20170913 13:46:56.919" starttime="20170913 13:46:55.599"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:56.920" starttime="20170913 13:46:56.919"></status>
</kw>
<msg timestamp="20170913 13:46:56.920" level="INFO">${dump_entries} = [u'/xyz/openbmc_project/dump/entry/1']</msg>
<status status="PASS" endtime="20170913 13:46:56.920" starttime="20170913 13:46:55.598"></status>
</kw>
<kw type="for" name="${entry} IN [ @{dump_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/dump/entry/1">
<kw name="Fetch From Right" library="String">
<doc>Returns contents of the ``string`` after the last occurrence of ``marker``.</doc>
<arguments>
<arg>${entry}</arg>
<arg>/</arg>
</arguments>
<assign>
<var>${dump_id}</var>
</assign>
<msg timestamp="20170913 13:46:56.921" level="INFO">${dump_id} = 1</msg>
<status status="PASS" endtime="20170913 13:46:56.921" starttime="20170913 13:46:56.920"></status>
</kw>
<kw name="Delete BMC Dump" library="dump_utils">
<doc>Deletes a given bmc dump.</doc>
<arguments>
<arg>${dump_id}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:46:56.922" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170913 13:46:56.922" starttime="20170913 13:46:56.922"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}/${dump_id}/action/Delete</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170913 13:46:56.925" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170913 13:46:56.925" starttime="20170913 13:46:56.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:46:56.926" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:46:56.926" starttime="20170913 13:46:56.926"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170913 13:46:56.927" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170913 13:46:56.927" starttime="20170913 13:46:56.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:46:56.927" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170913 13:46:56.927" starttime="20170913 13:46:56.927"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170913 13:46:57.117" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170913 13:46:57.117" starttime="20170913 13:46:56.928"></status>
</kw>
<msg timestamp="20170913 13:46:57.117" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:46:57.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.117" starttime="20170913 13:46:56.928"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170913 13:46:57.118" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.118" starttime="20170913 13:46:57.117"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:46:57.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.119" starttime="20170913 13:46:57.118"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:57.119" starttime="20170913 13:46:56.924"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:57.119" starttime="20170913 13:46:56.924"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:57.119" starttime="20170913 13:46:56.923"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170913 13:46:57.120" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry//1/action/Delete</msg>
<status status="PASS" endtime="20170913 13:46:57.120" starttime="20170913 13:46:57.119"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:46:57.120" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:46:57.120" starttime="20170913 13:46:57.120"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:57.121" starttime="20170913 13:46:57.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:57.122" starttime="20170913 13:46:57.121"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170913 13:46:57.358" level="INFO">Post Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry//1/action/Delete, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170913 13:46:57.358" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.358" starttime="20170913 13:46:57.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:57.359" starttime="20170913 13:46:57.358"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170913 13:46:57.359" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170913 13:46:57.359" starttime="20170913 13:46:57.359"></status>
</kw>
<msg timestamp="20170913 13:46:57.359" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.359" starttime="20170913 13:46:56.922"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:46:57.360" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.360" starttime="20170913 13:46:57.360"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:57.360" starttime="20170913 13:46:56.921"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:57.360" starttime="20170913 13:46:56.920"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:57.360" starttime="20170913 13:46:56.920"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:57.360" starttime="20170913 13:46:55.350"></status>
</kw>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170913 13:46:57.364" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170913 13:46:57.364" starttime="20170913 13:46:57.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:46:57.365" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:46:57.365" starttime="20170913 13:46:57.364"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170913 13:46:57.365" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170913 13:46:57.365" starttime="20170913 13:46:57.365"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:46:57.366" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170913 13:46:57.366" starttime="20170913 13:46:57.366"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170913 13:46:57.601" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170913 13:46:57.601" starttime="20170913 13:46:57.367"></status>
</kw>
<msg timestamp="20170913 13:46:57.601" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:46:57.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.601" starttime="20170913 13:46:57.366"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170913 13:46:57.602" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.602" starttime="20170913 13:46:57.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:46:57.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.603" starttime="20170913 13:46:57.602"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:57.603" starttime="20170913 13:46:57.363"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:57.603" starttime="20170913 13:46:57.362"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:57.603" starttime="20170913 13:46:57.362"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170913 13:46:57.603" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170913 13:46:57.604" starttime="20170913 13:46:57.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:57.604" starttime="20170913 13:46:57.604"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170913 13:46:57.677" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170913 13:46:57.677" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.677" starttime="20170913 13:46:57.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:57.678" starttime="20170913 13:46:57.678"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170913 13:46:57.678" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170913 13:46:57.678" starttime="20170913 13:46:57.678"></status>
</kw>
<msg timestamp="20170913 13:46:57.679" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.679" starttime="20170913 13:46:57.361"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170913 13:46:57.679" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170913 13:46:57.680" starttime="20170913 13:46:57.679"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:57.680" starttime="20170913 13:46:57.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'true' == '${DELETE_OLD_PNOR_IMAGES}'</arg>
<arg>Delete All PNOR Images</arg>
</arguments>
<kw name="Delete All Pnor Images" library="code_update_utils">
<doc>Delete all PNOR images from the BMC.</doc>
<kw name="Get Software Objects" library="code_update_utils">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>xyz.openbmc_project.Software.Version.VersionPurpose.Host</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg timestamp="20170913 13:46:57.691" level="INFO">${host_list} = []</msg>
<status status="PASS" endtime="20170913 13:46:57.691" starttime="20170913 13:46:57.691"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170913 13:46:57.694" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170913 13:46:57.695" starttime="20170913 13:46:57.694"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:46:57.695" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:46:57.695" starttime="20170913 13:46:57.695"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170913 13:46:57.696" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170913 13:46:57.696" starttime="20170913 13:46:57.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:46:57.697" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170913 13:46:57.697" starttime="20170913 13:46:57.696"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170913 13:46:57.904" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170913 13:46:57.904" starttime="20170913 13:46:57.698"></status>
</kw>
<msg timestamp="20170913 13:46:57.904" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:46:57.904" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.904" starttime="20170913 13:46:57.697"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170913 13:46:57.905" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.905" starttime="20170913 13:46:57.905"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:46:57.906" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.906" starttime="20170913 13:46:57.906"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:57.906" starttime="20170913 13:46:57.694"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:57.906" starttime="20170913 13:46:57.693"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:57.906" starttime="20170913 13:46:57.693"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170913 13:46:57.907" level="INFO">${base_uri} = /xyz/openbmc_project/software/</msg>
<status status="PASS" endtime="20170913 13:46:57.907" starttime="20170913 13:46:57.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:57.908" starttime="20170913 13:46:57.907"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170913 13:46:57.983" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg timestamp="20170913 13:46:57.983" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.983" starttime="20170913 13:46:57.908"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:57.984" starttime="20170913 13:46:57.983"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170913 13:46:57.984" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170913 13:46:57.984" starttime="20170913 13:46:57.984"></status>
</kw>
<msg timestamp="20170913 13:46:57.985" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.985" starttime="20170913 13:46:57.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:46:57.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:57.985" starttime="20170913 13:46:57.985"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170913 13:46:57.986" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/a949160"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170913 13:46:57.986" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170913 13:46:57.986" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/a949160']}</msg>
<status status="PASS" endtime="20170913 13:46:57.986" starttime="20170913 13:46:57.986"></status>
</kw>
<msg timestamp="20170913 13:46:57.986" level="INFO">${sw_list} = [u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/a949160']</msg>
<status status="PASS" endtime="20170913 13:46:57.986" starttime="20170913 13:46:57.691"></status>
</kw>
<kw type="for" name="${index} IN [ @{sw_list} ]">
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/active">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170913 13:46:57.990" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170913 13:46:57.990" starttime="20170913 13:46:57.990"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:46:57.991" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:46:57.991" starttime="20170913 13:46:57.991"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170913 13:46:57.992" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170913 13:46:57.992" starttime="20170913 13:46:57.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:46:57.992" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170913 13:46:57.993" starttime="20170913 13:46:57.992"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170913 13:46:58.194" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170913 13:46:58.194" starttime="20170913 13:46:57.993"></status>
</kw>
<msg timestamp="20170913 13:46:58.194" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:46:58.194" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:58.194" starttime="20170913 13:46:57.993"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170913 13:46:58.195" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:58.195" starttime="20170913 13:46:58.194"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:46:58.195" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:58.195" starttime="20170913 13:46:58.195"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:58.196" starttime="20170913 13:46:57.989"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:58.196" starttime="20170913 13:46:57.989"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:58.196" starttime="20170913 13:46:57.988"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170913 13:46:58.196" level="INFO">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status status="PASS" endtime="20170913 13:46:58.196" starttime="20170913 13:46:58.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:58.197" starttime="20170913 13:46:58.197"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170913 13:46:58.267" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20170913 13:46:58.267" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:58.268" starttime="20170913 13:46:58.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:58.268" starttime="20170913 13:46:58.268"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170913 13:46:58.269" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170913 13:46:58.269" starttime="20170913 13:46:58.269"></status>
</kw>
<msg timestamp="20170913 13:46:58.269" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:58.269" starttime="20170913 13:46:57.987"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:46:58.270" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170913 13:46:58.270" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170913 13:46:58.270" starttime="20170913 13:46:58.269"></status>
</kw>
<status status="FAIL" endtime="20170913 13:46:58.270" starttime="20170913 13:46:57.987"></status>
</kw>
<status status="FAIL" endtime="20170913 13:46:58.270" starttime="20170913 13:46:57.987"></status>
</kw>
<status status="FAIL" endtime="20170913 13:46:58.270" starttime="20170913 13:46:57.987"></status>
</kw>
<status status="FAIL" endtime="20170913 13:46:58.270" starttime="20170913 13:46:57.690"></status>
</kw>
<msg timestamp="20170913 13:46:58.271" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170913 13:46:58.271" starttime="20170913 13:46:57.680"></status>
</kw>
<status status="FAIL" endtime="20170913 13:46:58.271" starttime="20170913 13:46:57.680"></status>
</kw>
<status status="FAIL" endtime="20170913 13:46:58.271" starttime="20170913 13:46:55.350"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170913 13:46:58.276" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170913 13:46:58.277" starttime="20170913 13:46:58.276"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:46:58.277" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:46:58.277" starttime="20170913 13:46:58.277"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170913 13:46:58.278" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170913 13:46:58.278" starttime="20170913 13:46:58.278"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:46:58.279" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170913 13:46:58.279" starttime="20170913 13:46:58.279"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170913 13:46:58.478" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170913 13:46:58.478" starttime="20170913 13:46:58.280"></status>
</kw>
<msg timestamp="20170913 13:46:58.478" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:46:58.478" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:58.478" starttime="20170913 13:46:58.279"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170913 13:46:58.479" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:58.479" starttime="20170913 13:46:58.478"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:46:58.479" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:58.480" starttime="20170913 13:46:58.479"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:58.480" starttime="20170913 13:46:58.275"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:58.480" starttime="20170913 13:46:58.275"></status>
</kw>
<status status="PASS" endtime="20170913 13:46:58.480" starttime="20170913 13:46:58.274"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170913 13:46:58.480" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170913 13:46:58.480" starttime="20170913 13:46:58.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:58.481" starttime="20170913 13:46:58.481"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170913 13:46:58.588" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170913 13:46:58.588" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:58.588" starttime="20170913 13:46:58.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:46:58.589" starttime="20170913 13:46:58.588"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170913 13:46:58.589" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170913 13:46:58.589" starttime="20170913 13:46:58.589"></status>
</kw>
<msg timestamp="20170913 13:46:58.589" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:46:58.589" starttime="20170913 13:46:58.274"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:46:58.590" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:46:58.590" starttime="20170913 13:46:58.590"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170913 13:46:58.591" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170913 13:46:58.591" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170913 13:46:58.591" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170913 13:46:58.591" starttime="20170913 13:46:58.590"></status>
</kw>
<msg timestamp="20170913 13:46:58.591" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170913 13:46:58.591" starttime="20170913 13:46:58.273"></status>
</kw>
<msg timestamp="20170913 13:46:58.591" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170913 13:46:58.591" starttime="20170913 13:46:58.273"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170913 13:46:58.593" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170913 13:46:58.593" starttime="20170913 13:46:58.592"></status>
</kw>
<msg timestamp="20170913 13:46:58.593" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170913 13:46:58.593" starttime="20170913 13:46:58.592"></status>
</kw>
<msg timestamp="20170913 13:46:58.593" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170913 13:46:58.593" starttime="20170913 13:46:58.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170913 13:46:58.604" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170913 13:46:58.604" starttime="20170913 13:46:58.604"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170913 13:46:58.609" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170913 13:47:01.610" level="INFO">${RC} = 0</msg>
<msg timestamp="20170913 13:47:01.610" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.785 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.659 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20170913 13:47:01.611" starttime="20170913 13:46:58.605"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170913 13:47:01.614" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.785 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.659 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.549 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.513 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.513/0.626/0.785/0.109 ms</msg>
<status status="PASS" endtime="20170913 13:47:01.614" starttime="20170913 13:47:01.613"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:01.615" starttime="20170913 13:47:01.614"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.615" starttime="20170913 13:46:58.603"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170913 13:47:01.631" level="INFO">${cur_time} = 2017-09-13 13:47:01:630732</msg>
<status status="PASS" endtime="20170913 13:47:01.632" starttime="20170913 13:47:01.631"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170913 13:47:01.632" level="INFO">${cur_time} = 20170913134701630732</msg>
<status status="PASS" endtime="20170913 13:47:01.632" starttime="20170913 13:47:01.632"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.632" starttime="20170913 13:47:01.627"></status>
</kw>
<msg timestamp="20170913 13:47:01.639" level="INFO">${FFDC_TIME} = 20170913134701630732</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170913 13:47:01.640" level="INFO">${suite_name} = HostCodeUpdate</msg>
<status status="PASS" endtime="20170913 13:47:01.640" starttime="20170913 13:47:01.640"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170913 13:47:01.641" level="INFO">${suite_name} = 20170913134701630732_HostCodeUpdate</msg>
<status status="PASS" endtime="20170913 13:47:01.641" starttime="20170913 13:47:01.641"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170913 13:47:01.642" level="INFO">${test_name} = RESTHostCodeUpdate</msg>
<status status="PASS" endtime="20170913 13:47:01.642" starttime="20170913 13:47:01.641"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170913 13:47:01.642" level="INFO">${test_name} = 20170913134701630732_RESTHostCodeUpdate</msg>
<status status="PASS" endtime="20170913 13:47:01.642" starttime="20170913 13:47:01.642"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.643" starttime="20170913 13:47:01.639"></status>
</kw>
<msg timestamp="20170913 13:47:01.648" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/</msg>
<msg timestamp="20170913 13:47:01.653" level="INFO">${FFDC_PREFIX} = 20170913134701630732_</msg>
<msg timestamp="20170913 13:47:01.672" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/</arg>
</arguments>
<msg timestamp="20170913 13:47:01.673" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:01.673" starttime="20170913 13:47:01.672"></status>
</kw>
<msg timestamp="20170913 13:47:01.678" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:01.689" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:01.689" starttime="20170913 13:47:01.688"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.689" starttime="20170913 13:47:01.688"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:01.690" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:01.690" starttime="20170913 13:47:01.690"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.691" starttime="20170913 13:47:01.689"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:01.692" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:01.692" starttime="20170913 13:47:01.691"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.692" starttime="20170913 13:47:01.691"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:01.693" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:01.693" starttime="20170913 13:47:01.693"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.693" starttime="20170913 13:47:01.692"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:01.695" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:01.695" starttime="20170913 13:47:01.694"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.695" starttime="20170913 13:47:01.694"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:01.696" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:01.696" starttime="20170913 13:47:01.696"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.696" starttime="20170913 13:47:01.695"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:01.697" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:01.698" starttime="20170913 13:47:01.697"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.698" starttime="20170913 13:47:01.696"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:01.699" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:01.699" starttime="20170913 13:47:01.699"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.699" starttime="20170913 13:47:01.698"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:01.700" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:01.700" starttime="20170913 13:47:01.700"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.701" starttime="20170913 13:47:01.699"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:01.702" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:01.702" starttime="20170913 13:47:01.702"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.702" starttime="20170913 13:47:01.701"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:01.703" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:01.703" starttime="20170913 13:47:01.703"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.704" starttime="20170913 13:47:01.702"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:01.705" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:01.705" starttime="20170913 13:47:01.704"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.705" starttime="20170913 13:47:01.704"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:01.706" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:01.706" starttime="20170913 13:47:01.706"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:01.706" starttime="20170913 13:47:01.705"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170913 13:47:01.724" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:01.725" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170913 13:47:02.536" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170913 13:47:02.537" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170913 13:47:02.623" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170913 13:47:02.632" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170913 13:47:02.632" level="INFO">${stderr} = </msg>
<msg timestamp="20170913 13:47:02.632" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170913 13:47:02.632" starttime="20170913 13:47:01.707"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.633" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170913 13:47:02.633" starttime="20170913 13:47:02.632"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.633" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170913 13:47:02.633" starttime="20170913 13:47:02.633"></status>
</kw>
<msg timestamp="20170913 13:47:02.633" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170913 13:47:02.634" starttime="20170913 13:47:01.706"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.635" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:02.635" starttime="20170913 13:47:02.634"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.635" starttime="20170913 13:47:02.634"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.635" starttime="20170913 13:47:01.701"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.636" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:02.636" starttime="20170913 13:47:02.636"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.637" starttime="20170913 13:47:02.635"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170913 13:47:02.637" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170913 13:47:02.637" starttime="20170913 13:47:02.637"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.638" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:02.639" starttime="20170913 13:47:02.638"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.639" starttime="20170913 13:47:02.637"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.640" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:02.640" starttime="20170913 13:47:02.640"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.640" starttime="20170913 13:47:02.639"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.640" starttime="20170913 13:47:02.637"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.641" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:02.641" starttime="20170913 13:47:02.641"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.642" starttime="20170913 13:47:02.640"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.643" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:02.643" starttime="20170913 13:47:02.642"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.643" starttime="20170913 13:47:02.642"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.643" starttime="20170913 13:47:02.640"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.644" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:02.645" starttime="20170913 13:47:02.644"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.645" starttime="20170913 13:47:02.643"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.646" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:02.646" starttime="20170913 13:47:02.645"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.646" starttime="20170913 13:47:02.645"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.646" starttime="20170913 13:47:02.643"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.646" starttime="20170913 13:47:02.637"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.647" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:02.647" starttime="20170913 13:47:02.647"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.647" starttime="20170913 13:47:02.646"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.647" starttime="20170913 13:47:01.687"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170913 13:47:02.653" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170913 13:47:02.653" starttime="20170913 13:47:02.652"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170913 13:47:02.654" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170913 13:47:02.654" starttime="20170913 13:47:02.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:02.655" starttime="20170913 13:47:02.655"></status>
</kw>
<msg timestamp="20170913 13:47:02.655" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170913 13:47:02.655" starttime="20170913 13:47:02.654"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:02.658" starttime="20170913 13:47:02.657"></status>
</kw>
<msg timestamp="20170913 13:47:02.658" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:02.658" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170913 13:47:02.658" starttime="20170913 13:47:02.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:02.658" starttime="20170913 13:47:02.658"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170913 13:47:02.672" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170913 13:47:02.672" starttime="20170913 13:47:02.672"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170913 13:47:02.674" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170913 13:47:02.674" starttime="20170913 13:47:02.673"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.680" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170913 13:47:02.680" starttime="20170913 13:47:02.674"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.683" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:02.683" starttime="20170913 13:47:02.682"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.683" starttime="20170913 13:47:02.682"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.684" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:02.684" starttime="20170913 13:47:02.684"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.684" starttime="20170913 13:47:02.683"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.686" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:02.686" starttime="20170913 13:47:02.685"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.686" starttime="20170913 13:47:02.685"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:02.687" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:02.687" starttime="20170913 13:47:02.687"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.687" starttime="20170913 13:47:02.686"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.687" starttime="20170913 13:47:02.681"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:02.687" starttime="20170913 13:47:02.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170913 13:47:02.688" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170913 13:47:02.688" starttime="20170913 13:47:02.688"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170913 13:47:02.728" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:02.729" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170913 13:47:04.125" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170913 13:47:04.125" starttime="20170913 13:47:02.705"></status>
</kw>
<msg timestamp="20170913 13:47:04.126" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:04.126" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170913 13:47:04.126" starttime="20170913 13:47:02.688"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170913 13:47:04.126" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170913 13:47:04.126" starttime="20170913 13:47:04.126"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170913 13:47:04.127" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170913 13:47:04.127" starttime="20170913 13:47:04.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.134" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.135" starttime="20170913 13:47:04.134"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.135" starttime="20170913 13:47:04.133"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.135" starttime="20170913 13:47:04.127"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.135" starttime="20170913 13:47:02.680"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.135" starttime="20170913 13:47:02.680"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.135" starttime="20170913 13:47:02.680"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.135" starttime="20170913 13:47:02.673"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.135" starttime="20170913 13:47:02.673"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170913 13:47:04.136" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170913 13:47:04.136" starttime="20170913 13:47:04.136"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.137" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170913 13:47:04.137" starttime="20170913 13:47:04.137"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.140" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.140" starttime="20170913 13:47:04.140"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.140" starttime="20170913 13:47:04.139"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.142" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.142" starttime="20170913 13:47:04.141"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.142" starttime="20170913 13:47:04.141"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.143" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.143" starttime="20170913 13:47:04.143"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.143" starttime="20170913 13:47:04.142"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.144" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.144" starttime="20170913 13:47:04.144"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.145" starttime="20170913 13:47:04.143"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.145" starttime="20170913 13:47:04.139"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.145" starttime="20170913 13:47:04.138"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170913 13:47:04.146" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170913 13:47:04.146" starttime="20170913 13:47:04.145"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170913 13:47:04.186" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:04.186" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170913 13:47:04.263" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170913 13:47:04.263" starttime="20170913 13:47:04.163"></status>
</kw>
<msg timestamp="20170913 13:47:04.263" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:04.263" level="INFO">${ret_values} = (u'20170913133022', u'', 0)</msg>
<status status="PASS" endtime="20170913 13:47:04.263" starttime="20170913 13:47:04.146"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170913 13:47:04.264" level="INFO">${stdout} = 20170913133022</msg>
<status status="PASS" endtime="20170913 13:47:04.264" starttime="20170913 13:47:04.264"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170913 13:47:04.264" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170913 13:47:04.264" starttime="20170913 13:47:04.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.272" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.272" starttime="20170913 13:47:04.271"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.272" starttime="20170913 13:47:04.271"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.272" starttime="20170913 13:47:04.265"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.272" starttime="20170913 13:47:04.137"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.272" starttime="20170913 13:47:04.137"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.275" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.275" starttime="20170913 13:47:04.275"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.276" starttime="20170913 13:47:04.274"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.277" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.277" starttime="20170913 13:47:04.276"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.277" starttime="20170913 13:47:04.276"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.278" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.278" starttime="20170913 13:47:04.278"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.278" starttime="20170913 13:47:04.277"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.279" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.280" starttime="20170913 13:47:04.279"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.280" starttime="20170913 13:47:04.278"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.280" starttime="20170913 13:47:04.274"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.280" starttime="20170913 13:47:04.273"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170913 13:47:04.281" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170913 13:47:04.281" starttime="20170913 13:47:04.280"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170913 13:47:04.320" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:04.321" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170913 13:47:04.377" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170913 13:47:04.377" starttime="20170913 13:47:04.298"></status>
</kw>
<msg timestamp="20170913 13:47:04.377" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:04.377" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.9-170"\nVERSION_ID="v1.99.9-170-g880b55b"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170913 13:47:04.377" starttime="20170913 13:47:04.281"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170913 13:47:04.378" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.9-170"
VERSION_ID="v1.99.9-170-g880b55b"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170913 13:47:04.378" starttime="20170913 13:47:04.378"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170913 13:47:04.379" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170913 13:47:04.379" starttime="20170913 13:47:04.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.386" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.386" starttime="20170913 13:47:04.386"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.387" starttime="20170913 13:47:04.385"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.387" starttime="20170913 13:47:04.379"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.387" starttime="20170913 13:47:04.272"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.387" starttime="20170913 13:47:04.272"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.387" starttime="20170913 13:47:04.137"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.387" starttime="20170913 13:47:04.135"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.387" starttime="20170913 13:47:04.135"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170913 13:47:04.388" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170913 13:47:04.388" starttime="20170913 13:47:04.388"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.389" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170913 13:47:04.389" starttime="20170913 13:47:04.388"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.392" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.392" starttime="20170913 13:47:04.392"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.392" starttime="20170913 13:47:04.391"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.394" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.394" starttime="20170913 13:47:04.393"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.394" starttime="20170913 13:47:04.393"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.395" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.395" starttime="20170913 13:47:04.395"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.395" starttime="20170913 13:47:04.394"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.396" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.396" starttime="20170913 13:47:04.396"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.396" starttime="20170913 13:47:04.395"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.397" starttime="20170913 13:47:04.391"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.397" starttime="20170913 13:47:04.390"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170913 13:47:04.397" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170913 13:47:04.397" starttime="20170913 13:47:04.397"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170913 13:47:04.437" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:04.437" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170913 13:47:04.484" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170913 13:47:04.484" starttime="20170913 13:47:04.415"></status>
</kw>
<msg timestamp="20170913 13:47:04.484" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:04.484" level="INFO">${ret_values} = (u' 13:47:12 up 2 min,  load average: 3.91, 2.26, 0.89', u'', 0)</msg>
<status status="PASS" endtime="20170913 13:47:04.484" starttime="20170913 13:47:04.398"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170913 13:47:04.485" level="INFO">${stdout} =  13:47:12 up 2 min,  load average: 3.91, 2.26, 0.89</msg>
<status status="PASS" endtime="20170913 13:47:04.485" starttime="20170913 13:47:04.485"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170913 13:47:04.486" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170913 13:47:04.486" starttime="20170913 13:47:04.486"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.494" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.494" starttime="20170913 13:47:04.493"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.494" starttime="20170913 13:47:04.493"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.494" starttime="20170913 13:47:04.487"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.494" starttime="20170913 13:47:04.389"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.494" starttime="20170913 13:47:04.389"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.497" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.497" starttime="20170913 13:47:04.497"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.497" starttime="20170913 13:47:04.496"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.499" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.499" starttime="20170913 13:47:04.498"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.499" starttime="20170913 13:47:04.498"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.500" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.500" starttime="20170913 13:47:04.500"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.500" starttime="20170913 13:47:04.499"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.501" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.501" starttime="20170913 13:47:04.501"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.502" starttime="20170913 13:47:04.500"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.502" starttime="20170913 13:47:04.496"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.502" starttime="20170913 13:47:04.495"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170913 13:47:04.502" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170913 13:47:04.503" starttime="20170913 13:47:04.502"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170913 13:47:04.542" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:04.543" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170913 13:47:04.599" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170913 13:47:04.599" starttime="20170913 13:47:04.520"></status>
</kw>
<msg timestamp="20170913 13:47:04.599" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:04.600" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170913 13:47:04.600" starttime="20170913 13:47:04.503"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170913 13:47:04.600" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     37.5...</msg>
<status status="PASS" endtime="20170913 13:47:04.600" starttime="20170913 13:47:04.600"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170913 13:47:04.601" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170913 13:47:04.601" starttime="20170913 13:47:04.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.608" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.608" starttime="20170913 13:47:04.608"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.608" starttime="20170913 13:47:04.607"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.608" starttime="20170913 13:47:04.601"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.609" starttime="20170913 13:47:04.495"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.609" starttime="20170913 13:47:04.494"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.612" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.612" starttime="20170913 13:47:04.612"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.612" starttime="20170913 13:47:04.611"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.613" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.613" starttime="20170913 13:47:04.613"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.614" starttime="20170913 13:47:04.612"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.615" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.615" starttime="20170913 13:47:04.614"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.615" starttime="20170913 13:47:04.614"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.616" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.616" starttime="20170913 13:47:04.616"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.616" starttime="20170913 13:47:04.615"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.616" starttime="20170913 13:47:04.610"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.616" starttime="20170913 13:47:04.610"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170913 13:47:04.617" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170913 13:47:04.617" starttime="20170913 13:47:04.617"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170913 13:47:04.657" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:04.657" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170913 13:47:04.724" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170913 13:47:04.724" starttime="20170913 13:47:04.635"></status>
</kw>
<msg timestamp="20170913 13:47:04.724" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:04.724" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-b95f53ea200a6573035a25ab6ddebe917635eeb6 #1 Wed Sep 13 13:15:15 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170913 13:47:04.724" starttime="20170913 13:47:04.617"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170913 13:47:04.725" level="INFO">${stdout} = Linux witherspoon 4.10.17-b95f53ea200a6573035a25ab6ddebe917635eeb6 #1 Wed Sep 13 13:15:15 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170913 13:47:04.725" starttime="20170913 13:47:04.725"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170913 13:47:04.726" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170913 13:47:04.726" starttime="20170913 13:47:04.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.733" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:04.733" starttime="20170913 13:47:04.732"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.733" starttime="20170913 13:47:04.732"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.733" starttime="20170913 13:47:04.726"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.733" starttime="20170913 13:47:04.609"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.733" starttime="20170913 13:47:04.609"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.733" starttime="20170913 13:47:04.389"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.733" starttime="20170913 13:47:04.387"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.734" starttime="20170913 13:47:04.387"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.734" starttime="20170913 13:47:02.672"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.734" starttime="20170913 13:47:02.671"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.734" starttime="20170913 13:47:02.659"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.734" starttime="20170913 13:47:02.656"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.734" starttime="20170913 13:47:02.656"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:04.736" starttime="20170913 13:47:04.735"></status>
</kw>
<msg timestamp="20170913 13:47:04.736" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:04.736" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170913 13:47:04.736" starttime="20170913 13:47:04.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:04.737" starttime="20170913 13:47:04.736"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170913 13:47:04.750" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170913 13:47:04.750" starttime="20170913 13:47:04.750"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170913 13:47:04.752" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xyz/openbmc_project/led/enumerate') | ('FIRMWARE_list',...</msg>
<status status="PASS" endtime="20170913 13:47:04.752" starttime="20170913 13:47:04.751"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170913 13:47:04.753" level="INFO">${logpath} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170913 13:47:04.753" starttime="20170913 13:47:04.753"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170913 13:47:04.756" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170913 13:47:04.757" starttime="20170913 13:47:04.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:47:04.757" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:47:04.757" starttime="20170913 13:47:04.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170913 13:47:04.758" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170913 13:47:04.758" starttime="20170913 13:47:04.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:47:04.759" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170913 13:47:04.759" starttime="20170913 13:47:04.758"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.973" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170913 13:47:04.973" starttime="20170913 13:47:04.760"></status>
</kw>
<msg timestamp="20170913 13:47:04.973" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:04.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:04.973" starttime="20170913 13:47:04.759"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.974" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:04.974" starttime="20170913 13:47:04.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:47:04.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:04.975" starttime="20170913 13:47:04.974"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.975" starttime="20170913 13:47:04.755"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.975" starttime="20170913 13:47:04.755"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:04.975" starttime="20170913 13:47:04.754"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170913 13:47:04.976" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170913 13:47:04.976" starttime="20170913 13:47:04.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:04.976" starttime="20170913 13:47:04.976"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170913 13:47:05.514" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170913 13:47:05.514" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:05.515" starttime="20170913 13:47:04.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:05.515" starttime="20170913 13:47:05.515"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170913 13:47:05.516" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170913 13:47:05.516" starttime="20170913 13:47:05.516"></status>
</kw>
<msg timestamp="20170913 13:47:05.516" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:05.516" starttime="20170913 13:47:04.753"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:47:05.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:05.517" starttime="20170913 13:47:05.517"></status>
</kw>
<msg timestamp="20170913 13:47:05.517" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170913 13:47:05.517" starttime="20170913 13:47:05.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:05.518" starttime="20170913 13:47:05.518"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170913 13:47:05.520" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 26000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27930
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 204000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170913 13:47:05.520" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170913 13:47:05.520" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170913 13:47:05.521" starttime="20170913 13:47:05.518"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:05.522" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:05.522" starttime="20170913 13:47:05.521"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:05.522" starttime="20170913 13:47:05.521"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:05.522" starttime="20170913 13:47:04.752"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170913 13:47:05.523" level="INFO">${logpath} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170913 13:47:05.523" starttime="20170913 13:47:05.523"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170913 13:47:05.526" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170913 13:47:05.526" starttime="20170913 13:47:05.525"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:47:05.527" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:47:05.527" starttime="20170913 13:47:05.526"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170913 13:47:05.527" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170913 13:47:05.528" starttime="20170913 13:47:05.527"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:47:05.528" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170913 13:47:05.528" starttime="20170913 13:47:05.528"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170913 13:47:05.705" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170913 13:47:05.705" starttime="20170913 13:47:05.529"></status>
</kw>
<msg timestamp="20170913 13:47:05.705" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:05.705" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:05.705" starttime="20170913 13:47:05.529"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170913 13:47:05.706" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:05.706" starttime="20170913 13:47:05.705"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:47:05.706" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:05.706" starttime="20170913 13:47:05.706"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:05.706" starttime="20170913 13:47:05.525"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:05.707" starttime="20170913 13:47:05.524"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:05.707" starttime="20170913 13:47:05.524"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170913 13:47:05.707" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170913 13:47:05.707" starttime="20170913 13:47:05.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:05.708" starttime="20170913 13:47:05.708"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170913 13:47:05.937" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170913 13:47:05.937" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:05.937" starttime="20170913 13:47:05.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:05.938" starttime="20170913 13:47:05.937"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170913 13:47:05.938" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170913 13:47:05.938" starttime="20170913 13:47:05.938"></status>
</kw>
<msg timestamp="20170913 13:47:05.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:05.939" starttime="20170913 13:47:05.523"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:47:05.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:05.940" starttime="20170913 13:47:05.940"></status>
</kw>
<msg timestamp="20170913 13:47:05.940" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170913 13:47:05.940" starttime="20170913 13:47:05.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:05.941" starttime="20170913 13:47:05.941"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170913 13:47:05.942" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.AlwaysOff"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170913 13:47:05.942" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170913 13:47:05.942" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170913 13:47:05.942" starttime="20170913 13:47:05.941"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:05.943" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:05.943" starttime="20170913 13:47:05.943"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:05.944" starttime="20170913 13:47:05.942"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:05.944" starttime="20170913 13:47:05.522"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170913 13:47:05.944" level="INFO">${logpath} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_led.txt</msg>
<status status="PASS" endtime="20170913 13:47:05.944" starttime="20170913 13:47:05.944"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170913 13:47:05.947" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170913 13:47:05.948" starttime="20170913 13:47:05.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:47:05.948" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:47:05.948" starttime="20170913 13:47:05.948"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170913 13:47:05.949" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170913 13:47:05.949" starttime="20170913 13:47:05.949"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:47:05.950" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170913 13:47:05.950" starttime="20170913 13:47:05.949"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170913 13:47:06.140" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170913 13:47:06.141" starttime="20170913 13:47:05.951"></status>
</kw>
<msg timestamp="20170913 13:47:06.141" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:06.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:06.141" starttime="20170913 13:47:05.950"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170913 13:47:06.142" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:06.142" starttime="20170913 13:47:06.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:47:06.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:06.143" starttime="20170913 13:47:06.142"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:06.143" starttime="20170913 13:47:05.947"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:06.143" starttime="20170913 13:47:05.946"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:06.143" starttime="20170913 13:47:05.945"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170913 13:47:06.144" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170913 13:47:06.144" starttime="20170913 13:47:06.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:06.144" starttime="20170913 13:47:06.144"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170913 13:47:07.900" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170913 13:47:07.900" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:07.900" starttime="20170913 13:47:06.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:07.901" starttime="20170913 13:47:07.901"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170913 13:47:07.902" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170913 13:47:07.902" starttime="20170913 13:47:07.902"></status>
</kw>
<msg timestamp="20170913 13:47:07.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:07.902" starttime="20170913 13:47:05.945"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:47:07.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:07.903" starttime="20170913 13:47:07.903"></status>
</kw>
<msg timestamp="20170913 13:47:07.903" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170913 13:47:07.903" starttime="20170913 13:47:07.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:07.904" starttime="20170913 13:47:07.904"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170913 13:47:07.906" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170913 13:47:07.906" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170913 13:47:07.907" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170913 13:47:07.907" starttime="20170913 13:47:07.904"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:07.908" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_led.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:07.908" starttime="20170913 13:47:07.908"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:07.908" starttime="20170913 13:47:07.907"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:07.908" starttime="20170913 13:47:05.944"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170913 13:47:07.909" level="INFO">${logpath} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170913 13:47:07.909" starttime="20170913 13:47:07.909"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170913 13:47:07.912" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170913 13:47:07.912" starttime="20170913 13:47:07.912"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:47:07.913" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:47:07.913" starttime="20170913 13:47:07.913"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170913 13:47:07.914" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170913 13:47:07.914" starttime="20170913 13:47:07.913"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:47:07.914" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170913 13:47:07.914" starttime="20170913 13:47:07.914"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170913 13:47:08.101" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170913 13:47:08.101" starttime="20170913 13:47:07.915"></status>
</kw>
<msg timestamp="20170913 13:47:08.101" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:08.101" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:08.101" starttime="20170913 13:47:07.915"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170913 13:47:08.102" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:08.102" starttime="20170913 13:47:08.102"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:47:08.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:08.103" starttime="20170913 13:47:08.102"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:08.103" starttime="20170913 13:47:07.911"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:08.103" starttime="20170913 13:47:07.911"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:08.103" starttime="20170913 13:47:07.910"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170913 13:47:08.104" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170913 13:47:08.104" starttime="20170913 13:47:08.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:08.105" starttime="20170913 13:47:08.104"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170913 13:47:08.289" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170913 13:47:08.289" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:08.289" starttime="20170913 13:47:08.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:08.290" starttime="20170913 13:47:08.289"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170913 13:47:08.290" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170913 13:47:08.290" starttime="20170913 13:47:08.290"></status>
</kw>
<msg timestamp="20170913 13:47:08.290" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:08.290" starttime="20170913 13:47:07.909"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:47:08.291" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:08.291" starttime="20170913 13:47:08.291"></status>
</kw>
<msg timestamp="20170913 13:47:08.292" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170913 13:47:08.292" starttime="20170913 13:47:08.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:08.292" starttime="20170913 13:47:08.292"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170913 13:47:08.293" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/a949160": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "buildroot-2017.08-5-g08caaab,skiboot-v5.8-42-gbf1751cc6b4b,hostboot-site_local-hostboot-hb0507a_1519.840-4986-ge5d5edd,linux-4.13-openpower1-p6549672,petitboot-v1.5.1-p762b245,machine-xml-f8aaa73-pb469116,occ-6f77ee7,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "open-power-witherspoon-v1.19-35-g23de686", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/a949160/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/a949160/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/a949160"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170913 13:47:08.293" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170913 13:47:08.293" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/a949160": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "buildroot-201...</msg>
<status status="PASS" endtime="20170913 13:47:08.293" starttime="20170913 13:47:08.293"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:08.295" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:08.295" starttime="20170913 13:47:08.294"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:08.295" starttime="20170913 13:47:08.293"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:08.295" starttime="20170913 13:47:07.908"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170913 13:47:08.296" level="INFO">${logpath} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_elog.txt</msg>
<status status="PASS" endtime="20170913 13:47:08.296" starttime="20170913 13:47:08.295"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170913 13:47:08.299" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170913 13:47:08.299" starttime="20170913 13:47:08.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:47:08.300" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:47:08.300" starttime="20170913 13:47:08.299"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170913 13:47:08.300" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170913 13:47:08.300" starttime="20170913 13:47:08.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:47:08.301" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170913 13:47:08.301" starttime="20170913 13:47:08.301"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170913 13:47:08.543" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170913 13:47:08.543" starttime="20170913 13:47:08.302"></status>
</kw>
<msg timestamp="20170913 13:47:08.543" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:08.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:08.543" starttime="20170913 13:47:08.301"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170913 13:47:08.544" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:08.544" starttime="20170913 13:47:08.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:47:08.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:08.545" starttime="20170913 13:47:08.544"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:08.545" starttime="20170913 13:47:08.298"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:08.545" starttime="20170913 13:47:08.297"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:08.545" starttime="20170913 13:47:08.297"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170913 13:47:08.546" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170913 13:47:08.546" starttime="20170913 13:47:08.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:08.547" starttime="20170913 13:47:08.546"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170913 13:47:08.589" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170913 13:47:08.590" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:08.590" starttime="20170913 13:47:08.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:08.590" starttime="20170913 13:47:08.590"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170913 13:47:08.591" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170913 13:47:08.591" starttime="20170913 13:47:08.591"></status>
</kw>
<msg timestamp="20170913 13:47:08.591" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:08.591" starttime="20170913 13:47:08.296"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:47:08.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170913 13:47:08.592" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170913 13:47:08.592" starttime="20170913 13:47:08.592"></status>
</kw>
<msg timestamp="20170913 13:47:08.593" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170913 13:47:08.593" starttime="20170913 13:47:08.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170913 13:47:08.594" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170913 13:47:08.594" starttime="20170913 13:47:08.593"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:08.594" starttime="20170913 13:47:08.593"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:08.594" starttime="20170913 13:47:08.295"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170913 13:47:08.595" level="INFO">${logpath} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170913 13:47:08.595" starttime="20170913 13:47:08.594"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170913 13:47:08.598" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170913 13:47:08.598" starttime="20170913 13:47:08.597"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:47:08.599" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:47:08.599" starttime="20170913 13:47:08.598"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170913 13:47:08.599" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170913 13:47:08.599" starttime="20170913 13:47:08.599"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:47:08.600" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170913 13:47:08.600" starttime="20170913 13:47:08.600"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170913 13:47:08.779" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170913 13:47:08.779" starttime="20170913 13:47:08.601"></status>
</kw>
<msg timestamp="20170913 13:47:08.779" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:08.779" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:08.779" starttime="20170913 13:47:08.600"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170913 13:47:08.780" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:08.780" starttime="20170913 13:47:08.780"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:47:08.781" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:08.781" starttime="20170913 13:47:08.780"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:08.781" starttime="20170913 13:47:08.597"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:08.781" starttime="20170913 13:47:08.596"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:08.781" starttime="20170913 13:47:08.595"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170913 13:47:08.782" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170913 13:47:08.782" starttime="20170913 13:47:08.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:08.783" starttime="20170913 13:47:08.782"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170913 13:47:09.110" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170913 13:47:09.110" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:09.110" starttime="20170913 13:47:08.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:09.111" starttime="20170913 13:47:09.111"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170913 13:47:09.111" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170913 13:47:09.111" starttime="20170913 13:47:09.111"></status>
</kw>
<msg timestamp="20170913 13:47:09.112" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:09.112" starttime="20170913 13:47:08.595"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:47:09.113" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:09.113" starttime="20170913 13:47:09.112"></status>
</kw>
<msg timestamp="20170913 13:47:09.113" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170913 13:47:09.113" starttime="20170913 13:47:09.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:09.114" starttime="20170913 13:47:09.113"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170913 13:47:09.115" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/a949160"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170913 13:47:09.115" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170913 13:47:09.115" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": ""
        },
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
        ...</msg>
<status status="PASS" endtime="20170913 13:47:09.115" starttime="20170913 13:47:09.114"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:09.116" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:09.116" starttime="20170913 13:47:09.116"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.116" starttime="20170913 13:47:09.115"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.116" starttime="20170913 13:47:08.594"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.117" starttime="20170913 13:47:04.752"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.117" starttime="20170913 13:47:04.751"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.117" starttime="20170913 13:47:04.751"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.117" starttime="20170913 13:47:04.751"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.117" starttime="20170913 13:47:04.750"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.117" starttime="20170913 13:47:04.737"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.117" starttime="20170913 13:47:04.734"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.117" starttime="20170913 13:47:04.734"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:09.119" starttime="20170913 13:47:09.119"></status>
</kw>
<msg timestamp="20170913 13:47:09.119" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:09.119" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170913 13:47:09.119" starttime="20170913 13:47:09.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:09.120" starttime="20170913 13:47:09.120"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:09.136" starttime="20170913 13:47:09.134"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170913 13:47:09.138" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170913 13:47:09.138" starttime="20170913 13:47:09.136"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.138" starttime="20170913 13:47:09.133"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.138" starttime="20170913 13:47:09.120"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.138" starttime="20170913 13:47:09.117"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.138" starttime="20170913 13:47:09.117"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:09.140" starttime="20170913 13:47:09.140"></status>
</kw>
<msg timestamp="20170913 13:47:09.141" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:09.141" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170913 13:47:09.141" starttime="20170913 13:47:09.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:09.141" starttime="20170913 13:47:09.141"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170913 13:47:09.174" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:09.174" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170913 13:47:09.231" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170913 13:47:09.241" level="INFO">${core_files} = None</msg>
<msg timestamp="20170913 13:47:09.241" level="INFO">${stderr} = None</msg>
<msg timestamp="20170913 13:47:09.241" level="INFO">${rc} = None</msg>
<msg timestamp="20170913 13:47:09.241" level="FAIL">#(UTC) 2017/09/13 13:47:09.240062 -    6.608602 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170913 13:47:09.242" starttime="20170913 13:47:09.155"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170913 13:47:09.242" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170913 13:47:09.242" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170913 13:47:09.243" starttime="20170913 13:47:09.242"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:09.256" starttime="20170913 13:47:09.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:09.956" starttime="20170913 13:47:09.257"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.956" starttime="20170913 13:47:09.256"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.956" starttime="20170913 13:47:09.250"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.956" starttime="20170913 13:47:09.243"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170913 13:47:09.956" starttime="20170913 13:47:09.956"></status>
</kw>
<status status="FAIL" endtime="20170913 13:47:09.957" starttime="20170913 13:47:09.154"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.957" starttime="20170913 13:47:09.141"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.957" starttime="20170913 13:47:09.139"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:09.957" starttime="20170913 13:47:09.138"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:09.959" starttime="20170913 13:47:09.959"></status>
</kw>
<msg timestamp="20170913 13:47:09.959" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:09.959" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170913 13:47:09.959" starttime="20170913 13:47:09.958"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:09.960" starttime="20170913 13:47:09.960"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170913 13:47:09.974" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170913 13:47:09.974" starttime="20170913 13:47:09.974"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170913 13:47:09.976" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170913 13:47:09.976" starttime="20170913 13:47:09.975"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170913 13:47:09.977" level="INFO">${logpath} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170913 13:47:09.977" starttime="20170913 13:47:09.976"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:09.978" starttime="20170913 13:47:09.978"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170913 13:47:09.979" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170913 13:47:09.979" starttime="20170913 13:47:09.978"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170913 13:47:10.019" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:10.020" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170913 13:47:10.087" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170913 13:47:10.087" starttime="20170913 13:47:09.997"></status>
</kw>
<msg timestamp="20170913 13:47:10.087" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:10.087" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170913 13:47:10.087" starttime="20170913 13:47:09.979"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170913 13:47:10.088" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170913 13:47:10.088" starttime="20170913 13:47:10.087"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170913 13:47:10.088" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170913 13:47:10.088" starttime="20170913 13:47:10.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:10.096" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:10.096" starttime="20170913 13:47:10.095"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:10.096" starttime="20170913 13:47:10.095"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:10.096" starttime="20170913 13:47:10.089"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:10.096" starttime="20170913 13:47:09.977"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:10.096" starttime="20170913 13:47:09.976"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170913 13:47:10.097" level="INFO">${logpath} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170913 13:47:10.097" starttime="20170913 13:47:10.097"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:10.099" starttime="20170913 13:47:10.098"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170913 13:47:10.099" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170913 13:47:10.099" starttime="20170913 13:47:10.099"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170913 13:47:10.140" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:10.140" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170913 13:47:10.683" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170913 13:47:10.683" starttime="20170913 13:47:10.117"></status>
</kw>
<msg timestamp="20170913 13:47:10.683" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:10.684" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 13 13:47 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 13 13:47 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170913 13:47:10.684" starttime="20170913 13:47:10.100"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170913 13:47:10.685" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 13 13:47 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 13 13:47 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170913 13:47:10.685" starttime="20170913 13:47:10.684"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170913 13:47:10.685" level="INFO">${stderr} = ls: /proc/1364/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170913 13:47:10.686" starttime="20170913 13:47:10.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:10.693" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:10.694" starttime="20170913 13:47:10.693"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:10.694" starttime="20170913 13:47:10.692"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:10.694" starttime="20170913 13:47:10.686"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:10.694" starttime="20170913 13:47:10.097"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:10.694" starttime="20170913 13:47:10.096"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170913 13:47:10.695" level="INFO">${logpath} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170913 13:47:10.695" starttime="20170913 13:47:10.694"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:10.696" starttime="20170913 13:47:10.696"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170913 13:47:10.697" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170913 13:47:10.697" starttime="20170913 13:47:10.696"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170913 13:47:10.739" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:10.739" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170913 13:47:11.830" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170913 13:47:11.830" starttime="20170913 13:47:10.715"></status>
</kw>
<msg timestamp="20170913 13:47:11.830" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:11.832" level="INFO">${ret_values} = (u'-- Logs begin at Wed 2017-09-13 13:45:06 UTC, end at Wed 2017-09-13 13:47:18 UTC. --\nSep 13 13:45:06 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 13 13:45:06 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170913 13:47:11.832" starttime="20170913 13:47:10.697"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170913 13:47:11.833" level="INFO">${stdout} = -- Logs begin at Wed 2017-09-13 13:45:06 UTC, end at Wed 2017-09-13 13:47:18 UTC. --
Sep 13 13:45:06 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 13 13:45:06 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170913 13:47:11.833" starttime="20170913 13:47:11.832"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170913 13:47:11.833" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170913 13:47:11.833" starttime="20170913 13:47:11.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:11.841" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:11.841" starttime="20170913 13:47:11.841"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:11.842" starttime="20170913 13:47:11.840"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:11.842" starttime="20170913 13:47:11.834"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:11.842" starttime="20170913 13:47:10.695"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:11.842" starttime="20170913 13:47:10.694"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170913 13:47:11.843" level="INFO">${logpath} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170913 13:47:11.843" starttime="20170913 13:47:11.842"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:11.844" starttime="20170913 13:47:11.844"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170913 13:47:11.845" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170913 13:47:11.845" starttime="20170913 13:47:11.845"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170913 13:47:11.886" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:11.886" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170913 13:47:14.426" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170913 13:47:14.427" starttime="20170913 13:47:11.863"></status>
</kw>
<msg timestamp="20170913 13:47:14.427" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:14.440" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=a7a278091e644746b540752397e07212;i=1;b=4e742fd8176c437895d151e90f4702e1;m=11bf87e;t=559125e1a5cb4;x=56ae56bb33842e95",\n\t"__REALTIME_TIMESTAMP" : "1505310306622644",\n\t"__MON...</msg>
<status status="PASS" endtime="20170913 13:47:14.441" starttime="20170913 13:47:11.845"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170913 13:47:14.444" level="INFO">${stdout} = {
	"__CURSOR" : "s=a7a278091e644746b540752397e07212;i=1;b=4e742fd8176c437895d151e90f4702e1;m=11bf87e;t=559125e1a5cb4;x=56ae56bb33842e95",
	"__REALTIME_TIMESTAMP" : "1505310306622644",
	"__MONOTONIC_TI...</msg>
<status status="PASS" endtime="20170913 13:47:14.444" starttime="20170913 13:47:14.441"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170913 13:47:14.445" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170913 13:47:14.445" starttime="20170913 13:47:14.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:14.458" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:14.458" starttime="20170913 13:47:14.456"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:14.459" starttime="20170913 13:47:14.451"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:14.459" starttime="20170913 13:47:14.445"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:14.459" starttime="20170913 13:47:11.843"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:14.459" starttime="20170913 13:47:11.842"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170913 13:47:14.460" level="INFO">${logpath} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170913 13:47:14.461" starttime="20170913 13:47:14.460"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:14.462" starttime="20170913 13:47:14.462"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170913 13:47:14.463" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170913 13:47:14.463" starttime="20170913 13:47:14.463"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170913 13:47:14.503" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:14.504" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170913 13:47:14.552" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170913 13:47:14.553" starttime="20170913 13:47:14.481"></status>
</kw>
<msg timestamp="20170913 13:47:14.553" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:14.553" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          253480 kB\nMemAvailable:     300684 kB\nBuffers:           11628 kB\nCached:            76452 kB\nSwapCached:            0 kB\nActive:           10500...</msg>
<status status="PASS" endtime="20170913 13:47:14.553" starttime="20170913 13:47:14.464"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170913 13:47:14.554" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          253480 kB
MemAvailable:     300684 kB
Buffers:           11628 kB
Cached:            76452 kB
SwapCached:            0 kB
Active:           105008 kB
Inac...</msg>
<status status="PASS" endtime="20170913 13:47:14.554" starttime="20170913 13:47:14.553"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170913 13:47:14.555" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170913 13:47:14.555" starttime="20170913 13:47:14.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:14.566" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:14.566" starttime="20170913 13:47:14.565"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:14.566" starttime="20170913 13:47:14.564"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:14.566" starttime="20170913 13:47:14.555"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:14.566" starttime="20170913 13:47:14.461"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:14.566" starttime="20170913 13:47:14.459"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170913 13:47:14.567" level="INFO">${logpath} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170913 13:47:14.567" starttime="20170913 13:47:14.567"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:14.569" starttime="20170913 13:47:14.568"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170913 13:47:14.569" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170913 13:47:14.570" starttime="20170913 13:47:14.569"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170913 13:47:14.610" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:14.610" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170913 13:47:14.909" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170913 13:47:14.909" starttime="20170913 13:47:14.587"></status>
</kw>
<msg timestamp="20170913 13:47:14.909" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:14.909" level="INFO">${ret_values} = (u'Mem: 178764K used, 253480K free, 38444K shrd, 11628K buff, 76452K cached\nCPU:   8% usr  16% sys   0% nic  75% idle   0% io   0% irq   0% sirq\nLoad average: 3.39 2.21 0.89 1/151 1368\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170913 13:47:14.909" starttime="20170913 13:47:14.570"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170913 13:47:14.910" level="INFO">${stdout} = Mem: 178764K used, 253480K free, 38444K shrd, 11628K buff, 76452K cached
CPU:   8% usr  16% sys   0% nic  75% idle   0% io   0% irq   0% sirq
Load average: 3.39 2.21 0.89 1/151 1368
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170913 13:47:14.910" starttime="20170913 13:47:14.910"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170913 13:47:14.911" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170913 13:47:14.911" starttime="20170913 13:47:14.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:14.918" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:14.918" starttime="20170913 13:47:14.918"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:14.918" starttime="20170913 13:47:14.917"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:14.918" starttime="20170913 13:47:14.911"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:14.918" starttime="20170913 13:47:14.567"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:14.918" starttime="20170913 13:47:14.566"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170913 13:47:14.919" level="INFO">${logpath} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170913 13:47:14.919" starttime="20170913 13:47:14.919"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:14.921" starttime="20170913 13:47:14.920"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170913 13:47:14.921" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170913 13:47:14.922" starttime="20170913 13:47:14.921"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170913 13:47:14.961" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170913 13:47:14.962" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170913 13:47:15.039" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170913 13:47:15.039" starttime="20170913 13:47:14.939"></status>
</kw>
<msg timestamp="20170913 13:47:15.039" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:15.039" level="INFO">${ret_values} = (u'[    0.000000] Memory policy: Data cache writeback\n[    0.000000] SOC Rev: 04030303\n[    0.000000] On node 0 totalpages: 110592\n[    0.000000] free_area_init_node: node 0, pgdat 80601864, node_m...</msg>
<status status="PASS" endtime="20170913 13:47:15.039" starttime="20170913 13:47:14.922"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170913 13:47:15.040" level="INFO">${stdout} = [    0.000000] Memory policy: Data cache writeback
[    0.000000] SOC Rev: 04030303
[    0.000000] On node 0 totalpages: 110592
[    0.000000] free_area_init_node: node 0, pgdat 80601864, node_mem_map...</msg>
<status status="PASS" endtime="20170913 13:47:15.040" starttime="20170913 13:47:15.040"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170913 13:47:15.041" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170913 13:47:15.041" starttime="20170913 13:47:15.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170913 13:47:15.048" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/20170913134701630732_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:15.048" starttime="20170913 13:47:15.048"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.049" starttime="20170913 13:47:15.047"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.049" starttime="20170913 13:47:15.041"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.049" starttime="20170913 13:47:14.920"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.049" starttime="20170913 13:47:14.919"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.049" starttime="20170913 13:47:09.976"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.049" starttime="20170913 13:47:09.975"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.049" starttime="20170913 13:47:09.974"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.049" starttime="20170913 13:47:09.974"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.049" starttime="20170913 13:47:09.973"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.049" starttime="20170913 13:47:09.960"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.049" starttime="20170913 13:47:09.957"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.049" starttime="20170913 13:47:09.957"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:15.051" starttime="20170913 13:47:15.051"></status>
</kw>
<msg timestamp="20170913 13:47:15.052" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:15.052" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170913 13:47:15.052" starttime="20170913 13:47:15.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:15.052" starttime="20170913 13:47:15.052"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170913 13:47:15.070" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170913 13:47:15.071" starttime="20170913 13:47:15.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170913 13:47:15.072" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170913 13:47:15.072" starttime="20170913 13:47:15.071"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170913 13:47:15.073" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170913 13:47:15.073" starttime="20170913 13:47:15.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170913 13:47:15.074" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170913 13:47:15.074" starttime="20170913 13:47:15.073"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170913 13:47:15.294" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170913 13:47:15.294" starttime="20170913 13:47:15.075"></status>
</kw>
<msg timestamp="20170913 13:47:15.294" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:15.294" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:15.294" starttime="20170913 13:47:15.074"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170913 13:47:15.295" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:15.295" starttime="20170913 13:47:15.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:47:15.296" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170913 13:47:15.296" starttime="20170913 13:47:15.295"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.296" starttime="20170913 13:47:15.069"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.296" starttime="20170913 13:47:15.068"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.296" starttime="20170913 13:47:15.067"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170913 13:47:15.297" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170913 13:47:15.297" starttime="20170913 13:47:15.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:15.297" starttime="20170913 13:47:15.297"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170913 13:47:15.340" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170913 13:47:15.340" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:15.340" starttime="20170913 13:47:15.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:15.340" starttime="20170913 13:47:15.340"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170913 13:47:15.341" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170913 13:47:15.341" starttime="20170913 13:47:15.341"></status>
</kw>
<msg timestamp="20170913 13:47:15.341" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170913 13:47:15.341" starttime="20170913 13:47:15.066"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170913 13:47:15.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170913 13:47:15.343" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170913 13:47:15.343" starttime="20170913 13:47:15.342"></status>
</kw>
<msg timestamp="20170913 13:47:15.343" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170913 13:47:15.343" starttime="20170913 13:47:15.342"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170913 13:47:15.343" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170913 13:47:15.343" starttime="20170913 13:47:15.343"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.344" starttime="20170913 13:47:15.065"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.344" starttime="20170913 13:47:15.052"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.344" starttime="20170913 13:47:15.050"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.344" starttime="20170913 13:47:15.050"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:15.346" starttime="20170913 13:47:15.345"></status>
</kw>
<msg timestamp="20170913 13:47:15.346" level="INFO">${status} = PASS</msg>
<msg timestamp="20170913 13:47:15.346" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170913 13:47:15.346" starttime="20170913 13:47:15.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:15.347" starttime="20170913 13:47:15.346"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170913 13:47:15.361" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170913 13:47:15.361" starttime="20170913 13:47:15.361"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.361" starttime="20170913 13:47:15.360"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.362" starttime="20170913 13:47:15.347"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.362" starttime="20170913 13:47:15.344"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.362" starttime="20170913 13:47:15.344"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.362" starttime="20170913 13:47:02.656"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.362" starttime="20170913 13:47:02.653"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.362" starttime="20170913 13:47:02.653"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.362" starttime="20170913 13:47:02.653"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170913 13:47:15.368" starttime="20170913 13:47:15.368"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.368" starttime="20170913 13:47:15.362"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.368" starttime="20170913 13:47:02.652"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.368" starttime="20170913 13:46:58.594"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.368" starttime="20170913 13:46:58.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:15.369" starttime="20170913 13:47:15.369"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170913 13:47:15.370" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170913 13:47:15.370" starttime="20170913 13:47:15.370"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170913 13:47:15.371" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170913134701630732_HostCodeUpdate/20170913134701630732_RESTHostCodeUpdate/</msg>
<status status="PASS" endtime="20170913 13:47:15.371" starttime="20170913 13:47:15.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:15.371" starttime="20170913 13:47:15.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:15.372" starttime="20170913 13:47:15.372"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170913 13:47:15.373" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170913 13:47:15.373" starttime="20170913 13:47:15.372"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170913 13:47:15.374" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170913 13:47:15.374" starttime="20170913 13:47:15.373"></status>
</kw>
<msg timestamp="20170913 13:47:15.374" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170913 13:47:15.374" starttime="20170913 13:47:15.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:15.374" starttime="20170913 13:47:15.374"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:15.375" starttime="20170913 13:47:15.375"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170913 13:47:15.377" level="INFO">${cur_time} = 2017-09-13 13:47:15:376447</msg>
<status status="PASS" endtime="20170913 13:47:15.377" starttime="20170913 13:47:15.376"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170913 13:47:15.378" level="INFO">${cur_time} = 20170913134715376447</msg>
<status status="PASS" endtime="20170913 13:47:15.378" starttime="20170913 13:47:15.377"></status>
</kw>
<msg timestamp="20170913 13:47:15.378" level="INFO">${cur_time} = 20170913134715376447</msg>
<status status="PASS" endtime="20170913 13:47:15.378" starttime="20170913 13:47:15.375"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170913 13:47:15.379" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170913 13:47:15.379" starttime="20170913 13:47:15.378"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.380" starttime="20170913 13:47:15.369"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.380" starttime="20170913 13:46:58.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20170913 13:47:15.380" starttime="20170913 13:47:15.380"></status>
</kw>
<status status="PASS" endtime="20170913 13:47:15.380" starttime="20170913 13:46:58.271"></status>
</kw>
<doc>Do a PNOR code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_Host_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170913 13:47:15.381" critical="yes" starttime="20170913 13:46:55.348">Setup failed:
404 != 200</status>
</test>
<doc>Update the PNOR code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v DELETE_OLD_PNOR_IMAGES:&lt;"true" or "false"&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt;
-v ALTERNATE_IMAGE_FILE_PATH:&lt;path/*.tar&gt;
host_code_update.robot

Code update method BMC
Update work flow sequence:
- Upload image via REST
- Verify that the file exists on the BMC
- Check that software "Activation" is set to "Ready"
- Set "Requested Activation" to "Active"
- Wait for code update to complete
- Verify the new version</doc>
<status status="FAIL" endtime="20170913 13:47:15.382" starttime="20170913 13:46:54.475"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_Host_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Host Code Update" pass="0">Host Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
